digraph "Program Dependency Graph for 'foo' function" {
	label="Program Dependency Graph for 'foo' function";

	Node0x264a970 [shape=record,label="{\<\<ENTRY\>\> foo}"];
	Node0x264a970 -> Node0x264aa00;
	Node0x264aa00 [shape=record,label="{  ret i32 1}"];
	Node0x264afb0 [shape=record,label="{\<\<ENTRY\>\> goo}"];
	Node0x264afb0 -> Node0x264b050;
	Node0x264b050 [shape=record,label="{  ret i32 2}"];
	Node0x264c170 [shape=record,label="{  %a.addr = alloca i32, align 4}"];
	Node0x264c170 -> Node0x264b020[style=dotted,label = "{DEF_USE}" ];
	Node0x264b020 [shape=record,label="{  store i32 %a, i32* %a.addr, align 4}"];
	Node0x264b020 -> Node0x26512f0[style=dotted];
	Node0x264c220 [shape=record,label="{  %b.addr = alloca float, align 4}"];
	Node0x264c220 -> Node0x264c290[style=dotted,label = "{DEF_USE}" ];
	Node0x264c290 [shape=record,label="{  store float %b, float* %b.addr, align 4}"];
	Node0x264c290 -> Node0x26516e0[style=dotted];
	Node0x264c300 [shape=record,label="{\<\<ENTRY\>\> test}"];
	Node0x264c300 -> Node0x264c170;
	Node0x264c300 -> Node0x264c220;
	Node0x264c300 -> Node0x264b020;
	Node0x264c300 -> Node0x264c290;
	Node0x264c300 -> Node0x264c420;
	Node0x264c300 -> Node0x26511c0[style=dashed];
	Node0x264c300 -> Node0x26512f0[style=dashed];
	Node0x264c300 -> Node0x2650020[style=dashed];
	Node0x264c300 -> Node0x26516e0[style=dashed];
	Node0x264c420 [shape=record,label="{  ret float 3.000000e+00}"];
	Node0x264c420 -> Node0x26510c0[style=dotted];
	Node0x264fa90 [shape=record,label="{  %retval = alloca i32, align 4}"];
	Node0x264fa90 -> Node0x264fcc0[style=dotted,label = "{DEF_USE}" ];
	Node0x264fcc0 [shape=record,label="{  store i32 0, i32* %retval}"];
	Node0x264fd30 [shape=record,label="{  %x = alloca i32, align 4}"];
	Node0x264fd30 -> Node0x264fda0[style=dotted,label = "{DEF_USE}" ];
	Node0x264fd30 -> Node0x264fe10[style=dotted,label = "{DEF_USE}" ];
	Node0x264fda0 [shape=record,label="{  store i32 0, i32* %x, align 4}"];
	Node0x264fda0 -> Node0x264fe10[style=dotted,label = "{RAW} x"];
	Node0x264fe10 [shape=record,label="{  %0 = load i32* %x, align 4}"];
	Node0x264fe10 -> Node0x2650180[style=dotted,label = "{DEF_USE}" ];
	Node0x264feb0 [shape=record,label="{  %p = alloca i32 ()*, align 8}"];
	Node0x264feb0 -> Node0x264ff20[style=dotted,label = "{DEF_USE}" ];
	Node0x264feb0 -> Node0x264c370[style=dotted,label = "{DEF_USE}" ];
	Node0x264feb0 -> Node0x26500d0[style=dotted,label = "{DEF_USE}" ];
	Node0x264feb0 -> Node0x26500a0[style=dotted,label = "{DEF_USE}" ];
	Node0x264ff20 [shape=record,label="{  store i32 ()* @foo, i32 ()** %p, align 8}"];
	Node0x264ff20 -> Node0x26500d0[style=dotted,label = "{RAW} p"];
	Node0x264ff20 -> Node0x26500a0[style=dotted,label = "{RAW} p"];
	Node0x264c370 [shape=record,label="{  store i32 ()* @goo, i32 ()** %p, align 8}"];
	Node0x264c370 -> Node0x26500d0[style=dotted,label = "{RAW} p"];
	Node0x264c370 -> Node0x26500a0[style=dotted,label = "{RAW} p"];
	Node0x26500d0 [shape=record,label="{  %1 = load i32 ()** %p, align 8}"];
	Node0x26500d0 -> Node0x26503f0[style=dotted,label = "{DEF_USE}" ];
	Node0x26500a0 [shape=record,label="{  %2 = load i32 ()** %p, align 8}"];
	Node0x26500a0 -> Node0x2650460[style=dotted,label = "{DEF_USE}" ];
	Node0x2650180 [shape=record,label="{  %tobool = icmp ne i32 %0, 0}"];
	Node0x2650180 -> Node0x26501f0[style=dotted,label = "{DEF_USE}" ];
	Node0x26501f0 [shape=record,label="{  br i1 %tobool, label %if.then, label %if.else}"];
	Node0x26501f0 -> Node0x264ff20;
	Node0x26501f0 -> Node0x2650260;
	Node0x26501f0 -> Node0x264c370;
	Node0x26501f0 -> Node0x26502d0;
	Node0x2650260 [shape=record,label="{  br label %if.end}"];
	Node0x26502d0 [shape=record,label="{  br label %if.end}"];
	Node0x26503f0 [shape=record,label="{  %call = call i32 %1()}"];
	Node0x2650460 [shape=record,label="{  %call1 = call i32 %2()}"];
	Node0x26510c0 [shape=record,label="{  %call3 = call float @test(i32 2, float 0x40091EB860000000)}"];
	Node0x26510c0 -> Node0x264c300;
	Node0x26510c0 -> Node0x2651150[style=dashed];
	Node0x26510c0 -> Node0x26511f0[style=dashed];
	Node0x26510c0 -> Node0x26513f0[style=dashed];
	Node0x26510c0 -> Node0x2651460[style=dashed];
	Node0x2651150 [shape=record,label="{ACTUAL_IN:i32}"];
	Node0x2651150 -> Node0x26511c0[style=dashed];
	Node0x26511f0 [shape=record,label="{ACTUAL_OUT:i32}"];
	Node0x26511f0 -> Node0x264fe10[style=dotted];
	Node0x26511c0 [shape=record,label="{FORMAL_IN:i32}"];
	Node0x26511c0 -> Node0x26512f0[style=dashed];
	Node0x26511c0 -> Node0x264b020[style=dotted];
	Node0x26512f0 [shape=record,label="{FORMAL_OUT:i32}"];
	Node0x26512f0 -> Node0x26511f0[style=dashed];
	Node0x26513f0 [shape=record,label="{ACTUAL_IN:float}"];
	Node0x26513f0 -> Node0x2650020[style=dashed];
	Node0x2651460 [shape=record,label="{ACTUAL_OUT:float}"];
	Node0x2650020 [shape=record,label="{FORMAL_IN:float}"];
	Node0x2650020 -> Node0x26516e0[style=dashed];
	Node0x2650020 -> Node0x264c290[style=dotted];
	Node0x26516e0 [shape=record,label="{FORMAL_OUT:float}"];
	Node0x26516e0 -> Node0x2651460[style=dashed];
	Node0x2651260 [shape=record,label="{\<\<ENTRY\>\> main}"];
	Node0x2651260 -> Node0x264fa90;
	Node0x2651260 -> Node0x264fd30;
	Node0x2651260 -> Node0x264feb0;
	Node0x2651260 -> Node0x264fcc0;
	Node0x2651260 -> Node0x264fda0;
	Node0x2651260 -> Node0x264fe10;
	Node0x2651260 -> Node0x2650180;
	Node0x2651260 -> Node0x26501f0;
	Node0x2651260 -> Node0x26500d0;
	Node0x2651260 -> Node0x26503f0;
	Node0x2651260 -> Node0x26500a0;
	Node0x2651260 -> Node0x2650460;
	Node0x2651260 -> Node0x2651900;
	Node0x2651260 -> Node0x26510c0;
	Node0x2651260 -> Node0x26519c0;
	Node0x2651900 [shape=record,label="{  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str, i32 0, i32 0), i32 %call1)}"];
	Node0x26519c0 [shape=record,label="{  ret i32 0}"];
}
