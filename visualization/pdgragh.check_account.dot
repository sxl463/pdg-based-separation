digraph "Program Dependency Graph for 'check_account' function" {
	label="Program Dependency Graph for 'check_account' function";

	Node0x2ef5370 [shape=record,label="{\<\<ENTRY\>\> foo}"];
	Node0x2ef5370 -> Node0x2ef53e0;
	Node0x2ef5370 -> Node0x2ef5450;
	Node0x2ef53e0 [shape=record,label="{  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))}"];
	Node0x2ef5450 [shape=record,label="{  ret void}"];
	Node0x2ef9a50 [shape=record,label="{  %retval = alloca i32, align 4}"];
	Node0x2ef9a50 -> Node0x2ef9ac0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9a50 -> Node0x2ef54c0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9a50 -> Node0x2ef9ba0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9a50 -> Node0x2ef9b70[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9ac0 [shape=record,label="{  store i32 1, i32* %retval}"];
	Node0x2ef9ac0 -> Node0x2ef9b70[style=dotted,label = "{RAW} retval"];
	Node0x2ef9ac0 -> Node0x2eff010[style=dotted];
	Node0x2ef54c0 [shape=record,label="{  store i32 0, i32* %retval}"];
	Node0x2ef54c0 -> Node0x2ef9b70[style=dotted,label = "{RAW} retval"];
	Node0x2ef54c0 -> Node0x2eff010[style=dotted];
	Node0x2ef9ba0 [shape=record,label="{  store i32 2, i32* %retval}"];
	Node0x2ef9ba0 -> Node0x2ef9b70[style=dotted,label = "{RAW} retval"];
	Node0x2ef9ba0 -> Node0x2eff010[style=dotted];
	Node0x2ef9b70 [shape=record,label="{  %5 = load i32* %retval}"];
	Node0x2ef9b70 -> Node0x2efa8b0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9c50 [shape=record,label="{  %pa.addr = alloca %struct.account*, align 8}"];
	Node0x2ef9c50 -> Node0x2ef9d50[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9c50 -> Node0x2ef9dc0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9c50 -> Node0x2ef9e60[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9d50 [shape=record,label="{  store %struct.account* %pa, %struct.account** %pa.addr, align 8}"];
	Node0x2ef9d50 -> Node0x2ef9dc0[style=dotted,label = "{RAW} pa.addr"];
	Node0x2ef9d50 -> Node0x2ef9e60[style=dotted,label = "{RAW} pa.addr"];
	Node0x2ef9d50 -> Node0x2efeee0[style=dotted];
	Node0x2ef9dc0 [shape=record,label="{  %0 = load %struct.account** %pa.addr, align 8}"];
	Node0x2ef9dc0 -> Node0x2ef9ed0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9e60 [shape=record,label="{  %2 = load %struct.account** %pa.addr, align 8}"];
	Node0x2ef9e60 -> Node0x2ef9cc0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9ed0 [shape=record,label="{  %id = getelementptr inbounds %struct.account* %0, i32 0, i32 0}"];
	Node0x2ef9ed0 -> Node0x2ef9f40[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9f40 [shape=record,label="{  %1 = load i32* %id, align 4}"];
	Node0x2ef9f40 -> Node0x2ef9fb0[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9fb0 [shape=record,label="{  %cmp = icmp slt i32 %1, 0}"];
	Node0x2ef9fb0 -> Node0x2efa020[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa020 [shape=record,label="{  br i1 %cmp, label %if.then, label %if.end}"];
	Node0x2efa020 -> Node0x2efa090;
	Node0x2efa020 -> Node0x2ef9ac0;
	Node0x2efa020 -> Node0x2ef9cf0;
	Node0x2efa020 -> Node0x2ef9e60;
	Node0x2efa020 -> Node0x2ef9cc0;
	Node0x2efa020 -> Node0x2ef9d20;
	Node0x2efa020 -> Node0x2efa3b0;
	Node0x2efa020 -> Node0x2efa420;
	Node0x2efa020 -> Node0x2efa490;
	Node0x2efa020 -> Node0x2efa2e0;
	Node0x2efa090 [shape=record,label="{  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str1, i32 0, i32 0))}"];
	Node0x2ef9cf0 [shape=record,label="{  br label %return}"];
	Node0x2ef9cc0 [shape=record,label="{  %name = getelementptr inbounds %struct.account* %2, i32 0, i32 1}"];
	Node0x2ef9cc0 -> Node0x2ef9d20[style=dotted,label = "{DEF_USE}" ];
	Node0x2ef9d20 [shape=record,label="{  %3 = load i8** %name, align 8}"];
	Node0x2ef9d20 -> Node0x2efa420[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa3b0 [shape=record,label="{  %4 = load i8** getelementptr inbounds (%struct.account* bitcast (\{ i32, i8*, float, [4 x i8] \}* @record to %struct.account*), i32 0, i32 1), align 8}"];
	Node0x2efa3b0 -> Node0x2efa420[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa420 [shape=record,label="{  %call1 = call i32 @strcmp(i8* %3, i8* %4) #3}"];
	Node0x2efa490 [shape=record,label="{  %cmp2 = icmp eq i32 %call1, 0}"];
	Node0x2efa490 -> Node0x2efa2e0[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa2e0 [shape=record,label="{  br i1 %cmp2, label %if.then3, label %if.end5}"];
	Node0x2efa2e0 -> Node0x2efa690;
	Node0x2efa2e0 -> Node0x2ef54c0;
	Node0x2efa2e0 -> Node0x2efa750;
	Node0x2efa2e0 -> Node0x2ef9ba0;
	Node0x2efa2e0 -> Node0x2efa720;
	Node0x2efa690 [shape=record,label="{  %call4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str2, i32 0, i32 0))}"];
	Node0x2efa750 [shape=record,label="{  br label %return}"];
	Node0x2efa720 [shape=record,label="{  br label %return}"];
	Node0x2efa8b0 [shape=record,label="{  ret i32 %5}"];
	Node0x2efa8b0 -> Node0x2efa170[style=dotted];
	Node0x2efa940 [shape=record,label="{\<\<ENTRY\>\> check_account}"];
	Node0x2efa940 -> Node0x2ef9a50;
	Node0x2efa940 -> Node0x2ef9c50;
	Node0x2efa940 -> Node0x2ef9d50;
	Node0x2efa940 -> Node0x2ef9dc0;
	Node0x2efa940 -> Node0x2ef9ed0;
	Node0x2efa940 -> Node0x2ef9f40;
	Node0x2efa940 -> Node0x2ef9fb0;
	Node0x2efa940 -> Node0x2efa020;
	Node0x2efa940 -> Node0x2ef9b70;
	Node0x2efa940 -> Node0x2efa8b0;
	Node0x2efa940 -> Node0x2efecd0[style=dashed];
	Node0x2efa940 -> Node0x2efeee0[style=dashed];
	Node0x2efd0d0 [shape=record,label="{  %retval = alloca i32, align 4}"];
	Node0x2efd0d0 -> Node0x2efd140[style=dotted,label = "{DEF_USE}" ];
	Node0x2efd0d0 -> Node0x2efd1b0[style=dotted,label = "{DEF_USE}" ];
	Node0x2efd140 [shape=record,label="{  store i32 0, i32* %retval}"];
	Node0x2efd140 -> Node0x2efd1b0[style=dotted,label = "{RAW} retval"];
	Node0x2efd1b0 [shape=record,label="{  %1 = load i32* %retval}"];
	Node0x2efd1b0 -> Node0x2eff660[style=dotted,label = "{DEF_USE}" ];
	Node0x2efd250 [shape=record,label="{  %s = alloca %struct.account, align 256}"];
	Node0x2efd250 -> Node0x2efa100[style=dotted,label = "{DEF_USE}" ];
	Node0x2efd250 -> Node0x2efa170[style=dotted,label = "{DEF_USE}" ];
	Node0x2efd250 -> Node0x2efd4d0[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa100 [shape=record,label="{  %name = getelementptr inbounds %struct.account* %s, i32 0, i32 1}"];
	Node0x2efa100 -> Node0x2efa1e0[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa170 [shape=record,label="{  %call = call i32 @check_account(%struct.account* %s)}"];
	Node0x2efa170 -> Node0x2efa940;
	Node0x2efa170 -> Node0x2efe990[style=dashed];
	Node0x2efa170 -> Node0x2efeac0[style=dashed];
	Node0x2efa170 -> Node0x2eff440[style=dotted,label = "{DEF_USE}" ];
	Node0x2efd4d0 [shape=record,label="{  %name1 = getelementptr inbounds %struct.account* %s, i32 0, i32 1}"];
	Node0x2efd4d0 -> Node0x2efd580[style=dotted,label = "{DEF_USE}" ];
	Node0x2efa1e0 [shape=record,label="{  store i8* getelementptr inbounds ([4 x i8]* @.str3, i32 0, i32 0), i8** %name, align 8}"];
	Node0x2efa1e0 -> Node0x2efd580[style=dotted,label = "{RAW} name1"];
	Node0x2efd580 [shape=record,label="{  %0 = load i8** %name1, align 8}"];
	Node0x2efd580 -> Node0x2eff5d0[style=dotted,label = "{DEF_USE}" ];
	Node0x2efe990 [shape=record,label="{ACTUAL_IN:%struct.account*}"];
	Node0x2efe990 -> Node0x2efe9c0[style=dashed];
	Node0x2efe990 -> Node0x2efea50[style=dashed];
	Node0x2efe990 -> Node0x2efeaf0[style=dashed];
	Node0x2efe990 -> Node0x2efecd0[style=dashed];
	Node0x2efe9c0 [shape=record,label="{1 i32}"];
	Node0x2efe9c0 -> Node0x2efee00[style=dashed];
	Node0x2efea50 [shape=record,label="{2 i8*}"];
	Node0x2efea50 -> Node0x2efee70[style=dashed];
	Node0x2efeaf0 [shape=record,label="{3 float}"];
	Node0x2efeaf0 -> Node0x2efef10[style=dashed];
	Node0x2efeac0 [shape=record,label="{ACTUAL_OUT:%struct.account*}"];
	Node0x2efeac0 -> Node0x2efebf0[style=dashed];
	Node0x2efeac0 -> Node0x2efec60[style=dashed];
	Node0x2efeac0 -> Node0x2efed00[style=dashed];
	Node0x2efebf0 [shape=record,label="{1 i32}"];
	Node0x2efebf0 -> Node0x2efd1b0[style=dotted];
	Node0x2efec60 [shape=record,label="{2 i8*}"];
	Node0x2efec60 -> Node0x2efd580[style=dotted];
	Node0x2efed00 [shape=record,label="{3 float}"];
	Node0x2efecd0 [shape=record,label="{FORMAL_IN:%struct.account*}"];
	Node0x2efecd0 -> Node0x2efee00[style=dashed];
	Node0x2efecd0 -> Node0x2efee70[style=dashed];
	Node0x2efecd0 -> Node0x2efef10[style=dashed];
	Node0x2efecd0 -> Node0x2efeee0[style=dashed];
	Node0x2efecd0 -> Node0x2ef9d50[style=dotted];
	Node0x2efee00 [shape=record,label="{1 i32}"];
	Node0x2efee00 -> Node0x2eff010[style=dashed];
	Node0x2efee00 -> Node0x2ef9ac0[style=dotted];
	Node0x2efee00 -> Node0x2ef54c0[style=dotted];
	Node0x2efee00 -> Node0x2ef9ba0[style=dotted];
	Node0x2efee70 [shape=record,label="{2 i8*}"];
	Node0x2efee70 -> Node0x2eff080[style=dashed];
	Node0x2efef10 [shape=record,label="{3 float}"];
	Node0x2efef10 -> Node0x2eff120[style=dashed];
	Node0x2efeee0 [shape=record,label="{FORMAL_OUT:%struct.account*}"];
	Node0x2efeee0 -> Node0x2eff010[style=dashed];
	Node0x2efeee0 -> Node0x2eff080[style=dashed];
	Node0x2efeee0 -> Node0x2eff120[style=dashed];
	Node0x2efeee0 -> Node0x2efeac0[style=dashed];
	Node0x2eff010 [shape=record,label="{1 i32}"];
	Node0x2eff010 -> Node0x2efebf0[style=dashed];
	Node0x2eff080 [shape=record,label="{2 i8*}"];
	Node0x2eff080 -> Node0x2efec60[style=dashed];
	Node0x2eff120 [shape=record,label="{3 float}"];
	Node0x2eff120 -> Node0x2efed00[style=dashed];
	Node0x2eff440 [shape=record,label="{  %tobool = icmp ne i32 %call, 0}"];
	Node0x2eff440 -> Node0x2eff4b0[style=dotted,label = "{DEF_USE}" ];
	Node0x2eff4b0 [shape=record,label="{  br i1 %tobool, label %if.then, label %if.end}"];
	Node0x2eff4b0 -> Node0x2eff520;
	Node0x2eff520 [shape=record,label="{  br label %if.end}"];
	Node0x2eff5d0 [shape=record,label="{  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i8* %0)}"];
	Node0x2eff660 [shape=record,label="{  ret i32 %1}"];
	Node0x2eff6f0 [shape=record,label="{\<\<ENTRY\>\> main}"];
	Node0x2eff6f0 -> Node0x2efd0d0;
	Node0x2eff6f0 -> Node0x2efd250;
	Node0x2eff6f0 -> Node0x2efd140;
	Node0x2eff6f0 -> Node0x2efa100;
	Node0x2eff6f0 -> Node0x2efa1e0;
	Node0x2eff6f0 -> Node0x2efa170;
	Node0x2eff6f0 -> Node0x2eff440;
	Node0x2eff6f0 -> Node0x2eff4b0;
	Node0x2eff6f0 -> Node0x2efd4d0;
	Node0x2eff6f0 -> Node0x2efd580;
	Node0x2eff6f0 -> Node0x2eff5d0;
	Node0x2eff6f0 -> Node0x2efd1b0;
	Node0x2eff6f0 -> Node0x2eff660;
}
