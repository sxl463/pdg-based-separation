; ModuleID = 'bzip2.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.spec_fd_t = type { i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.EState = type { %struct.bz_stream*, i32, i32, i32, i32*, i32*, i32*, i32, i32*, i8*, i16*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [258 x i32], [18002 x i8], [18002 x i8], [6 x [258 x i8]], [6 x [258 x i32]], [6 x [258 x i32]], [258 x [4 x i32]] }
%struct.bz_stream = type { i8*, i32, i32, i32, i8*, i32, i32, i32, i8*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8* }
%struct.UInt64 = type { [8 x i8] }
%struct.DState = type { %struct.bz_stream*, i32, i8, i32, i8, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [256 x i32], i32, [257 x i32], [257 x i32], i32*, i16*, i8*, i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [256 x i8], [4096 x i8], [16 x i32], [18002 x i8], [18002 x i8], [6 x [258 x i8]], [6 x [258 x i32]], [6 x [258 x i32]], [6 x [258 x i32]], [6 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32* }

@dbglvl = global i32 4, align 4
@seedi = common global i64 0, align 8
@spec_fd = common global [3 x %struct.spec_fd_t] zeroinitializer, align 16
@.str3 = private unnamed_addr constant [19 x i8] c"Creating Chunk %d\0A\00", align 1
@stderr = external global %struct._IO_FILE*
@.str5 = private unnamed_addr constant [24 x i8] c"Can't open file %s: %s\0A\00", align 1
@.str6 = private unnamed_addr constant [27 x i8] c"Error reading from %s: %s\0A\00", align 1
@.str7 = private unnamed_addr constant [22 x i8] c"Duplicating %d bytes\0A\00", align 1
@.str8 = private unnamed_addr constant [25 x i8] c"spec_read: %d, %p, %d = \00", align 1
@.str9 = private unnamed_addr constant [34 x i8] c"spec_read: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str11 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str12 = private unnamed_addr constant [34 x i8] c"spec_fread: %p, (%d x %d) fd %d =\00", align 1
@.str13 = private unnamed_addr constant [35 x i8] c"spec_fread: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str14 = private unnamed_addr constant [17 x i8] c"spec_getc: %d = \00", align 1
@.str15 = private unnamed_addr constant [19 x i8] c"spec_ungetc: %d = \00", align 1
@.str16 = private unnamed_addr constant [26 x i8] c"spec_ungetc: pos %d <= 0\0A\00", align 1
@.str17 = private unnamed_addr constant [72 x i8] c"spec_ungetc: can't unget something that wasn't what was in the buffer!\0A\00", align 1
@.str18 = private unnamed_addr constant [26 x i8] c"spec_write: %d, %p, %d = \00", align 1
@.str19 = private unnamed_addr constant [35 x i8] c"spec_write: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str20 = private unnamed_addr constant [31 x i8] c"spec_fwrite: %p, %d, %d, %d = \00", align 1
@.str21 = private unnamed_addr constant [36 x i8] c"spec_fwrite: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str22 = private unnamed_addr constant [21 x i8] c"spec_putc: %d, %d = \00", align 1
@.str23 = private unnamed_addr constant [15 x i8] c"input.combined\00", align 1
@.str25 = private unnamed_addr constant [31 x i8] c"Input data %d bytes in length\0A\00", align 1
@.str27 = private unnamed_addr constant [34 x i8] c"Compressing Input Data, level %d\0A\00", align 1
@.str28 = private unnamed_addr constant [36 x i8] c"Compressed data %d bytes in length\0A\00", align 1
@.str30 = private unnamed_addr constant [38 x i8] c"Uncompressed data %d bytes in length\0A\00", align 1
@.str31 = private unnamed_addr constant [35 x i8] c"Tested %dMB buffer: Miscompared!!\0A\00", align 1
@.str33 = private unnamed_addr constant [25 x i8] c"Tested %dMB buffer: OK!\0A\00", align 1
@str = private unnamed_addr constant [35 x i8] c"spec_init: Error mallocing memory!\00"
@str34 = private unnamed_addr constant [10 x i8] c"spec_init\00"
@str35 = private unnamed_addr constant [19 x i8] c"Filling input file\00"
@str36 = private unnamed_addr constant [16 x i8] c"Creating Chunks\00"
@str39 = private unnamed_addr constant [4 x i8] c"EOF\00"
@str40 = private unnamed_addr constant [37 x i8] c"Uncompressed data compared correctly\00"
@str41 = private unnamed_addr constant [19 x i8] c"Uncompressing Data\00"
@str42 = private unnamed_addr constant [30 x i8] c"main: Error mallocing memory!\00"
@str43 = private unnamed_addr constant [19 x i8] c"Loading Input Data\00"
@.str = private unnamed_addr constant [38 x i8] c"      %d work, %d block, ratio %5.2f\0A\00", align 1
@.str1 = private unnamed_addr constant [54 x i8] c"    too repetitive; using fallback sorting algorithm\0A\00", align 1
@.str2 = private unnamed_addr constant [34 x i8] c"        main sort initialise ...\0A\00", align 1
@.str32 = private unnamed_addr constant [28 x i8] c"        bucket sorting ...\0A\00", align 1
@.str4 = private unnamed_addr constant [48 x i8] c"        qsort [0x%x, 0x%x]   done %d   this %d\0A\00", align 1
@.str53 = private unnamed_addr constant [44 x i8] c"        %d pointers, %d sorted, %d scanned\0A\00", align 1
@incs = internal unnamed_addr constant [14 x i32] [i32 1, i32 4, i32 13, i32 40, i32 121, i32 364, i32 1093, i32 3280, i32 9841, i32 29524, i32 88573, i32 265720, i32 797161, i32 2391484], align 16
@.str64 = private unnamed_addr constant [23 x i8] c"        depth %6d has \00", align 1
@.str75 = private unnamed_addr constant [24 x i8] c"%6d unresolved strings\0A\00", align 1
@.str86 = private unnamed_addr constant [34 x i8] c"        reconstructing block ...\0A\00", align 1
@blockSize100k = common global i32 0, align 4
@verbosity = common global i32 0, align 4
@workFactor = common global i32 0, align 4
@outputHandleJustInCase = common global i32 0, align 4
@.str113 = private unnamed_addr constant [22 x i8] c" no data compressed.\0A\00", align 1
@.str214 = private unnamed_addr constant [57 x i8] c"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\0A\00", align 1
@.str315 = private unnamed_addr constant [26 x i8] c"compress:unexpected error\00", align 1
@smallMode = common global i8 0, align 1
@.str518 = private unnamed_addr constant [27 x i8] c"decompress:bzReadGetUnused\00", align 1
@.str619 = private unnamed_addr constant [6 x i8] c"\0A    \00", align 1
@forceOverwrite = common global i8 0, align 1
@noisy = common global i8 0, align 1
@.str720 = private unnamed_addr constant [45 x i8] c"\0A%s: %s: trailing garbage after EOF ignored\0A\00", align 1
@progName = common global i8* null, align 8
@inName = common global [1034 x i8] zeroinitializer, align 16
@.str821 = private unnamed_addr constant [28 x i8] c"decompress:unexpected error\00", align 1
@keepInputFiles = common global i8 0, align 1
@deleteOutputOnInterrupt = common global i8 0, align 1
@testFailsExist = common global i8 0, align 1
@unzFailsExist = common global i8 0, align 1
@numFileNames = common global i32 0, align 4
@numFilesProcessed = common global i32 0, align 4
@exitValue = common global i32 0, align 4
@opMode = common global i32 0, align 4
@srcMode = common global i32 0, align 4
@longestFileName = common global i32 0, align 4
@outName = common global [1034 x i8] zeroinitializer, align 16
@tmpName = common global [1034 x i8] zeroinitializer, align 16
@progNameReally = common global [1034 x i8] zeroinitializer, align 16
@.str10 = private unnamed_addr constant [236 x i8] c"bzip2: I'm not configured correctly for this platform!\0A\09I require Int32, Int16 and Char to have sizes\0A\09of 4, 2 and 1 bytes to run properly, and they don't.\0A\09Probably you can fix this by defining them correctly,\0A\09and recompiling.  Bye!\0A\00", align 1
@.str1122 = private unnamed_addr constant [38 x i8] c"\0A%s: couldn't allocate enough memory\0A\00", align 1
@.str1223 = private unnamed_addr constant [36 x i8] c"\09Input file = %s, output file = %s\0A\00", align 1
@.str1324 = private unnamed_addr constant [65 x i8] c"\0A%s: I/O or other error, bailing out.  Possible reason follows.\0A\00", align 1
@.str1425 = private unnamed_addr constant [95 x i8] c"\0A%s: Compressed file ends unexpectedly;\0A\09perhaps it is corrupted?  *Possible* reason follows.\0A\00", align 1
@.str1526 = private unnamed_addr constant [241 x i8] c"\0AIt is possible that the compressed file(s) have become corrupted.\0AYou can use the -tvv option to test integrity of such files.\0A\0AYou can use the `bzip2recover' program to attempt to recover\0Adata from undamaged sections of corrupted files.\0A\0A\00", align 1
@.str1627 = private unnamed_addr constant [47 x i8] c"\0A%s: Data integrity error when decompressing.\0A\00", align 1
@.str1728 = private unnamed_addr constant [148 x i8] c"\0A%s: PANIC -- internal consistency error:\0A\09%s\0A\09This is probably a BUG, but it may be in your COMPILER.  Please do not bother\0A\09the original author.\0A\00", align 1
@.str34 = private unnamed_addr constant [269 x i8] c"\0A\0Abzip2/libbzip2: internal error number %d.\0AThis may be a bug in bzip2/libbzip2, %s.\0AIt may also be a bug in your compiler.  Please do not bother the\0Aoriginal author of bzip2 with a bug report for this.  He\0Adoesn't know anything about bzip2 as it appears in CPU2006.\0A\0A\00", align 1
@.str135 = private unnamed_addr constant [1057 x i8] c"\0A*** A special note about internal error number 1007 ***\0A\0AExperience suggests that a common cause of i.e. 1007\0Ais unreliable memory or other hardware.  The 1007 assertion\0Ajust happens to cross-check the results of huge numbers of\0Amemory reads/writes, and so acts (unintendedly) as a stress\0Atest of your memory system.\0A\0AI suggest the following: try compressing the file again,\0Apossibly monitoring progress in detail with the -vv flag.\0A\0A* If the error cannot be reproduced, and/or happens at different\0A  points in compression, you may have a flaky memory system.\0A  Try a memory-test program.  I have used Memtest86\0A  (www.memtest86.com).  At the time of writing it is free (GPLd).\0A  Memtest86 tests memory much more thorougly than your BIOSs\0A  power-on test, and may find failures that the BIOS doesn't.\0A\0A* If the error can be repeatably reproduced, this is a bug in\0A  bzip2, and I would very much like to hear about it.  Please\0A  let me know, and, ideally, save a copy of the file causing the\0A  problem -- without which I will be unable to investigate it.\0A\0A\00", align 1
@.str236 = private unnamed_addr constant [18 x i8] c" {0x%08x, 0x%08x}\00", align 1
@.str437 = private unnamed_addr constant [55 x i8] c"\0A    combined CRCs: stored = 0x%08x, computed = 0x%08x\00", align 1
@.str538 = private unnamed_addr constant [19 x i8] c"1.0.3, 15-Feb-2005\00", align 1
@bzerrorstrings = internal unnamed_addr constant [16 x i8*] [i8* getelementptr inbounds ([3 x i8]* @.str639, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str740, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str841, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str942, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str1043, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str1144, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str1245, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1346, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str1447, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str1548, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1649, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1649, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1649, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1649, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1649, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1649, i32 0, i32 0)], align 16
@.str639 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str740 = private unnamed_addr constant [15 x i8] c"SEQUENCE_ERROR\00", align 1
@.str841 = private unnamed_addr constant [12 x i8] c"PARAM_ERROR\00", align 1
@.str942 = private unnamed_addr constant [10 x i8] c"MEM_ERROR\00", align 1
@.str1043 = private unnamed_addr constant [11 x i8] c"DATA_ERROR\00", align 1
@.str1144 = private unnamed_addr constant [17 x i8] c"DATA_ERROR_MAGIC\00", align 1
@.str1245 = private unnamed_addr constant [9 x i8] c"IO_ERROR\00", align 1
@.str1346 = private unnamed_addr constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@.str1447 = private unnamed_addr constant [13 x i8] c"OUTBUFF_FULL\00", align 1
@.str1548 = private unnamed_addr constant [13 x i8] c"CONFIG_ERROR\00", align 1
@.str1649 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@.str66 = private unnamed_addr constant [62 x i8] c"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\0A\00", align 1
@.str167 = private unnamed_addr constant [36 x i8] c"    final combined CRC = 0x%08x\0A   \00", align 1
@.str268 = private unnamed_addr constant [64 x i8] c"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\0A\00", align 1
@.str369 = private unnamed_addr constant [59 x i8] c"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\0A\00", align 1
@.str470 = private unnamed_addr constant [41 x i8] c"      pass %d: size is %d, grp uses are \00", align 1
@.str571 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str772 = private unnamed_addr constant [26 x i8] c"      bytes: mapping %d, \00", align 1
@.str873 = private unnamed_addr constant [15 x i8] c"selectors %d, \00", align 1
@.str974 = private unnamed_addr constant [18 x i8] c"code lengths %d, \00", align 1
@.str1075 = private unnamed_addr constant [10 x i8] c"codes %d\0A\00", align 1
@BZ2_crc32Table = global [256 x i32] [i32 0, i32 79764919, i32 159529838, i32 222504665, i32 319059676, i32 398814059, i32 445009330, i32 507990021, i32 638119352, i32 583659535, i32 797628118, i32 726387553, i32 890018660, i32 835552979, i32 1015980042, i32 944750013, i32 1276238704, i32 1221641927, i32 1167319070, i32 1095957929, i32 1595256236, i32 1540665371, i32 1452775106, i32 1381403509, i32 1780037320, i32 1859660671, i32 1671105958, i32 1733955601, i32 2031960084, i32 2111593891, i32 1889500026, i32 1952343757, i32 -1742489888, i32 -1662866601, i32 -1851683442, i32 -1788833735, i32 -1960329156, i32 -1880695413, i32 -2103051438, i32 -2040207643, i32 -1104454824, i32 -1159051537, i32 -1213636554, i32 -1284997759, i32 -1389417084, i32 -1444007885, i32 -1532160278, i32 -1603531939, i32 -734892656, i32 -789352409, i32 -575645954, i32 -646886583, i32 -952755380, i32 -1007220997, i32 -827056094, i32 -898286187, i32 -231047128, i32 -151282273, i32 -71779514, i32 -8804623, i32 -515967244, i32 -436212925, i32 -390279782, i32 -327299027, i32 881225847, i32 809987520, i32 1023691545, i32 969234094, i32 662832811, i32 591600412, i32 771767749, i32 717299826, i32 311336399, i32 374308984, i32 453813921, i32 533576470, i32 25881363, i32 88864420, i32 134795389, i32 214552010, i32 2023205639, i32 2086057648, i32 1897238633, i32 1976864222, i32 1804852699, i32 1867694188, i32 1645340341, i32 1724971778, i32 1587496639, i32 1516133128, i32 1461550545, i32 1406951526, i32 1302016099, i32 1230646740, i32 1142491917, i32 1087903418, i32 -1398421865, i32 -1469785312, i32 -1524105735, i32 -1578704818, i32 -1079922613, i32 -1151291908, i32 -1239184603, i32 -1293773166, i32 -1968362705, i32 -1905510760, i32 -2094067647, i32 -2014441994, i32 -1716953613, i32 -1654112188, i32 -1876203875, i32 -1796572374, i32 -525066777, i32 -462094256, i32 -382327159, i32 -302564546, i32 -206542021, i32 -143559028, i32 -97365931, i32 -17609246, i32 -960696225, i32 -1031934488, i32 -817968335, i32 -872425850, i32 -709327229, i32 -780559564, i32 -600130067, i32 -654598054, i32 1762451694, i32 1842216281, i32 1619975040, i32 1682949687, i32 2047383090, i32 2127137669, i32 1938468188, i32 2001449195, i32 1325665622, i32 1271206113, i32 1183200824, i32 1111960463, i32 1543535498, i32 1489069629, i32 1434599652, i32 1363369299, i32 622672798, i32 568075817, i32 748617968, i32 677256519, i32 907627842, i32 853037301, i32 1067152940, i32 995781531, i32 51762726, i32 131386257, i32 177728840, i32 240578815, i32 269590778, i32 349224269, i32 429104020, i32 491947555, i32 -248556018, i32 -168932423, i32 -122852000, i32 -60002089, i32 -500490030, i32 -420856475, i32 -341238852, i32 -278395381, i32 -685261898, i32 -739858943, i32 -559578920, i32 -630940305, i32 -1004286614, i32 -1058877219, i32 -845023740, i32 -916395085, i32 -1119974018, i32 -1174433591, i32 -1262701040, i32 -1333941337, i32 -1371866206, i32 -1426332139, i32 -1481064244, i32 -1552294533, i32 -1690935098, i32 -1611170447, i32 -1833673816, i32 -1770699233, i32 -2009983462, i32 -1930228819, i32 -2119160460, i32 -2056179517, i32 1569362073, i32 1498123566, i32 1409854455, i32 1355396672, i32 1317987909, i32 1246755826, i32 1192025387, i32 1137557660, i32 2072149281, i32 2135122070, i32 1912620623, i32 1992383480, i32 1753615357, i32 1816598090, i32 1627664531, i32 1707420964, i32 295390185, i32 358241886, i32 404320391, i32 483945776, i32 43990325, i32 106832002, i32 186451547, i32 266083308, i32 932423249, i32 861060070, i32 1041341759, i32 986742920, i32 613929101, i32 542559546, i32 756411363, i32 701822548, i32 -978770311, i32 -1050133554, i32 -869589737, i32 -924188512, i32 -693284699, i32 -764654318, i32 -550540341, i32 -605129092, i32 -475935807, i32 -413084042, i32 -366743377, i32 -287118056, i32 -257573603, i32 -194731862, i32 -114850189, i32 -35218492, i32 -1984365303, i32 -1921392450, i32 -2143631769, i32 -2063868976, i32 -1698919467, i32 -1635936670, i32 -1824608069, i32 -1744851700, i32 -1347415887, i32 -1418654458, i32 -1506661409, i32 -1561119128, i32 -1129027987, i32 -1200260134, i32 -1254728445, i32 -1309196108], align 16
@.str80 = private unnamed_addr constant [20 x i8] c"\0A    [%d: huff+mtf \00", align 1
@.str181 = private unnamed_addr constant [7 x i8] c"rt+rld\00", align 1
@BZ2_rNums = global [512 x i32] [i32 619, i32 720, i32 127, i32 481, i32 931, i32 816, i32 813, i32 233, i32 566, i32 247, i32 985, i32 724, i32 205, i32 454, i32 863, i32 491, i32 741, i32 242, i32 949, i32 214, i32 733, i32 859, i32 335, i32 708, i32 621, i32 574, i32 73, i32 654, i32 730, i32 472, i32 419, i32 436, i32 278, i32 496, i32 867, i32 210, i32 399, i32 680, i32 480, i32 51, i32 878, i32 465, i32 811, i32 169, i32 869, i32 675, i32 611, i32 697, i32 867, i32 561, i32 862, i32 687, i32 507, i32 283, i32 482, i32 129, i32 807, i32 591, i32 733, i32 623, i32 150, i32 238, i32 59, i32 379, i32 684, i32 877, i32 625, i32 169, i32 643, i32 105, i32 170, i32 607, i32 520, i32 932, i32 727, i32 476, i32 693, i32 425, i32 174, i32 647, i32 73, i32 122, i32 335, i32 530, i32 442, i32 853, i32 695, i32 249, i32 445, i32 515, i32 909, i32 545, i32 703, i32 919, i32 874, i32 474, i32 882, i32 500, i32 594, i32 612, i32 641, i32 801, i32 220, i32 162, i32 819, i32 984, i32 589, i32 513, i32 495, i32 799, i32 161, i32 604, i32 958, i32 533, i32 221, i32 400, i32 386, i32 867, i32 600, i32 782, i32 382, i32 596, i32 414, i32 171, i32 516, i32 375, i32 682, i32 485, i32 911, i32 276, i32 98, i32 553, i32 163, i32 354, i32 666, i32 933, i32 424, i32 341, i32 533, i32 870, i32 227, i32 730, i32 475, i32 186, i32 263, i32 647, i32 537, i32 686, i32 600, i32 224, i32 469, i32 68, i32 770, i32 919, i32 190, i32 373, i32 294, i32 822, i32 808, i32 206, i32 184, i32 943, i32 795, i32 384, i32 383, i32 461, i32 404, i32 758, i32 839, i32 887, i32 715, i32 67, i32 618, i32 276, i32 204, i32 918, i32 873, i32 777, i32 604, i32 560, i32 951, i32 160, i32 578, i32 722, i32 79, i32 804, i32 96, i32 409, i32 713, i32 940, i32 652, i32 934, i32 970, i32 447, i32 318, i32 353, i32 859, i32 672, i32 112, i32 785, i32 645, i32 863, i32 803, i32 350, i32 139, i32 93, i32 354, i32 99, i32 820, i32 908, i32 609, i32 772, i32 154, i32 274, i32 580, i32 184, i32 79, i32 626, i32 630, i32 742, i32 653, i32 282, i32 762, i32 623, i32 680, i32 81, i32 927, i32 626, i32 789, i32 125, i32 411, i32 521, i32 938, i32 300, i32 821, i32 78, i32 343, i32 175, i32 128, i32 250, i32 170, i32 774, i32 972, i32 275, i32 999, i32 639, i32 495, i32 78, i32 352, i32 126, i32 857, i32 956, i32 358, i32 619, i32 580, i32 124, i32 737, i32 594, i32 701, i32 612, i32 669, i32 112, i32 134, i32 694, i32 363, i32 992, i32 809, i32 743, i32 168, i32 974, i32 944, i32 375, i32 748, i32 52, i32 600, i32 747, i32 642, i32 182, i32 862, i32 81, i32 344, i32 805, i32 988, i32 739, i32 511, i32 655, i32 814, i32 334, i32 249, i32 515, i32 897, i32 955, i32 664, i32 981, i32 649, i32 113, i32 974, i32 459, i32 893, i32 228, i32 433, i32 837, i32 553, i32 268, i32 926, i32 240, i32 102, i32 654, i32 459, i32 51, i32 686, i32 754, i32 806, i32 760, i32 493, i32 403, i32 415, i32 394, i32 687, i32 700, i32 946, i32 670, i32 656, i32 610, i32 738, i32 392, i32 760, i32 799, i32 887, i32 653, i32 978, i32 321, i32 576, i32 617, i32 626, i32 502, i32 894, i32 679, i32 243, i32 440, i32 680, i32 879, i32 194, i32 572, i32 640, i32 724, i32 926, i32 56, i32 204, i32 700, i32 707, i32 151, i32 457, i32 449, i32 797, i32 195, i32 791, i32 558, i32 945, i32 679, i32 297, i32 59, i32 87, i32 824, i32 713, i32 663, i32 412, i32 693, i32 342, i32 606, i32 134, i32 108, i32 571, i32 364, i32 631, i32 212, i32 174, i32 643, i32 304, i32 329, i32 343, i32 97, i32 430, i32 751, i32 497, i32 314, i32 983, i32 374, i32 822, i32 928, i32 140, i32 206, i32 73, i32 263, i32 980, i32 736, i32 876, i32 478, i32 430, i32 305, i32 170, i32 514, i32 364, i32 692, i32 829, i32 82, i32 855, i32 953, i32 676, i32 246, i32 369, i32 970, i32 294, i32 750, i32 807, i32 827, i32 150, i32 790, i32 288, i32 923, i32 804, i32 378, i32 215, i32 828, i32 592, i32 281, i32 565, i32 555, i32 710, i32 82, i32 896, i32 831, i32 547, i32 261, i32 524, i32 462, i32 293, i32 465, i32 502, i32 56, i32 661, i32 821, i32 976, i32 991, i32 658, i32 869, i32 905, i32 758, i32 745, i32 193, i32 768, i32 550, i32 608, i32 933, i32 378, i32 286, i32 215, i32 979, i32 792, i32 961, i32 61, i32 688, i32 793, i32 644, i32 986, i32 403, i32 106, i32 366, i32 905, i32 644, i32 372, i32 567, i32 466, i32 434, i32 645, i32 210, i32 389, i32 550, i32 919, i32 135, i32 780, i32 773, i32 635, i32 389, i32 707, i32 100, i32 626, i32 958, i32 165, i32 504, i32 920, i32 176, i32 193, i32 713, i32 857, i32 265, i32 203, i32 50, i32 668, i32 108, i32 645, i32 990, i32 626, i32 197, i32 510, i32 357, i32 358, i32 850, i32 858, i32 364, i32 936, i32 638], align 16

; Function Attrs: nounwind uwtable
define double @ran() #0 {
  %1 = load i64* @seedi, align 8
  %2 = sdiv i64 %1, 127773
  %3 = srem i64 %1, 127773
  %4 = mul nsw i64 %3, 16807
  %5 = mul i64 %2, -2836
  %6 = add i64 %4, %5
  %7 = icmp sgt i64 %6, 0
  %8 = add nsw i64 %6, 2147483647
  %storemerge = select i1 %7, i64 %6, i64 %8
  store i64 %storemerge, i64* @seedi, align 8
  %9 = sitofp i64 %storemerge to float
  %10 = fmul float %9, 0x3E00000000000000
  %11 = fpext float %10 to double
  ret double %11
}

; Function Attrs: nounwind uwtable
define i32 @spec_init() #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 3
  br i1 %2, label %3, label %.preheader2.preheader

; <label>:3                                       ; preds = %0
  %puts1 = tail call i32 @puts(i8* getelementptr inbounds ([10 x i8]* @str34, i64 0, i64 0))
  br label %.preheader2.preheader

.preheader2.preheader:                            ; preds = %3, %0
  br label %.preheader2

.preheader2:                                      ; preds = %._crit_edge, %.preheader2.preheader
  %indvars.iv5 = phi i64 [ %indvars.iv.next6, %._crit_edge ], [ 0, %.preheader2.preheader ]
  %4 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %indvars.iv5
  %5 = getelementptr inbounds %struct.spec_fd_t* %4, i64 0, i32 0
  %6 = load i32* %5, align 8
  %7 = bitcast %struct.spec_fd_t* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 24, i32 8, i1 false)
  store i32 %6, i32* %5, align 8
  %8 = add nsw i32 %6, 1048576
  %9 = sext i32 %8 to i64
  %10 = tail call noalias i8* @malloc(i64 %9) #2
  %11 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %indvars.iv5, i32 3
  store i8* %10, i8** %11, align 8
  %12 = icmp eq i8* %10, null
  br i1 %12, label %14, label %.preheader

.preheader:                                       ; preds = %.preheader2
  %13 = icmp sgt i32 %6, 0
  br i1 %13, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

; <label>:14                                      ; preds = %.preheader2
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @str, i64 0, i64 0))
  tail call void @exit(i32 0) #10
  unreachable

.lr.ph:                                           ; preds = %._crit_edge7, %.lr.ph.preheader
  %15 = phi i8* [ %.pre, %._crit_edge7 ], [ %10, %.lr.ph.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge7 ], [ 0, %.lr.ph.preheader ]
  %16 = getelementptr inbounds i8* %15, i64 %indvars.iv
  store i8 0, i8* %16, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024
  %17 = trunc i64 %indvars.iv.next to i32
  %18 = icmp slt i32 %17, %6
  br i1 %18, label %._crit_edge7, label %._crit_edge.loopexit

._crit_edge7:                                     ; preds = %.lr.ph
  %.pre = load i8** %11, align 8
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1
  %19 = trunc i64 %indvars.iv.next6 to i32
  %20 = icmp slt i32 %19, 3
  br i1 %20, label %.preheader2, label %21

; <label>:21                                      ; preds = %._crit_edge
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind uwtable
define i32 @spec_random_load(i32 %fd) #0 {
  %random_text = alloca [32 x [131072 x i8]], align 16
  %1 = getelementptr inbounds [32 x [131072 x i8]]* %random_text, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start(i64 4194304, i8* %1) #2
  %2 = load i32* @dbglvl, align 4
  %3 = icmp sgt i32 %2, 4
  br i1 %3, label %4, label %.preheader

; <label>:4                                       ; preds = %0
  %puts1 = tail call i32 @puts(i8* getelementptr inbounds ([16 x i8]* @str36, i64 0, i64 0))
  br label %5

; <label>:5                                       ; preds = %27, %4
  %i.0.ph = phi i32 [ 0, %4 ], [ %28, %27 ]
  %.pr = load i32* @dbglvl, align 4
  %6 = icmp slt i32 %i.0.ph, 32
  br i1 %6, label %7, label %29

; <label>:7                                       ; preds = %5
  %8 = icmp sgt i32 %.pr, 5
  br i1 %8, label %9, label %.preheader

; <label>:9                                       ; preds = %7
  %10 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str3, i64 0, i64 0), i32 %i.0.ph) #2
  br label %.preheader

.preheader:                                       ; preds = %9, %7, %0
  %i.0911 = phi i32 [ %i.0.ph, %9 ], [ %i.0.ph, %7 ], [ 0, %0 ]
  %11 = sext i32 %i.0911 to i64
  %seedi.promoted = load i64* @seedi, align 8
  br label %12

; <label>:12                                      ; preds = %12, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %12 ]
  %storemerge.i5 = phi i64 [ %seedi.promoted, %.preheader ], [ %storemerge.i, %12 ]
  %13 = sdiv i64 %storemerge.i5, 127773
  %14 = srem i64 %storemerge.i5, 127773
  %15 = mul nsw i64 %14, 16807
  %16 = mul i64 %13, -2836
  %17 = add i64 %15, %16
  %18 = icmp sgt i64 %17, 0
  %19 = add nsw i64 %17, 2147483647
  %storemerge.i = select i1 %18, i64 %17, i64 %19
  %20 = sitofp i64 %storemerge.i to float
  %21 = fmul float %20, 0x3E00000000000000
  %22 = fpext float %21 to double
  %23 = fmul double %22, 2.560000e+02
  %24 = fptosi double %23 to i32
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds [32 x [131072 x i8]]* %random_text, i64 0, i64 %11, i64 %indvars.iv
  store i8 %25, i8* %26, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 131072
  br i1 %exitcond, label %27, label %12

; <label>:27                                      ; preds = %12
  %storemerge.i.lcssa = phi i64 [ %storemerge.i, %12 ]
  store i64 %storemerge.i.lcssa, i64* @seedi, align 8
  %28 = add nsw i32 %i.0911, 1
  br label %5

; <label>:29                                      ; preds = %5
  %30 = icmp sgt i32 %.pr, 4
  br i1 %30, label %31, label %.preheader3

; <label>:31                                      ; preds = %29
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8]* @str35, i64 0, i64 0))
  br label %.preheader3

.preheader3:                                      ; preds = %31, %29
  %32 = sext i32 %fd to i64
  %33 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %32, i32 0
  %34 = load i32* %33, align 8
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader3
  %36 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %32, i32 3
  br label %37

; <label>:37                                      ; preds = %37, %.lr.ph
  %indvars.iv7 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next8, %37 ]
  %38 = load i8** %36, align 8
  %39 = getelementptr inbounds i8* %38, i64 %indvars.iv7
  %40 = load i64* @seedi, align 8
  %41 = sdiv i64 %40, 127773
  %42 = srem i64 %40, 127773
  %43 = mul nsw i64 %42, 16807
  %44 = mul i64 %41, -2836
  %45 = add i64 %43, %44
  %46 = icmp sgt i64 %45, 0
  %47 = add nsw i64 %45, 2147483647
  %storemerge.i2 = select i1 %46, i64 %45, i64 %47
  store i64 %storemerge.i2, i64* @seedi, align 8
  %48 = sitofp i64 %storemerge.i2 to float
  %49 = fmul float %48, 0x3E00000000000000
  %50 = fpext float %49 to double
  %51 = fmul double %50, 3.200000e+01
  %52 = fptosi double %51 to i32
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [32 x [131072 x i8]]* %random_text, i64 0, i64 %53, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %54, i64 131072, i32 1, i1 false)
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 131072
  %55 = load i32* %33, align 8
  %56 = trunc i64 %indvars.iv.next8 to i32
  %57 = icmp slt i32 %56, %55
  br i1 %57, label %37, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %37
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader3
  %58 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %32, i32 1
  store i32 1048576, i32* %58, align 4
  call void @llvm.lifetime.end(i64 4194304, i8* %1) #2
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i32 @spec_load(i32 %num, i8* %filename, i32 %size) #0 {
  %1 = tail call i32 (i8*, i32, ...)* @open(i8* %filename, i32 0) #2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %3, label %9

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = tail call i32* @__errno_location() #11
  %6 = load i32* %5, align 4
  %7 = tail call i8* @strerror(i32 %6) #2
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([24 x i8]* @.str5, i64 0, i64 0), i8* %filename, i8* %7) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:9                                       ; preds = %0
  %10 = sext i32 %num to i64
  %11 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %10, i32 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %10, i32 2
  store i32 0, i32* %12, align 8
  %13 = icmp sgt i32 %size, 0
  br i1 %13, label %.lr.ph3, label %._crit_edge4

.lr.ph3:                                          ; preds = %9
  %14 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %10, i32 3
  br label %15

; <label>:15                                      ; preds = %30, %.lr.ph3
  %i.01 = phi i32 [ 0, %.lr.ph3 ], [ %33, %30 ]
  %16 = load i8** %14, align 8
  %17 = sext i32 %i.01 to i64
  %18 = getelementptr inbounds i8* %16, i64 %17
  %19 = tail call i64 @read(i32 %1, i8* %18, i64 131072) #2
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %._crit_edge4.loopexit, label %22

; <label>:22                                      ; preds = %15
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %24, label %30

; <label>:24                                      ; preds = %22
  %25 = load %struct._IO_FILE** @stderr, align 8
  %26 = tail call i32* @__errno_location() #11
  %27 = load i32* %26, align 4
  %28 = tail call i8* @strerror(i32 %27) #2
  %29 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([27 x i8]* @.str6, i64 0, i64 0), i8* %filename, i8* %28) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:30                                      ; preds = %22
  %31 = load i32* %11, align 4
  %32 = add nsw i32 %31, %20
  store i32 %32, i32* %11, align 4
  %33 = add nsw i32 %20, %i.01
  %34 = icmp slt i32 %33, %size
  br i1 %34, label %15, label %._crit_edge4.loopexit

._crit_edge4.loopexit:                            ; preds = %30, %15
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %._crit_edge4.loopexit, %9
  %35 = tail call i32 @close(i32 %1) #2
  %36 = load i32* %11, align 4
  %37 = icmp slt i32 %36, %size
  br i1 %37, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %._crit_edge4
  %38 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %10, i32 3
  br label %39

; <label>:39                                      ; preds = %47, %.lr.ph
  %40 = phi i32 [ %36, %.lr.ph ], [ %54, %47 ]
  %41 = sub nsw i32 %size, %40
  %42 = icmp sgt i32 %41, %40
  %. = select i1 %42, i32 %40, i32 %41
  %43 = load i32* @dbglvl, align 4
  %44 = icmp sgt i32 %43, 3
  br i1 %44, label %45, label %47

; <label>:45                                      ; preds = %39
  %46 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str7, i64 0, i64 0), i32 %.) #2
  %.pre = load i32* %11, align 4
  br label %47

; <label>:47                                      ; preds = %45, %39
  %48 = phi i32 [ %.pre, %45 ], [ %40, %39 ]
  %49 = load i8** %38, align 8
  %50 = sext i32 %48 to i64
  %51 = getelementptr inbounds i8* %49, i64 %50
  %52 = sext i32 %. to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %49, i64 %52, i32 1, i1 false)
  %53 = load i32* %11, align 4
  %54 = add nsw i32 %53, %.
  store i32 %54, i32* %11, align 4
  %55 = icmp slt i32 %54, %size
  br i1 %55, label %39, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %47
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge4
  ret i32 0
}

declare i32 @open(i8* nocapture readonly, i32, ...) #4

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #1

; Function Attrs: nounwind
declare i8* @strerror(i32) #1

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #5

declare i64 @read(i32, i8* nocapture, i64) #4

declare i32 @close(i32) #4

; Function Attrs: nounwind uwtable
define i32 @spec_read(i32 %fd, i8* %buf, i32 %size) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str8, i64 0, i64 0), i32 %fd, i8* %buf, i32 %size) #2
  br label %5

; <label>:5                                       ; preds = %3, %0
  %6 = icmp sgt i32 %fd, 3
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %5
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([34 x i8]* @.str9, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:10                                      ; preds = %5
  %11 = sext i32 %fd to i64
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 2
  %13 = load i32* %12, align 8
  %14 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 1
  %15 = load i32* %14, align 4
  %16 = icmp sgt i32 %15, %13
  br i1 %16, label %21, label %17

; <label>:17                                      ; preds = %10
  %18 = load i32* @dbglvl, align 4
  %19 = icmp sgt i32 %18, 4
  br i1 %19, label %20, label %36

; <label>:20                                      ; preds = %17
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([4 x i8]* @str39, i64 0, i64 0))
  br label %36

; <label>:21                                      ; preds = %10
  %22 = add nsw i32 %13, %size
  %23 = icmp slt i32 %22, %15
  %24 = sub nsw i32 %15, %13
  %rc.0 = select i1 %23, i32 %size, i32 %24
  %25 = sext i32 %13 to i64
  %26 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 3
  %27 = load i8** %26, align 8
  %28 = getelementptr inbounds i8* %27, i64 %25
  %29 = sext i32 %rc.0 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %buf, i8* %28, i64 %29, i32 1, i1 false)
  %30 = load i32* %12, align 8
  %31 = add nsw i32 %30, %rc.0
  store i32 %31, i32* %12, align 8
  %32 = load i32* @dbglvl, align 4
  %33 = icmp sgt i32 %32, 4
  br i1 %33, label %34, label %36

; <label>:34                                      ; preds = %21
  %35 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str11, i64 0, i64 0), i32 %rc.0) #2
  br label %36

; <label>:36                                      ; preds = %34, %21, %20, %17
  %.0 = phi i32 [ -1, %20 ], [ -1, %17 ], [ %rc.0, %34 ], [ %rc.0, %21 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @spec_fread(i8* %buf, i32 %size, i32 %num, i32 %fd) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str12, i64 0, i64 0), i8* %buf, i32 %size, i32 %num, i32 %fd) #2
  br label %5

; <label>:5                                       ; preds = %3, %0
  %6 = icmp sgt i32 %fd, 3
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %5
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([35 x i8]* @.str13, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:10                                      ; preds = %5
  %11 = sext i32 %fd to i64
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 2
  %13 = load i32* %12, align 8
  %14 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 1
  %15 = load i32* %14, align 4
  %16 = icmp sgt i32 %15, %13
  br i1 %16, label %21, label %17

; <label>:17                                      ; preds = %10
  %18 = load i32* @dbglvl, align 4
  %19 = icmp sgt i32 %18, 4
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %17
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([4 x i8]* @str39, i64 0, i64 0))
  br label %41

; <label>:21                                      ; preds = %10
  %22 = mul nsw i32 %num, %size
  %23 = add nsw i32 %13, %22
  %24 = icmp slt i32 %23, %15
  br i1 %24, label %28, label %25

; <label>:25                                      ; preds = %21
  %26 = sub nsw i32 %15, %13
  %27 = sdiv i32 %26, %size
  br label %28

; <label>:28                                      ; preds = %25, %21
  %rc.0 = phi i32 [ %27, %25 ], [ %num, %21 ]
  %29 = sext i32 %13 to i64
  %30 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 3
  %31 = load i8** %30, align 8
  %32 = getelementptr inbounds i8* %31, i64 %29
  %33 = sext i32 %rc.0 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %buf, i8* %32, i64 %33, i32 1, i1 false)
  %34 = mul nsw i32 %rc.0, %size
  %35 = load i32* %12, align 8
  %36 = add nsw i32 %35, %34
  store i32 %36, i32* %12, align 8
  %37 = load i32* @dbglvl, align 4
  %38 = icmp sgt i32 %37, 4
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %28
  %40 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str11, i64 0, i64 0), i32 %34) #2
  br label %41

; <label>:41                                      ; preds = %39, %28, %20, %17
  %.0 = phi i32 [ -1, %20 ], [ -1, %17 ], [ %rc.0, %39 ], [ %rc.0, %28 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @spec_getc(i32 %fd) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str14, i64 0, i64 0), i32 %fd) #2
  br label %5

; <label>:5                                       ; preds = %3, %0
  %6 = icmp sgt i32 %fd, 3
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %5
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([34 x i8]* @.str9, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:10                                      ; preds = %5
  %11 = sext i32 %fd to i64
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 2
  %13 = load i32* %12, align 8
  %14 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 1
  %15 = load i32* %14, align 4
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %21, label %17

; <label>:17                                      ; preds = %10
  %18 = load i32* @dbglvl, align 4
  %19 = icmp sgt i32 %18, 4
  br i1 %19, label %20, label %33

; <label>:20                                      ; preds = %17
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([4 x i8]* @str39, i64 0, i64 0))
  br label %33

; <label>:21                                      ; preds = %10
  %22 = add nsw i32 %13, 1
  store i32 %22, i32* %12, align 8
  %23 = sext i32 %13 to i64
  %24 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 3
  %25 = load i8** %24, align 8
  %26 = getelementptr inbounds i8* %25, i64 %23
  %27 = load i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = load i32* @dbglvl, align 4
  %30 = icmp sgt i32 %29, 4
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %21
  %32 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str11, i64 0, i64 0), i32 %28) #2
  br label %33

; <label>:33                                      ; preds = %31, %21, %20, %17
  %.0 = phi i32 [ -1, %20 ], [ -1, %17 ], [ %28, %31 ], [ %28, %21 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @spec_ungetc(i8 zeroext %ch, i32 %fd) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str15, i64 0, i64 0), i32 %fd) #2
  br label %5

; <label>:5                                       ; preds = %3, %0
  %6 = icmp sgt i32 %fd, 3
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %5
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([34 x i8]* @.str9, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:10                                      ; preds = %5
  %11 = sext i32 %fd to i64
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 2
  %13 = load i32* %12, align 8
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %10
  %16 = load %struct._IO_FILE** @stderr, align 8
  %17 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([26 x i8]* @.str16, i64 0, i64 0), i32 %13) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:18                                      ; preds = %10
  %19 = add nsw i32 %13, -1
  store i32 %19, i32* %12, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 3
  %22 = load i8** %21, align 8
  %23 = getelementptr inbounds i8* %22, i64 %20
  %24 = load i8* %23, align 1
  %25 = zext i8 %ch to i32
  %26 = icmp eq i8 %24, %ch
  br i1 %26, label %30, label %27

; <label>:27                                      ; preds = %18
  %28 = load %struct._IO_FILE** @stderr, align 8
  %29 = tail call i64 @fwrite(i8* getelementptr inbounds ([72 x i8]* @.str17, i64 0, i64 0), i64 71, i64 1, %struct._IO_FILE* %28) #13
  tail call void @exit(i32 0) #10
  unreachable

; <label>:30                                      ; preds = %18
  %31 = load i32* @dbglvl, align 4
  %32 = icmp sgt i32 %31, 4
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %30
  %34 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str11, i64 0, i64 0), i32 0) #2
  br label %35

; <label>:35                                      ; preds = %33, %30
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define i32 @spec_rewind(i32 %fd) #0 {
  %1 = sext i32 %fd to i64
  %2 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %1, i32 2
  store i32 0, i32* %2, align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @spec_reset(i32 %fd) #0 {
  %1 = sext i32 %fd to i64
  %2 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %1, i32 3
  %3 = load i8** %2, align 8
  %4 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %1, i32 1
  %5 = load i32* %4, align 4
  %6 = sext i32 %5 to i64
  tail call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 %6, i32 1, i1 false)
  store i32 0, i32* %4, align 4
  %7 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %1, i32 2
  store i32 0, i32* %7, align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @spec_write(i32 %fd, i8* %buf, i32 %size) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str18, i64 0, i64 0), i32 %fd, i8* %buf, i32 %size) #2
  br label %5

; <label>:5                                       ; preds = %3, %0
  %6 = icmp sgt i32 %fd, 3
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %5
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([35 x i8]* @.str19, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:10                                      ; preds = %5
  %11 = sext i32 %fd to i64
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 2
  %13 = load i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 3
  %16 = load i8** %15, align 8
  %17 = getelementptr inbounds i8* %16, i64 %14
  %18 = sext i32 %size to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %buf, i64 %18, i32 1, i1 false)
  %19 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 1
  %20 = load i32* %19, align 4
  %21 = add nsw i32 %20, %size
  store i32 %21, i32* %19, align 4
  %22 = load i32* %12, align 8
  %23 = add nsw i32 %22, %size
  store i32 %23, i32* %12, align 8
  %24 = load i32* @dbglvl, align 4
  %25 = icmp sgt i32 %24, 4
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %10
  %27 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str11, i64 0, i64 0), i32 %size) #2
  br label %28

; <label>:28                                      ; preds = %26, %10
  ret i32 %size
}

; Function Attrs: nounwind uwtable
define i32 @spec_fwrite(i8* %buf, i32 %size, i32 %num, i32 %fd) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str20, i64 0, i64 0), i8* %buf, i32 %size, i32 %num, i32 %fd) #2
  br label %5

; <label>:5                                       ; preds = %3, %0
  %6 = icmp sgt i32 %fd, 3
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %5
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([36 x i8]* @.str21, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:10                                      ; preds = %5
  %11 = sext i32 %fd to i64
  %12 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 2
  %13 = load i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 3
  %16 = load i8** %15, align 8
  %17 = getelementptr inbounds i8* %16, i64 %14
  %18 = mul nsw i32 %num, %size
  %19 = sext i32 %18 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %buf, i64 %19, i32 1, i1 false)
  %20 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %11, i32 1
  %21 = load i32* %20, align 4
  %22 = add nsw i32 %21, %18
  store i32 %22, i32* %20, align 4
  %23 = load i32* %12, align 8
  %24 = add nsw i32 %23, %18
  store i32 %24, i32* %12, align 8
  %25 = load i32* @dbglvl, align 4
  %26 = icmp sgt i32 %25, 4
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %10
  %28 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str11, i64 0, i64 0), i32 %num) #2
  br label %29

; <label>:29                                      ; preds = %27, %10
  ret i32 %num
}

; Function Attrs: nounwind uwtable
define i32 @spec_putc(i8 zeroext %ch, i32 %fd) #0 {
  %1 = load i32* @dbglvl, align 4
  %2 = icmp sgt i32 %1, 4
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = zext i8 %ch to i32
  %5 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str22, i64 0, i64 0), i32 %4, i32 %fd) #2
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = icmp sgt i32 %fd, 3
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = load %struct._IO_FILE** @stderr, align 8
  %10 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([35 x i8]* @.str19, i64 0, i64 0), i32 %fd) #12
  tail call void @exit(i32 0) #10
  unreachable

; <label>:11                                      ; preds = %6
  %12 = sext i32 %fd to i64
  %13 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %12, i32 2
  %14 = load i32* %13, align 8
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = sext i32 %14 to i64
  %17 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %12, i32 3
  %18 = load i8** %17, align 8
  %19 = getelementptr inbounds i8* %18, i64 %16
  store i8 %ch, i8* %19, align 1
  %20 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %12, i32 1
  %21 = load i32* %20, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %20, align 4
  %23 = zext i8 %ch to i32
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) #0 {
  store i64 10, i64* @seedi, align 8
  %1 = icmp sgt i32 %argc, 1
  br i1 %1, label %2, label %.thread5

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds i8** %argv, i64 1
  %4 = load i8** %3, align 8
  %5 = icmp sgt i32 %argc, 2
  br i1 %5, label %6, label %.thread5

; <label>:6                                       ; preds = %2
  %7 = getelementptr inbounds i8** %argv, i64 2
  %8 = load i8** %7, align 8
  %9 = tail call i64 @strtol(i8* nocapture %8, i8** null, i32 10) #2
  %10 = trunc i64 %9 to i32
  %11 = icmp sgt i32 %argc, 3
  br i1 %11, label %12, label %.thread5

; <label>:12                                      ; preds = %6
  %13 = getelementptr inbounds i8** %argv, i64 3
  %14 = load i8** %13, align 8
  %15 = tail call i64 @strtol(i8* nocapture %14, i8** null, i32 10) #2
  %16 = trunc i64 %15 to i32
  br label %.thread5

.thread5:                                         ; preds = %12, %6, %2, %0
  %input_size.07 = phi i32 [ %10, %12 ], [ %10, %6 ], [ 64, %2 ], [ 64, %0 ]
  %input_name.046 = phi i8* [ %4, %12 ], [ %4, %6 ], [ %4, %2 ], [ getelementptr inbounds ([15 x i8]* @.str23, i64 0, i64 0), %0 ]
  %compressed_size.0 = phi i32 [ %16, %12 ], [ %10, %6 ], [ 64, %2 ], [ 64, %0 ]
  %17 = shl nsw i32 %input_size.07, 20
  store i32 %17, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 0), align 16
  %18 = shl nsw i32 %compressed_size.0, 20
  store i32 %18, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 0), align 8
  store i32 %17, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 2, i32 0), align 16
  %19 = load i32* @dbglvl, align 4
  %20 = icmp sgt i32 %19, 3
  br i1 %20, label %21, label %.preheader2.i.preheader

; <label>:21                                      ; preds = %.thread5
  %puts1.i = tail call i32 @puts(i8* getelementptr inbounds ([10 x i8]* @str34, i64 0, i64 0)) #2
  br label %.preheader2.i.preheader

.preheader2.i.preheader:                          ; preds = %21, %.thread5
  br label %.preheader2.i

.preheader2.i:                                    ; preds = %._crit_edge.i, %.preheader2.i.preheader
  %indvars.iv5.i = phi i64 [ %indvars.iv.next6.i, %._crit_edge.i ], [ 0, %.preheader2.i.preheader ]
  %22 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %indvars.iv5.i
  %23 = getelementptr inbounds %struct.spec_fd_t* %22, i64 0, i32 0
  %24 = load i32* %23, align 8
  %25 = bitcast %struct.spec_fd_t* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 24, i32 8, i1 false) #2
  store i32 %24, i32* %23, align 8
  %26 = add nsw i32 %24, 1048576
  %27 = sext i32 %26 to i64
  %28 = tail call noalias i8* @malloc(i64 %27) #2
  %29 = getelementptr inbounds [3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 %indvars.iv5.i, i32 3
  store i8* %28, i8** %29, align 8
  %30 = icmp eq i8* %28, null
  br i1 %30, label %33, label %.preheader.i

.preheader.i:                                     ; preds = %.preheader2.i
  %31 = icmp sgt i32 %24, 0
  br i1 %31, label %.lr.ph.i.preheader, label %._crit_edge.i

.lr.ph.i.preheader:                               ; preds = %.preheader.i
  store i8 0, i8* %28, align 1
  %32 = icmp sgt i32 %24, 1024
  br i1 %32, label %._crit_edge7.i.preheader, label %._crit_edge.i

._crit_edge7.i.preheader:                         ; preds = %.lr.ph.i.preheader
  br label %._crit_edge7.i

; <label>:33                                      ; preds = %.preheader2.i
  %puts.i = tail call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @str, i64 0, i64 0)) #2
  tail call void @exit(i32 0) #10
  unreachable

._crit_edge7.i:                                   ; preds = %._crit_edge7.i.._crit_edge7.i_crit_edge, %._crit_edge7.i.preheader
  %.pre.i = phi i8* [ %.pre.i.pre, %._crit_edge7.i.._crit_edge7.i_crit_edge ], [ %28, %._crit_edge7.i.preheader ]
  %indvars.iv.next.i15 = phi i64 [ %indvars.iv.next.i, %._crit_edge7.i.._crit_edge7.i_crit_edge ], [ 1024, %._crit_edge7.i.preheader ]
  %34 = getelementptr inbounds i8* %.pre.i, i64 %indvars.iv.next.i15
  store i8 0, i8* %34, align 1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i15, 1024
  %35 = trunc i64 %indvars.iv.next.i to i32
  %36 = icmp slt i32 %35, %24
  br i1 %36, label %._crit_edge7.i.._crit_edge7.i_crit_edge, label %._crit_edge.i.loopexit

._crit_edge7.i.._crit_edge7.i_crit_edge:          ; preds = %._crit_edge7.i
  %.pre.i.pre = load i8** %29, align 8
  br label %._crit_edge7.i

._crit_edge.i.loopexit:                           ; preds = %._crit_edge7.i
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %.lr.ph.i.preheader, %.preheader.i
  %indvars.iv.next6.i = add nuw nsw i64 %indvars.iv5.i, 1
  %37 = trunc i64 %indvars.iv.next6.i to i32
  %38 = icmp slt i32 %37, 3
  br i1 %38, label %.preheader2.i, label %spec_init.exit

spec_init.exit:                                   ; preds = %._crit_edge.i
  %39 = load i32* @dbglvl, align 4
  %40 = icmp sgt i32 %39, 2
  br i1 %40, label %41, label %42

; <label>:41                                      ; preds = %spec_init.exit
  %puts3 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8]* @str43, i64 0, i64 0))
  br label %42

; <label>:42                                      ; preds = %41, %spec_init.exit
  %43 = tail call i32 @spec_load(i32 0, i8* %input_name.046, i32 %17)
  %44 = load i32* @dbglvl, align 4
  %45 = icmp sgt i32 %44, 3
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %42
  %47 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  %48 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str25, i64 0, i64 0), i32 %47) #2
  br label %49

; <label>:49                                      ; preds = %46, %42
  %50 = sdiv i32 %17, 1024
  %51 = sext i32 %50 to i64
  %52 = tail call noalias i8* @malloc(i64 %51) #2
  %53 = icmp eq i8* %52, null
  br i1 %53, label %69, label %.preheader8

.preheader8:                                      ; preds = %49
  %54 = icmp sgt i32 %input_size.07, 0
  br i1 %54, label %.lr.ph13, label %._crit_edge14.thread

._crit_edge14.thread:                             ; preds = %.preheader8
  store i8 0, i8* @smallMode, align 1
  store i32 0, i32* @verbosity, align 4
  store i32 9, i32* @blockSize100k, align 4
  store i32 30, i32* @workFactor, align 4
  br label %..split_crit_edge.preheader

.lr.ph13:                                         ; preds = %.preheader8
  %55 = load i8** getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 3), align 16
  %56 = mul i32 %input_size.07, 1048576
  %57 = icmp sgt i32 %56, 1027
  %smax = select i1 %57, i32 %56, i32 1027
  %58 = add i32 %smax, -1
  %59 = udiv i32 %58, 1027
  %60 = add i32 %59, 1
  %xtraiter = and i32 %60, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %60, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %61, label %.lr.ph13.split

; <label>:61                                      ; preds = %.lr.ph13
  %62 = getelementptr inbounds i8* %55, i64 0
  %63 = load i8* %62, align 1
  %64 = getelementptr inbounds i8* %52, i64 0
  store i8 %63, i8* %64, align 1
  %indvars.iv.next17.unr = add nuw nsw i64 0, 1
  %65 = mul nsw i64 %indvars.iv.next17.unr, 1027
  %66 = trunc i64 %65 to i32
  %67 = icmp slt i32 %66, %17
  %indvars.iv.next.unr = add nuw nsw i64 0, 1027
  br label %.lr.ph13.split

.lr.ph13.split:                                   ; preds = %61, %.lr.ph13
  %indvars.iv16.unr = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next17.unr, %61 ]
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next.unr, %61 ]
  %68 = icmp ult i32 %60, 2
  br i1 %68, label %._crit_edge14, label %.lr.ph13.split.split

.lr.ph13.split.split:                             ; preds = %.lr.ph13.split
  br label %70

; <label>:69                                      ; preds = %49
  %puts2 = tail call i32 @puts(i8* getelementptr inbounds ([30 x i8]* @str42, i64 0, i64 0))
  tail call void @exit(i32 0) #10
  unreachable

; <label>:70                                      ; preds = %70, %.lr.ph13.split.split
  %indvars.iv16 = phi i64 [ %indvars.iv16.unr, %.lr.ph13.split.split ], [ %indvars.iv.next17.1, %70 ]
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph13.split.split ], [ %indvars.iv.next.1, %70 ]
  %71 = getelementptr inbounds i8* %55, i64 %indvars.iv
  %72 = load i8* %71, align 1
  %73 = getelementptr inbounds i8* %52, i64 %indvars.iv16
  store i8 %72, i8* %73, align 1
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %74 = mul nsw i64 %indvars.iv.next17, 1027
  %75 = trunc i64 %74 to i32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1027
  %76 = getelementptr inbounds i8* %55, i64 %indvars.iv.next
  %77 = load i8* %76, align 1
  %78 = getelementptr inbounds i8* %52, i64 %indvars.iv.next17
  store i8 %77, i8* %78, align 1
  %indvars.iv.next17.1 = add nuw nsw i64 %indvars.iv.next17, 1
  %79 = mul nsw i64 %indvars.iv.next17.1, 1027
  %80 = trunc i64 %79 to i32
  %81 = icmp slt i32 %80, %17
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1027
  br i1 %81, label %70, label %._crit_edge14.unr-lcssa

._crit_edge14.unr-lcssa:                          ; preds = %70
  br label %._crit_edge14

._crit_edge14:                                    ; preds = %._crit_edge14.unr-lcssa, %.lr.ph13.split
  store i8 0, i8* @smallMode, align 1
  store i32 0, i32* @verbosity, align 4
  store i32 9, i32* @blockSize100k, align 4
  store i32 30, i32* @workFactor, align 4
  br i1 %54, label %.split.us.preheader, label %..split_crit_edge.preheader

..split_crit_edge.preheader:                      ; preds = %._crit_edge14, %._crit_edge14.thread
  br label %..split_crit_edge

.split.us.preheader:                              ; preds = %._crit_edge14
  br label %.split.us

.split.us:                                        ; preds = %114, %.split.us.preheader
  %level.010.us = phi i32 [ %118, %114 ], [ 5, %.split.us.preheader ]
  %82 = load i32* @dbglvl, align 4
  %83 = icmp sgt i32 %82, 2
  br i1 %83, label %84, label %86

; <label>:84                                      ; preds = %.split.us
  %85 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str27, i64 0, i64 0), i32 %level.010.us) #2
  br label %86

; <label>:86                                      ; preds = %84, %.split.us
  store i32 %level.010.us, i32* @blockSize100k, align 4
  tail call void @compressStream(i32 0, i32 1) #2
  %87 = load i32* @dbglvl, align 4
  %88 = icmp sgt i32 %87, 3
  br i1 %88, label %89, label %92

; <label>:89                                      ; preds = %86
  %90 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 1), align 4
  %91 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str28, i64 0, i64 0), i32 %90) #2
  br label %92

; <label>:92                                      ; preds = %89, %86
  %93 = load i8** getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 3), align 16
  %94 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  %95 = sext i32 %94 to i64
  tail call void @llvm.memset.p0i8.i64(i8* %93, i8 0, i64 %95, i32 1, i1 false) #2
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 2), align 8
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 2), align 8
  %96 = load i32* @dbglvl, align 4
  %97 = icmp sgt i32 %96, 2
  br i1 %97, label %98, label %99

; <label>:98                                      ; preds = %92
  %puts1.us = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8]* @str41, i64 0, i64 0))
  br label %99

; <label>:99                                      ; preds = %98, %92
  store i32 0, i32* @blockSize100k, align 4
  %100 = tail call zeroext i8 @uncompressStream(i32 1, i32 0) #2
  %101 = load i32* @dbglvl, align 4
  %102 = icmp sgt i32 %101, 3
  br i1 %102, label %103, label %.lr.ph.us

; <label>:103                                     ; preds = %99
  %104 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  %105 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([38 x i8]* @.str30, i64 0, i64 0), i32 %104) #2
  br label %.lr.ph.us

; <label>:106                                     ; preds = %120
  %107 = mul nsw i64 %indvars.iv.next19, 1027
  %108 = trunc i64 %107 to i32
  %109 = icmp slt i32 %108, %17
  br i1 %109, label %120, label %110

; <label>:110                                     ; preds = %106
  %111 = load i32* @dbglvl, align 4
  %112 = icmp sgt i32 %111, 3
  br i1 %112, label %113, label %114

; <label>:113                                     ; preds = %110
  %puts.us = tail call i32 @puts(i8* getelementptr inbounds ([37 x i8]* @str40, i64 0, i64 0))
  br label %114

; <label>:114                                     ; preds = %113, %110
  %115 = load i8** getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 3), align 8
  %116 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 1), align 4
  %117 = sext i32 %116 to i64
  tail call void @llvm.memset.p0i8.i64(i8* %115, i8 0, i64 %117, i32 1, i1 false) #2
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 1), align 4
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 2), align 8
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 2), align 8
  %118 = add nsw i32 %level.010.us, 2
  %119 = icmp slt i32 %118, 10
  br i1 %119, label %.split.us, label %.us-lcssa.us.loopexit

; <label>:120                                     ; preds = %.lr.ph.us, %106
  %indvars.iv18 = phi i64 [ 0, %.lr.ph.us ], [ %indvars.iv.next19, %106 ]
  %121 = phi i64 [ 0, %.lr.ph.us ], [ %107, %106 ]
  %122 = getelementptr inbounds i8* %52, i64 %indvars.iv18
  %123 = load i8* %122, align 1
  %sext = shl i64 %121, 32
  %124 = ashr exact i64 %sext, 32
  %125 = getelementptr inbounds i8* %128, i64 %124
  %126 = load i8* %125, align 1
  %127 = icmp eq i8 %123, %126
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  br i1 %127, label %106, label %.us-lcssa11.us

.lr.ph.us:                                        ; preds = %103, %99
  %128 = load i8** getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 3), align 16
  br label %120

..split_crit_edge:                                ; preds = %.preheader.thread, %..split_crit_edge.preheader
  %level.010 = phi i32 [ %158, %.preheader.thread ], [ 5, %..split_crit_edge.preheader ]
  %129 = load i32* @dbglvl, align 4
  %130 = icmp sgt i32 %129, 2
  br i1 %130, label %131, label %133

; <label>:131                                     ; preds = %..split_crit_edge
  %132 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str27, i64 0, i64 0), i32 %level.010) #2
  br label %133

; <label>:133                                     ; preds = %131, %..split_crit_edge
  store i32 %level.010, i32* @blockSize100k, align 4
  tail call void @compressStream(i32 0, i32 1) #2
  %134 = load i32* @dbglvl, align 4
  %135 = icmp sgt i32 %134, 3
  br i1 %135, label %136, label %139

; <label>:136                                     ; preds = %133
  %137 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 1), align 4
  %138 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str28, i64 0, i64 0), i32 %137) #2
  br label %139

; <label>:139                                     ; preds = %136, %133
  %140 = load i8** getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 3), align 16
  %141 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  %142 = sext i32 %141 to i64
  tail call void @llvm.memset.p0i8.i64(i8* %140, i8 0, i64 %142, i32 1, i1 false) #2
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 2), align 8
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 2), align 8
  %143 = load i32* @dbglvl, align 4
  %144 = icmp sgt i32 %143, 2
  br i1 %144, label %145, label %146

; <label>:145                                     ; preds = %139
  %puts1 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8]* @str41, i64 0, i64 0))
  br label %146

; <label>:146                                     ; preds = %145, %139
  store i32 0, i32* @blockSize100k, align 4
  %147 = tail call zeroext i8 @uncompressStream(i32 1, i32 0) #2
  %148 = load i32* @dbglvl, align 4
  %149 = icmp sgt i32 %148, 3
  br i1 %149, label %.preheader, label %.preheader.thread

.us-lcssa11.us:                                   ; preds = %120
  %150 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([35 x i8]* @.str31, i64 0, i64 0), i32 %input_size.07) #2
  tail call void @exit(i32 0) #10
  unreachable

.preheader:                                       ; preds = %146
  %151 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 1), align 4
  %152 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([38 x i8]* @.str30, i64 0, i64 0), i32 %151) #2
  %.pr = load i32* @dbglvl, align 4
  %153 = icmp sgt i32 %.pr, 3
  br i1 %153, label %154, label %.preheader.thread

; <label>:154                                     ; preds = %.preheader
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([37 x i8]* @str40, i64 0, i64 0))
  br label %.preheader.thread

.preheader.thread:                                ; preds = %154, %.preheader, %146
  %155 = load i8** getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 3), align 8
  %156 = load i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 1), align 4
  %157 = sext i32 %156 to i64
  tail call void @llvm.memset.p0i8.i64(i8* %155, i8 0, i64 %157, i32 1, i1 false) #2
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 1), align 4
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 1, i32 2), align 8
  store i32 0, i32* getelementptr inbounds ([3 x %struct.spec_fd_t]* @spec_fd, i64 0, i64 0, i32 2), align 8
  %158 = add nsw i32 %level.010, 2
  %159 = icmp slt i32 %158, 10
  br i1 %159, label %..split_crit_edge, label %.us-lcssa.us.loopexit22

.us-lcssa.us.loopexit:                            ; preds = %114
  br label %.us-lcssa.us

.us-lcssa.us.loopexit22:                          ; preds = %.preheader.thread
  br label %.us-lcssa.us

.us-lcssa.us:                                     ; preds = %.us-lcssa.us.loopexit22, %.us-lcssa.us.loopexit
  %160 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str33, i64 0, i64 0), i32 %input_size.07) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define void @spec_compress(i32 %in, i32 %out, i32 %lev) #0 {
  store i32 %lev, i32* @blockSize100k, align 4
  tail call void @compressStream(i32 %in, i32 %out) #2
  ret void
}

; Function Attrs: nounwind uwtable
define void @spec_uncompress(i32 %in, i32 %out, i32 %lev) #0 {
  store i32 0, i32* @blockSize100k, align 4
  %1 = tail call zeroext i8 @uncompressStream(i32 %in, i32 %out) #2
  ret void
}

; Function Attrs: nounwind uwtable
define void @spec_initbufs() #0 {
  store i8 0, i8* @smallMode, align 1
  store i32 0, i32* @verbosity, align 4
  store i32 9, i32* @blockSize100k, align 4
  store i32 30, i32* @workFactor, align 4
  ret void
}

; Function Attrs: nounwind readnone uwtable
define i32 @debug_time() #6 {
  ret i32 0
}

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) #1

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind uwtable
define void @BZ2_blockSort(%struct.EState* nocapture %s) #0 {
  %stackLo.i.i = alloca [100 x i32], align 16
  %stackHi.i.i = alloca [100 x i32], align 16
  %stackD.i.i = alloca [100 x i32], align 16
  %runningOrder.i = alloca [256 x i32], align 16
  %bigDone.i = alloca [256 x i8], align 16
  %copyStart.i = alloca [256 x i32], align 16
  %copyEnd.i = alloca [256 x i32], align 16
  %budget = alloca i32, align 4
  %1 = getelementptr inbounds %struct.EState* %s, i64 0, i32 8
  %2 = load i32** %1, align 8
  %3 = getelementptr inbounds %struct.EState* %s, i64 0, i32 9
  %4 = load i8** %3, align 8
  %5 = getelementptr inbounds %struct.EState* %s, i64 0, i32 6
  %6 = load i32** %5, align 8
  %7 = getelementptr inbounds %struct.EState* %s, i64 0, i32 17
  %8 = load i32* %7, align 4
  %9 = getelementptr inbounds %struct.EState* %s, i64 0, i32 28
  %10 = load i32* %9, align 4
  %11 = getelementptr inbounds %struct.EState* %s, i64 0, i32 12
  %12 = load i32* %11, align 4
  %13 = icmp slt i32 %8, 10000
  br i1 %13, label %14, label %19

; <label>:14                                      ; preds = %0
  %15 = getelementptr inbounds %struct.EState* %s, i64 0, i32 4
  %16 = load i32** %15, align 8
  %17 = getelementptr inbounds %struct.EState* %s, i64 0, i32 5
  %18 = load i32** %17, align 8
  tail call fastcc void @fallbackSort(i32* %16, i32* %18, i32* %6, i32 %8, i32 %10)
  br label %962

; <label>:19                                      ; preds = %0
  %20 = add nsw i32 %8, 34
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = add nsw i32 %8, 35
  %. = select i1 %22, i32 %20, i32 %23
  %24 = sext i32 %. to i64
  %25 = getelementptr inbounds i8* %4, i64 %24
  %26 = bitcast i8* %25 to i16*
  %27 = icmp slt i32 %12, 1
  %wfact.0 = select i1 %27, i32 1, i32 %12
  %28 = icmp sgt i32 %wfact.0, 100
  %wfact.0.op = add i32 %wfact.0, -1
  %wfact.0.op.op = sdiv i32 %wfact.0.op, 3
  %29 = select i1 %28, i32 33, i32 %wfact.0.op.op
  %30 = mul nsw i32 %29, %8
  store i32 %30, i32* %budget, align 4
  %bigDone186.i = getelementptr inbounds [256 x i8]* %bigDone.i, i64 0, i64 0
  %31 = bitcast [256 x i32]* %runningOrder.i to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %31) #2
  call void @llvm.lifetime.start(i64 256, i8* %bigDone186.i) #2
  %32 = bitcast [256 x i32]* %copyStart.i to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %32) #2
  %33 = bitcast [256 x i32]* %copyEnd.i to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %33) #2
  %34 = icmp sgt i32 %10, 3
  br i1 %34, label %35, label %vector.body.preheader

; <label>:35                                      ; preds = %19
  %36 = load %struct._IO_FILE** @stderr, align 8
  %37 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8]* @.str2, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %36) #12
  br label %vector.body.preheader

vector.body.preheader:                            ; preds = %35, %19
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader
  %index = phi i64 [ 0, %vector.body.preheader ], [ %index.next.1, %vector.body ]
  %reverse.idx = sub i64 65536, %index
  %.sum = add i64 %reverse.idx, -3
  %38 = getelementptr i32* %6, i64 %.sum
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %39, align 4
  %.sum336 = add i64 %reverse.idx, -7
  %40 = getelementptr i32* %6, i64 %.sum336
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %41, align 4
  %index.next = add i64 %index, 8
  %reverse.idx.1 = sub i64 65536, %index.next
  %.sum.1 = add i64 %reverse.idx.1, -3
  %42 = getelementptr i32* %6, i64 %.sum.1
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %43, align 4
  %.sum336.1 = add i64 %reverse.idx.1, -7
  %44 = getelementptr i32* %6, i64 %.sum336.1
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %45, align 4
  %index.next.1 = add i64 %index.next, 8
  %46 = icmp eq i64 %index.next.1, 65536
  br i1 %46, label %.preheader12.i.preheader, label %vector.body, !llvm.loop !1

.preheader12.i.preheader:                         ; preds = %vector.body
  br label %.preheader12.i

.preheader12.i:                                   ; preds = %.preheader12.i.preheader
  store i32 0, i32* %6, align 4
  %47 = load i8* %4, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 8
  %50 = add i32 %8, -1
  %51 = icmp sgt i32 %50, 2
  br i1 %51, label %.lr.ph99.i, label %.preheader11.i

.lr.ph99.i:                                       ; preds = %.preheader12.i
  %52 = sext i32 %50 to i64
  %53 = add i32 %8, -4
  br label %59

..preheader11_crit_edge.i:                        ; preds = %59
  %.lcssa389 = phi i32 [ %102, %59 ]
  %54 = and i32 %53, -4
  %55 = add i32 %8, -5
  %56 = sub i32 %55, %54
  br label %.preheader11.i

.preheader11.i:                                   ; preds = %..preheader11_crit_edge.i, %.preheader12.i
  %i.1.lcssa.i = phi i32 [ %56, %..preheader11_crit_edge.i ], [ %50, %.preheader12.i ]
  %j.0.lcssa.i = phi i32 [ %.lcssa389, %..preheader11_crit_edge.i ], [ %49, %.preheader12.i ]
  %57 = icmp sgt i32 %i.1.lcssa.i, -1
  br i1 %57, label %.lr.ph95.i, label %.preheader10.i

.lr.ph95.i:                                       ; preds = %.preheader11.i
  %58 = sext i32 %i.1.lcssa.i to i64
  br label %149

; <label>:59                                      ; preds = %59, %.lr.ph99.i
  %indvars.iv200.i = phi i64 [ %52, %.lr.ph99.i ], [ %indvars.iv.next201.i, %59 ]
  %i.197.i = phi i32 [ %50, %.lr.ph99.i ], [ %107, %59 ]
  %j.096.i = phi i32 [ %49, %.lr.ph99.i ], [ %102, %59 ]
  %60 = getelementptr inbounds i16* %26, i64 %indvars.iv200.i
  store i16 0, i16* %60, align 2
  %61 = ashr i32 %j.096.i, 8
  %62 = getelementptr inbounds i8* %4, i64 %indvars.iv200.i
  %63 = load i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw nsw i32 %64, 8
  %66 = or i32 %65, %61
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32* %6, i64 %67
  %69 = load i32* %68, align 4
  %70 = add i32 %69, 1
  store i32 %70, i32* %68, align 4
  %71 = add nsw i64 %indvars.iv200.i, -1
  %72 = getelementptr inbounds i16* %26, i64 %71
  store i16 0, i16* %72, align 2
  %73 = ashr i32 %66, 8
  %74 = getelementptr inbounds i8* %4, i64 %71
  %75 = load i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 8
  %78 = or i32 %73, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32* %6, i64 %79
  %81 = load i32* %80, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* %80, align 4
  %83 = add nsw i64 %indvars.iv200.i, -2
  %84 = getelementptr inbounds i16* %26, i64 %83
  store i16 0, i16* %84, align 2
  %85 = ashr i32 %78, 8
  %86 = getelementptr inbounds i8* %4, i64 %83
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = shl nuw nsw i32 %88, 8
  %90 = or i32 %85, %89
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32* %6, i64 %91
  %93 = load i32* %92, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %92, align 4
  %95 = add nsw i64 %indvars.iv200.i, -3
  %96 = getelementptr inbounds i16* %26, i64 %95
  store i16 0, i16* %96, align 2
  %97 = ashr i32 %90, 8
  %98 = getelementptr inbounds i8* %4, i64 %95
  %99 = load i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 8
  %102 = or i32 %97, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32* %6, i64 %103
  %105 = load i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  %107 = add nsw i32 %i.197.i, -4
  %108 = icmp sgt i32 %107, 2
  %indvars.iv.next201.i = add nsw i64 %indvars.iv200.i, -4
  br i1 %108, label %59, label %..preheader11_crit_edge.i

.preheader10.i.loopexit:                          ; preds = %149
  br label %.preheader10.i

.preheader10.i:                                   ; preds = %.preheader10.i.loopexit, %.preheader11.i
  %109 = sext i32 %8 to i64
  %110 = sext i32 %8 to i64
  %scevgep = getelementptr i8* %4, i64 %110
  %111 = add nsw i64 %110, 33
  %scevgep188 = getelementptr i8* %4, i64 %111
  %112 = shl nsw i64 %110, 1
  %113 = sext i32 %. to i64
  %114 = add nsw i64 %112, %113
  %scevgep189 = getelementptr i8* %4, i64 %114
  %115 = add nsw i64 %114, 66
  %scevgep190 = getelementptr i8* %4, i64 %115
  %scevgep191 = getelementptr i8* %4, i64 33
  %bound0 = icmp ule i8* %scevgep, %scevgep190
  %bound1 = icmp ule i8* %scevgep189, %scevgep188
  %found.conflict = and i1 %bound0, %bound1
  %bound0192 = icmp ule i8* %scevgep, %scevgep191
  %bound1193 = icmp ule i8* %4, %scevgep188
  %found.conflict194 = and i1 %bound0192, %bound1193
  %conflict.rdx = or i1 %found.conflict, %found.conflict194
  %bound0195 = icmp ule i8* %scevgep189, %scevgep191
  %bound1196 = icmp ule i8* %4, %scevgep190
  %found.conflict197 = and i1 %bound0195, %bound1196
  %conflict.rdx198 = or i1 %conflict.rdx, %found.conflict197
  br i1 %conflict.rdx198, label %scalar.ph185.preheader, label %vector.body183.preheader

vector.body183.preheader:                         ; preds = %.preheader10.i
  br label %vector.body183

vector.body183:                                   ; preds = %vector.body183.preheader
  %116 = bitcast i8* %4 to <8 x i8>*
  %wide.load = load <8 x i8>* %116, align 1
  %117 = getelementptr inbounds i8* %4, i64 %109
  %118 = bitcast i8* %117 to <8 x i8>*
  store <8 x i8> %wide.load, <8 x i8>* %118, align 1
  %119 = getelementptr inbounds i16* %26, i64 %109
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i8* %4, i64 8
  %122 = bitcast i8* %121 to <8 x i8>*
  %wide.load.1 = load <8 x i8>* %122, align 1
  %123 = add i64 8, %109
  %124 = getelementptr inbounds i8* %4, i64 %123
  %125 = bitcast i8* %124 to <8 x i8>*
  store <8 x i8> %wide.load.1, <8 x i8>* %125, align 1
  %126 = getelementptr inbounds i16* %26, i64 %123
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i8* %4, i64 16
  %129 = bitcast i8* %128 to <8 x i8>*
  %wide.load.2 = load <8 x i8>* %129, align 1
  %130 = add i64 16, %109
  %131 = getelementptr inbounds i8* %4, i64 %130
  %132 = bitcast i8* %131 to <8 x i8>*
  store <8 x i8> %wide.load.2, <8 x i8>* %132, align 1
  %133 = getelementptr inbounds i16* %26, i64 %130
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i8* %4, i64 24
  %136 = bitcast i8* %135 to <8 x i8>*
  %wide.load.3 = load <8 x i8>* %136, align 1
  %137 = add i64 24, %109
  %138 = getelementptr inbounds i8* %4, i64 %137
  %139 = bitcast i8* %138 to <8 x i8>*
  store <8 x i8> %wide.load.3, <8 x i8>* %139, align 1
  %140 = getelementptr inbounds i16* %26, i64 %137
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %141, align 2
  br label %scalar.ph185.preheader

scalar.ph185.preheader:                           ; preds = %vector.body183, %.preheader10.i
  %indvars.iv194.i.ph = phi i64 [ 0, %.preheader10.i ], [ 32, %vector.body183 ]
  %142 = sub i64 34, %indvars.iv194.i.ph
  %xtraiter406 = and i64 %142, 1
  %lcmp.mod407 = icmp ne i64 %xtraiter406, 0
  %lcmp.overflow408 = icmp eq i64 %142, 0
  %lcmp.or409 = or i1 %lcmp.overflow408, %lcmp.mod407
  br i1 %lcmp.or409, label %scalar.ph185.unr, label %scalar.ph185.preheader.split

scalar.ph185.unr:                                 ; preds = %scalar.ph185.preheader
  %143 = getelementptr inbounds i8* %4, i64 %indvars.iv194.i.ph
  %144 = load i8* %143, align 1
  %145 = add nsw i64 %indvars.iv194.i.ph, %109
  %146 = getelementptr inbounds i8* %4, i64 %145
  store i8 %144, i8* %146, align 1
  %147 = getelementptr inbounds i16* %26, i64 %145
  store i16 0, i16* %147, align 2
  %indvars.iv.next195.i.unr = add nuw nsw i64 %indvars.iv194.i.ph, 1
  %exitcond196.i.unr = icmp eq i64 %indvars.iv.next195.i.unr, 34
  br label %scalar.ph185.preheader.split

scalar.ph185.preheader.split:                     ; preds = %scalar.ph185.unr, %scalar.ph185.preheader
  %indvars.iv194.i.unr = phi i64 [ %indvars.iv194.i.ph, %scalar.ph185.preheader ], [ %indvars.iv.next195.i.unr, %scalar.ph185.unr ]
  %148 = icmp ult i64 %142, 2
  br i1 %148, label %173, label %scalar.ph185.preheader.split.split

scalar.ph185.preheader.split.split:               ; preds = %scalar.ph185.preheader.split
  br label %scalar.ph185

; <label>:149                                     ; preds = %149, %.lr.ph95.i
  %indvars.iv198.i = phi i64 [ %58, %.lr.ph95.i ], [ %indvars.iv.next199.i, %149 ]
  %j.193.i = phi i32 [ %j.0.lcssa.i, %.lr.ph95.i ], [ %156, %149 ]
  %150 = getelementptr inbounds i16* %26, i64 %indvars.iv198.i
  store i16 0, i16* %150, align 2
  %151 = ashr i32 %j.193.i, 8
  %152 = getelementptr inbounds i8* %4, i64 %indvars.iv198.i
  %153 = load i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = shl nuw nsw i32 %154, 8
  %156 = or i32 %155, %151
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i32* %6, i64 %157
  %159 = load i32* %158, align 4
  %160 = add i32 %159, 1
  store i32 %160, i32* %158, align 4
  %indvars.iv.next199.i = add nsw i64 %indvars.iv198.i, -1
  %161 = trunc i64 %indvars.iv198.i to i32
  %162 = icmp sgt i32 %161, 0
  br i1 %162, label %149, label %.preheader10.i.loopexit

scalar.ph185:                                     ; preds = %scalar.ph185, %scalar.ph185.preheader.split.split
  %indvars.iv194.i = phi i64 [ %indvars.iv194.i.unr, %scalar.ph185.preheader.split.split ], [ %indvars.iv.next195.i.1, %scalar.ph185 ]
  %163 = getelementptr inbounds i8* %4, i64 %indvars.iv194.i
  %164 = load i8* %163, align 1
  %165 = add nsw i64 %indvars.iv194.i, %109
  %166 = getelementptr inbounds i8* %4, i64 %165
  store i8 %164, i8* %166, align 1
  %167 = getelementptr inbounds i16* %26, i64 %165
  store i16 0, i16* %167, align 2
  %indvars.iv.next195.i = add nuw nsw i64 %indvars.iv194.i, 1
  %168 = getelementptr inbounds i8* %4, i64 %indvars.iv.next195.i
  %169 = load i8* %168, align 1
  %170 = add nsw i64 %indvars.iv.next195.i, %109
  %171 = getelementptr inbounds i8* %4, i64 %170
  store i8 %169, i8* %171, align 1
  %172 = getelementptr inbounds i16* %26, i64 %170
  store i16 0, i16* %172, align 2
  %indvars.iv.next195.i.1 = add nuw nsw i64 %indvars.iv.next195.i, 1
  %exitcond196.i.1 = icmp eq i64 %indvars.iv.next195.i.1, 34
  br i1 %exitcond196.i.1, label %.unr-lcssa, label %scalar.ph185, !llvm.loop !4

.unr-lcssa:                                       ; preds = %scalar.ph185
  br label %173

; <label>:173                                     ; preds = %.unr-lcssa, %scalar.ph185.preheader.split
  br i1 %34, label %174, label %.preheader9.i

; <label>:174                                     ; preds = %173
  %175 = load %struct._IO_FILE** @stderr, align 8
  %176 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8]* @.str32, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %175) #12
  br label %.preheader9.i

.preheader9.i:                                    ; preds = %174, %173
  %.pre.i = load i32* %6, align 4
  br label %177

; <label>:177                                     ; preds = %177, %.preheader9.i
  %178 = phi i32 [ %.pre.i, %.preheader9.i ], [ %190, %177 ]
  %indvars.iv191.i = phi i64 [ 1, %.preheader9.i ], [ %indvars.iv.next192.i.3, %177 ]
  %179 = getelementptr inbounds i32* %6, i64 %indvars.iv191.i
  %180 = load i32* %179, align 4
  %181 = add i32 %180, %178
  store i32 %181, i32* %179, align 4
  %indvars.iv.next192.i = add nuw nsw i64 %indvars.iv191.i, 1
  %182 = getelementptr inbounds i32* %6, i64 %indvars.iv.next192.i
  %183 = load i32* %182, align 4
  %184 = add i32 %183, %181
  store i32 %184, i32* %182, align 4
  %indvars.iv.next192.i.1 = add nuw nsw i64 %indvars.iv.next192.i, 1
  %185 = getelementptr inbounds i32* %6, i64 %indvars.iv.next192.i.1
  %186 = load i32* %185, align 4
  %187 = add i32 %186, %184
  store i32 %187, i32* %185, align 4
  %indvars.iv.next192.i.2 = add nuw nsw i64 %indvars.iv.next192.i.1, 1
  %188 = getelementptr inbounds i32* %6, i64 %indvars.iv.next192.i.2
  %189 = load i32* %188, align 4
  %190 = add i32 %189, %187
  store i32 %190, i32* %188, align 4
  %indvars.iv.next192.i.3 = add nuw nsw i64 %indvars.iv.next192.i.2, 1
  %exitcond193.i.3 = icmp eq i64 %indvars.iv.next192.i.3, 65537
  br i1 %exitcond193.i.3, label %191, label %177

; <label>:191                                     ; preds = %177
  %192 = load i8* %4, align 1
  %193 = zext i8 %192 to i16
  %194 = shl nuw i16 %193, 8
  br i1 %51, label %.lr.ph88.i, label %.preheader8.i

.lr.ph88.i:                                       ; preds = %191
  %195 = sext i32 %50 to i64
  %196 = add i32 %8, -4
  br label %202

..preheader8_crit_edge.i:                         ; preds = %202
  %.lcssa388 = phi i16 [ %247, %202 ]
  %197 = and i32 %196, -4
  %198 = add i32 %8, -5
  %199 = sub i32 %198, %197
  br label %.preheader8.i

.preheader8.i:                                    ; preds = %..preheader8_crit_edge.i, %191
  %i.5.lcssa.i = phi i32 [ %199, %..preheader8_crit_edge.i ], [ %50, %191 ]
  %s.0.lcssa.i = phi i16 [ %.lcssa388, %..preheader8_crit_edge.i ], [ %194, %191 ]
  %200 = icmp sgt i32 %i.5.lcssa.i, -1
  br i1 %200, label %.lr.ph84.i, label %.preheader7.i

.lr.ph84.i:                                       ; preds = %.preheader8.i
  %201 = sext i32 %i.5.lcssa.i to i64
  br label %268

; <label>:202                                     ; preds = %202, %.lr.ph88.i
  %indvars.iv189.i = phi i64 [ %195, %.lr.ph88.i ], [ %indvars.iv.next190.i, %202 ]
  %i.586.i = phi i32 [ %50, %.lr.ph88.i ], [ %255, %202 ]
  %s.085.i = phi i16 [ %194, %.lr.ph88.i ], [ %247, %202 ]
  %203 = lshr i16 %s.085.i, 8
  %204 = getelementptr inbounds i8* %4, i64 %indvars.iv189.i
  %205 = load i8* %204, align 1
  %206 = zext i8 %205 to i16
  %207 = shl nuw i16 %206, 8
  %208 = or i16 %207, %203
  %209 = zext i16 %208 to i64
  %210 = getelementptr inbounds i32* %6, i64 %209
  %211 = load i32* %210, align 4
  %212 = add i32 %211, -1
  store i32 %212, i32* %210, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i32* %2, i64 %213
  %215 = trunc i64 %indvars.iv189.i to i32
  store i32 %215, i32* %214, align 4
  %216 = add nsw i64 %indvars.iv189.i, -1
  %217 = getelementptr inbounds i8* %4, i64 %216
  %218 = load i8* %217, align 1
  %219 = zext i8 %218 to i16
  %220 = shl nuw i16 %219, 8
  %221 = or i16 %220, %206
  %222 = zext i16 %221 to i64
  %223 = getelementptr inbounds i32* %6, i64 %222
  %224 = load i32* %223, align 4
  %225 = add i32 %224, -1
  store i32 %225, i32* %223, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i32* %2, i64 %226
  %228 = trunc i64 %216 to i32
  store i32 %228, i32* %227, align 4
  %229 = add nsw i64 %indvars.iv189.i, -2
  %230 = getelementptr inbounds i8* %4, i64 %229
  %231 = load i8* %230, align 1
  %232 = zext i8 %231 to i16
  %233 = shl nuw i16 %232, 8
  %234 = or i16 %233, %219
  %235 = zext i16 %234 to i64
  %236 = getelementptr inbounds i32* %6, i64 %235
  %237 = load i32* %236, align 4
  %238 = add i32 %237, -1
  store i32 %238, i32* %236, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i32* %2, i64 %239
  %241 = trunc i64 %229 to i32
  store i32 %241, i32* %240, align 4
  %242 = add nsw i64 %indvars.iv189.i, -3
  %243 = getelementptr inbounds i8* %4, i64 %242
  %244 = load i8* %243, align 1
  %245 = zext i8 %244 to i16
  %246 = shl nuw i16 %245, 8
  %247 = or i16 %246, %232
  %248 = zext i16 %247 to i64
  %249 = getelementptr inbounds i32* %6, i64 %248
  %250 = load i32* %249, align 4
  %251 = add i32 %250, -1
  store i32 %251, i32* %249, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i32* %2, i64 %252
  %254 = trunc i64 %242 to i32
  store i32 %254, i32* %253, align 4
  %255 = add nsw i32 %i.586.i, -4
  %256 = icmp sgt i32 %255, 2
  %indvars.iv.next190.i = add nsw i64 %indvars.iv189.i, -4
  br i1 %256, label %202, label %..preheader8_crit_edge.i

.preheader7.i.loopexit:                           ; preds = %268
  br label %.preheader7.i

.preheader7.i:                                    ; preds = %.preheader7.i.loopexit, %.preheader8.i
  call void @llvm.memset.p0i8.i64(i8* %bigDone186.i, i8 0, i64 256, i32 16, i1 false) #2
  br label %vector.body211

vector.body211:                                   ; preds = %vector.body211, %.preheader7.i
  %index214 = phi i64 [ 0, %.preheader7.i ], [ %index.next221.1, %vector.body211 ]
  %257 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %index214
  %258 = trunc i64 %index214 to i32
  %broadcast.splatinsert226 = insertelement <4 x i32> undef, i32 %258, i32 0
  %broadcast.splat227 = shufflevector <4 x i32> %broadcast.splatinsert226, <4 x i32> undef, <4 x i32> zeroinitializer
  %induction228 = add <4 x i32> %broadcast.splat227, <i32 0, i32 1, i32 2, i32 3>
  %induction229 = add <4 x i32> %broadcast.splat227, <i32 4, i32 5, i32 6, i32 7>
  %259 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %induction228, <4 x i32>* %259, align 16
  %.sum337338 = or i64 %index214, 4
  %260 = getelementptr [256 x i32]* %runningOrder.i, i64 0, i64 %.sum337338
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %induction229, <4 x i32>* %261, align 16
  %index.next221 = add i64 %index214, 8
  %262 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %index.next221
  %263 = trunc i64 %index.next221 to i32
  %broadcast.splatinsert226.1 = insertelement <4 x i32> undef, i32 %263, i32 0
  %broadcast.splat227.1 = shufflevector <4 x i32> %broadcast.splatinsert226.1, <4 x i32> undef, <4 x i32> zeroinitializer
  %induction228.1 = add <4 x i32> %broadcast.splat227.1, <i32 0, i32 1, i32 2, i32 3>
  %induction229.1 = add <4 x i32> %broadcast.splat227.1, <i32 4, i32 5, i32 6, i32 7>
  %264 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %induction228.1, <4 x i32>* %264, align 16
  %.sum337338.1 = or i64 %index.next221, 4
  %265 = getelementptr [256 x i32]* %runningOrder.i, i64 0, i64 %.sum337338.1
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %induction229.1, <4 x i32>* %266, align 16
  %index.next221.1 = add i64 %index.next221, 8
  %267 = icmp eq i64 %index.next221.1, 256
  br i1 %267, label %.preheader6.i.preheader, label %vector.body211, !llvm.loop !5

.preheader6.i.preheader:                          ; preds = %vector.body211
  br label %.preheader6.i

; <label>:268                                     ; preds = %268, %.lr.ph84.i
  %indvars.iv187.i = phi i64 [ %201, %.lr.ph84.i ], [ %indvars.iv.next188.i, %268 ]
  %s.182.i = phi i16 [ %s.0.lcssa.i, %.lr.ph84.i ], [ %274, %268 ]
  %269 = lshr i16 %s.182.i, 8
  %270 = getelementptr inbounds i8* %4, i64 %indvars.iv187.i
  %271 = load i8* %270, align 1
  %272 = zext i8 %271 to i16
  %273 = shl nuw i16 %272, 8
  %274 = or i16 %273, %269
  %275 = zext i16 %274 to i64
  %276 = getelementptr inbounds i32* %6, i64 %275
  %277 = load i32* %276, align 4
  %278 = add i32 %277, -1
  store i32 %278, i32* %276, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i32* %2, i64 %279
  %281 = trunc i64 %indvars.iv187.i to i32
  store i32 %281, i32* %280, align 4
  %indvars.iv.next188.i = add nsw i64 %indvars.iv187.i, -1
  %282 = icmp sgt i32 %281, 0
  br i1 %282, label %268, label %.preheader7.i.loopexit

.preheader6.i:                                    ; preds = %._crit_edge80.i, %.preheader6.i.preheader
  %h.1.i = phi i32 [ %283, %._crit_edge80.i ], [ 364, %.preheader6.i.preheader ]
  %283 = sdiv i32 %h.1.i, 3
  %284 = icmp slt i32 %h.1.i, 768
  br i1 %284, label %.lr.ph79.i, label %._crit_edge80.i

.lr.ph79.i:                                       ; preds = %.preheader6.i
  %285 = add nsw i32 %283, -1
  %286 = sub i32 0, %283
  %287 = sext i32 %286 to i64
  %288 = sext i32 %283 to i64
  br label %289

; <label>:289                                     ; preds = %321, %.lr.ph79.i
  %indvars.iv181.i = phi i64 [ %288, %.lr.ph79.i ], [ %indvars.iv.next182.i, %321 ]
  %290 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %indvars.iv181.i
  %291 = load i32* %290, align 4
  %292 = shl i32 %291, 8
  %293 = add i32 %292, 256
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds i32* %6, i64 %294
  %296 = load i32* %295, align 4
  %297 = sext i32 %292 to i64
  %298 = getelementptr inbounds i32* %6, i64 %297
  %299 = load i32* %298, align 4
  %300 = sub i32 %296, %299
  %301 = trunc i64 %indvars.iv181.i to i32
  br label %302

; <label>:302                                     ; preds = %318, %289
  %indvars.iv179.i = phi i64 [ %indvars.iv.next180.i, %318 ], [ %indvars.iv181.i, %289 ]
  %j.2.i = phi i32 [ %303, %318 ], [ %301, %289 ]
  %303 = sub nsw i32 %j.2.i, %283
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %304
  %306 = load i32* %305, align 4
  %307 = shl i32 %306, 8
  %308 = add i32 %307, 256
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds i32* %6, i64 %309
  %311 = load i32* %310, align 4
  %312 = sext i32 %307 to i64
  %313 = getelementptr inbounds i32* %6, i64 %312
  %314 = load i32* %313, align 4
  %315 = sub i32 %311, %314
  %316 = icmp ugt i32 %315, %300
  %317 = trunc i64 %indvars.iv179.i to i32
  br i1 %316, label %318, label %321

; <label>:318                                     ; preds = %302
  %319 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %indvars.iv179.i
  store i32 %306, i32* %319, align 4
  %320 = icmp sgt i32 %303, %285
  %indvars.iv.next180.i = add nsw i64 %indvars.iv179.i, %287
  br i1 %320, label %302, label %321

; <label>:321                                     ; preds = %318, %302
  %j.3.i = phi i32 [ %303, %318 ], [ %317, %302 ]
  %322 = sext i32 %j.3.i to i64
  %323 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %322
  store i32 %291, i32* %323, align 4
  %indvars.iv.next182.i = add nsw i64 %indvars.iv181.i, 1
  %324 = trunc i64 %indvars.iv.next182.i to i32
  %325 = icmp slt i32 %324, 256
  br i1 %325, label %289, label %._crit_edge80.i.loopexit

._crit_edge80.i.loopexit:                         ; preds = %321
  br label %._crit_edge80.i

._crit_edge80.i:                                  ; preds = %._crit_edge80.i.loopexit, %.preheader6.i
  %h.1.off.i = add i32 %h.1.i, -3
  %326 = icmp ugt i32 %h.1.off.i, 2
  br i1 %326, label %.preheader6.i, label %.preheader4.i

.preheader4.i:                                    ; preds = %._crit_edge80.i
  %327 = bitcast [100 x i32]* %stackLo.i.i to i8*
  %328 = bitcast [100 x i32]* %stackHi.i.i to i8*
  %329 = bitcast [100 x i32]* %stackD.i.i to i8*
  %330 = getelementptr inbounds [100 x i32]* %stackLo.i.i, i64 0, i64 0
  %331 = getelementptr inbounds [100 x i32]* %stackHi.i.i, i64 0, i64 0
  %332 = getelementptr inbounds [100 x i32]* %stackD.i.i, i64 0, i64 0
  br label %333

; <label>:333                                     ; preds = %930, %.preheader4.i
  %334 = phi i32 [ %30, %.preheader4.i ], [ %.lcssa385, %930 ]
  %indvars.iv175.i = phi i64 [ 0, %.preheader4.i ], [ %indvars.iv.next176.i, %930 ]
  %numQSorted.075.i = phi i32 [ 0, %.preheader4.i ], [ %numQSorted.3.i.lcssa, %930 ]
  %335 = getelementptr inbounds [256 x i32]* %runningOrder.i, i64 0, i64 %indvars.iv175.i
  %336 = load i32* %335, align 4
  %337 = shl i32 %336, 8
  %338 = sext i32 %337 to i64
  br label %339

; <label>:339                                     ; preds = %792, %333
  %340 = phi i32 [ %334, %333 ], [ %793, %792 ]
  %indvars.iv.i = phi i64 [ 0, %333 ], [ %indvars.iv.next.i, %792 ]
  %numQSorted.160.i = phi i32 [ %numQSorted.075.i, %333 ], [ %numQSorted.3.i, %792 ]
  %341 = trunc i64 %indvars.iv.i to i32
  %342 = icmp eq i32 %341, %336
  br i1 %342, label %792, label %343

; <label>:343                                     ; preds = %339
  %344 = add nsw i64 %indvars.iv.i, %338
  %345 = getelementptr inbounds i32* %6, i64 %344
  %346 = load i32* %345, align 4
  %347 = and i32 %346, 2097152
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %788

; <label>:349                                     ; preds = %343
  %350 = and i32 %346, -2097153
  %351 = add nsw i64 %344, 1
  %352 = getelementptr inbounds i32* %6, i64 %351
  %353 = load i32* %352, align 4
  %354 = and i32 %353, -2097153
  %355 = add i32 %354, -1
  %356 = icmp sgt i32 %355, %350
  br i1 %356, label %357, label %788

; <label>:357                                     ; preds = %349
  br i1 %34, label %358, label %363

; <label>:358                                     ; preds = %357
  %359 = load %struct._IO_FILE** @stderr, align 8
  %360 = sub i32 1, %350
  %361 = add i32 %360, %355
  %362 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %359, i8* getelementptr inbounds ([48 x i8]* @.str4, i64 0, i64 0), i32 %336, i32 %341, i32 %numQSorted.160.i, i32 %361) #12
  br label %363

; <label>:363                                     ; preds = %358, %357
  call void @llvm.lifetime.start(i64 400, i8* %327) #2
  call void @llvm.lifetime.start(i64 400, i8* %328) #2
  call void @llvm.lifetime.start(i64 400, i8* %329) #2
  store i32 %350, i32* %330, align 16
  store i32 %355, i32* %331, align 16
  store i32 2, i32* %332, align 16
  br label %.lr.ph82.i.i

.lr.ph82.i.i:                                     ; preds = %.outer15.backedge.i.i, %363
  %.pr.i.i125 = phi i32 [ %340, %363 ], [ %.pre206.pre.i, %.outer15.backedge.i.i ]
  %sp.0.ph94.i.i = phi i32 [ 1, %363 ], [ %sp.0.ph.be.i.i, %.outer15.backedge.i.i ]
  %364 = icmp slt i32 %sp.0.ph94.i.i, 100
  %365 = add nsw i32 %sp.0.ph94.i.i, -1
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds [100 x i32]* %stackLo.i.i, i64 0, i64 %366
  %368 = getelementptr inbounds [100 x i32]* %stackHi.i.i, i64 0, i64 %366
  %369 = getelementptr inbounds [100 x i32]* %stackD.i.i, i64 0, i64 %366
  br label %370

; <label>:370                                     ; preds = %571, %.lr.ph82.i.i
  br i1 %364, label %372, label %371

; <label>:371                                     ; preds = %370
  tail call void @BZ2_bz__AssertH__fail(i32 1001) #2
  br label %372

; <label>:372                                     ; preds = %371, %370
  %373 = load i32* %367, align 4
  %374 = load i32* %368, align 4
  %375 = load i32* %369, align 4
  %376 = sub nsw i32 %374, %373
  %377 = icmp slt i32 %376, 20
  %378 = icmp sgt i32 %375, 14
  %or.cond.i.i = or i1 %377, %378
  br i1 %or.cond.i.i, label %379, label %479

; <label>:379                                     ; preds = %372
  %.lcssa380 = phi i32 [ %376, %372 ]
  %.lcssa378 = phi i32 [ %375, %372 ]
  %.lcssa376 = phi i32 [ %374, %372 ]
  %.lcssa374 = phi i32 [ %373, %372 ]
  %380 = add nsw i32 %.lcssa380, 1
  %381 = icmp slt i32 %380, 2
  br i1 %381, label %mainSimpleSort.exit.i.i, label %.preheader3.i.i.i.preheader

.preheader3.i.i.i.preheader:                      ; preds = %379
  br label %.preheader3.i.i.i

.preheader3.i.i.i:                                ; preds = %.preheader3.i.i.i, %.preheader3.i.i.i.preheader
  %indvars.iv18.i.i.i = phi i64 [ %indvars.iv.next19.i.i.i, %.preheader3.i.i.i ], [ 0, %.preheader3.i.i.i.preheader ]
  %382 = getelementptr inbounds [14 x i32]* @incs, i64 0, i64 %indvars.iv18.i.i.i
  %383 = load i32* %382, align 4
  %384 = icmp slt i32 %383, %380
  %indvars.iv.next19.i.i.i = add nuw nsw i64 %indvars.iv18.i.i.i, 1
  br i1 %384, label %.preheader3.i.i.i, label %.preheader.i.i.i

.preheader.i.i.i:                                 ; preds = %.preheader3.i.i.i
  %indvars.iv18.i.i.i.lcssa = phi i64 [ %indvars.iv18.i.i.i, %.preheader3.i.i.i ]
  %385 = trunc i64 %indvars.iv18.i.i.i.lcssa to i32
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %.lr.ph.i.i.i, label %mainSimpleSort.exit.i.i

.lr.ph.i.i.i:                                     ; preds = %.preheader.i.i.i
  %sext.i.i.i = shl i64 %indvars.iv18.i.i.i.lcssa, 32
  %387 = ashr exact i64 %sext.i.i.i, 32
  %388 = add i32 %.lcssa374, 1
  %389 = add i32 %.lcssa374, 2
  br label %392

.loopexit.i.i.i:                                  ; preds = %449, %426, %404
  %390 = trunc i64 %indvars.iv.next.i.i.i to i32
  %391 = icmp sgt i32 %390, 0
  br i1 %391, label %392, label %mainSimpleSort.exit.i.i.loopexit

; <label>:392                                     ; preds = %.loopexit.i.i.i, %.lr.ph.i.i.i
  %indvars.iv.i.i.i = phi i64 [ %387, %.lr.ph.i.i.i ], [ %indvars.iv.next.i.i.i, %.loopexit.i.i.i ]
  %indvars.iv.next.i.i.i = add nsw i64 %indvars.iv.i.i.i, -1
  %393 = getelementptr inbounds [14 x i32]* @incs, i64 0, i64 %indvars.iv.next.i.i.i
  %394 = load i32* %393, align 4
  %395 = add i32 %394, %.lcssa374
  %396 = add nsw i32 %395, -1
  %397 = sub i32 0, %394
  %398 = sext i32 %397 to i64
  %399 = sext i32 %395 to i64
  %400 = add i32 %388, %394
  %401 = sub i32 0, %394
  %402 = sext i32 %401 to i64
  %403 = add i32 %389, %394
  br label %404

; <label>:404                                     ; preds = %472, %392
  %indvars.iv117 = phi i32 [ %indvars.iv.next118, %472 ], [ %403, %392 ]
  %indvars.iv113 = phi i32 [ %indvars.iv.next114, %472 ], [ %400, %392 ]
  %indvars.iv16.i.i.i = phi i64 [ %indvars.iv.next17.i.i.i, %472 ], [ %399, %392 ]
  %405 = sext i32 %indvars.iv117 to i64
  %406 = sext i32 %indvars.iv113 to i64
  %407 = trunc i64 %indvars.iv16.i.i.i to i32
  %408 = icmp sgt i32 %407, %.lcssa376
  br i1 %408, label %.loopexit.i.i.i, label %409

; <label>:409                                     ; preds = %404
  %410 = getelementptr inbounds i32* %2, i64 %indvars.iv16.i.i.i
  %411 = load i32* %410, align 4
  %412 = add i32 %411, %.lcssa378
  br label %413

; <label>:413                                     ; preds = %422, %409
  %indvars.iv6.i.i.i = phi i64 [ %indvars.iv.next7.i.i.i, %422 ], [ %indvars.iv16.i.i.i, %409 ]
  %j.0.i.i.i = phi i32 [ %414, %422 ], [ %407, %409 ]
  %414 = sub nsw i32 %j.0.i.i.i, %394
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds i32* %2, i64 %415
  %417 = load i32* %416, align 4
  %418 = add i32 %417, %.lcssa378
  %419 = call fastcc zeroext i8 @mainGtU(i32 %418, i32 %412, i8* %4, i16* %26, i32 %8, i32* %budget) #2
  %420 = icmp eq i8 %419, 0
  %421 = trunc i64 %indvars.iv6.i.i.i to i32
  br i1 %420, label %426, label %422

; <label>:422                                     ; preds = %413
  %423 = load i32* %416, align 4
  %424 = getelementptr inbounds i32* %2, i64 %indvars.iv6.i.i.i
  store i32 %423, i32* %424, align 4
  %425 = icmp sgt i32 %414, %396
  %indvars.iv.next7.i.i.i = add nsw i64 %indvars.iv6.i.i.i, %398
  br i1 %425, label %413, label %426

; <label>:426                                     ; preds = %422, %413
  %j.1.i.i.i = phi i32 [ %414, %422 ], [ %421, %413 ]
  %427 = sext i32 %j.1.i.i.i to i64
  %428 = getelementptr inbounds i32* %2, i64 %427
  store i32 %411, i32* %428, align 4
  %429 = add nsw i64 %indvars.iv16.i.i.i, 1
  %430 = icmp slt i32 %407, %.lcssa376
  br i1 %430, label %431, label %.loopexit.i.i.i

; <label>:431                                     ; preds = %426
  %432 = getelementptr inbounds i32* %2, i64 %429
  %433 = load i32* %432, align 4
  %434 = add i32 %433, %.lcssa378
  %435 = trunc i64 %429 to i32
  br label %436

; <label>:436                                     ; preds = %445, %431
  %indvars.iv115 = phi i64 [ %indvars.iv.next116, %445 ], [ %406, %431 ]
  %j.2.i.i.i = phi i32 [ %437, %445 ], [ %435, %431 ]
  %437 = sub nsw i32 %j.2.i.i.i, %394
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i32* %2, i64 %438
  %440 = load i32* %439, align 4
  %441 = add i32 %440, %.lcssa378
  %442 = call fastcc zeroext i8 @mainGtU(i32 %441, i32 %434, i8* %4, i16* %26, i32 %8, i32* %budget) #2
  %443 = icmp eq i8 %442, 0
  %444 = trunc i64 %indvars.iv115 to i32
  br i1 %443, label %449, label %445

; <label>:445                                     ; preds = %436
  %446 = load i32* %439, align 4
  %447 = getelementptr inbounds i32* %2, i64 %indvars.iv115
  store i32 %446, i32* %447, align 4
  %448 = icmp sgt i32 %437, %396
  %indvars.iv.next116 = add nsw i64 %indvars.iv115, %402
  br i1 %448, label %436, label %449

; <label>:449                                     ; preds = %445, %436
  %j.3.i.i.i = phi i32 [ %437, %445 ], [ %444, %436 ]
  %450 = sext i32 %j.3.i.i.i to i64
  %451 = getelementptr inbounds i32* %2, i64 %450
  store i32 %433, i32* %451, align 4
  %452 = add nsw i64 %indvars.iv16.i.i.i, 2
  %453 = trunc i64 %452 to i32
  %454 = icmp sgt i32 %453, %.lcssa376
  br i1 %454, label %.loopexit.i.i.i, label %455

; <label>:455                                     ; preds = %449
  %456 = getelementptr inbounds i32* %2, i64 %452
  %457 = load i32* %456, align 4
  %458 = add i32 %457, %.lcssa378
  br label %459

; <label>:459                                     ; preds = %468, %455
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %468 ], [ %405, %455 ]
  %j.4.i.i.i = phi i32 [ %460, %468 ], [ %453, %455 ]
  %460 = sub nsw i32 %j.4.i.i.i, %394
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i32* %2, i64 %461
  %463 = load i32* %462, align 4
  %464 = add i32 %463, %.lcssa378
  %465 = call fastcc zeroext i8 @mainGtU(i32 %464, i32 %458, i8* %4, i16* %26, i32 %8, i32* %budget) #2
  %466 = icmp eq i8 %465, 0
  %467 = trunc i64 %indvars.iv119 to i32
  br i1 %466, label %472, label %468

; <label>:468                                     ; preds = %459
  %469 = load i32* %462, align 4
  %470 = getelementptr inbounds i32* %2, i64 %indvars.iv119
  store i32 %469, i32* %470, align 4
  %471 = icmp sgt i32 %460, %396
  %indvars.iv.next120 = add nsw i64 %indvars.iv119, %402
  br i1 %471, label %459, label %472

; <label>:472                                     ; preds = %468, %459
  %j.5.i.i.i = phi i32 [ %460, %468 ], [ %467, %459 ]
  %473 = sext i32 %j.5.i.i.i to i64
  %474 = getelementptr inbounds i32* %2, i64 %473
  store i32 %457, i32* %474, align 4
  %indvars.iv.next17.i.i.i = add nsw i64 %indvars.iv16.i.i.i, 3
  %475 = load i32* %budget, align 4
  %476 = icmp slt i32 %475, 0
  %indvars.iv.next114 = add i32 %indvars.iv113, 3
  %indvars.iv.next118 = add i32 %indvars.iv117, 3
  br i1 %476, label %mainQSort3.exit.i.loopexit, label %404

mainSimpleSort.exit.i.i.loopexit:                 ; preds = %.loopexit.i.i.i
  %.pr.i.i.pre = load i32* %budget, align 4
  br label %mainSimpleSort.exit.i.i

mainSimpleSort.exit.i.i:                          ; preds = %mainSimpleSort.exit.i.i.loopexit, %.preheader.i.i.i, %379
  %.pr.i.i = phi i32 [ %.pr.i.i.pre, %mainSimpleSort.exit.i.i.loopexit ], [ %.pr.i.i125, %.preheader.i.i.i ], [ %.pr.i.i125, %379 ]
  %477 = icmp slt i32 %.pr.i.i, 0
  br i1 %477, label %mainQSort3.exit.i.loopexit339, label %.outer15.backedge.i.i

.outer15.backedge.i.i:                            ; preds = %._crit_edge93.i.i, %mainSimpleSort.exit.i.i
  %.pre206.pre.i = phi i32 [ %.pr.i.i125, %._crit_edge93.i.i ], [ %.pr.i.i, %mainSimpleSort.exit.i.i ]
  %sp.0.ph.be.i.i = phi i32 [ %782, %._crit_edge93.i.i ], [ %365, %mainSimpleSort.exit.i.i ]
  %478 = icmp sgt i32 %sp.0.ph.be.i.i, 0
  br i1 %478, label %.lr.ph82.i.i, label %mainQSort3.exit.i.loopexit339

; <label>:479                                     ; preds = %372
  %480 = sext i32 %373 to i64
  %481 = getelementptr inbounds i32* %2, i64 %480
  %482 = load i32* %481, align 4
  %483 = add i32 %482, %375
  %484 = zext i32 %483 to i64
  %485 = getelementptr inbounds i8* %4, i64 %484
  %486 = load i8* %485, align 1
  %487 = sext i32 %374 to i64
  %488 = getelementptr inbounds i32* %2, i64 %487
  %489 = load i32* %488, align 4
  %490 = add i32 %489, %375
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds i8* %4, i64 %491
  %493 = load i8* %492, align 1
  %494 = add nsw i32 %374, %373
  %495 = ashr i32 %494, 1
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i32* %2, i64 %496
  %498 = load i32* %497, align 4
  %499 = add i32 %498, %375
  %500 = zext i32 %499 to i64
  %501 = getelementptr inbounds i8* %4, i64 %500
  %502 = load i8* %501, align 1
  %503 = icmp ugt i8 %486, %493
  %a.b.i.i.i = select i1 %503, i8 %486, i8 %493
  %b.a.i.i.i = select i1 %503, i8 %493, i8 %486
  %504 = icmp ugt i8 %a.b.i.i.i, %502
  br i1 %504, label %505, label %mmed3.exit.i.i

; <label>:505                                     ; preds = %479
  %506 = icmp ugt i8 %b.a.i.i.i, %502
  %b.a.c.i.i.i = select i1 %506, i8 %b.a.i.i.i, i8 %502
  br label %mmed3.exit.i.i

mmed3.exit.i.i:                                   ; preds = %505, %479
  %507 = phi i8 [ %b.a.c.i.i.i, %505 ], [ %a.b.i.i.i, %479 ]
  %508 = zext i8 %507 to i32
  br label %.outer9.i.i

.outer9.i.i:                                      ; preds = %560, %mmed3.exit.i.i
  %gtHi.0.ph.i.i = phi i32 [ %562, %560 ], [ %374, %mmed3.exit.i.i ]
  %ltLo.0.ph.i.i = phi i32 [ %ltLo.0.ph11.lcssa.i.i, %560 ], [ %373, %mmed3.exit.i.i ]
  %unHi.0.ph.i.i = phi i32 [ %567, %560 ], [ %374, %mmed3.exit.i.i ]
  %unLo.0.ph.i.i = phi i32 [ %566, %560 ], [ %373, %mmed3.exit.i.i ]
  %509 = icmp sgt i32 %unLo.0.ph.i.i, %unHi.0.ph.i.i
  br i1 %509, label %.preheader.i.i, label %.lr.ph.lr.ph.i.i

.lr.ph.lr.ph.i.i:                                 ; preds = %.outer9.i.i
  %510 = sext i32 %ltLo.0.ph.i.i to i64
  br label %.lr.ph.i.i

.lr.ph.i.i:                                       ; preds = %.outer10.i.i, %.lr.ph.lr.ph.i.i
  %indvars.iv159.i.i = phi i64 [ %indvars.iv.next160.i.i, %.outer10.i.i ], [ %510, %.lr.ph.lr.ph.i.i ]
  %unLo.0.ph1359.i.i = phi i32 [ %526, %.outer10.i.i ], [ %unLo.0.ph.i.i, %.lr.ph.lr.ph.i.i ]
  %511 = sext i32 %unLo.0.ph1359.i.i to i64
  br label %515

; <label>:512                                     ; preds = %528
  %513 = trunc i64 %indvars.iv.i.i to i32
  %514 = icmp slt i32 %513, %unHi.0.ph.i.i
  br i1 %514, label %515, label %..preheader_crit_edge.i.i

; <label>:515                                     ; preds = %512, %.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %512 ], [ %511, %.lr.ph.i.i ]
  %516 = getelementptr inbounds i32* %2, i64 %indvars.iv.i.i
  %517 = load i32* %516, align 4
  %518 = add i32 %517, %375
  %519 = zext i32 %518 to i64
  %520 = getelementptr inbounds i8* %4, i64 %519
  %521 = load i8* %520, align 1
  %522 = icmp eq i8 %521, %507
  br i1 %522, label %.outer10.i.i, label %528

.outer10.i.i:                                     ; preds = %515
  %.lcssa345 = phi i32 [ %517, %515 ]
  %.lcssa = phi i32* [ %516, %515 ]
  %indvars.iv.i.i.lcssa = phi i64 [ %indvars.iv.i.i, %515 ]
  %523 = trunc i64 %indvars.iv.i.i.lcssa to i32
  %524 = getelementptr inbounds i32* %2, i64 %indvars.iv159.i.i
  %525 = load i32* %524, align 4
  store i32 %525, i32* %.lcssa, align 4
  store i32 %.lcssa345, i32* %524, align 4
  %indvars.iv.next160.i.i = add nsw i64 %indvars.iv159.i.i, 1
  %526 = add nsw i32 %523, 1
  %527 = icmp slt i32 %523, %unHi.0.ph.i.i
  br i1 %527, label %.lr.ph.i.i, label %.outer10..outer10..preheader_crit_edge_crit_edge.i.i

; <label>:528                                     ; preds = %515
  %529 = zext i8 %521 to i32
  %530 = sub nsw i32 %529, %508
  %531 = icmp sgt i32 %530, 0
  %indvars.iv.next.i.i = add nsw i64 %indvars.iv.i.i, 1
  br i1 %531, label %..preheader_crit_edge55.i.i, label %512

.outer10..outer10..preheader_crit_edge_crit_edge.i.i: ; preds = %.outer10.i.i
  %.lcssa351 = phi i32 [ %526, %.outer10.i.i ]
  %indvars.iv.next160.i.i.lcssa = phi i64 [ %indvars.iv.next160.i.i, %.outer10.i.i ]
  %532 = trunc i64 %indvars.iv.next160.i.i.lcssa to i32
  br label %.preheader.i.i

..preheader_crit_edge.i.i:                        ; preds = %512
  %indvars.iv159.i.i.lcssa349 = phi i64 [ %indvars.iv159.i.i, %512 ]
  %indvars.iv.next.i.i.lcssa348 = phi i64 [ %indvars.iv.next.i.i, %512 ]
  %533 = trunc i64 %indvars.iv159.i.i.lcssa349 to i32
  %534 = trunc i64 %indvars.iv.next.i.i.lcssa348 to i32
  br label %.preheader.i.i

..preheader_crit_edge55.i.i:                      ; preds = %528
  %indvars.iv159.i.i.lcssa = phi i64 [ %indvars.iv159.i.i, %528 ]
  %indvars.iv.i.i.lcssa341 = phi i64 [ %indvars.iv.i.i, %528 ]
  %535 = trunc i64 %indvars.iv159.i.i.lcssa to i32
  %536 = trunc i64 %indvars.iv.i.i.lcssa341 to i32
  br label %.preheader.i.i

.preheader.i.i:                                   ; preds = %..preheader_crit_edge55.i.i, %..preheader_crit_edge.i.i, %.outer10..outer10..preheader_crit_edge_crit_edge.i.i, %.outer9.i.i
  %ltLo.0.ph11.lcssa.i.i = phi i32 [ %533, %..preheader_crit_edge.i.i ], [ %535, %..preheader_crit_edge55.i.i ], [ %532, %.outer10..outer10..preheader_crit_edge_crit_edge.i.i ], [ %ltLo.0.ph.i.i, %.outer9.i.i ]
  %unLo.0.lcssa.i.i = phi i32 [ %534, %..preheader_crit_edge.i.i ], [ %536, %..preheader_crit_edge55.i.i ], [ %.lcssa351, %.outer10..outer10..preheader_crit_edge_crit_edge.i.i ], [ %unLo.0.ph.i.i, %.outer9.i.i ]
  %537 = icmp sgt i32 %unLo.0.lcssa.i.i, %unHi.0.ph.i.i
  br i1 %537, label %.critedge.i.i.loopexit, label %.lr.ph63.lr.ph.i.i

.lr.ph63.lr.ph.i.i:                               ; preds = %.preheader.i.i
  %538 = sext i32 %gtHi.0.ph.i.i to i64
  br label %.lr.ph63.i.i

; <label>:539                                     ; preds = %556
  %540 = trunc i64 %indvars.iv.next162.i.i to i32
  %541 = icmp sgt i32 %unLo.0.lcssa.i.i, %540
  br i1 %541, label %..critedge.loopexit_crit_edge.i.i, label %542

; <label>:542                                     ; preds = %.lr.ph63.i.i, %539
  %indvars.iv161.i.i = phi i64 [ %555, %.lr.ph63.i.i ], [ %indvars.iv.next162.i.i, %539 ]
  %543 = getelementptr inbounds i32* %2, i64 %indvars.iv161.i.i
  %544 = load i32* %543, align 4
  %545 = add i32 %544, %375
  %546 = zext i32 %545 to i64
  %547 = getelementptr inbounds i8* %4, i64 %546
  %548 = load i8* %547, align 1
  %549 = icmp eq i8 %548, %507
  br i1 %549, label %.outer.i.i, label %556

.outer.i.i:                                       ; preds = %542
  %.lcssa357 = phi i32 [ %544, %542 ]
  %.lcssa354 = phi i32* [ %543, %542 ]
  %indvars.iv161.i.i.lcssa = phi i64 [ %indvars.iv161.i.i, %542 ]
  %550 = trunc i64 %indvars.iv161.i.i.lcssa to i32
  %551 = getelementptr inbounds i32* %2, i64 %indvars.iv163.i.i
  %552 = load i32* %551, align 4
  store i32 %552, i32* %.lcssa354, align 4
  store i32 %.lcssa357, i32* %551, align 4
  %indvars.iv.next164.i.i = add nsw i64 %indvars.iv163.i.i, -1
  %553 = add nsw i32 %550, -1
  %554 = icmp sgt i32 %unLo.0.lcssa.i.i, %553
  br i1 %554, label %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i, label %.lr.ph63.i.i

.lr.ph63.i.i:                                     ; preds = %.outer.i.i, %.lr.ph63.lr.ph.i.i
  %indvars.iv163.i.i = phi i64 [ %538, %.lr.ph63.lr.ph.i.i ], [ %indvars.iv.next164.i.i, %.outer.i.i ]
  %unHi.1.ph73.i.i = phi i32 [ %unHi.0.ph.i.i, %.lr.ph63.lr.ph.i.i ], [ %553, %.outer.i.i ]
  %555 = sext i32 %unHi.1.ph73.i.i to i64
  br label %542

; <label>:556                                     ; preds = %542
  %557 = zext i8 %548 to i32
  %558 = sub nsw i32 %557, %508
  %559 = icmp slt i32 %558, 0
  %indvars.iv.next162.i.i = add nsw i64 %indvars.iv161.i.i, -1
  br i1 %559, label %560, label %539

; <label>:560                                     ; preds = %556
  %indvars.iv163.i.i.lcssa = phi i64 [ %indvars.iv163.i.i, %556 ]
  %.lcssa358 = phi i32 [ %544, %556 ]
  %.lcssa355 = phi i32* [ %543, %556 ]
  %indvars.iv161.i.i.lcssa352 = phi i64 [ %indvars.iv161.i.i, %556 ]
  %561 = trunc i64 %indvars.iv161.i.i.lcssa352 to i32
  %562 = trunc i64 %indvars.iv163.i.i.lcssa to i32
  %563 = sext i32 %unLo.0.lcssa.i.i to i64
  %564 = getelementptr inbounds i32* %2, i64 %563
  %565 = load i32* %564, align 4
  store i32 %.lcssa358, i32* %564, align 4
  store i32 %565, i32* %.lcssa355, align 4
  %566 = add nsw i32 %unLo.0.lcssa.i.i, 1
  %567 = add nsw i32 %561, -1
  br label %.outer9.i.i

.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i: ; preds = %.outer.i.i
  %unLo.0.lcssa.i.i.lcssa372 = phi i32 [ %unLo.0.lcssa.i.i, %.outer.i.i ]
  %ltLo.0.ph11.lcssa.i.i.lcssa369 = phi i32 [ %ltLo.0.ph11.lcssa.i.i, %.outer.i.i ]
  %.lcssa363 = phi i32 [ %553, %.outer.i.i ]
  %indvars.iv.next164.i.i.lcssa = phi i64 [ %indvars.iv.next164.i.i, %.outer.i.i ]
  %568 = trunc i64 %indvars.iv.next164.i.i.lcssa to i32
  br label %.critedge.i.i

..critedge.loopexit_crit_edge.i.i:                ; preds = %539
  %unLo.0.lcssa.i.i.lcssa371 = phi i32 [ %unLo.0.lcssa.i.i, %539 ]
  %ltLo.0.ph11.lcssa.i.i.lcssa368 = phi i32 [ %ltLo.0.ph11.lcssa.i.i, %539 ]
  %indvars.iv163.i.i.lcssa361 = phi i64 [ %indvars.iv163.i.i, %539 ]
  %.lcssa360 = phi i32 [ %540, %539 ]
  %569 = trunc i64 %indvars.iv163.i.i.lcssa361 to i32
  br label %.critedge.i.i

.critedge.i.i.loopexit:                           ; preds = %.preheader.i.i
  %unLo.0.lcssa.i.i.lcssa = phi i32 [ %unLo.0.lcssa.i.i, %.preheader.i.i ]
  %ltLo.0.ph11.lcssa.i.i.lcssa = phi i32 [ %ltLo.0.ph11.lcssa.i.i, %.preheader.i.i ]
  %unHi.0.ph.i.i.lcssa = phi i32 [ %unHi.0.ph.i.i, %.preheader.i.i ]
  %gtHi.0.ph.i.i.lcssa = phi i32 [ %gtHi.0.ph.i.i, %.preheader.i.i ]
  br label %.critedge.i.i

.critedge.i.i:                                    ; preds = %.critedge.i.i.loopexit, %..critedge.loopexit_crit_edge.i.i, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i
  %unLo.0.lcssa.i.i373 = phi i32 [ %unLo.0.lcssa.i.i.lcssa371, %..critedge.loopexit_crit_edge.i.i ], [ %unLo.0.lcssa.i.i.lcssa372, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i ], [ %unLo.0.lcssa.i.i.lcssa, %.critedge.i.i.loopexit ]
  %ltLo.0.ph11.lcssa.i.i370 = phi i32 [ %ltLo.0.ph11.lcssa.i.i.lcssa368, %..critedge.loopexit_crit_edge.i.i ], [ %ltLo.0.ph11.lcssa.i.i.lcssa369, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i ], [ %ltLo.0.ph11.lcssa.i.i.lcssa, %.critedge.i.i.loopexit ]
  %gtHi.1.ph.lcssa29.i.i = phi i32 [ %569, %..critedge.loopexit_crit_edge.i.i ], [ %568, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i ], [ %gtHi.0.ph.i.i.lcssa, %.critedge.i.i.loopexit ]
  %unHi.1.lcssa.i.i = phi i32 [ %.lcssa360, %..critedge.loopexit_crit_edge.i.i ], [ %.lcssa363, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i.i ], [ %unHi.0.ph.i.i.lcssa, %.critedge.i.i.loopexit ]
  %570 = icmp slt i32 %gtHi.1.ph.lcssa29.i.i, %ltLo.0.ph11.lcssa.i.i370
  br i1 %570, label %571, label %573

; <label>:571                                     ; preds = %.critedge.i.i
  store i32 %373, i32* %367, align 4
  store i32 %374, i32* %368, align 4
  %572 = add nsw i32 %375, 1
  store i32 %572, i32* %369, align 4
  br label %370

; <label>:573                                     ; preds = %.critedge.i.i
  %unHi.1.lcssa.i.i.lcssa = phi i32 [ %unHi.1.lcssa.i.i, %.critedge.i.i ]
  %gtHi.1.ph.lcssa29.i.i.lcssa = phi i32 [ %gtHi.1.ph.lcssa29.i.i, %.critedge.i.i ]
  %ltLo.0.ph11.lcssa.i.i370.lcssa = phi i32 [ %ltLo.0.ph11.lcssa.i.i370, %.critedge.i.i ]
  %unLo.0.lcssa.i.i373.lcssa = phi i32 [ %unLo.0.lcssa.i.i373, %.critedge.i.i ]
  %.lcssa382 = phi i64 [ %480, %.critedge.i.i ]
  %.lcssa379 = phi i32 [ %375, %.critedge.i.i ]
  %.lcssa377 = phi i32 [ %374, %.critedge.i.i ]
  %.lcssa375 = phi i32 [ %373, %.critedge.i.i ]
  %574 = sub nsw i32 %ltLo.0.ph11.lcssa.i.i370.lcssa, %.lcssa375
  %575 = sub nsw i32 %unLo.0.lcssa.i.i373.lcssa, %ltLo.0.ph11.lcssa.i.i370.lcssa
  %576 = icmp slt i32 %574, %575
  %..i.i = select i1 %576, i32 %574, i32 %575
  %577 = icmp sgt i32 %..i.i, 0
  br i1 %577, label %.lr.ph86.i.i, label %._crit_edge.i.i

.lr.ph86.i.i:                                     ; preds = %573
  %578 = add i32 %unLo.0.lcssa.i.i373.lcssa, 1
  %579 = add i32 %.lcssa375, -1
  %580 = sub i32 %579, %ltLo.0.ph11.lcssa.i.i370.lcssa
  %581 = add i32 %ltLo.0.ph11.lcssa.i.i370.lcssa, -1
  %582 = sub i32 %581, %unLo.0.lcssa.i.i373.lcssa
  %583 = icmp sgt i32 %580, %582
  %smax.i.i = select i1 %583, i32 %580, i32 %582
  %584 = add i32 %578, %smax.i.i
  %585 = sext i32 %584 to i64
  %586 = add i32 %.lcssa375, -1
  %587 = sub i32 %586, %ltLo.0.ph11.lcssa.i.i370.lcssa
  %588 = add i32 %ltLo.0.ph11.lcssa.i.i370.lcssa, -1
  %589 = sub i32 %588, %unLo.0.lcssa.i.i373.lcssa
  %590 = icmp sgt i32 %587, %589
  %smax277 = select i1 %590, i32 %587, i32 %589
  %591 = sub i32 -2, %smax277
  %592 = zext i32 %591 to i64
  %593 = add nuw nsw i64 %592, 1
  %end.idx285 = add nsw i64 %593, %585
  %n.vec287 = and i64 %593, 9223372036854775804
  %end.idx.rnd.down288 = add i64 %n.vec287, %585
  %cmp.zero289 = icmp eq i64 %n.vec287, 0
  %594 = add i32 %.lcssa375, -1
  %595 = sub i32 %594, %ltLo.0.ph11.lcssa.i.i370.lcssa
  %596 = add i32 %ltLo.0.ph11.lcssa.i.i370.lcssa, -1
  %597 = sub i32 %596, %unLo.0.lcssa.i.i373.lcssa
  %598 = icmp sgt i32 %595, %597
  %smax293 = select i1 %598, i32 %595, i32 %597
  %599 = sub i32 -2, %smax293
  %600 = zext i32 %599 to i64
  %601 = add i32 %unLo.0.lcssa.i.i373.lcssa, 1
  %602 = icmp sgt i32 %597, %595
  %smax296 = select i1 %602, i32 %597, i32 %595
  %603 = add i32 %601, %smax296
  %604 = sext i32 %603 to i64
  br i1 %cmp.zero289, label %middle.block282, label %vector.memcheck305

vector.memcheck305:                               ; preds = %.lr.ph86.i.i
  %scevgep291 = getelementptr i32* %2, i64 %.lcssa382
  %605 = add nsw i64 %604, %600
  %scevgep299 = getelementptr i32* %2, i64 %605
  %bound0301 = icmp ule i32* %scevgep291, %scevgep299
  %scevgep297 = getelementptr i32* %2, i64 %604
  %606 = add nsw i64 %.lcssa382, %600
  %scevgep294 = getelementptr i32* %2, i64 %606
  %bound1302 = icmp ule i32* %scevgep297, %scevgep294
  %memcheck.conflict304 = and i1 %bound0301, %bound1302
  %ind.end308 = add i64 %n.vec287, %.lcssa382
  %cast.crd315 = trunc i64 %n.vec287 to i32
  %rev.ind.end316 = sub i32 %..i.i, %cast.crd315
  br i1 %memcheck.conflict304, label %middle.block282, label %vector.body281.preheader

vector.body281.preheader:                         ; preds = %vector.memcheck305
  %607 = add i32 %ltLo.0.ph11.lcssa.i.i370.lcssa, -1
  %608 = sub i32 %607, %unLo.0.lcssa.i.i373.lcssa
  %609 = add i32 %.lcssa375, -1
  %610 = sub i32 %609, %ltLo.0.ph11.lcssa.i.i370.lcssa
  %611 = icmp sgt i32 %608, %610
  %smax390 = select i1 %611, i32 %608, i32 %610
  %612 = sub i32 -2, %smax390
  %613 = zext i32 %612 to i64
  %614 = add i64 %613, 1
  %615 = lshr i64 %614, 2
  %616 = mul i64 %615, 4
  %617 = add i64 %616, -4
  %618 = lshr i64 %617, 2
  %619 = add i64 %618, 1
  %xtraiter = and i64 %619, 1
  %lcmp.mod = icmp ne i64 %xtraiter, 0
  %lcmp.overflow = icmp eq i64 %619, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %vector.body281.unr, label %vector.body281.preheader.split

vector.body281.unr:                               ; preds = %vector.body281.preheader
  %normalized.idx319.unr = sub i64 %585, %585
  %offset.idx320.unr = add i64 %.lcssa382, %normalized.idx319.unr
  %620 = getelementptr inbounds i32* %2, i64 %offset.idx320.unr
  %621 = bitcast i32* %620 to <4 x i32>*
  %wide.load333.unr = load <4 x i32>* %621, align 4
  %622 = getelementptr inbounds i32* %2, i64 %585
  %623 = bitcast i32* %622 to <4 x i32>*
  %wide.load334.unr = load <4 x i32>* %623, align 4
  %624 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %wide.load334.unr, <4 x i32>* %624, align 4
  %625 = bitcast i32* %622 to <4 x i32>*
  store <4 x i32> %wide.load333.unr, <4 x i32>* %625, align 4
  %index.next318.unr = add i64 %585, 4
  %626 = icmp eq i64 %index.next318.unr, %end.idx.rnd.down288
  br label %vector.body281.preheader.split

vector.body281.preheader.split:                   ; preds = %vector.body281.unr, %vector.body281.preheader
  %index284.unr = phi i64 [ %585, %vector.body281.preheader ], [ %index.next318.unr, %vector.body281.unr ]
  %627 = icmp ult i64 %619, 2
  br i1 %627, label %middle.block282.loopexit, label %vector.body281.preheader.split.split

vector.body281.preheader.split.split:             ; preds = %vector.body281.preheader.split
  br label %vector.body281

vector.body281:                                   ; preds = %vector.body281, %vector.body281.preheader.split.split
  %index284 = phi i64 [ %index284.unr, %vector.body281.preheader.split.split ], [ %index.next318.1, %vector.body281 ]
  %normalized.idx319 = sub i64 %index284, %585
  %offset.idx320 = add i64 %.lcssa382, %normalized.idx319
  %628 = getelementptr inbounds i32* %2, i64 %offset.idx320
  %629 = bitcast i32* %628 to <4 x i32>*
  %wide.load333 = load <4 x i32>* %629, align 4
  %630 = getelementptr inbounds i32* %2, i64 %index284
  %631 = bitcast i32* %630 to <4 x i32>*
  %wide.load334 = load <4 x i32>* %631, align 4
  %632 = bitcast i32* %628 to <4 x i32>*
  store <4 x i32> %wide.load334, <4 x i32>* %632, align 4
  %633 = bitcast i32* %630 to <4 x i32>*
  store <4 x i32> %wide.load333, <4 x i32>* %633, align 4
  %index.next318 = add i64 %index284, 4
  %normalized.idx319.1 = sub i64 %index.next318, %585
  %offset.idx320.1 = add i64 %.lcssa382, %normalized.idx319.1
  %634 = getelementptr inbounds i32* %2, i64 %offset.idx320.1
  %635 = bitcast i32* %634 to <4 x i32>*
  %wide.load333.1 = load <4 x i32>* %635, align 4
  %636 = getelementptr inbounds i32* %2, i64 %index.next318
  %637 = bitcast i32* %636 to <4 x i32>*
  %wide.load334.1 = load <4 x i32>* %637, align 4
  %638 = bitcast i32* %634 to <4 x i32>*
  store <4 x i32> %wide.load334.1, <4 x i32>* %638, align 4
  %639 = bitcast i32* %636 to <4 x i32>*
  store <4 x i32> %wide.load333.1, <4 x i32>* %639, align 4
  %index.next318.1 = add i64 %index.next318, 4
  %640 = icmp eq i64 %index.next318.1, %end.idx.rnd.down288
  br i1 %640, label %middle.block282.loopexit.unr-lcssa, label %vector.body281, !llvm.loop !6

middle.block282.loopexit.unr-lcssa:               ; preds = %vector.body281
  br label %middle.block282.loopexit

middle.block282.loopexit:                         ; preds = %middle.block282.loopexit.unr-lcssa, %vector.body281.preheader.split
  br label %middle.block282

middle.block282:                                  ; preds = %middle.block282.loopexit, %vector.memcheck305, %.lr.ph86.i.i
  %resume.val306 = phi i64 [ %.lcssa382, %.lr.ph86.i.i ], [ %.lcssa382, %vector.memcheck305 ], [ %ind.end308, %middle.block282.loopexit ]
  %resume.val309 = phi i64 [ %585, %.lr.ph86.i.i ], [ %585, %vector.memcheck305 ], [ %end.idx.rnd.down288, %middle.block282.loopexit ]
  %resume.val313 = phi i32 [ %..i.i, %.lr.ph86.i.i ], [ %..i.i, %vector.memcheck305 ], [ %rev.ind.end316, %middle.block282.loopexit ]
  %cmp.n317 = icmp eq i64 %end.idx285, %resume.val309
  br i1 %cmp.n317, label %._crit_edge.i.i, label %scalar.ph283.preheader

scalar.ph283.preheader:                           ; preds = %middle.block282
  %641 = add i32 %resume.val313, 1
  %642 = mul i32 %resume.val313, -1
  %643 = icmp sgt i32 %642, -1
  %smax391 = select i1 %643, i32 %642, i32 -1
  %644 = add i32 %641, %smax391
  %xtraiter392 = and i32 %644, 1
  %lcmp.mod393 = icmp ne i32 %xtraiter392, 0
  %lcmp.overflow394 = icmp eq i32 %644, 0
  %lcmp.or395 = or i1 %lcmp.overflow394, %lcmp.mod393
  br i1 %lcmp.or395, label %scalar.ph283.unr, label %scalar.ph283.preheader.split

scalar.ph283.unr:                                 ; preds = %scalar.ph283.preheader
  %645 = getelementptr inbounds i32* %2, i64 %resume.val306
  %646 = load i32* %645, align 4
  %647 = getelementptr inbounds i32* %2, i64 %resume.val309
  %648 = load i32* %647, align 4
  store i32 %648, i32* %645, align 4
  store i32 %646, i32* %647, align 4
  %indvars.iv.next168.i.i.unr = add nsw i64 %resume.val306, 1
  %649 = add nsw i32 %resume.val313, -1
  %650 = icmp sgt i32 %649, 0
  %indvars.iv.next166.i.i.unr = add nsw i64 %resume.val309, 1
  br label %scalar.ph283.preheader.split

scalar.ph283.preheader.split:                     ; preds = %scalar.ph283.unr, %scalar.ph283.preheader
  %indvars.iv167.i.i.unr = phi i64 [ %resume.val306, %scalar.ph283.preheader ], [ %indvars.iv.next168.i.i.unr, %scalar.ph283.unr ]
  %indvars.iv165.i.i.unr = phi i64 [ %resume.val309, %scalar.ph283.preheader ], [ %indvars.iv.next166.i.i.unr, %scalar.ph283.unr ]
  %yyn.085.i.i.unr = phi i32 [ %resume.val313, %scalar.ph283.preheader ], [ %649, %scalar.ph283.unr ]
  %651 = icmp ult i32 %644, 2
  br i1 %651, label %._crit_edge.i.i.loopexit, label %scalar.ph283.preheader.split.split

scalar.ph283.preheader.split.split:               ; preds = %scalar.ph283.preheader.split
  br label %scalar.ph283

scalar.ph283:                                     ; preds = %scalar.ph283, %scalar.ph283.preheader.split.split
  %indvars.iv167.i.i = phi i64 [ %indvars.iv167.i.i.unr, %scalar.ph283.preheader.split.split ], [ %indvars.iv.next168.i.i.1, %scalar.ph283 ]
  %indvars.iv165.i.i = phi i64 [ %indvars.iv165.i.i.unr, %scalar.ph283.preheader.split.split ], [ %indvars.iv.next166.i.i.1, %scalar.ph283 ]
  %yyn.085.i.i = phi i32 [ %yyn.085.i.i.unr, %scalar.ph283.preheader.split.split ], [ %661, %scalar.ph283 ]
  %652 = getelementptr inbounds i32* %2, i64 %indvars.iv167.i.i
  %653 = load i32* %652, align 4
  %654 = getelementptr inbounds i32* %2, i64 %indvars.iv165.i.i
  %655 = load i32* %654, align 4
  store i32 %655, i32* %652, align 4
  store i32 %653, i32* %654, align 4
  %indvars.iv.next168.i.i = add nsw i64 %indvars.iv167.i.i, 1
  %656 = add nsw i32 %yyn.085.i.i, -1
  %indvars.iv.next166.i.i = add nsw i64 %indvars.iv165.i.i, 1
  %657 = getelementptr inbounds i32* %2, i64 %indvars.iv.next168.i.i
  %658 = load i32* %657, align 4
  %659 = getelementptr inbounds i32* %2, i64 %indvars.iv.next166.i.i
  %660 = load i32* %659, align 4
  store i32 %660, i32* %657, align 4
  store i32 %658, i32* %659, align 4
  %indvars.iv.next168.i.i.1 = add nsw i64 %indvars.iv.next168.i.i, 1
  %661 = add nsw i32 %656, -1
  %662 = icmp sgt i32 %661, 0
  %indvars.iv.next166.i.i.1 = add nsw i64 %indvars.iv.next166.i.i, 1
  br i1 %662, label %scalar.ph283, label %._crit_edge.i.i.loopexit.unr-lcssa, !llvm.loop !7

._crit_edge.i.i.loopexit.unr-lcssa:               ; preds = %scalar.ph283
  br label %._crit_edge.i.i.loopexit

._crit_edge.i.i.loopexit:                         ; preds = %._crit_edge.i.i.loopexit.unr-lcssa, %scalar.ph283.preheader.split
  br label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %._crit_edge.i.i.loopexit, %middle.block282, %573
  %663 = sub nsw i32 %.lcssa377, %gtHi.1.ph.lcssa29.i.i.lcssa
  %664 = sub nsw i32 %gtHi.1.ph.lcssa29.i.i.lcssa, %unHi.1.lcssa.i.i.lcssa
  %665 = icmp slt i32 %663, %664
  %.1.i.i = select i1 %665, i32 %663, i32 %664
  %666 = icmp sgt i32 %.1.i.i, 0
  br i1 %666, label %.lr.ph92.i.i, label %._crit_edge93.i.i

.lr.ph92.i.i:                                     ; preds = %._crit_edge.i.i
  %667 = sub nsw i32 %.lcssa377, %.1.i.i
  %668 = sext i32 %unLo.0.lcssa.i.i373.lcssa to i64
  %669 = add i32 %gtHi.1.ph.lcssa29.i.i.lcssa, -1
  %670 = sub i32 %669, %.lcssa377
  %671 = add i32 %unHi.1.lcssa.i.i.lcssa, -1
  %672 = sub i32 %671, %gtHi.1.ph.lcssa29.i.i.lcssa
  %673 = icmp sgt i32 %670, %672
  %smax = select i1 %673, i32 %670, i32 %672
  %674 = sub i32 -2, %smax
  %675 = zext i32 %674 to i64
  %676 = add nuw nsw i64 %675, 1
  %end.idx = add nsw i64 %676, %668
  %n.vec = and i64 %676, 9223372036854775804
  %end.idx.rnd.down = add i64 %n.vec, %668
  %cmp.zero = icmp eq i64 %n.vec, 0
  %677 = sext i32 %unLo.0.lcssa.i.i373.lcssa to i64
  %678 = add i32 %gtHi.1.ph.lcssa29.i.i.lcssa, -1
  %679 = sub i32 %678, %.lcssa377
  %680 = add i32 %unHi.1.lcssa.i.i.lcssa, -1
  %681 = sub i32 %680, %gtHi.1.ph.lcssa29.i.i.lcssa
  %682 = icmp sgt i32 %679, %681
  %smax240 = select i1 %682, i32 %679, i32 %681
  %683 = sub i32 -2, %smax240
  %684 = zext i32 %683 to i64
  %685 = add i32 %.lcssa377, 2
  %686 = add i32 %685, %smax240
  %687 = sext i32 %686 to i64
  br i1 %cmp.zero, label %middle.block234, label %vector.memcheck251

vector.memcheck251:                               ; preds = %.lr.ph92.i.i
  %scevgep238 = getelementptr i32* %2, i64 %677
  %688 = add nsw i64 %687, %684
  %scevgep245 = getelementptr i32* %2, i64 %688
  %bound0247 = icmp ule i32* %scevgep238, %scevgep245
  %scevgep243 = getelementptr i32* %2, i64 %687
  %689 = add nsw i64 %677, %684
  %scevgep241 = getelementptr i32* %2, i64 %689
  %bound1248 = icmp ule i32* %scevgep243, %scevgep241
  %memcheck.conflict250 = and i1 %bound0247, %bound1248
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end = add i32 %cast.crd, %667
  %cast.crd260 = trunc i64 %n.vec to i32
  %rev.ind.end = sub i32 %.1.i.i, %cast.crd260
  br i1 %memcheck.conflict250, label %middle.block234, label %vector.body233.preheader

vector.body233.preheader:                         ; preds = %vector.memcheck251
  %690 = add i32 %unHi.1.lcssa.i.i.lcssa, -1
  %691 = sub i32 %690, %gtHi.1.ph.lcssa29.i.i.lcssa
  %692 = add i32 %gtHi.1.ph.lcssa29.i.i.lcssa, -1
  %693 = sub i32 %692, %.lcssa377
  %694 = icmp sgt i32 %691, %693
  %smax396 = select i1 %694, i32 %691, i32 %693
  %695 = sub i32 -2, %smax396
  %696 = zext i32 %695 to i64
  %697 = add i64 %696, 1
  %698 = lshr i64 %697, 2
  %699 = mul i64 %698, 4
  %700 = add i64 %699, -4
  %701 = lshr i64 %700, 2
  %702 = add i64 %701, 1
  %xtraiter397 = and i64 %702, 1
  %lcmp.mod398 = icmp ne i64 %xtraiter397, 0
  %lcmp.overflow399 = icmp eq i64 %702, 0
  %lcmp.or400 = or i1 %lcmp.overflow399, %lcmp.mod398
  br i1 %lcmp.or400, label %vector.body233.unr, label %vector.body233.preheader.split

vector.body233.unr:                               ; preds = %vector.body233.preheader
  %normalized.idx266.unr = sub i64 %668, %668
  %703 = trunc i64 %normalized.idx266.unr to i32
  %offset.idx.unr = add i32 %667, %703
  %704 = getelementptr inbounds i32* %2, i64 %668
  %705 = bitcast i32* %704 to <4 x i32>*
  %wide.load275.unr = load <4 x i32>* %705, align 4
  %706 = add i32 %offset.idx.unr, 1
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds i32* %2, i64 %707
  %709 = bitcast i32* %708 to <4 x i32>*
  %wide.load276.unr = load <4 x i32>* %709, align 4
  %710 = bitcast i32* %704 to <4 x i32>*
  store <4 x i32> %wide.load276.unr, <4 x i32>* %710, align 4
  %711 = bitcast i32* %708 to <4 x i32>*
  store <4 x i32> %wide.load275.unr, <4 x i32>* %711, align 4
  %index.next262.unr = add i64 %668, 4
  %712 = icmp eq i64 %index.next262.unr, %end.idx.rnd.down
  br label %vector.body233.preheader.split

vector.body233.preheader.split:                   ; preds = %vector.body233.unr, %vector.body233.preheader
  %index236.unr = phi i64 [ %668, %vector.body233.preheader ], [ %index.next262.unr, %vector.body233.unr ]
  %713 = icmp ult i64 %702, 2
  br i1 %713, label %middle.block234.loopexit, label %vector.body233.preheader.split.split

vector.body233.preheader.split.split:             ; preds = %vector.body233.preheader.split
  br label %vector.body233

vector.body233:                                   ; preds = %vector.body233, %vector.body233.preheader.split.split
  %index236 = phi i64 [ %index236.unr, %vector.body233.preheader.split.split ], [ %index.next262.1, %vector.body233 ]
  %normalized.idx266 = sub i64 %index236, %668
  %714 = trunc i64 %normalized.idx266 to i32
  %offset.idx = add i32 %667, %714
  %715 = getelementptr inbounds i32* %2, i64 %index236
  %716 = bitcast i32* %715 to <4 x i32>*
  %wide.load275 = load <4 x i32>* %716, align 4
  %717 = add i32 %offset.idx, 1
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i32* %2, i64 %718
  %720 = bitcast i32* %719 to <4 x i32>*
  %wide.load276 = load <4 x i32>* %720, align 4
  %721 = bitcast i32* %715 to <4 x i32>*
  store <4 x i32> %wide.load276, <4 x i32>* %721, align 4
  %722 = bitcast i32* %719 to <4 x i32>*
  store <4 x i32> %wide.load275, <4 x i32>* %722, align 4
  %index.next262 = add i64 %index236, 4
  %normalized.idx266.1 = sub i64 %index.next262, %668
  %723 = trunc i64 %normalized.idx266.1 to i32
  %offset.idx.1 = add i32 %667, %723
  %724 = getelementptr inbounds i32* %2, i64 %index.next262
  %725 = bitcast i32* %724 to <4 x i32>*
  %wide.load275.1 = load <4 x i32>* %725, align 4
  %726 = add i32 %offset.idx.1, 1
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds i32* %2, i64 %727
  %729 = bitcast i32* %728 to <4 x i32>*
  %wide.load276.1 = load <4 x i32>* %729, align 4
  %730 = bitcast i32* %724 to <4 x i32>*
  store <4 x i32> %wide.load276.1, <4 x i32>* %730, align 4
  %731 = bitcast i32* %728 to <4 x i32>*
  store <4 x i32> %wide.load275.1, <4 x i32>* %731, align 4
  %index.next262.1 = add i64 %index.next262, 4
  %732 = icmp eq i64 %index.next262.1, %end.idx.rnd.down
  br i1 %732, label %middle.block234.loopexit.unr-lcssa, label %vector.body233, !llvm.loop !8

middle.block234.loopexit.unr-lcssa:               ; preds = %vector.body233
  br label %middle.block234.loopexit

middle.block234.loopexit:                         ; preds = %middle.block234.loopexit.unr-lcssa, %vector.body233.preheader.split
  br label %middle.block234

middle.block234:                                  ; preds = %middle.block234.loopexit, %vector.memcheck251, %.lr.ph92.i.i
  %resume.val252 = phi i64 [ %668, %.lr.ph92.i.i ], [ %668, %vector.memcheck251 ], [ %end.idx.rnd.down, %middle.block234.loopexit ]
  %resume.val256 = phi i32 [ %667, %.lr.ph92.i.i ], [ %667, %vector.memcheck251 ], [ %ind.end, %middle.block234.loopexit ]
  %resume.val258 = phi i32 [ %.1.i.i, %.lr.ph92.i.i ], [ %.1.i.i, %vector.memcheck251 ], [ %rev.ind.end, %middle.block234.loopexit ]
  %cmp.n261 = icmp eq i64 %end.idx, %resume.val252
  br i1 %cmp.n261, label %._crit_edge93.i.i, label %scalar.ph235.preheader

scalar.ph235.preheader:                           ; preds = %middle.block234
  %733 = add i32 %resume.val258, 1
  %734 = mul i32 %resume.val258, -1
  %735 = icmp sgt i32 %734, -1
  %smax401 = select i1 %735, i32 %734, i32 -1
  %736 = add i32 %733, %smax401
  %xtraiter402 = and i32 %736, 1
  %lcmp.mod403 = icmp ne i32 %xtraiter402, 0
  %lcmp.overflow404 = icmp eq i32 %736, 0
  %lcmp.or405 = or i1 %lcmp.overflow404, %lcmp.mod403
  br i1 %lcmp.or405, label %scalar.ph235.unr, label %scalar.ph235.preheader.split

scalar.ph235.unr:                                 ; preds = %scalar.ph235.preheader
  %yyp25.090.i.i.unr = add nsw i32 %resume.val256, 1
  %737 = getelementptr inbounds i32* %2, i64 %resume.val252
  %738 = load i32* %737, align 4
  %739 = sext i32 %yyp25.090.i.i.unr to i64
  %740 = getelementptr inbounds i32* %2, i64 %739
  %741 = load i32* %740, align 4
  store i32 %741, i32* %737, align 4
  store i32 %738, i32* %740, align 4
  %indvars.iv.next177.i.i.unr = add nsw i64 %resume.val252, 1
  %742 = add nsw i32 %resume.val258, -1
  %743 = icmp sgt i32 %742, 0
  br label %scalar.ph235.preheader.split

scalar.ph235.preheader.split:                     ; preds = %scalar.ph235.unr, %scalar.ph235.preheader
  %indvars.iv176.i.i.unr = phi i64 [ %resume.val252, %scalar.ph235.preheader ], [ %indvars.iv.next177.i.i.unr, %scalar.ph235.unr ]
  %yyp25.090.in.i.i.unr = phi i32 [ %resume.val256, %scalar.ph235.preheader ], [ %yyp25.090.i.i.unr, %scalar.ph235.unr ]
  %yyn6.089.i.i.unr = phi i32 [ %resume.val258, %scalar.ph235.preheader ], [ %742, %scalar.ph235.unr ]
  %744 = icmp ult i32 %736, 2
  br i1 %744, label %._crit_edge93.i.i.loopexit, label %scalar.ph235.preheader.split.split

scalar.ph235.preheader.split.split:               ; preds = %scalar.ph235.preheader.split
  br label %scalar.ph235

scalar.ph235:                                     ; preds = %scalar.ph235, %scalar.ph235.preheader.split.split
  %indvars.iv176.i.i = phi i64 [ %indvars.iv176.i.i.unr, %scalar.ph235.preheader.split.split ], [ %indvars.iv.next177.i.i.1, %scalar.ph235 ]
  %yyp25.090.in.i.i = phi i32 [ %yyp25.090.in.i.i.unr, %scalar.ph235.preheader.split.split ], [ %yyp25.090.i.i.1, %scalar.ph235 ]
  %yyn6.089.i.i = phi i32 [ %yyn6.089.i.i.unr, %scalar.ph235.preheader.split.split ], [ %756, %scalar.ph235 ]
  %yyp25.090.i.i = add nsw i32 %yyp25.090.in.i.i, 1
  %745 = getelementptr inbounds i32* %2, i64 %indvars.iv176.i.i
  %746 = load i32* %745, align 4
  %747 = sext i32 %yyp25.090.i.i to i64
  %748 = getelementptr inbounds i32* %2, i64 %747
  %749 = load i32* %748, align 4
  store i32 %749, i32* %745, align 4
  store i32 %746, i32* %748, align 4
  %indvars.iv.next177.i.i = add nsw i64 %indvars.iv176.i.i, 1
  %750 = add nsw i32 %yyn6.089.i.i, -1
  %yyp25.090.i.i.1 = add nsw i32 %yyp25.090.i.i, 1
  %751 = getelementptr inbounds i32* %2, i64 %indvars.iv.next177.i.i
  %752 = load i32* %751, align 4
  %753 = sext i32 %yyp25.090.i.i.1 to i64
  %754 = getelementptr inbounds i32* %2, i64 %753
  %755 = load i32* %754, align 4
  store i32 %755, i32* %751, align 4
  store i32 %752, i32* %754, align 4
  %indvars.iv.next177.i.i.1 = add nsw i64 %indvars.iv.next177.i.i, 1
  %756 = add nsw i32 %750, -1
  %757 = icmp sgt i32 %756, 0
  br i1 %757, label %scalar.ph235, label %._crit_edge93.i.i.loopexit.unr-lcssa, !llvm.loop !9

._crit_edge93.i.i.loopexit.unr-lcssa:             ; preds = %scalar.ph235
  br label %._crit_edge93.i.i.loopexit

._crit_edge93.i.i.loopexit:                       ; preds = %._crit_edge93.i.i.loopexit.unr-lcssa, %scalar.ph235.preheader.split
  br label %._crit_edge93.i.i

._crit_edge93.i.i:                                ; preds = %._crit_edge93.i.i.loopexit, %middle.block234, %._crit_edge.i.i
  %758 = sub i32 %.lcssa375, %ltLo.0.ph11.lcssa.i.i370.lcssa
  %759 = add i32 %758, %unLo.0.lcssa.i.i373.lcssa
  %760 = add nsw i32 %759, -1
  %761 = sub nsw i32 %.lcssa377, %664
  %762 = add nsw i32 %761, 1
  %763 = add nsw i32 %.lcssa379, 1
  %764 = sub nsw i32 %760, %.lcssa375
  %765 = sub nsw i32 %.lcssa377, %762
  %766 = icmp slt i32 %764, %765
  %.2.i.i = select i1 %766, i32 %.lcssa375, i32 %762
  %.3.i.i = select i1 %766, i32 %762, i32 %.lcssa375
  %.4.i.i = select i1 %766, i32 %760, i32 %.lcssa377
  %.5.i.i = select i1 %766, i32 %.lcssa377, i32 %760
  %767 = sub nsw i32 %.4.i.i, %.2.i.i
  %768 = sub nsw i32 %761, %759
  %769 = icmp slt i32 %767, %768
  %..2.i.i = select i1 %769, i32 %759, i32 %.2.i.i
  %.4..i.i = select i1 %769, i32 %.4.i.i, i32 %761
  %..4.i.i = select i1 %769, i32 %761, i32 %.4.i.i
  %.6.i.i = select i1 %769, i32 %.lcssa379, i32 %763
  %.7.i.i = select i1 %769, i32 %763, i32 %.lcssa379
  %.2..i.i = select i1 %769, i32 %.2.i.i, i32 %759
  %770 = sub nsw i32 %.5.i.i, %.3.i.i
  %771 = sub nsw i32 %..4.i.i, %..2.i.i
  %772 = icmp slt i32 %770, %771
  %.3.nextLo.sroa.8.1.i.i = select i1 %772, i32 %.3.i.i, i32 %..2.i.i
  %nextLo.sroa.8.1..3.i.i = select i1 %772, i32 %..2.i.i, i32 %.3.i.i
  %.5.nextHi.sroa.8.1.i.i = select i1 %772, i32 %.5.i.i, i32 %..4.i.i
  %nextHi.sroa.8.1..5.i.i = select i1 %772, i32 %..4.i.i, i32 %.5.i.i
  %.nextD.sroa.6.1.i.i = select i1 %772, i32 %.lcssa379, i32 %.7.i.i
  %nextD.sroa.6.1..i.i = select i1 %772, i32 %.7.i.i, i32 %.lcssa379
  store i32 %nextLo.sroa.8.1..3.i.i, i32* %367, align 4
  store i32 %nextHi.sroa.8.1..5.i.i, i32* %368, align 4
  store i32 %nextD.sroa.6.1..i.i, i32* %369, align 4
  %773 = sext i32 %sp.0.ph94.i.i to i64
  %774 = getelementptr inbounds [100 x i32]* %stackLo.i.i, i64 0, i64 %773
  store i32 %.3.nextLo.sroa.8.1.i.i, i32* %774, align 4
  %775 = getelementptr inbounds [100 x i32]* %stackHi.i.i, i64 0, i64 %773
  store i32 %.5.nextHi.sroa.8.1.i.i, i32* %775, align 4
  %776 = getelementptr inbounds [100 x i32]* %stackD.i.i, i64 0, i64 %773
  store i32 %.nextD.sroa.6.1.i.i, i32* %776, align 4
  %777 = add nsw i32 %sp.0.ph94.i.i, 1
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds [100 x i32]* %stackLo.i.i, i64 0, i64 %778
  store i32 %.2..i.i, i32* %779, align 4
  %780 = getelementptr inbounds [100 x i32]* %stackHi.i.i, i64 0, i64 %778
  store i32 %.4..i.i, i32* %780, align 4
  %781 = getelementptr inbounds [100 x i32]* %stackD.i.i, i64 0, i64 %778
  store i32 %.6.i.i, i32* %781, align 4
  %782 = add nsw i32 %sp.0.ph94.i.i, 2
  br label %.outer15.backedge.i.i

mainQSort3.exit.i.loopexit:                       ; preds = %472
  %.lcssa383 = phi i32 [ %475, %472 ]
  br label %mainQSort3.exit.i

mainQSort3.exit.i.loopexit339:                    ; preds = %.outer15.backedge.i.i, %mainSimpleSort.exit.i.i
  %.ph = phi i32 [ %.pre206.pre.i, %.outer15.backedge.i.i ], [ %.pr.i.i, %mainSimpleSort.exit.i.i ]
  br label %mainQSort3.exit.i

mainQSort3.exit.i:                                ; preds = %mainQSort3.exit.i.loopexit339, %mainQSort3.exit.i.loopexit
  %783 = phi i32 [ %.lcssa383, %mainQSort3.exit.i.loopexit ], [ %.ph, %mainQSort3.exit.i.loopexit339 ]
  call void @llvm.lifetime.end(i64 400, i8* %329) #2
  call void @llvm.lifetime.end(i64 400, i8* %328) #2
  call void @llvm.lifetime.end(i64 400, i8* %327) #2
  %784 = icmp slt i32 %783, 0
  br i1 %784, label %mainSort.exit.loopexit, label %mainQSort3.exit._crit_edge.i

mainQSort3.exit._crit_edge.i:                     ; preds = %mainQSort3.exit.i
  %785 = add i32 %numQSorted.160.i, 1
  %786 = sub i32 %785, %350
  %787 = add i32 %786, %355
  %.pre207.i = load i32* %345, align 4
  br label %788

; <label>:788                                     ; preds = %mainQSort3.exit._crit_edge.i, %349, %343
  %789 = phi i32 [ %340, %343 ], [ %783, %mainQSort3.exit._crit_edge.i ], [ %340, %349 ]
  %790 = phi i32 [ %346, %343 ], [ %.pre207.i, %mainQSort3.exit._crit_edge.i ], [ %346, %349 ]
  %numQSorted.2.i = phi i32 [ %numQSorted.160.i, %343 ], [ %787, %mainQSort3.exit._crit_edge.i ], [ %numQSorted.160.i, %349 ]
  %791 = or i32 %790, 2097152
  store i32 %791, i32* %345, align 4
  br label %792

; <label>:792                                     ; preds = %788, %339
  %793 = phi i32 [ %789, %788 ], [ %340, %339 ]
  %numQSorted.3.i = phi i32 [ %numQSorted.2.i, %788 ], [ %numQSorted.160.i, %339 ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %794 = trunc i64 %indvars.iv.next.i to i32
  %795 = icmp slt i32 %794, 256
  br i1 %795, label %339, label %796

; <label>:796                                     ; preds = %792
  %numQSorted.3.i.lcssa = phi i32 [ %numQSorted.3.i, %792 ]
  %.lcssa385 = phi i32 [ %793, %792 ]
  %797 = sext i32 %336 to i64
  %798 = getelementptr inbounds [256 x i8]* %bigDone.i, i64 0, i64 %797
  %799 = load i8* %798, align 1
  %800 = icmp eq i8 %799, 0
  br i1 %800, label %.preheader3.i.preheader, label %801

; <label>:801                                     ; preds = %796
  tail call void @BZ2_bz__AssertH__fail(i32 1006) #2
  br label %.preheader3.i.preheader

.preheader3.i.preheader:                          ; preds = %801, %796
  br label %.preheader3.i

.preheader3.i:                                    ; preds = %.preheader3.i, %.preheader3.i.preheader
  %indvars.iv166.i = phi i64 [ %indvars.iv.next167.i, %.preheader3.i ], [ 0, %.preheader3.i.preheader ]
  %802 = shl i64 %indvars.iv166.i, 8
  %803 = add nsw i64 %802, %797
  %804 = getelementptr inbounds i32* %6, i64 %803
  %805 = load i32* %804, align 4
  %806 = and i32 %805, -2097153
  %807 = getelementptr inbounds [256 x i32]* %copyStart.i, i64 0, i64 %indvars.iv166.i
  store i32 %806, i32* %807, align 4
  %808 = add nsw i64 %803, 1
  %809 = getelementptr inbounds i32* %6, i64 %808
  %810 = load i32* %809, align 4
  %811 = and i32 %810, -2097153
  %812 = add i32 %811, -1
  %813 = getelementptr inbounds [256 x i32]* %copyEnd.i, i64 0, i64 %indvars.iv166.i
  store i32 %812, i32* %813, align 4
  %indvars.iv.next167.i = add nuw nsw i64 %indvars.iv166.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next167.i, 256
  br i1 %exitcond.i, label %814, label %.preheader3.i

; <label>:814                                     ; preds = %.preheader3.i
  %815 = getelementptr inbounds i32* %6, i64 %338
  %816 = load i32* %815, align 4
  %817 = and i32 %816, -2097153
  %818 = getelementptr inbounds [256 x i32]* %copyStart.i, i64 0, i64 %797
  %819 = load i32* %818, align 4
  %820 = icmp slt i32 %817, %819
  br i1 %820, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %814
  %821 = sext i32 %817 to i64
  br label %822

; <label>:822                                     ; preds = %842, %.lr.ph.i
  %823 = phi i32 [ %819, %.lr.ph.i ], [ %843, %842 ]
  %indvars.iv168.i = phi i64 [ %821, %.lr.ph.i ], [ %indvars.iv.next169.i, %842 ]
  %824 = getelementptr inbounds i32* %2, i64 %indvars.iv168.i
  %825 = load i32* %824, align 4
  %826 = add i32 %825, -1
  %827 = icmp slt i32 %826, 0
  %828 = select i1 %827, i32 %8, i32 0
  %..i = add nsw i32 %828, %826
  %829 = sext i32 %..i to i64
  %830 = getelementptr inbounds i8* %4, i64 %829
  %831 = load i8* %830, align 1
  %832 = zext i8 %831 to i64
  %833 = getelementptr inbounds [256 x i8]* %bigDone.i, i64 0, i64 %832
  %834 = load i8* %833, align 1
  %835 = icmp eq i8 %834, 0
  br i1 %835, label %836, label %842

; <label>:836                                     ; preds = %822
  %837 = getelementptr inbounds [256 x i32]* %copyStart.i, i64 0, i64 %832
  %838 = load i32* %837, align 4
  %839 = add nsw i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = sext i32 %838 to i64
  %841 = getelementptr inbounds i32* %2, i64 %840
  store i32 %..i, i32* %841, align 4
  %.pre204.i = load i32* %818, align 4
  br label %842

; <label>:842                                     ; preds = %836, %822
  %843 = phi i32 [ %823, %822 ], [ %.pre204.i, %836 ]
  %indvars.iv.next169.i = add nsw i64 %indvars.iv168.i, 1
  %844 = trunc i64 %indvars.iv.next169.i to i32
  %845 = icmp slt i32 %844, %843
  br i1 %845, label %822, label %._crit_edge.i.loopexit

._crit_edge.i.loopexit:                           ; preds = %842
  %.lcssa386 = phi i32 [ %843, %842 ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %814
  %846 = phi i32 [ %819, %814 ], [ %.lcssa386, %._crit_edge.i.loopexit ]
  %847 = add i32 %337, 256
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i32* %6, i64 %848
  %850 = load i32* %849, align 4
  %851 = and i32 %850, -2097153
  %j.764.i = add i32 %851, -1
  %852 = getelementptr inbounds [256 x i32]* %copyEnd.i, i64 0, i64 %797
  %853 = load i32* %852, align 4
  %854 = icmp sgt i32 %j.764.i, %853
  br i1 %854, label %.lr.ph67.i.preheader, label %._crit_edge68.i

.lr.ph67.i.preheader:                             ; preds = %._crit_edge.i
  br label %.lr.ph67.i

.lr.ph67.i:                                       ; preds = %.backedge.i, %.lr.ph67.i.preheader
  %855 = phi i32 [ %869, %.backedge.i ], [ %853, %.lr.ph67.i.preheader ]
  %j.765.i = phi i32 [ %j.7.i, %.backedge.i ], [ %j.764.i, %.lr.ph67.i.preheader ]
  %856 = sext i32 %j.765.i to i64
  %857 = getelementptr inbounds i32* %2, i64 %856
  %858 = load i32* %857, align 4
  %859 = add i32 %858, -1
  %860 = icmp slt i32 %859, 0
  %861 = select i1 %860, i32 %8, i32 0
  %.1.i = add nsw i32 %861, %859
  %862 = sext i32 %.1.i to i64
  %863 = getelementptr inbounds i8* %4, i64 %862
  %864 = load i8* %863, align 1
  %865 = zext i8 %864 to i64
  %866 = getelementptr inbounds [256 x i8]* %bigDone.i, i64 0, i64 %865
  %867 = load i8* %866, align 1
  %868 = icmp eq i8 %867, 0
  br i1 %868, label %871, label %.backedge.i

.backedge.i:                                      ; preds = %871, %.lr.ph67.i
  %869 = phi i32 [ %855, %.lr.ph67.i ], [ %.pre205.i, %871 ]
  %j.7.i = add i32 %j.765.i, -1
  %870 = icmp sgt i32 %j.7.i, %869
  br i1 %870, label %.lr.ph67.i, label %._crit_edge68.i.loopexit

; <label>:871                                     ; preds = %.lr.ph67.i
  %872 = getelementptr inbounds [256 x i32]* %copyEnd.i, i64 0, i64 %865
  %873 = load i32* %872, align 4
  %874 = add nsw i32 %873, -1
  store i32 %874, i32* %872, align 4
  %875 = sext i32 %873 to i64
  %876 = getelementptr inbounds i32* %2, i64 %875
  store i32 %.1.i, i32* %876, align 4
  %.pre205.i = load i32* %852, align 4
  br label %.backedge.i

._crit_edge68.i.loopexit:                         ; preds = %.backedge.i
  %.lcssa387 = phi i32 [ %869, %.backedge.i ]
  br label %._crit_edge68.i

._crit_edge68.i:                                  ; preds = %._crit_edge68.i.loopexit, %._crit_edge.i
  %.lcssa57.i = phi i32 [ %853, %._crit_edge.i ], [ %.lcssa387, %._crit_edge68.i.loopexit ]
  %877 = add nsw i32 %846, -1
  %878 = icmp eq i32 %877, %.lcssa57.i
  br i1 %878, label %.preheader.i.preheader, label %879

; <label>:879                                     ; preds = %._crit_edge68.i
  %880 = icmp eq i32 %846, 0
  %881 = icmp eq i32 %.lcssa57.i, %50
  %or.cond.i = and i1 %880, %881
  br i1 %or.cond.i, label %.preheader.i.preheader, label %882

; <label>:882                                     ; preds = %879
  tail call void @BZ2_bz__AssertH__fail(i32 1007) #2
  br label %.preheader.i.preheader

.preheader.i.preheader:                           ; preds = %882, %879, %._crit_edge68.i
  br label %.preheader.i

.preheader.i:                                     ; preds = %.preheader.i, %.preheader.i.preheader
  %indvars.iv170.i = phi i64 [ 0, %.preheader.i.preheader ], [ %indvars.iv.next171.i.1, %.preheader.i ]
  %883 = shl i64 %indvars.iv170.i, 8
  %884 = add nsw i64 %883, %797
  %885 = getelementptr inbounds i32* %6, i64 %884
  %886 = load i32* %885, align 4
  %887 = or i32 %886, 2097152
  store i32 %887, i32* %885, align 4
  %indvars.iv.next171.i = add nuw nsw i64 %indvars.iv170.i, 1
  %888 = shl i64 %indvars.iv.next171.i, 8
  %889 = add nsw i64 %888, %797
  %890 = getelementptr inbounds i32* %6, i64 %889
  %891 = load i32* %890, align 4
  %892 = or i32 %891, 2097152
  store i32 %892, i32* %890, align 4
  %indvars.iv.next171.i.1 = add nuw nsw i64 %indvars.iv.next171.i, 1
  %exitcond172.i.1 = icmp eq i64 %indvars.iv.next171.i.1, 256
  br i1 %exitcond172.i.1, label %893, label %.preheader.i

; <label>:893                                     ; preds = %.preheader.i
  store i8 1, i8* %798, align 1
  %894 = trunc i64 %indvars.iv175.i to i32
  %895 = icmp slt i32 %894, 255
  br i1 %895, label %896, label %930

; <label>:896                                     ; preds = %893
  %897 = load i32* %815, align 4
  %898 = and i32 %897, -2097153
  %899 = load i32* %849, align 4
  %900 = and i32 %899, -2097153
  %901 = sub i32 %900, %898
  br label %902

; <label>:902                                     ; preds = %902, %896
  %shifts.0.i = phi i32 [ 0, %896 ], [ %905, %902 ]
  %903 = ashr i32 %901, %shifts.0.i
  %904 = icmp sgt i32 %903, 65534
  %905 = add nsw i32 %shifts.0.i, 1
  br i1 %904, label %902, label %906

; <label>:906                                     ; preds = %902
  %shifts.0.i.lcssa = phi i32 [ %shifts.0.i, %902 ]
  %907 = add nsw i32 %901, -1
  %908 = icmp sgt i32 %901, 0
  br i1 %908, label %.lr.ph73.i, label %._crit_edge74.i

.lr.ph73.i:                                       ; preds = %906
  %909 = sext i32 %901 to i64
  %910 = sext i32 %898 to i64
  br label %911

; <label>:911                                     ; preds = %925, %.lr.ph73.i
  %indvars.iv173.in.i = phi i64 [ %909, %.lr.ph73.i ], [ %indvars.iv173.i, %925 ]
  %indvars.iv173.i = add nsw i64 %indvars.iv173.in.i, -1
  %912 = add nsw i64 %indvars.iv173.i, %910
  %913 = getelementptr inbounds i32* %2, i64 %912
  %914 = load i32* %913, align 4
  %915 = trunc i64 %indvars.iv173.i to i32
  %916 = ashr i32 %915, %shifts.0.i.lcssa
  %917 = trunc i32 %916 to i16
  %918 = sext i32 %914 to i64
  %919 = getelementptr inbounds i16* %26, i64 %918
  store i16 %917, i16* %919, align 2
  %920 = icmp slt i32 %914, 34
  br i1 %920, label %921, label %925

; <label>:921                                     ; preds = %911
  %922 = add nsw i32 %914, %8
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i16* %26, i64 %923
  store i16 %917, i16* %924, align 2
  br label %925

; <label>:925                                     ; preds = %921, %911
  %926 = icmp sgt i32 %915, 0
  br i1 %926, label %911, label %._crit_edge74.i.loopexit

._crit_edge74.i.loopexit:                         ; preds = %925
  br label %._crit_edge74.i

._crit_edge74.i:                                  ; preds = %._crit_edge74.i.loopexit, %906
  %927 = ashr i32 %907, %shifts.0.i.lcssa
  %928 = icmp slt i32 %927, 65536
  br i1 %928, label %930, label %929

; <label>:929                                     ; preds = %._crit_edge74.i
  tail call void @BZ2_bz__AssertH__fail(i32 1002) #2
  br label %930

; <label>:930                                     ; preds = %929, %._crit_edge74.i, %893
  %indvars.iv.next176.i = add nuw nsw i64 %indvars.iv175.i, 1
  %931 = trunc i64 %indvars.iv.next176.i to i32
  %932 = icmp slt i32 %931, 256
  br i1 %932, label %333, label %933

; <label>:933                                     ; preds = %930
  %.lcssa385.lcssa = phi i32 [ %.lcssa385, %930 ]
  %numQSorted.3.i.lcssa.lcssa = phi i32 [ %numQSorted.3.i.lcssa, %930 ]
  br i1 %34, label %934, label %mainSort.exit

; <label>:934                                     ; preds = %933
  %935 = load %struct._IO_FILE** @stderr, align 8
  %936 = sub nsw i32 %8, %numQSorted.3.i.lcssa.lcssa
  %937 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %935, i8* getelementptr inbounds ([44 x i8]* @.str53, i64 0, i64 0), i32 %8, i32 %numQSorted.3.i.lcssa.lcssa, i32 %936) #12
  br label %mainSort.exit

mainSort.exit.loopexit:                           ; preds = %mainQSort3.exit.i
  %.lcssa384 = phi i32 [ %783, %mainQSort3.exit.i ]
  br label %mainSort.exit

mainSort.exit:                                    ; preds = %mainSort.exit.loopexit, %934, %933
  %938 = phi i32 [ %.lcssa385.lcssa, %933 ], [ %.lcssa385.lcssa, %934 ], [ %.lcssa384, %mainSort.exit.loopexit ]
  call void @llvm.lifetime.end(i64 1024, i8* %33) #2
  call void @llvm.lifetime.end(i64 1024, i8* %32) #2
  call void @llvm.lifetime.end(i64 256, i8* %bigDone186.i) #2
  call void @llvm.lifetime.end(i64 1024, i8* %31) #2
  %939 = icmp sgt i32 %10, 2
  br i1 %939, label %940, label %950

; <label>:940                                     ; preds = %mainSort.exit
  %941 = load %struct._IO_FILE** @stderr, align 8
  %942 = sub nsw i32 %30, %938
  %943 = sitofp i32 %942 to float
  %944 = icmp eq i32 %8, 0
  %945 = sitofp i32 %8 to float
  %946 = select i1 %944, float 1.000000e+00, float %945
  %947 = fdiv float %943, %946
  %948 = fpext float %947 to double
  %949 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %941, i8* getelementptr inbounds ([38 x i8]* @.str, i64 0, i64 0), i32 %942, i32 %8, double %948) #12
  br label %950

; <label>:950                                     ; preds = %940, %mainSort.exit
  %951 = icmp slt i32 %938, 0
  br i1 %951, label %952, label %962

; <label>:952                                     ; preds = %950
  %953 = icmp sgt i32 %10, 1
  br i1 %953, label %954, label %957

; <label>:954                                     ; preds = %952
  %955 = load %struct._IO_FILE** @stderr, align 8
  %956 = tail call i64 @fwrite(i8* getelementptr inbounds ([54 x i8]* @.str1, i64 0, i64 0), i64 53, i64 1, %struct._IO_FILE* %955) #13
  br label %957

; <label>:957                                     ; preds = %954, %952
  %958 = getelementptr inbounds %struct.EState* %s, i64 0, i32 4
  %959 = load i32** %958, align 8
  %960 = getelementptr inbounds %struct.EState* %s, i64 0, i32 5
  %961 = load i32** %960, align 8
  tail call fastcc void @fallbackSort(i32* %959, i32* %961, i32* %6, i32 %8, i32 %10)
  br label %962

; <label>:962                                     ; preds = %957, %950, %14
  %963 = getelementptr inbounds %struct.EState* %s, i64 0, i32 7
  store i32 -1, i32* %963, align 4
  %964 = load i32* %7, align 4
  %965 = icmp sgt i32 %964, 0
  br i1 %965, label %.lr.ph.preheader, label %thread-pre-split.thread

.lr.ph.preheader:                                 ; preds = %962
  br label %.lr.ph

; <label>:966                                     ; preds = %.lr.ph
  %967 = trunc i64 %indvars.iv.next to i32
  %968 = icmp slt i32 %967, %964
  br i1 %968, label %.lr.ph, label %thread-pre-split.thread.loopexit

.lr.ph:                                           ; preds = %966, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %966 ], [ 0, %.lr.ph.preheader ]
  %969 = getelementptr inbounds i32* %2, i64 %indvars.iv
  %970 = load i32* %969, align 4
  %971 = icmp eq i32 %970, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %971, label %thread-pre-split, label %966

thread-pre-split:                                 ; preds = %.lr.ph
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %.lr.ph ]
  %972 = trunc i64 %indvars.iv.lcssa to i32
  store i32 %972, i32* %963, align 4
  %phitmp = icmp eq i32 %972, -1
  br i1 %phitmp, label %thread-pre-split.thread, label %973

thread-pre-split.thread.loopexit:                 ; preds = %966
  br label %thread-pre-split.thread

thread-pre-split.thread:                          ; preds = %thread-pre-split.thread.loopexit, %thread-pre-split, %962
  tail call void @BZ2_bz__AssertH__fail(i32 1003) #2
  br label %973

; <label>:973                                     ; preds = %thread-pre-split.thread, %thread-pre-split
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fallbackSort(i32* %fmap, i32* nocapture %eclass, i32* nocapture %bhtab, i32 %nblock, i32 %verb) #0 {
  %bhtab181 = bitcast i32* %bhtab to i8*
  %stackLo.i = alloca [100 x i32], align 16
  %stackHi.i = alloca [100 x i32], align 16
  %ftab = alloca [257 x i32], align 16
  %1 = bitcast [257 x i32]* %ftab to i8*
  %ftabCopy = alloca [256 x i32], align 16
  %2 = bitcast [256 x i32]* %ftabCopy to i8*
  call void @llvm.lifetime.start(i64 1028, i8* %1) #2
  call void @llvm.lifetime.start(i64 1024, i8* %2) #2
  %3 = bitcast i32* %eclass to i8*
  %4 = icmp sgt i32 %verb, 3
  br i1 %4, label %5, label %.preheader20

; <label>:5                                       ; preds = %0
  %6 = load %struct._IO_FILE** @stderr, align 8
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8]* @.str32, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %6) #13
  br label %.preheader20

.preheader20:                                     ; preds = %5, %0
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 1028, i32 16, i1 false)
  %8 = icmp sgt i32 %nblock, 0
  br i1 %8, label %.lr.ph101.preheader, label %.preheader18

.lr.ph101.preheader:                              ; preds = %.preheader20
  %xtraiter409 = and i32 %nblock, 1
  %lcmp.mod410 = icmp ne i32 %xtraiter409, 0
  %lcmp.overflow411 = icmp eq i32 %nblock, 0
  %lcmp.or412 = or i1 %lcmp.overflow411, %lcmp.mod410
  br i1 %lcmp.or412, label %.lr.ph101.unr, label %.lr.ph101.preheader.split

.lr.ph101.unr:                                    ; preds = %.lr.ph101.preheader
  %9 = getelementptr inbounds i8* %3, i64 0
  %10 = load i8* %9, align 1
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %11
  %13 = load i32* %12, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %12, align 4
  %indvars.iv.next193.unr = add nuw nsw i64 0, 1
  %lftr.wideiv194.unr = trunc i64 %indvars.iv.next193.unr to i32
  %exitcond195.unr = icmp eq i32 %lftr.wideiv194.unr, %nblock
  br label %.lr.ph101.preheader.split

.lr.ph101.preheader.split:                        ; preds = %.lr.ph101.unr, %.lr.ph101.preheader
  %indvars.iv192.unr = phi i64 [ 0, %.lr.ph101.preheader ], [ %indvars.iv.next193.unr, %.lr.ph101.unr ]
  %15 = icmp ult i32 %nblock, 2
  br i1 %15, label %..preheader18_crit_edge, label %.lr.ph101.preheader.split.split

.lr.ph101.preheader.split.split:                  ; preds = %.lr.ph101.preheader.split
  br label %.lr.ph101

..preheader18_crit_edge.unr-lcssa:                ; preds = %.lr.ph101
  br label %..preheader18_crit_edge

..preheader18_crit_edge:                          ; preds = %..preheader18_crit_edge.unr-lcssa, %.lr.ph101.preheader.split
  %.phi.trans.insert.phi.trans.insert = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 0
  %.pre.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 16
  br label %.preheader18

.preheader18:                                     ; preds = %..preheader18_crit_edge, %.preheader20
  %.pre = phi i32 [ %.pre.pre, %..preheader18_crit_edge ], [ 0, %.preheader20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %1, i64 1024, i32 16, i1 false)
  br label %38

.lr.ph101:                                        ; preds = %.lr.ph101, %.lr.ph101.preheader.split.split
  %indvars.iv192 = phi i64 [ %indvars.iv192.unr, %.lr.ph101.preheader.split.split ], [ %indvars.iv.next193.1, %.lr.ph101 ]
  %16 = getelementptr inbounds i8* %3, i64 %indvars.iv192
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %18
  %20 = load i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %indvars.iv.next193 = add nuw nsw i64 %indvars.iv192, 1
  %lftr.wideiv194 = trunc i64 %indvars.iv.next193 to i32
  %22 = getelementptr inbounds i8* %3, i64 %indvars.iv.next193
  %23 = load i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %24
  %26 = load i32* %25, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %25, align 4
  %indvars.iv.next193.1 = add nuw nsw i64 %indvars.iv.next193, 1
  %lftr.wideiv194.1 = trunc i64 %indvars.iv.next193.1 to i32
  %exitcond195.1 = icmp eq i32 %lftr.wideiv194.1, %nblock
  br i1 %exitcond195.1, label %..preheader18_crit_edge.unr-lcssa, label %.lr.ph101

.preheader16:                                     ; preds = %38
  br i1 %8, label %.lr.ph96.preheader, label %._crit_edge97

.lr.ph96.preheader:                               ; preds = %.preheader16
  %xtraiter405 = and i32 %nblock, 1
  %lcmp.mod406 = icmp ne i32 %xtraiter405, 0
  %lcmp.overflow407 = icmp eq i32 %nblock, 0
  %lcmp.or408 = or i1 %lcmp.overflow407, %lcmp.mod406
  br i1 %lcmp.or408, label %.lr.ph96.unr, label %.lr.ph96.preheader.split

.lr.ph96.unr:                                     ; preds = %.lr.ph96.preheader
  %28 = getelementptr inbounds i8* %3, i64 0
  %29 = load i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %30
  %32 = load i32* %31, align 4
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %31, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32* %fmap, i64 %34
  %36 = trunc i64 0 to i32
  store i32 %36, i32* %35, align 4
  %indvars.iv.next183.unr = add nuw nsw i64 0, 1
  %lftr.wideiv184.unr = trunc i64 %indvars.iv.next183.unr to i32
  %exitcond185.unr = icmp eq i32 %lftr.wideiv184.unr, %nblock
  br label %.lr.ph96.preheader.split

.lr.ph96.preheader.split:                         ; preds = %.lr.ph96.unr, %.lr.ph96.preheader
  %indvars.iv182.unr = phi i64 [ 0, %.lr.ph96.preheader ], [ %indvars.iv.next183.unr, %.lr.ph96.unr ]
  %37 = icmp ult i32 %nblock, 2
  br i1 %37, label %._crit_edge97.loopexit, label %.lr.ph96.preheader.split.split

.lr.ph96.preheader.split.split:                   ; preds = %.lr.ph96.preheader.split
  br label %.lr.ph96

; <label>:38                                      ; preds = %38, %.preheader18
  %39 = phi i32 [ %.pre, %.preheader18 ], [ %51, %38 ]
  %indvars.iv186 = phi i64 [ 1, %.preheader18 ], [ %indvars.iv.next187.3, %38 ]
  %40 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %indvars.iv186
  %41 = load i32* %40, align 4
  %42 = add nsw i32 %41, %39
  store i32 %42, i32* %40, align 4
  %indvars.iv.next187 = add nuw nsw i64 %indvars.iv186, 1
  %43 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %indvars.iv.next187
  %44 = load i32* %43, align 4
  %45 = add nsw i32 %44, %42
  store i32 %45, i32* %43, align 4
  %indvars.iv.next187.1 = add nuw nsw i64 %indvars.iv.next187, 1
  %46 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %indvars.iv.next187.1
  %47 = load i32* %46, align 4
  %48 = add nsw i32 %47, %45
  store i32 %48, i32* %46, align 4
  %indvars.iv.next187.2 = add nuw nsw i64 %indvars.iv.next187.1, 1
  %49 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %indvars.iv.next187.2
  %50 = load i32* %49, align 4
  %51 = add nsw i32 %50, %48
  store i32 %51, i32* %49, align 4
  %indvars.iv.next187.3 = add nuw nsw i64 %indvars.iv.next187.2, 1
  %exitcond188.3 = icmp eq i64 %indvars.iv.next187.3, 257
  br i1 %exitcond188.3, label %.preheader16, label %38

.lr.ph96:                                         ; preds = %.lr.ph96, %.lr.ph96.preheader.split.split
  %indvars.iv182 = phi i64 [ %indvars.iv182.unr, %.lr.ph96.preheader.split.split ], [ %indvars.iv.next183.1, %.lr.ph96 ]
  %52 = getelementptr inbounds i8* %3, i64 %indvars.iv182
  %53 = load i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %54
  %56 = load i32* %55, align 4
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %55, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32* %fmap, i64 %58
  %60 = trunc i64 %indvars.iv182 to i32
  store i32 %60, i32* %59, align 4
  %indvars.iv.next183 = add nuw nsw i64 %indvars.iv182, 1
  %lftr.wideiv184 = trunc i64 %indvars.iv.next183 to i32
  %61 = getelementptr inbounds i8* %3, i64 %indvars.iv.next183
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %63
  %65 = load i32* %64, align 4
  %66 = add nsw i32 %65, -1
  store i32 %66, i32* %64, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32* %fmap, i64 %67
  %69 = trunc i64 %indvars.iv.next183 to i32
  store i32 %69, i32* %68, align 4
  %indvars.iv.next183.1 = add nuw nsw i64 %indvars.iv.next183, 1
  %lftr.wideiv184.1 = trunc i64 %indvars.iv.next183.1 to i32
  %exitcond185.1 = icmp eq i32 %lftr.wideiv184.1, %nblock
  br i1 %exitcond185.1, label %._crit_edge97.loopexit.unr-lcssa, label %.lr.ph96

._crit_edge97.loopexit.unr-lcssa:                 ; preds = %.lr.ph96
  br label %._crit_edge97.loopexit

._crit_edge97.loopexit:                           ; preds = %._crit_edge97.loopexit.unr-lcssa, %.lr.ph96.preheader.split
  br label %._crit_edge97

._crit_edge97:                                    ; preds = %._crit_edge97.loopexit, %.preheader16
  %70 = sdiv i32 %nblock, 32
  %71 = add i32 %70, 2
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %.lr.ph94, label %.preheader15.preheader

.lr.ph94:                                         ; preds = %._crit_edge97
  %73 = add i32 %70, 1
  %74 = zext i32 %73 to i64
  %75 = shl nuw nsw i64 %74, 2
  %76 = add nuw nsw i64 %75, 4
  call void @llvm.memset.p0i8.i64(i8* %bhtab181, i8 0, i64 %76, i32 4, i1 false)
  br label %.preheader15.preheader

.preheader15.preheader:                           ; preds = %.lr.ph94, %._crit_edge97
  br label %.preheader15

.preheader15:                                     ; preds = %.preheader15, %.preheader15.preheader
  %indvars.iv174 = phi i64 [ 0, %.preheader15.preheader ], [ %indvars.iv.next175.1, %.preheader15 ]
  %77 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %indvars.iv174
  %78 = load i32* %77, align 4
  %79 = and i32 %78, 31
  %80 = shl i32 1, %79
  %81 = ashr i32 %78, 5
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32* %bhtab, i64 %82
  %84 = load i32* %83, align 4
  %85 = or i32 %80, %84
  store i32 %85, i32* %83, align 4
  %indvars.iv.next175 = add nuw nsw i64 %indvars.iv174, 1
  %86 = getelementptr inbounds [257 x i32]* %ftab, i64 0, i64 %indvars.iv.next175
  %87 = load i32* %86, align 4
  %88 = and i32 %87, 31
  %89 = shl i32 1, %88
  %90 = ashr i32 %87, 5
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32* %bhtab, i64 %91
  %93 = load i32* %92, align 4
  %94 = or i32 %89, %93
  store i32 %94, i32* %92, align 4
  %indvars.iv.next175.1 = add nuw nsw i64 %indvars.iv.next175, 1
  %exitcond176.1 = icmp eq i64 %indvars.iv.next175.1, 256
  br i1 %exitcond176.1, label %.preheader14.preheader, label %.preheader15

.preheader14.preheader:                           ; preds = %.preheader15
  br label %.preheader14

.preheader13:                                     ; preds = %.preheader14
  %95 = bitcast [100 x i32]* %stackLo.i to i8*
  %96 = bitcast [100 x i32]* %stackHi.i to i8*
  %97 = getelementptr inbounds [100 x i32]* %stackLo.i, i64 0, i64 0
  %98 = getelementptr inbounds [100 x i32]* %stackHi.i, i64 0, i64 0
  br label %118

.preheader14:                                     ; preds = %.preheader14, %.preheader14.preheader
  %i.790 = phi i32 [ %117, %.preheader14 ], [ 0, %.preheader14.preheader ]
  %99 = shl nsw i32 %i.790, 1
  %100 = add nsw i32 %99, %nblock
  %101 = and i32 %100, 31
  %102 = shl i32 1, %101
  %103 = ashr i32 %100, 5
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32* %bhtab, i64 %104
  %106 = load i32* %105, align 4
  %107 = or i32 %106, %102
  store i32 %107, i32* %105, align 4
  %108 = add nsw i32 %100, 1
  %109 = and i32 %108, 31
  %110 = shl i32 1, %109
  %111 = xor i32 %110, -1
  %112 = ashr i32 %108, 5
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32* %bhtab, i64 %113
  %115 = load i32* %114, align 4
  %116 = and i32 %115, %111
  store i32 %116, i32* %114, align 4
  %117 = add nsw i32 %i.790, 1
  %exitcond173 = icmp eq i32 %117, 32
  br i1 %exitcond173, label %.preheader13, label %.preheader14

; <label>:118                                     ; preds = %586, %.preheader13
  %H.0 = phi i32 [ %587, %586 ], [ 1, %.preheader13 ]
  br i1 %4, label %119, label %.preheader12

; <label>:119                                     ; preds = %118
  %120 = load %struct._IO_FILE** @stderr, align 8
  %121 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %120, i8* getelementptr inbounds ([23 x i8]* @.str64, i64 0, i64 0), i32 %H.0) #12
  br label %.preheader12

.preheader12:                                     ; preds = %119, %118
  br i1 %8, label %.lr.ph.preheader, label %.outer.preheader

.lr.ph.preheader:                                 ; preds = %.preheader12
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv160 = phi i64 [ %indvars.iv.next161, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %j.080 = phi i32 [ %j.0.i.8, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %122 = trunc i64 %indvars.iv160 to i32
  %123 = ashr i32 %122, 5
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32* %bhtab, i64 %124
  %126 = load i32* %125, align 4
  %127 = and i32 %122, 31
  %128 = shl i32 1, %127
  %129 = and i32 %126, %128
  %130 = icmp eq i32 %129, 0
  %j.0.i.8 = select i1 %130, i32 %j.080, i32 %122
  %131 = getelementptr inbounds i32* %fmap, i64 %indvars.iv160
  %132 = load i32* %131, align 4
  %133 = sub i32 %132, %H.0
  %134 = icmp slt i32 %133, 0
  %135 = select i1 %134, i32 %nblock, i32 0
  %k.0 = add nsw i32 %135, %133
  %136 = sext i32 %k.0 to i64
  %137 = getelementptr inbounds i32* %eclass, i64 %136
  store i32 %j.0.i.8, i32* %137, align 4
  %indvars.iv.next161 = add nuw nsw i64 %indvars.iv160, 1
  %lftr.wideiv162 = trunc i64 %indvars.iv.next161 to i32
  %exitcond163 = icmp eq i32 %lftr.wideiv162, %nblock
  br i1 %exitcond163, label %.outer.preheader.loopexit, label %.lr.ph

.outer.preheader.loopexit:                        ; preds = %.lr.ph
  br label %.outer.preheader

.outer.preheader:                                 ; preds = %.outer.preheader.loopexit, %.preheader12
  br label %.outer

.outer.loopexit:                                  ; preds = %fallbackQSort3.exit
  br label %.outer.backedge

.outer:                                           ; preds = %.outer.backedge, %.outer.preheader
  %r.0.ph = phi i32 [ -1, %.outer.preheader ], [ %.lcssa340, %.outer.backedge ]
  %nNotDone.0.ph = phi i32 [ 0, %.outer.preheader ], [ %198, %.outer.backedge ]
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %.outer
  %k.1.in = phi i32 [ %r.0.ph, %.outer ], [ %k.1.in.be, %.backedge.backedge ]
  %k.1 = add nsw i32 %k.1.in, 1
  %138 = ashr i32 %k.1, 5
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32* %bhtab, i64 %139
  %141 = load i32* %140, align 4
  %142 = and i32 %k.1, 31
  %143 = shl i32 1, %142
  %144 = and i32 %143, %141
  %145 = icmp eq i32 %144, 0
  %146 = icmp ne i32 %142, 0
  %not. = xor i1 %145, true
  %. = and i1 %146, %not.
  br i1 %., label %.backedge.backedge, label %147

.backedge.backedge:                               ; preds = %193, %.backedge
  %k.1.in.be = phi i32 [ %k.1, %.backedge ], [ %191, %193 ]
  br label %.backedge

; <label>:147                                     ; preds = %.backedge
  br i1 %145, label %.loopexit9, label %.preheader10.preheader

.preheader10.preheader:                           ; preds = %147
  br label %.preheader10

.preheader10:                                     ; preds = %.preheader10, %.preheader10.preheader
  %k.2 = phi i32 [ %153, %.preheader10 ], [ %k.1, %.preheader10.preheader ]
  %148 = ashr i32 %k.2, 5
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i32* %bhtab, i64 %149
  %151 = load i32* %150, align 4
  %152 = icmp eq i32 %151, -1
  %153 = add nsw i32 %k.2, 32
  br i1 %152, label %.preheader10, label %.preheader8.preheader

.preheader8.preheader:                            ; preds = %.preheader10
  %k.2.lcssa = phi i32 [ %k.2, %.preheader10 ]
  br label %.preheader8

.preheader8:                                      ; preds = %.preheader8, %.preheader8.preheader
  %k.3 = phi i32 [ %162, %.preheader8 ], [ %k.2.lcssa, %.preheader8.preheader ]
  %154 = ashr i32 %k.3, 5
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i32* %bhtab, i64 %155
  %157 = load i32* %156, align 4
  %158 = and i32 %k.3, 31
  %159 = shl i32 1, %158
  %160 = and i32 %159, %157
  %161 = icmp eq i32 %160, 0
  %162 = add nsw i32 %k.3, 1
  br i1 %161, label %.loopexit9.loopexit, label %.preheader8

.loopexit9.loopexit:                              ; preds = %.preheader8
  %k.3.lcssa = phi i32 [ %k.3, %.preheader8 ]
  br label %.loopexit9

.loopexit9:                                       ; preds = %.loopexit9.loopexit, %147
  %k.4 = phi i32 [ %k.1, %147 ], [ %k.3.lcssa, %.loopexit9.loopexit ]
  %163 = add nsw i32 %k.4, -1
  %164 = icmp sgt i32 %k.4, %nblock
  br i1 %164, label %582, label %.preheader7.preheader

.preheader7.preheader:                            ; preds = %.loopexit9
  br label %.preheader7

.preheader7:                                      ; preds = %.preheader7, %.preheader7.preheader
  %k.5 = phi i32 [ %174, %.preheader7 ], [ %k.4, %.preheader7.preheader ]
  %165 = ashr i32 %k.5, 5
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i32* %bhtab, i64 %166
  %168 = load i32* %167, align 4
  %169 = and i32 %k.5, 31
  %170 = shl i32 1, %169
  %171 = and i32 %170, %168
  %172 = icmp eq i32 %171, 0
  %173 = icmp ne i32 %169, 0
  %.2 = and i1 %172, %173
  %174 = add nsw i32 %k.5, 1
  br i1 %.2, label %.preheader7, label %175

; <label>:175                                     ; preds = %.preheader7
  %.lcssa336 = phi i1 [ %172, %.preheader7 ]
  %k.5.lcssa = phi i32 [ %k.5, %.preheader7 ]
  br i1 %.lcssa336, label %.preheader6.preheader, label %.loopexit5

.preheader6.preheader:                            ; preds = %175
  br label %.preheader6

.preheader6:                                      ; preds = %.preheader6, %.preheader6.preheader
  %k.6 = phi i32 [ %181, %.preheader6 ], [ %k.5.lcssa, %.preheader6.preheader ]
  %176 = ashr i32 %k.6, 5
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i32* %bhtab, i64 %177
  %179 = load i32* %178, align 4
  %180 = icmp eq i32 %179, 0
  %181 = add nsw i32 %k.6, 32
  br i1 %180, label %.preheader6, label %.preheader4.preheader

.preheader4.preheader:                            ; preds = %.preheader6
  %k.6.lcssa = phi i32 [ %k.6, %.preheader6 ]
  br label %.preheader4

.preheader4:                                      ; preds = %.preheader4, %.preheader4.preheader
  %k.7 = phi i32 [ %190, %.preheader4 ], [ %k.6.lcssa, %.preheader4.preheader ]
  %182 = ashr i32 %k.7, 5
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i32* %bhtab, i64 %183
  %185 = load i32* %184, align 4
  %186 = and i32 %k.7, 31
  %187 = shl i32 1, %186
  %188 = and i32 %187, %185
  %189 = icmp eq i32 %188, 0
  %190 = add nsw i32 %k.7, 1
  br i1 %189, label %.preheader4, label %.loopexit5.loopexit

.loopexit5.loopexit:                              ; preds = %.preheader4
  %k.7.lcssa = phi i32 [ %k.7, %.preheader4 ]
  br label %.loopexit5

.loopexit5:                                       ; preds = %.loopexit5.loopexit, %175
  %k.8 = phi i32 [ %k.5.lcssa, %175 ], [ %k.7.lcssa, %.loopexit5.loopexit ]
  %191 = add nsw i32 %k.8, -1
  %192 = icmp sgt i32 %k.8, %nblock
  br i1 %192, label %582, label %193

; <label>:193                                     ; preds = %.loopexit5
  %194 = icmp sgt i32 %191, %163
  br i1 %194, label %195, label %.backedge.backedge

; <label>:195                                     ; preds = %193
  %.lcssa340 = phi i32 [ %191, %193 ]
  %.lcssa339 = phi i32 [ %163, %193 ]
  %k.4.lcssa337 = phi i32 [ %k.4, %193 ]
  %.neg = sub i32 1, %k.4.lcssa337
  %196 = add i32 %nNotDone.0.ph, 1
  %197 = add i32 %196, %.neg
  %198 = add i32 %197, %.lcssa340
  call void @llvm.lifetime.start(i64 400, i8* %95) #2
  call void @llvm.lifetime.start(i64 400, i8* %96) #2
  store i32 %.lcssa339, i32* %97, align 16
  store i32 %.lcssa340, i32* %98, align 16
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %fallbackSimpleSort.exit.outer.backedge.i, %195
  %r.0.ph86.i = phi i32 [ 0, %195 ], [ %278, %fallbackSimpleSort.exit.outer.backedge.i ]
  %sp.0.ph85.i = phi i32 [ 1, %195 ], [ %sp.0.ph.be.i, %fallbackSimpleSort.exit.outer.backedge.i ]
  %199 = sext i32 %sp.0.ph85.i to i64
  br label %200

; <label>:200                                     ; preds = %fallbackSimpleSort.exit.backedge.i, %.lr.ph.i
  %indvars.iv.i = phi i64 [ %199, %.lr.ph.i ], [ %indvars.iv.next.i, %fallbackSimpleSort.exit.backedge.i ]
  %201 = trunc i64 %indvars.iv.i to i32
  %202 = icmp slt i32 %201, 100
  br i1 %202, label %204, label %203

; <label>:203                                     ; preds = %200
  tail call void @BZ2_bz__AssertH__fail(i32 1004) #2
  br label %204

; <label>:204                                     ; preds = %203, %200
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %205 = getelementptr inbounds [100 x i32]* %stackLo.i, i64 0, i64 %indvars.iv.next.i
  %206 = load i32* %205, align 4
  %207 = getelementptr inbounds [100 x i32]* %stackHi.i, i64 0, i64 %indvars.iv.next.i
  %208 = load i32* %207, align 4
  %209 = sub nsw i32 %208, %206
  %210 = icmp slt i32 %209, 10
  br i1 %210, label %211, label %274

; <label>:211                                     ; preds = %204
  %212 = icmp eq i32 %208, %206
  br i1 %212, label %fallbackSimpleSort.exit.backedge.i, label %215

fallbackSimpleSort.exit.backedge.i.loopexit:      ; preds = %.critedge1.i.i
  br label %fallbackSimpleSort.exit.backedge.i

fallbackSimpleSort.exit.backedge.i:               ; preds = %.preheader.i.i, %fallbackSimpleSort.exit.backedge.i.loopexit, %211
  %213 = trunc i64 %indvars.iv.next.i to i32
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %200, label %fallbackQSort3.exit.preheader.loopexit

; <label>:215                                     ; preds = %211
  %216 = icmp sgt i32 %209, 3
  br i1 %216, label %219, label %.preheader.i.i

.preheader.i.i.loopexit:                          ; preds = %.critedge.i.i
  br label %.preheader.i.i

.preheader.i.i:                                   ; preds = %219, %.preheader.i.i.loopexit, %215
  %217 = icmp sgt i32 %208, %206
  br i1 %217, label %.lr.ph8.i.i, label %fallbackSimpleSort.exit.backedge.i

.lr.ph8.i.i:                                      ; preds = %.preheader.i.i
  %218 = sext i32 %208 to i64
  br label %249

; <label>:219                                     ; preds = %215
  %220 = add i32 %208, -4
  %221 = icmp slt i32 %220, %206
  br i1 %221, label %.preheader.i.i, label %.lr.ph17.i.i

.lr.ph17.i.i:                                     ; preds = %219
  %222 = sext i32 %220 to i64
  br label %223

; <label>:223                                     ; preds = %.critedge.i.i, %.lr.ph17.i.i
  %indvars.iv28.i.i = phi i64 [ %indvars.iv.next29.i.i, %.critedge.i.i ], [ %222, %.lr.ph17.i.i ]
  %indvars.iv.i.i = phi i32 [ %indvars.iv.next.i.i, %.critedge.i.i ], [ %208, %.lr.ph17.i.i ]
  %224 = getelementptr inbounds i32* %fmap, i64 %indvars.iv28.i.i
  %225 = load i32* %224, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i32* %eclass, i64 %226
  %228 = load i32* %227, align 4
  %229 = add nsw i64 %indvars.iv28.i.i, 4
  %230 = trunc i64 %229 to i32
  %231 = icmp sgt i32 %230, %208
  %232 = trunc i64 %indvars.iv28.i.i to i32
  br i1 %231, label %.critedge.i.i, label %.lr.ph12.i.i

.lr.ph12.i.i:                                     ; preds = %223
  %233 = sext i32 %indvars.iv.i.i to i64
  br label %234

; <label>:234                                     ; preds = %241, %.lr.ph12.i.i
  %indvars.iv25.i.i = phi i64 [ %233, %.lr.ph12.i.i ], [ %indvars.iv.next26.i.i, %241 ]
  %j.011.i.i = phi i32 [ %230, %.lr.ph12.i.i ], [ %j.0.i.i, %241 ]
  %j.0.in10.i.i = phi i32 [ %232, %.lr.ph12.i.i ], [ %245, %241 ]
  %235 = getelementptr inbounds i32* %fmap, i64 %indvars.iv25.i.i
  %236 = load i32* %235, align 4
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds i32* %eclass, i64 %237
  %239 = load i32* %238, align 4
  %240 = icmp ugt i32 %228, %239
  br i1 %240, label %241, label %.critedge.i.i.loopexit

; <label>:241                                     ; preds = %234
  %242 = sext i32 %j.0.in10.i.i to i64
  %243 = getelementptr inbounds i32* %fmap, i64 %242
  store i32 %236, i32* %243, align 4
  %j.0.i.i = add nsw i32 %j.011.i.i, 4
  %244 = icmp sgt i32 %j.0.i.i, %208
  %indvars.iv.next26.i.i = add nsw i64 %indvars.iv25.i.i, 4
  %245 = trunc i64 %indvars.iv25.i.i to i32
  br i1 %244, label %.critedge.i.i.loopexit, label %234

.critedge.i.i.loopexit:                           ; preds = %241, %234
  %j.0.in.lcssa.i.i.ph = phi i32 [ %245, %241 ], [ %j.0.in10.i.i, %234 ]
  br label %.critedge.i.i

.critedge.i.i:                                    ; preds = %.critedge.i.i.loopexit, %223
  %j.0.in.lcssa.i.i = phi i32 [ %232, %223 ], [ %j.0.in.lcssa.i.i.ph, %.critedge.i.i.loopexit ]
  %246 = sext i32 %j.0.in.lcssa.i.i to i64
  %247 = getelementptr inbounds i32* %fmap, i64 %246
  store i32 %225, i32* %247, align 4
  %248 = icmp sgt i32 %232, %206
  %indvars.iv.next.i.i = add i32 %indvars.iv.i.i, -1
  %indvars.iv.next29.i.i = add nsw i64 %indvars.iv28.i.i, -1
  br i1 %248, label %223, label %.preheader.i.i.loopexit

; <label>:249                                     ; preds = %.critedge1.i.i, %.lr.ph8.i.i
  %indvars.iv23.i.i = phi i64 [ %218, %.lr.ph8.i.i ], [ %indvars.iv.next24.i.i, %.critedge1.i.i ]
  %i.17.in.i.i = phi i32 [ %208, %.lr.ph8.i.i ], [ %i.17.i.i, %.critedge1.i.i ]
  %indvars.iv.next24.i.i = add nsw i64 %indvars.iv23.i.i, -1
  %i.17.i.i = add nsw i32 %i.17.in.i.i, -1
  %250 = getelementptr inbounds i32* %fmap, i64 %indvars.iv.next24.i.i
  %251 = load i32* %250, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i32* %eclass, i64 %252
  %254 = load i32* %253, align 4
  %255 = icmp sgt i32 %i.17.in.i.i, %208
  br i1 %255, label %.critedge1.i.i, label %.lr.ph.i.i.preheader

.lr.ph.i.i.preheader:                             ; preds = %249
  br label %.lr.ph.i.i

.lr.ph.i.i:                                       ; preds = %262, %.lr.ph.i.i.preheader
  %indvars.iv21.i.i = phi i64 [ %indvars.iv.next22.i.i, %262 ], [ %indvars.iv23.i.i, %.lr.ph.i.i.preheader ]
  %j.12.i.i = phi i32 [ %265, %262 ], [ %i.17.in.i.i, %.lr.ph.i.i.preheader ]
  %256 = getelementptr inbounds i32* %fmap, i64 %indvars.iv21.i.i
  %257 = load i32* %256, align 4
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds i32* %eclass, i64 %258
  %260 = load i32* %259, align 4
  %261 = icmp ugt i32 %254, %260
  br i1 %261, label %262, label %..critedge1_crit_edge3.i.i

; <label>:262                                     ; preds = %.lr.ph.i.i
  %263 = add nsw i64 %indvars.iv21.i.i, -1
  %264 = getelementptr inbounds i32* %fmap, i64 %263
  store i32 %257, i32* %264, align 4
  %265 = add nsw i32 %j.12.i.i, 1
  %266 = trunc i64 %indvars.iv21.i.i to i32
  %267 = icmp slt i32 %266, %208
  %indvars.iv.next22.i.i = add nsw i64 %indvars.iv21.i.i, 1
  br i1 %267, label %.lr.ph.i.i, label %.critedge1.i.i.loopexit

..critedge1_crit_edge3.i.i:                       ; preds = %.lr.ph.i.i
  %indvars.iv21.i.i.lcssa = phi i64 [ %indvars.iv21.i.i, %.lr.ph.i.i ]
  %268 = trunc i64 %indvars.iv21.i.i.lcssa to i32
  br label %.critedge1.i.i

.critedge1.i.i.loopexit:                          ; preds = %262
  %.lcssa342 = phi i32 [ %265, %262 ]
  br label %.critedge1.i.i

.critedge1.i.i:                                   ; preds = %.critedge1.i.i.loopexit, %..critedge1_crit_edge3.i.i, %249
  %j.1.lcssa.i.i = phi i32 [ %268, %..critedge1_crit_edge3.i.i ], [ %i.17.in.i.i, %249 ], [ %.lcssa342, %.critedge1.i.i.loopexit ]
  %269 = add nsw i32 %j.1.lcssa.i.i, -1
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i32* %fmap, i64 %270
  store i32 %251, i32* %271, align 4
  %272 = trunc i64 %indvars.iv.next24.i.i to i32
  %273 = icmp sgt i32 %272, %206
  br i1 %273, label %249, label %fallbackSimpleSort.exit.backedge.i.loopexit

; <label>:274                                     ; preds = %204
  %.lcssa353 = phi i32 [ %208, %204 ]
  %.lcssa351 = phi i32* [ %207, %204 ]
  %.lcssa349 = phi i32 [ %206, %204 ]
  %.lcssa347 = phi i32* [ %205, %204 ]
  %indvars.iv.next.i.lcssa = phi i64 [ %indvars.iv.next.i, %204 ]
  %.lcssa344 = phi i32 [ %201, %204 ]
  %indvars.iv.i.lcssa = phi i64 [ %indvars.iv.i, %204 ]
  %275 = trunc i64 %indvars.iv.next.i.lcssa to i32
  %276 = mul i32 %r.0.ph86.i, 7621
  %277 = add nuw nsw i32 %276, 1
  %278 = and i32 %277, 32767
  %279 = urem i32 %278, 3
  switch i32 %279, label %294 [
    i32 0, label %280
    i32 1, label %286
  ]

; <label>:280                                     ; preds = %274
  %281 = sext i32 %.lcssa349 to i64
  %282 = getelementptr inbounds i32* %fmap, i64 %281
  %283 = load i32* %282, align 4
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i32* %eclass, i64 %284
  br label %300

; <label>:286                                     ; preds = %274
  %287 = add nsw i32 %.lcssa353, %.lcssa349
  %288 = ashr i32 %287, 1
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds i32* %fmap, i64 %289
  %291 = load i32* %290, align 4
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds i32* %eclass, i64 %292
  br label %300

; <label>:294                                     ; preds = %274
  %295 = sext i32 %.lcssa353 to i64
  %296 = getelementptr inbounds i32* %fmap, i64 %295
  %297 = load i32* %296, align 4
  %298 = zext i32 %297 to i64
  %299 = getelementptr inbounds i32* %eclass, i64 %298
  br label %300

; <label>:300                                     ; preds = %294, %286, %280
  %med.0.in.i = phi i32* [ %285, %280 ], [ %293, %286 ], [ %299, %294 ]
  %med.0.i = load i32* %med.0.in.i, align 4
  br label %.outer10.i

.outer10.i:                                       ; preds = %348, %300
  %gtHi.0.ph.i = phi i32 [ %350, %348 ], [ %.lcssa353, %300 ]
  %ltLo.0.ph.i = phi i32 [ %ltLo.0.ph12.lcssa.i, %348 ], [ %.lcssa349, %300 ]
  %unHi.0.ph.i = phi i32 [ %355, %348 ], [ %.lcssa353, %300 ]
  %unLo.0.ph.i = phi i32 [ %354, %348 ], [ %.lcssa349, %300 ]
  %301 = icmp sgt i32 %unLo.0.ph.i, %unHi.0.ph.i
  br i1 %301, label %.preheader.i, label %.lr.ph43.lr.ph.i

.lr.ph43.lr.ph.i:                                 ; preds = %.outer10.i
  %302 = sext i32 %ltLo.0.ph.i to i64
  br label %.lr.ph43.i

.lr.ph43.i:                                       ; preds = %.outer11.i, %.lr.ph43.lr.ph.i
  %indvars.iv150.i = phi i64 [ %indvars.iv.next151.i, %.outer11.i ], [ %302, %.lr.ph43.lr.ph.i ]
  %unLo.0.ph1451.i = phi i32 [ %317, %.outer11.i ], [ %unLo.0.ph.i, %.lr.ph43.lr.ph.i ]
  %303 = sext i32 %unLo.0.ph1451.i to i64
  br label %307

; <label>:304                                     ; preds = %319
  %305 = trunc i64 %indvars.iv148.i to i32
  %306 = icmp slt i32 %305, %unHi.0.ph.i
  br i1 %306, label %307, label %..preheader_crit_edge.i

; <label>:307                                     ; preds = %304, %.lr.ph43.i
  %indvars.iv148.i = phi i64 [ %indvars.iv.next149.i, %304 ], [ %303, %.lr.ph43.i ]
  %308 = getelementptr inbounds i32* %fmap, i64 %indvars.iv148.i
  %309 = load i32* %308, align 4
  %310 = zext i32 %309 to i64
  %311 = getelementptr inbounds i32* %eclass, i64 %310
  %312 = load i32* %311, align 4
  %313 = icmp eq i32 %312, %med.0.i
  br i1 %313, label %.outer11.i, label %319

.outer11.i:                                       ; preds = %307
  %.lcssa360 = phi i32 [ %309, %307 ]
  %.lcssa357 = phi i32* [ %308, %307 ]
  %indvars.iv148.i.lcssa = phi i64 [ %indvars.iv148.i, %307 ]
  %314 = trunc i64 %indvars.iv148.i.lcssa to i32
  %315 = getelementptr inbounds i32* %fmap, i64 %indvars.iv150.i
  %316 = load i32* %315, align 4
  store i32 %316, i32* %.lcssa357, align 4
  store i32 %.lcssa360, i32* %315, align 4
  %indvars.iv.next151.i = add nsw i64 %indvars.iv150.i, 1
  %317 = add nsw i32 %314, 1
  %318 = icmp slt i32 %314, %unHi.0.ph.i
  br i1 %318, label %.lr.ph43.i, label %.outer11..outer11..preheader_crit_edge_crit_edge.i

; <label>:319                                     ; preds = %307
  %320 = sub nsw i32 %312, %med.0.i
  %321 = icmp sgt i32 %320, 0
  %indvars.iv.next149.i = add nsw i64 %indvars.iv148.i, 1
  br i1 %321, label %..preheader_crit_edge47.i, label %304

.outer11..outer11..preheader_crit_edge_crit_edge.i: ; preds = %.outer11.i
  %.lcssa366 = phi i32 [ %317, %.outer11.i ]
  %indvars.iv.next151.i.lcssa = phi i64 [ %indvars.iv.next151.i, %.outer11.i ]
  %322 = trunc i64 %indvars.iv.next151.i.lcssa to i32
  br label %.preheader.i

..preheader_crit_edge.i:                          ; preds = %304
  %indvars.iv150.i.lcssa364 = phi i64 [ %indvars.iv150.i, %304 ]
  %indvars.iv.next149.i.lcssa363 = phi i64 [ %indvars.iv.next149.i, %304 ]
  %323 = trunc i64 %indvars.iv150.i.lcssa364 to i32
  %324 = trunc i64 %indvars.iv.next149.i.lcssa363 to i32
  br label %.preheader.i

..preheader_crit_edge47.i:                        ; preds = %319
  %indvars.iv150.i.lcssa = phi i64 [ %indvars.iv150.i, %319 ]
  %indvars.iv148.i.lcssa355 = phi i64 [ %indvars.iv148.i, %319 ]
  %325 = trunc i64 %indvars.iv150.i.lcssa to i32
  %326 = trunc i64 %indvars.iv148.i.lcssa355 to i32
  br label %.preheader.i

.preheader.i:                                     ; preds = %..preheader_crit_edge47.i, %..preheader_crit_edge.i, %.outer11..outer11..preheader_crit_edge_crit_edge.i, %.outer10.i
  %ltLo.0.ph12.lcssa.i = phi i32 [ %323, %..preheader_crit_edge.i ], [ %325, %..preheader_crit_edge47.i ], [ %322, %.outer11..outer11..preheader_crit_edge_crit_edge.i ], [ %ltLo.0.ph.i, %.outer10.i ]
  %unLo.0.lcssa.i = phi i32 [ %324, %..preheader_crit_edge.i ], [ %326, %..preheader_crit_edge47.i ], [ %.lcssa366, %.outer11..outer11..preheader_crit_edge_crit_edge.i ], [ %unLo.0.ph.i, %.outer10.i ]
  %327 = icmp sgt i32 %unLo.0.lcssa.i, %unHi.0.ph.i
  br i1 %327, label %.critedge.i.loopexit, label %.lr.ph55.lr.ph.i

.lr.ph55.lr.ph.i:                                 ; preds = %.preheader.i
  %328 = sext i32 %gtHi.0.ph.i to i64
  br label %.lr.ph55.i

; <label>:329                                     ; preds = %345
  %330 = trunc i64 %indvars.iv.next153.i to i32
  %331 = icmp sgt i32 %unLo.0.lcssa.i, %330
  br i1 %331, label %..critedge.loopexit_crit_edge.i, label %332

; <label>:332                                     ; preds = %.lr.ph55.i, %329
  %indvars.iv152.i = phi i64 [ %344, %.lr.ph55.i ], [ %indvars.iv.next153.i, %329 ]
  %333 = getelementptr inbounds i32* %fmap, i64 %indvars.iv152.i
  %334 = load i32* %333, align 4
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds i32* %eclass, i64 %335
  %337 = load i32* %336, align 4
  %338 = icmp eq i32 %337, %med.0.i
  br i1 %338, label %.outer.i, label %345

.outer.i:                                         ; preds = %332
  %.lcssa372 = phi i32 [ %334, %332 ]
  %.lcssa369 = phi i32* [ %333, %332 ]
  %indvars.iv152.i.lcssa = phi i64 [ %indvars.iv152.i, %332 ]
  %339 = trunc i64 %indvars.iv152.i.lcssa to i32
  %340 = getelementptr inbounds i32* %fmap, i64 %indvars.iv154.i
  %341 = load i32* %340, align 4
  store i32 %341, i32* %.lcssa369, align 4
  store i32 %.lcssa372, i32* %340, align 4
  %indvars.iv.next155.i = add nsw i64 %indvars.iv154.i, -1
  %342 = add nsw i32 %339, -1
  %343 = icmp sgt i32 %unLo.0.lcssa.i, %342
  br i1 %343, label %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i, label %.lr.ph55.i

.lr.ph55.i:                                       ; preds = %.outer.i, %.lr.ph55.lr.ph.i
  %indvars.iv154.i = phi i64 [ %328, %.lr.ph55.lr.ph.i ], [ %indvars.iv.next155.i, %.outer.i ]
  %unHi.1.ph65.i = phi i32 [ %unHi.0.ph.i, %.lr.ph55.lr.ph.i ], [ %342, %.outer.i ]
  %344 = sext i32 %unHi.1.ph65.i to i64
  br label %332

; <label>:345                                     ; preds = %332
  %346 = sub nsw i32 %337, %med.0.i
  %347 = icmp slt i32 %346, 0
  %indvars.iv.next153.i = add nsw i64 %indvars.iv152.i, -1
  br i1 %347, label %348, label %329

; <label>:348                                     ; preds = %345
  %indvars.iv154.i.lcssa = phi i64 [ %indvars.iv154.i, %345 ]
  %.lcssa373 = phi i32 [ %334, %345 ]
  %.lcssa370 = phi i32* [ %333, %345 ]
  %indvars.iv152.i.lcssa367 = phi i64 [ %indvars.iv152.i, %345 ]
  %349 = trunc i64 %indvars.iv152.i.lcssa367 to i32
  %350 = trunc i64 %indvars.iv154.i.lcssa to i32
  %351 = sext i32 %unLo.0.lcssa.i to i64
  %352 = getelementptr inbounds i32* %fmap, i64 %351
  %353 = load i32* %352, align 4
  store i32 %.lcssa373, i32* %352, align 4
  store i32 %353, i32* %.lcssa370, align 4
  %354 = add nsw i32 %unLo.0.lcssa.i, 1
  %355 = add nsw i32 %349, -1
  br label %.outer10.i

.outer..outer..critedge.loopexit_crit_edge_crit_edge.i: ; preds = %.outer.i
  %unLo.0.lcssa.i.lcssa387 = phi i32 [ %unLo.0.lcssa.i, %.outer.i ]
  %ltLo.0.ph12.lcssa.i.lcssa384 = phi i32 [ %ltLo.0.ph12.lcssa.i, %.outer.i ]
  %.lcssa378 = phi i32 [ %342, %.outer.i ]
  %indvars.iv.next155.i.lcssa = phi i64 [ %indvars.iv.next155.i, %.outer.i ]
  %356 = trunc i64 %indvars.iv.next155.i.lcssa to i32
  br label %.critedge.i

..critedge.loopexit_crit_edge.i:                  ; preds = %329
  %unLo.0.lcssa.i.lcssa386 = phi i32 [ %unLo.0.lcssa.i, %329 ]
  %ltLo.0.ph12.lcssa.i.lcssa383 = phi i32 [ %ltLo.0.ph12.lcssa.i, %329 ]
  %indvars.iv154.i.lcssa376 = phi i64 [ %indvars.iv154.i, %329 ]
  %.lcssa375 = phi i32 [ %330, %329 ]
  %357 = trunc i64 %indvars.iv154.i.lcssa376 to i32
  br label %.critedge.i

.critedge.i.loopexit:                             ; preds = %.preheader.i
  %unLo.0.lcssa.i.lcssa = phi i32 [ %unLo.0.lcssa.i, %.preheader.i ]
  %ltLo.0.ph12.lcssa.i.lcssa = phi i32 [ %ltLo.0.ph12.lcssa.i, %.preheader.i ]
  %unHi.0.ph.i.lcssa = phi i32 [ %unHi.0.ph.i, %.preheader.i ]
  %gtHi.0.ph.i.lcssa = phi i32 [ %gtHi.0.ph.i, %.preheader.i ]
  br label %.critedge.i

.critedge.i:                                      ; preds = %.critedge.i.loopexit, %..critedge.loopexit_crit_edge.i, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i
  %unLo.0.lcssa.i388 = phi i32 [ %unLo.0.lcssa.i.lcssa386, %..critedge.loopexit_crit_edge.i ], [ %unLo.0.lcssa.i.lcssa387, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i ], [ %unLo.0.lcssa.i.lcssa, %.critedge.i.loopexit ]
  %ltLo.0.ph12.lcssa.i385 = phi i32 [ %ltLo.0.ph12.lcssa.i.lcssa383, %..critedge.loopexit_crit_edge.i ], [ %ltLo.0.ph12.lcssa.i.lcssa384, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i ], [ %ltLo.0.ph12.lcssa.i.lcssa, %.critedge.i.loopexit ]
  %gtHi.1.ph.lcssa35.i = phi i32 [ %357, %..critedge.loopexit_crit_edge.i ], [ %356, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i ], [ %gtHi.0.ph.i.lcssa, %.critedge.i.loopexit ]
  %unHi.1.lcssa.i = phi i32 [ %.lcssa375, %..critedge.loopexit_crit_edge.i ], [ %.lcssa378, %.outer..outer..critedge.loopexit_crit_edge_crit_edge.i ], [ %unHi.0.ph.i.lcssa, %.critedge.i.loopexit ]
  %358 = icmp slt i32 %gtHi.1.ph.lcssa35.i, %ltLo.0.ph12.lcssa.i385
  br i1 %358, label %fallbackSimpleSort.exit.outer.backedge.i, label %360

fallbackSimpleSort.exit.outer.backedge.i:         ; preds = %559, %554, %.critedge.i
  %sp.0.ph.be.i = phi i32 [ %563, %559 ], [ %558, %554 ], [ %275, %.critedge.i ]
  %359 = icmp sgt i32 %sp.0.ph.be.i, 0
  br i1 %359, label %.lr.ph.i, label %fallbackQSort3.exit.preheader.loopexit334

; <label>:360                                     ; preds = %.critedge.i
  %361 = sub nsw i32 %ltLo.0.ph12.lcssa.i385, %.lcssa349
  %362 = sub nsw i32 %unLo.0.lcssa.i388, %ltLo.0.ph12.lcssa.i385
  %363 = icmp slt i32 %361, %362
  %..i = select i1 %363, i32 %361, i32 %362
  %364 = icmp sgt i32 %..i, 0
  br i1 %364, label %.lr.ph77.i, label %._crit_edge.i

.lr.ph77.i:                                       ; preds = %360
  %365 = add i32 %unLo.0.lcssa.i388, 1
  %366 = add i32 %ltLo.0.ph12.lcssa.i385, -1
  %367 = sub i32 %366, %unLo.0.lcssa.i388
  %368 = add i32 %.lcssa349, -1
  %369 = sub i32 %368, %ltLo.0.ph12.lcssa.i385
  %370 = icmp sgt i32 %367, %369
  %smax.i = select i1 %370, i32 %367, i32 %369
  %371 = add i32 %365, %smax.i
  %372 = sext i32 %371 to i64
  %373 = sext i32 %.lcssa349 to i64
  %374 = add i32 %ltLo.0.ph12.lcssa.i385, -1
  %375 = sub i32 %374, %unLo.0.lcssa.i388
  %376 = add i32 %.lcssa349, -1
  %377 = sub i32 %376, %ltLo.0.ph12.lcssa.i385
  %378 = icmp sgt i32 %375, %377
  %smax277 = select i1 %378, i32 %375, i32 %377
  %379 = sub i32 -2, %smax277
  %380 = zext i32 %379 to i64
  %381 = add nuw nsw i64 %380, 1
  %end.idx285 = add nsw i64 %381, %372
  %n.vec287 = and i64 %381, 9223372036854775804
  %end.idx.rnd.down288 = add i64 %n.vec287, %372
  %cmp.zero289 = icmp eq i64 %n.vec287, 0
  %382 = sext i32 %.lcssa349 to i64
  %383 = add i32 %ltLo.0.ph12.lcssa.i385, -1
  %384 = sub i32 %383, %unLo.0.lcssa.i388
  %385 = add i32 %.lcssa349, -1
  %386 = sub i32 %385, %ltLo.0.ph12.lcssa.i385
  %387 = icmp sgt i32 %384, %386
  %smax293 = select i1 %387, i32 %384, i32 %386
  %388 = sub i32 -2, %smax293
  %389 = zext i32 %388 to i64
  %390 = add i32 %unLo.0.lcssa.i388, 1
  %391 = add i32 %390, %smax293
  %392 = sext i32 %391 to i64
  br i1 %cmp.zero289, label %middle.block282, label %vector.memcheck304

vector.memcheck304:                               ; preds = %.lr.ph77.i
  %scevgep291 = getelementptr i32* %fmap, i64 %382
  %393 = add nsw i64 %392, %389
  %scevgep298 = getelementptr i32* %fmap, i64 %393
  %bound0300 = icmp ule i32* %scevgep291, %scevgep298
  %scevgep296 = getelementptr i32* %fmap, i64 %392
  %394 = add nsw i64 %382, %389
  %scevgep294 = getelementptr i32* %fmap, i64 %394
  %bound1301 = icmp ule i32* %scevgep296, %scevgep294
  %memcheck.conflict303 = and i1 %bound0300, %bound1301
  %ind.end307 = add i64 %n.vec287, %373
  %cast.crd314 = trunc i64 %n.vec287 to i32
  %rev.ind.end315 = sub i32 %..i, %cast.crd314
  br i1 %memcheck.conflict303, label %middle.block282, label %vector.body281.preheader

vector.body281.preheader:                         ; preds = %vector.memcheck304
  %395 = add i32 %ltLo.0.ph12.lcssa.i385, -1
  %396 = sub i32 %395, %unLo.0.lcssa.i388
  %397 = add i32 %.lcssa349, -1
  %398 = sub i32 %397, %ltLo.0.ph12.lcssa.i385
  %399 = icmp sgt i32 %396, %398
  %smax389 = select i1 %399, i32 %396, i32 %398
  %400 = sub i32 -2, %smax389
  %401 = zext i32 %400 to i64
  %402 = add i64 %401, 1
  %403 = lshr i64 %402, 2
  %404 = mul i64 %403, 4
  %405 = add i64 %404, -4
  %406 = lshr i64 %405, 2
  %407 = add i64 %406, 1
  %xtraiter = and i64 %407, 1
  %lcmp.mod = icmp ne i64 %xtraiter, 0
  %lcmp.overflow = icmp eq i64 %407, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %vector.body281.unr, label %vector.body281.preheader.split

vector.body281.unr:                               ; preds = %vector.body281.preheader
  %normalized.idx318.unr = sub i64 %372, %372
  %offset.idx319.unr = add i64 %373, %normalized.idx318.unr
  %408 = getelementptr inbounds i32* %fmap, i64 %offset.idx319.unr
  %409 = bitcast i32* %408 to <4 x i32>*
  %wide.load332.unr = load <4 x i32>* %409, align 4
  %410 = getelementptr inbounds i32* %fmap, i64 %372
  %411 = bitcast i32* %410 to <4 x i32>*
  %wide.load333.unr = load <4 x i32>* %411, align 4
  %412 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %wide.load333.unr, <4 x i32>* %412, align 4
  %413 = bitcast i32* %410 to <4 x i32>*
  store <4 x i32> %wide.load332.unr, <4 x i32>* %413, align 4
  %index.next317.unr = add i64 %372, 4
  %414 = icmp eq i64 %index.next317.unr, %end.idx.rnd.down288
  br label %vector.body281.preheader.split

vector.body281.preheader.split:                   ; preds = %vector.body281.unr, %vector.body281.preheader
  %index284.unr = phi i64 [ %372, %vector.body281.preheader ], [ %index.next317.unr, %vector.body281.unr ]
  %415 = icmp ult i64 %407, 2
  br i1 %415, label %middle.block282.loopexit, label %vector.body281.preheader.split.split

vector.body281.preheader.split.split:             ; preds = %vector.body281.preheader.split
  br label %vector.body281

vector.body281:                                   ; preds = %vector.body281, %vector.body281.preheader.split.split
  %index284 = phi i64 [ %index284.unr, %vector.body281.preheader.split.split ], [ %index.next317.1, %vector.body281 ]
  %normalized.idx318 = sub i64 %index284, %372
  %offset.idx319 = add i64 %373, %normalized.idx318
  %416 = getelementptr inbounds i32* %fmap, i64 %offset.idx319
  %417 = bitcast i32* %416 to <4 x i32>*
  %wide.load332 = load <4 x i32>* %417, align 4
  %418 = getelementptr inbounds i32* %fmap, i64 %index284
  %419 = bitcast i32* %418 to <4 x i32>*
  %wide.load333 = load <4 x i32>* %419, align 4
  %420 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> %wide.load333, <4 x i32>* %420, align 4
  %421 = bitcast i32* %418 to <4 x i32>*
  store <4 x i32> %wide.load332, <4 x i32>* %421, align 4
  %index.next317 = add i64 %index284, 4
  %normalized.idx318.1 = sub i64 %index.next317, %372
  %offset.idx319.1 = add i64 %373, %normalized.idx318.1
  %422 = getelementptr inbounds i32* %fmap, i64 %offset.idx319.1
  %423 = bitcast i32* %422 to <4 x i32>*
  %wide.load332.1 = load <4 x i32>* %423, align 4
  %424 = getelementptr inbounds i32* %fmap, i64 %index.next317
  %425 = bitcast i32* %424 to <4 x i32>*
  %wide.load333.1 = load <4 x i32>* %425, align 4
  %426 = bitcast i32* %422 to <4 x i32>*
  store <4 x i32> %wide.load333.1, <4 x i32>* %426, align 4
  %427 = bitcast i32* %424 to <4 x i32>*
  store <4 x i32> %wide.load332.1, <4 x i32>* %427, align 4
  %index.next317.1 = add i64 %index.next317, 4
  %428 = icmp eq i64 %index.next317.1, %end.idx.rnd.down288
  br i1 %428, label %middle.block282.loopexit.unr-lcssa, label %vector.body281, !llvm.loop !10

middle.block282.loopexit.unr-lcssa:               ; preds = %vector.body281
  br label %middle.block282.loopexit

middle.block282.loopexit:                         ; preds = %middle.block282.loopexit.unr-lcssa, %vector.body281.preheader.split
  br label %middle.block282

middle.block282:                                  ; preds = %middle.block282.loopexit, %vector.memcheck304, %.lr.ph77.i
  %resume.val305 = phi i64 [ %373, %.lr.ph77.i ], [ %373, %vector.memcheck304 ], [ %ind.end307, %middle.block282.loopexit ]
  %resume.val308 = phi i64 [ %372, %.lr.ph77.i ], [ %372, %vector.memcheck304 ], [ %end.idx.rnd.down288, %middle.block282.loopexit ]
  %resume.val312 = phi i32 [ %..i, %.lr.ph77.i ], [ %..i, %vector.memcheck304 ], [ %rev.ind.end315, %middle.block282.loopexit ]
  %cmp.n316 = icmp eq i64 %end.idx285, %resume.val308
  br i1 %cmp.n316, label %._crit_edge.i, label %scalar.ph283.preheader

scalar.ph283.preheader:                           ; preds = %middle.block282
  %429 = add i32 %resume.val312, 1
  %430 = mul i32 %resume.val312, -1
  %431 = icmp sgt i32 %430, -1
  %smax390 = select i1 %431, i32 %430, i32 -1
  %432 = add i32 %429, %smax390
  %xtraiter391 = and i32 %432, 1
  %lcmp.mod392 = icmp ne i32 %xtraiter391, 0
  %lcmp.overflow393 = icmp eq i32 %432, 0
  %lcmp.or394 = or i1 %lcmp.overflow393, %lcmp.mod392
  br i1 %lcmp.or394, label %scalar.ph283.unr, label %scalar.ph283.preheader.split

scalar.ph283.unr:                                 ; preds = %scalar.ph283.preheader
  %433 = getelementptr inbounds i32* %fmap, i64 %resume.val305
  %434 = load i32* %433, align 4
  %435 = getelementptr inbounds i32* %fmap, i64 %resume.val308
  %436 = load i32* %435, align 4
  store i32 %436, i32* %433, align 4
  store i32 %434, i32* %435, align 4
  %indvars.iv.next159.i.unr = add nsw i64 %resume.val305, 1
  %437 = add nsw i32 %resume.val312, -1
  %438 = icmp sgt i32 %437, 0
  %indvars.iv.next157.i.unr = add nsw i64 %resume.val308, 1
  br label %scalar.ph283.preheader.split

scalar.ph283.preheader.split:                     ; preds = %scalar.ph283.unr, %scalar.ph283.preheader
  %indvars.iv158.i.unr = phi i64 [ %resume.val305, %scalar.ph283.preheader ], [ %indvars.iv.next159.i.unr, %scalar.ph283.unr ]
  %indvars.iv156.i.unr = phi i64 [ %resume.val308, %scalar.ph283.preheader ], [ %indvars.iv.next157.i.unr, %scalar.ph283.unr ]
  %yyn.076.i.unr = phi i32 [ %resume.val312, %scalar.ph283.preheader ], [ %437, %scalar.ph283.unr ]
  %439 = icmp ult i32 %432, 2
  br i1 %439, label %._crit_edge.i.loopexit, label %scalar.ph283.preheader.split.split

scalar.ph283.preheader.split.split:               ; preds = %scalar.ph283.preheader.split
  br label %scalar.ph283

scalar.ph283:                                     ; preds = %scalar.ph283, %scalar.ph283.preheader.split.split
  %indvars.iv158.i = phi i64 [ %indvars.iv158.i.unr, %scalar.ph283.preheader.split.split ], [ %indvars.iv.next159.i.1, %scalar.ph283 ]
  %indvars.iv156.i = phi i64 [ %indvars.iv156.i.unr, %scalar.ph283.preheader.split.split ], [ %indvars.iv.next157.i.1, %scalar.ph283 ]
  %yyn.076.i = phi i32 [ %yyn.076.i.unr, %scalar.ph283.preheader.split.split ], [ %449, %scalar.ph283 ]
  %440 = getelementptr inbounds i32* %fmap, i64 %indvars.iv158.i
  %441 = load i32* %440, align 4
  %442 = getelementptr inbounds i32* %fmap, i64 %indvars.iv156.i
  %443 = load i32* %442, align 4
  store i32 %443, i32* %440, align 4
  store i32 %441, i32* %442, align 4
  %indvars.iv.next159.i = add nsw i64 %indvars.iv158.i, 1
  %444 = add nsw i32 %yyn.076.i, -1
  %indvars.iv.next157.i = add nsw i64 %indvars.iv156.i, 1
  %445 = getelementptr inbounds i32* %fmap, i64 %indvars.iv.next159.i
  %446 = load i32* %445, align 4
  %447 = getelementptr inbounds i32* %fmap, i64 %indvars.iv.next157.i
  %448 = load i32* %447, align 4
  store i32 %448, i32* %445, align 4
  store i32 %446, i32* %447, align 4
  %indvars.iv.next159.i.1 = add nsw i64 %indvars.iv.next159.i, 1
  %449 = add nsw i32 %444, -1
  %450 = icmp sgt i32 %449, 0
  %indvars.iv.next157.i.1 = add nsw i64 %indvars.iv.next157.i, 1
  br i1 %450, label %scalar.ph283, label %._crit_edge.i.loopexit.unr-lcssa, !llvm.loop !11

._crit_edge.i.loopexit.unr-lcssa:                 ; preds = %scalar.ph283
  br label %._crit_edge.i.loopexit

._crit_edge.i.loopexit:                           ; preds = %._crit_edge.i.loopexit.unr-lcssa, %scalar.ph283.preheader.split
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %middle.block282, %360
  %451 = sub nsw i32 %.lcssa353, %gtHi.1.ph.lcssa35.i
  %452 = sub nsw i32 %gtHi.1.ph.lcssa35.i, %unHi.1.lcssa.i
  %453 = icmp slt i32 %451, %452
  %.8.i = select i1 %453, i32 %451, i32 %452
  %454 = icmp sgt i32 %.8.i, 0
  br i1 %454, label %.lr.ph83.i, label %._crit_edge84.i

.lr.ph83.i:                                       ; preds = %._crit_edge.i
  %455 = sub nsw i32 %.lcssa353, %.8.i
  %456 = sext i32 %unLo.0.lcssa.i388 to i64
  %457 = add i32 %unHi.1.lcssa.i, -1
  %458 = sub i32 %457, %gtHi.1.ph.lcssa35.i
  %459 = add i32 %gtHi.1.ph.lcssa35.i, -1
  %460 = sub i32 %459, %.lcssa353
  %461 = icmp sgt i32 %458, %460
  %smax = select i1 %461, i32 %458, i32 %460
  %462 = sub i32 -2, %smax
  %463 = zext i32 %462 to i64
  %464 = add nuw nsw i64 %463, 1
  %end.idx = add nsw i64 %464, %456
  %n.vec = and i64 %464, 9223372036854775804
  %end.idx.rnd.down = add i64 %n.vec, %456
  %cmp.zero = icmp eq i64 %n.vec, 0
  %465 = sext i32 %unLo.0.lcssa.i388 to i64
  %466 = add i32 %unHi.1.lcssa.i, -1
  %467 = sub i32 %466, %gtHi.1.ph.lcssa35.i
  %468 = add i32 %gtHi.1.ph.lcssa35.i, -1
  %469 = sub i32 %468, %.lcssa353
  %470 = icmp sgt i32 %467, %469
  %smax257 = select i1 %470, i32 %467, i32 %469
  %471 = sub i32 -2, %smax257
  %472 = zext i32 %471 to i64
  %473 = add i32 %.lcssa353, 2
  %474 = add i32 %473, %smax257
  %475 = sext i32 %474 to i64
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph83.i
  %scevgep = getelementptr i32* %fmap, i64 %465
  %476 = add nsw i64 %475, %472
  %scevgep262 = getelementptr i32* %fmap, i64 %476
  %bound0 = icmp ule i32* %scevgep, %scevgep262
  %scevgep260 = getelementptr i32* %fmap, i64 %475
  %477 = add nsw i64 %465, %472
  %scevgep258 = getelementptr i32* %fmap, i64 %477
  %bound1 = icmp ule i32* %scevgep260, %scevgep258
  %memcheck.conflict = and i1 %bound0, %bound1
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end = add i32 %cast.crd, %455
  %cast.crd268 = trunc i64 %n.vec to i32
  %rev.ind.end = sub i32 %.8.i, %cast.crd268
  br i1 %memcheck.conflict, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %478 = add i32 %unHi.1.lcssa.i, -1
  %479 = sub i32 %478, %gtHi.1.ph.lcssa35.i
  %480 = add i32 %gtHi.1.ph.lcssa35.i, -1
  %481 = sub i32 %480, %.lcssa353
  %482 = icmp sgt i32 %479, %481
  %smax395 = select i1 %482, i32 %479, i32 %481
  %483 = sub i32 -2, %smax395
  %484 = zext i32 %483 to i64
  %485 = add i64 %484, 1
  %486 = lshr i64 %485, 2
  %487 = mul i64 %486, 4
  %488 = add i64 %487, -4
  %489 = lshr i64 %488, 2
  %490 = add i64 %489, 1
  %xtraiter396 = and i64 %490, 1
  %lcmp.mod397 = icmp ne i64 %xtraiter396, 0
  %lcmp.overflow398 = icmp eq i64 %490, 0
  %lcmp.or399 = or i1 %lcmp.overflow398, %lcmp.mod397
  br i1 %lcmp.or399, label %vector.body.unr, label %vector.body.preheader.split

vector.body.unr:                                  ; preds = %vector.body.preheader
  %normalized.idx.unr = sub i64 %456, %456
  %491 = trunc i64 %normalized.idx.unr to i32
  %offset.idx.unr = add i32 %455, %491
  %492 = getelementptr inbounds i32* %fmap, i64 %456
  %493 = bitcast i32* %492 to <4 x i32>*
  %wide.load.unr = load <4 x i32>* %493, align 4
  %494 = add i32 %offset.idx.unr, 1
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i32* %fmap, i64 %495
  %497 = bitcast i32* %496 to <4 x i32>*
  %wide.load276.unr = load <4 x i32>* %497, align 4
  %498 = bitcast i32* %492 to <4 x i32>*
  store <4 x i32> %wide.load276.unr, <4 x i32>* %498, align 4
  %499 = bitcast i32* %496 to <4 x i32>*
  store <4 x i32> %wide.load.unr, <4 x i32>* %499, align 4
  %index.next.unr = add i64 %456, 4
  %500 = icmp eq i64 %index.next.unr, %end.idx.rnd.down
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.unr, %vector.body.preheader
  %index.unr = phi i64 [ %456, %vector.body.preheader ], [ %index.next.unr, %vector.body.unr ]
  %501 = icmp ult i64 %490, 2
  br i1 %501, label %middle.block.loopexit, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %normalized.idx = sub i64 %index, %456
  %502 = trunc i64 %normalized.idx to i32
  %offset.idx = add i32 %455, %502
  %503 = getelementptr inbounds i32* %fmap, i64 %index
  %504 = bitcast i32* %503 to <4 x i32>*
  %wide.load = load <4 x i32>* %504, align 4
  %505 = add i32 %offset.idx, 1
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i32* %fmap, i64 %506
  %508 = bitcast i32* %507 to <4 x i32>*
  %wide.load276 = load <4 x i32>* %508, align 4
  %509 = bitcast i32* %503 to <4 x i32>*
  store <4 x i32> %wide.load276, <4 x i32>* %509, align 4
  %510 = bitcast i32* %507 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %510, align 4
  %index.next = add i64 %index, 4
  %normalized.idx.1 = sub i64 %index.next, %456
  %511 = trunc i64 %normalized.idx.1 to i32
  %offset.idx.1 = add i32 %455, %511
  %512 = getelementptr inbounds i32* %fmap, i64 %index.next
  %513 = bitcast i32* %512 to <4 x i32>*
  %wide.load.1 = load <4 x i32>* %513, align 4
  %514 = add i32 %offset.idx.1, 1
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds i32* %fmap, i64 %515
  %517 = bitcast i32* %516 to <4 x i32>*
  %wide.load276.1 = load <4 x i32>* %517, align 4
  %518 = bitcast i32* %512 to <4 x i32>*
  store <4 x i32> %wide.load276.1, <4 x i32>* %518, align 4
  %519 = bitcast i32* %516 to <4 x i32>*
  store <4 x i32> %wide.load.1, <4 x i32>* %519, align 4
  %index.next.1 = add i64 %index.next, 4
  %520 = icmp eq i64 %index.next.1, %end.idx.rnd.down
  br i1 %520, label %middle.block.loopexit.unr-lcssa, label %vector.body, !llvm.loop !12

middle.block.loopexit.unr-lcssa:                  ; preds = %vector.body
  br label %middle.block.loopexit

middle.block.loopexit:                            ; preds = %middle.block.loopexit.unr-lcssa, %vector.body.preheader.split
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %vector.memcheck, %.lr.ph83.i
  %resume.val = phi i64 [ %456, %.lr.ph83.i ], [ %456, %vector.memcheck ], [ %end.idx.rnd.down, %middle.block.loopexit ]
  %resume.val264 = phi i32 [ %455, %.lr.ph83.i ], [ %455, %vector.memcheck ], [ %ind.end, %middle.block.loopexit ]
  %resume.val266 = phi i32 [ %.8.i, %.lr.ph83.i ], [ %.8.i, %vector.memcheck ], [ %rev.ind.end, %middle.block.loopexit ]
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %._crit_edge84.i, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block
  %521 = add i32 %resume.val266, 1
  %522 = mul i32 %resume.val266, -1
  %523 = icmp sgt i32 %522, -1
  %smax400 = select i1 %523, i32 %522, i32 -1
  %524 = add i32 %521, %smax400
  %xtraiter401 = and i32 %524, 1
  %lcmp.mod402 = icmp ne i32 %xtraiter401, 0
  %lcmp.overflow403 = icmp eq i32 %524, 0
  %lcmp.or404 = or i1 %lcmp.overflow403, %lcmp.mod402
  br i1 %lcmp.or404, label %scalar.ph.unr, label %scalar.ph.preheader.split

scalar.ph.unr:                                    ; preds = %scalar.ph.preheader
  %yyp25.081.i.unr = add nsw i32 %resume.val264, 1
  %525 = getelementptr inbounds i32* %fmap, i64 %resume.val
  %526 = load i32* %525, align 4
  %527 = sext i32 %yyp25.081.i.unr to i64
  %528 = getelementptr inbounds i32* %fmap, i64 %527
  %529 = load i32* %528, align 4
  store i32 %529, i32* %525, align 4
  store i32 %526, i32* %528, align 4
  %indvars.iv.next168.i.unr = add nsw i64 %resume.val, 1
  %530 = add nsw i32 %resume.val266, -1
  %531 = icmp sgt i32 %530, 0
  br label %scalar.ph.preheader.split

scalar.ph.preheader.split:                        ; preds = %scalar.ph.unr, %scalar.ph.preheader
  %indvars.iv167.i.unr = phi i64 [ %resume.val, %scalar.ph.preheader ], [ %indvars.iv.next168.i.unr, %scalar.ph.unr ]
  %yyp25.081.in.i.unr = phi i32 [ %resume.val264, %scalar.ph.preheader ], [ %yyp25.081.i.unr, %scalar.ph.unr ]
  %yyn6.080.i.unr = phi i32 [ %resume.val266, %scalar.ph.preheader ], [ %530, %scalar.ph.unr ]
  %532 = icmp ult i32 %524, 2
  br i1 %532, label %._crit_edge84.i.loopexit, label %scalar.ph.preheader.split.split

scalar.ph.preheader.split.split:                  ; preds = %scalar.ph.preheader.split
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader.split.split
  %indvars.iv167.i = phi i64 [ %indvars.iv167.i.unr, %scalar.ph.preheader.split.split ], [ %indvars.iv.next168.i.1, %scalar.ph ]
  %yyp25.081.in.i = phi i32 [ %yyp25.081.in.i.unr, %scalar.ph.preheader.split.split ], [ %yyp25.081.i.1, %scalar.ph ]
  %yyn6.080.i = phi i32 [ %yyn6.080.i.unr, %scalar.ph.preheader.split.split ], [ %544, %scalar.ph ]
  %yyp25.081.i = add nsw i32 %yyp25.081.in.i, 1
  %533 = getelementptr inbounds i32* %fmap, i64 %indvars.iv167.i
  %534 = load i32* %533, align 4
  %535 = sext i32 %yyp25.081.i to i64
  %536 = getelementptr inbounds i32* %fmap, i64 %535
  %537 = load i32* %536, align 4
  store i32 %537, i32* %533, align 4
  store i32 %534, i32* %536, align 4
  %indvars.iv.next168.i = add nsw i64 %indvars.iv167.i, 1
  %538 = add nsw i32 %yyn6.080.i, -1
  %yyp25.081.i.1 = add nsw i32 %yyp25.081.i, 1
  %539 = getelementptr inbounds i32* %fmap, i64 %indvars.iv.next168.i
  %540 = load i32* %539, align 4
  %541 = sext i32 %yyp25.081.i.1 to i64
  %542 = getelementptr inbounds i32* %fmap, i64 %541
  %543 = load i32* %542, align 4
  store i32 %543, i32* %539, align 4
  store i32 %540, i32* %542, align 4
  %indvars.iv.next168.i.1 = add nsw i64 %indvars.iv.next168.i, 1
  %544 = add nsw i32 %538, -1
  %545 = icmp sgt i32 %544, 0
  br i1 %545, label %scalar.ph, label %._crit_edge84.i.loopexit.unr-lcssa, !llvm.loop !13

._crit_edge84.i.loopexit.unr-lcssa:               ; preds = %scalar.ph
  br label %._crit_edge84.i.loopexit

._crit_edge84.i.loopexit:                         ; preds = %._crit_edge84.i.loopexit.unr-lcssa, %scalar.ph.preheader.split
  br label %._crit_edge84.i

._crit_edge84.i:                                  ; preds = %._crit_edge84.i.loopexit, %middle.block, %._crit_edge.i
  %546 = add i32 %.lcssa349, -1
  %547 = sub i32 %546, %ltLo.0.ph12.lcssa.i385
  %548 = add i32 %547, %unLo.0.lcssa.i388
  %549 = sub nsw i32 %.lcssa353, %452
  %550 = add nsw i32 %549, 1
  %551 = sub nsw i32 %548, %.lcssa349
  %552 = sub nsw i32 %.lcssa353, %550
  %553 = icmp sgt i32 %551, %552
  br i1 %553, label %554, label %559

; <label>:554                                     ; preds = %._crit_edge84.i
  store i32 %.lcssa349, i32* %.lcssa347, align 4
  store i32 %548, i32* %.lcssa351, align 4
  %sext172.i = shl i64 %indvars.iv.i.lcssa, 32
  %555 = ashr exact i64 %sext172.i, 32
  %556 = getelementptr inbounds [100 x i32]* %stackLo.i, i64 0, i64 %555
  store i32 %550, i32* %556, align 4
  %557 = getelementptr inbounds [100 x i32]* %stackHi.i, i64 0, i64 %555
  store i32 %.lcssa353, i32* %557, align 4
  %558 = add nsw i32 %.lcssa344, 1
  br label %fallbackSimpleSort.exit.outer.backedge.i

; <label>:559                                     ; preds = %._crit_edge84.i
  store i32 %550, i32* %.lcssa347, align 4
  store i32 %.lcssa353, i32* %.lcssa351, align 4
  %sext.i = shl i64 %indvars.iv.i.lcssa, 32
  %560 = ashr exact i64 %sext.i, 32
  %561 = getelementptr inbounds [100 x i32]* %stackLo.i, i64 0, i64 %560
  store i32 %.lcssa349, i32* %561, align 4
  %562 = getelementptr inbounds [100 x i32]* %stackHi.i, i64 0, i64 %560
  store i32 %548, i32* %562, align 4
  %563 = add nsw i32 %.lcssa344, 1
  br label %fallbackSimpleSort.exit.outer.backedge.i

fallbackQSort3.exit.preheader.loopexit:           ; preds = %fallbackSimpleSort.exit.backedge.i
  br label %fallbackQSort3.exit.preheader

fallbackQSort3.exit.preheader.loopexit334:        ; preds = %fallbackSimpleSort.exit.outer.backedge.i
  br label %fallbackQSort3.exit.preheader

fallbackQSort3.exit.preheader:                    ; preds = %fallbackQSort3.exit.preheader.loopexit334, %fallbackQSort3.exit.preheader.loopexit
  %564 = icmp sgt i32 %.lcssa339, %.lcssa340
  br i1 %564, label %.outer.backedge, label %.lr.ph89

.outer.backedge:                                  ; preds = %fallbackQSort3.exit.preheader, %.outer.loopexit
  br label %.outer

.lr.ph89:                                         ; preds = %fallbackQSort3.exit.preheader
  %565 = sext i32 %.lcssa339 to i64
  br label %566

; <label>:566                                     ; preds = %fallbackQSort3.exit, %.lr.ph89
  %indvars.iv171 = phi i64 [ %indvars.iv.next172, %fallbackQSort3.exit ], [ %565, %.lr.ph89 ]
  %cc.087 = phi i32 [ %cc.1, %fallbackQSort3.exit ], [ -1, %.lr.ph89 ]
  %567 = getelementptr inbounds i32* %fmap, i64 %indvars.iv171
  %568 = load i32* %567, align 4
  %569 = zext i32 %568 to i64
  %570 = getelementptr inbounds i32* %eclass, i64 %569
  %571 = load i32* %570, align 4
  %572 = icmp eq i32 %cc.087, %571
  %.pre200 = trunc i64 %indvars.iv171 to i32
  br i1 %572, label %fallbackQSort3.exit, label %573

; <label>:573                                     ; preds = %566
  %574 = and i32 %.pre200, 31
  %575 = shl i32 1, %574
  %576 = ashr i32 %.pre200, 5
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i32* %bhtab, i64 %577
  %579 = load i32* %578, align 4
  %580 = or i32 %579, %575
  store i32 %580, i32* %578, align 4
  br label %fallbackQSort3.exit

fallbackQSort3.exit:                              ; preds = %573, %566
  %cc.1 = phi i32 [ %571, %573 ], [ %cc.087, %566 ]
  %indvars.iv.next172 = add nsw i64 %indvars.iv171, 1
  %581 = icmp slt i32 %.pre200, %.lcssa340
  br i1 %581, label %566, label %.outer.loopexit

; <label>:582                                     ; preds = %.loopexit5, %.loopexit9
  %nNotDone.0.ph.lcssa = phi i32 [ %nNotDone.0.ph, %.loopexit5 ], [ %nNotDone.0.ph, %.loopexit9 ]
  br i1 %4, label %583, label %586

; <label>:583                                     ; preds = %582
  %584 = load %struct._IO_FILE** @stderr, align 8
  %585 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %584, i8* getelementptr inbounds ([24 x i8]* @.str75, i64 0, i64 0), i32 %nNotDone.0.ph.lcssa) #12
  br label %586

; <label>:586                                     ; preds = %583, %582
  %587 = shl nsw i32 %H.0, 1
  %588 = icmp sgt i32 %587, %nblock
  %589 = icmp eq i32 %nNotDone.0.ph.lcssa, 0
  %or.cond = or i1 %588, %589
  br i1 %or.cond, label %590, label %118

; <label>:590                                     ; preds = %586
  br i1 %4, label %591, label %.preheader3

; <label>:591                                     ; preds = %590
  %592 = load %struct._IO_FILE** @stderr, align 8
  %593 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8]* @.str86, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %592) #13
  br label %.preheader3

.preheader3:                                      ; preds = %591, %590
  br i1 %8, label %.preheader.preheader, label %.thread

.preheader.preheader:                             ; preds = %.preheader3
  br label %.preheader

.preheader:                                       ; preds = %599, %.preheader.preheader
  %indvars.iv158 = phi i64 [ %indvars.iv.next159, %599 ], [ 0, %.preheader.preheader ]
  %j.278 = phi i64 [ %indvars.iv.lcssa, %599 ], [ 0, %.preheader.preheader ]
  %sext = shl i64 %j.278, 32
  %594 = ashr exact i64 %sext, 32
  br label %595

; <label>:595                                     ; preds = %595, %.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %595 ], [ %594, %.preheader ]
  %596 = getelementptr inbounds [256 x i32]* %ftabCopy, i64 0, i64 %indvars.iv
  %597 = load i32* %596, align 4
  %598 = icmp eq i32 %597, 0
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %598, label %595, label %599

; <label>:599                                     ; preds = %595
  %.lcssa335 = phi i32 [ %597, %595 ]
  %.lcssa = phi i32* [ %596, %595 ]
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %595 ]
  %600 = add nsw i32 %.lcssa335, -1
  store i32 %600, i32* %.lcssa, align 4
  %601 = trunc i64 %indvars.iv.lcssa to i8
  %602 = getelementptr inbounds i32* %fmap, i64 %indvars.iv158
  %603 = load i32* %602, align 4
  %604 = zext i32 %603 to i64
  %605 = getelementptr inbounds i8* %3, i64 %604
  store i8 %601, i8* %605, align 1
  %indvars.iv.next159 = add nuw nsw i64 %indvars.iv158, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next159 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nblock
  br i1 %exitcond, label %606, label %.preheader

; <label>:606                                     ; preds = %599
  %indvars.iv.lcssa.lcssa = phi i64 [ %indvars.iv.lcssa, %599 ]
  %607 = trunc i64 %indvars.iv.lcssa.lcssa to i32
  %phitmp = icmp slt i32 %607, 256
  br i1 %phitmp, label %.thread, label %608

; <label>:608                                     ; preds = %606
  tail call void @BZ2_bz__AssertH__fail(i32 1005) #2
  br label %.thread

.thread:                                          ; preds = %608, %606, %.preheader3
  call void @llvm.lifetime.end(i64 1024, i8* %2) #2
  call void @llvm.lifetime.end(i64 1028, i8* %1) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @mainGtU(i32 %i1, i32 %i2, i8* %block, i16* nocapture readonly %quadrant, i32 %nblock, i32* nocapture %budget) #0 {
  %1 = zext i32 %i1 to i64
  %2 = getelementptr inbounds i8* %block, i64 %1
  %3 = load i8* %2, align 1
  %4 = zext i32 %i2 to i64
  %5 = getelementptr inbounds i8* %block, i64 %4
  %6 = load i8* %5, align 1
  %7 = icmp eq i8 %3, %6
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %0
  %9 = icmp ugt i8 %3, %6
  %10 = zext i1 %9 to i8
  br label %.loopexit

; <label>:11                                      ; preds = %0
  %12 = add i32 %i1, 1
  %13 = add i32 %i2, 1
  %14 = zext i32 %12 to i64
  %15 = getelementptr inbounds i8* %block, i64 %14
  %16 = load i8* %15, align 1
  %17 = zext i32 %13 to i64
  %18 = getelementptr inbounds i8* %block, i64 %17
  %19 = load i8* %18, align 1
  %20 = icmp eq i8 %16, %19
  br i1 %20, label %24, label %21

; <label>:21                                      ; preds = %11
  %22 = icmp ugt i8 %16, %19
  %23 = zext i1 %22 to i8
  br label %.loopexit

; <label>:24                                      ; preds = %11
  %25 = add i32 %i1, 2
  %26 = add i32 %i2, 2
  %27 = zext i32 %25 to i64
  %28 = getelementptr inbounds i8* %block, i64 %27
  %29 = load i8* %28, align 1
  %30 = zext i32 %26 to i64
  %31 = getelementptr inbounds i8* %block, i64 %30
  %32 = load i8* %31, align 1
  %33 = icmp eq i8 %29, %32
  br i1 %33, label %37, label %34

; <label>:34                                      ; preds = %24
  %35 = icmp ugt i8 %29, %32
  %36 = zext i1 %35 to i8
  br label %.loopexit

; <label>:37                                      ; preds = %24
  %38 = add i32 %i1, 3
  %39 = add i32 %i2, 3
  %40 = zext i32 %38 to i64
  %41 = getelementptr inbounds i8* %block, i64 %40
  %42 = load i8* %41, align 1
  %43 = zext i32 %39 to i64
  %44 = getelementptr inbounds i8* %block, i64 %43
  %45 = load i8* %44, align 1
  %46 = icmp eq i8 %42, %45
  br i1 %46, label %50, label %47

; <label>:47                                      ; preds = %37
  %48 = icmp ugt i8 %42, %45
  %49 = zext i1 %48 to i8
  br label %.loopexit

; <label>:50                                      ; preds = %37
  %51 = add i32 %i1, 4
  %52 = add i32 %i2, 4
  %53 = zext i32 %51 to i64
  %54 = getelementptr inbounds i8* %block, i64 %53
  %55 = load i8* %54, align 1
  %56 = zext i32 %52 to i64
  %57 = getelementptr inbounds i8* %block, i64 %56
  %58 = load i8* %57, align 1
  %59 = icmp eq i8 %55, %58
  br i1 %59, label %63, label %60

; <label>:60                                      ; preds = %50
  %61 = icmp ugt i8 %55, %58
  %62 = zext i1 %61 to i8
  br label %.loopexit

; <label>:63                                      ; preds = %50
  %64 = add i32 %i1, 5
  %65 = add i32 %i2, 5
  %66 = zext i32 %64 to i64
  %67 = getelementptr inbounds i8* %block, i64 %66
  %68 = load i8* %67, align 1
  %69 = zext i32 %65 to i64
  %70 = getelementptr inbounds i8* %block, i64 %69
  %71 = load i8* %70, align 1
  %72 = icmp eq i8 %68, %71
  br i1 %72, label %76, label %73

; <label>:73                                      ; preds = %63
  %74 = icmp ugt i8 %68, %71
  %75 = zext i1 %74 to i8
  br label %.loopexit

; <label>:76                                      ; preds = %63
  %77 = add i32 %i1, 6
  %78 = add i32 %i2, 6
  %79 = zext i32 %77 to i64
  %80 = getelementptr inbounds i8* %block, i64 %79
  %81 = load i8* %80, align 1
  %82 = zext i32 %78 to i64
  %83 = getelementptr inbounds i8* %block, i64 %82
  %84 = load i8* %83, align 1
  %85 = icmp eq i8 %81, %84
  br i1 %85, label %89, label %86

; <label>:86                                      ; preds = %76
  %87 = icmp ugt i8 %81, %84
  %88 = zext i1 %87 to i8
  br label %.loopexit

; <label>:89                                      ; preds = %76
  %90 = add i32 %i1, 7
  %91 = add i32 %i2, 7
  %92 = zext i32 %90 to i64
  %93 = getelementptr inbounds i8* %block, i64 %92
  %94 = load i8* %93, align 1
  %95 = zext i32 %91 to i64
  %96 = getelementptr inbounds i8* %block, i64 %95
  %97 = load i8* %96, align 1
  %98 = icmp eq i8 %94, %97
  br i1 %98, label %102, label %99

; <label>:99                                      ; preds = %89
  %100 = icmp ugt i8 %94, %97
  %101 = zext i1 %100 to i8
  br label %.loopexit

; <label>:102                                     ; preds = %89
  %103 = add i32 %i1, 8
  %104 = add i32 %i2, 8
  %105 = zext i32 %103 to i64
  %106 = getelementptr inbounds i8* %block, i64 %105
  %107 = load i8* %106, align 1
  %108 = zext i32 %104 to i64
  %109 = getelementptr inbounds i8* %block, i64 %108
  %110 = load i8* %109, align 1
  %111 = icmp eq i8 %107, %110
  br i1 %111, label %115, label %112

; <label>:112                                     ; preds = %102
  %113 = icmp ugt i8 %107, %110
  %114 = zext i1 %113 to i8
  br label %.loopexit

; <label>:115                                     ; preds = %102
  %116 = add i32 %i1, 9
  %117 = add i32 %i2, 9
  %118 = zext i32 %116 to i64
  %119 = getelementptr inbounds i8* %block, i64 %118
  %120 = load i8* %119, align 1
  %121 = zext i32 %117 to i64
  %122 = getelementptr inbounds i8* %block, i64 %121
  %123 = load i8* %122, align 1
  %124 = icmp eq i8 %120, %123
  br i1 %124, label %128, label %125

; <label>:125                                     ; preds = %115
  %126 = icmp ugt i8 %120, %123
  %127 = zext i1 %126 to i8
  br label %.loopexit

; <label>:128                                     ; preds = %115
  %129 = add i32 %i1, 10
  %130 = add i32 %i2, 10
  %131 = zext i32 %129 to i64
  %132 = getelementptr inbounds i8* %block, i64 %131
  %133 = load i8* %132, align 1
  %134 = zext i32 %130 to i64
  %135 = getelementptr inbounds i8* %block, i64 %134
  %136 = load i8* %135, align 1
  %137 = icmp eq i8 %133, %136
  br i1 %137, label %141, label %138

; <label>:138                                     ; preds = %128
  %139 = icmp ugt i8 %133, %136
  %140 = zext i1 %139 to i8
  br label %.loopexit

; <label>:141                                     ; preds = %128
  %142 = add i32 %i1, 11
  %143 = add i32 %i2, 11
  %144 = zext i32 %142 to i64
  %145 = getelementptr inbounds i8* %block, i64 %144
  %146 = load i8* %145, align 1
  %147 = zext i32 %143 to i64
  %148 = getelementptr inbounds i8* %block, i64 %147
  %149 = load i8* %148, align 1
  %150 = icmp eq i8 %146, %149
  br i1 %150, label %154, label %151

; <label>:151                                     ; preds = %141
  %152 = icmp ugt i8 %146, %149
  %153 = zext i1 %152 to i8
  br label %.loopexit

; <label>:154                                     ; preds = %141
  %155 = add i32 %i1, 12
  %156 = add i32 %i2, 12
  %157 = add i32 %nblock, 8
  br label %158

; <label>:158                                     ; preds = %332, %154
  %.02 = phi i32 [ %156, %154 ], [ %.13, %332 ]
  %.01 = phi i32 [ %155, %154 ], [ %., %332 ]
  %k.0 = phi i32 [ %157, %154 ], [ %339, %332 ]
  %159 = zext i32 %.01 to i64
  %160 = getelementptr inbounds i8* %block, i64 %159
  %161 = load i8* %160, align 1
  %162 = zext i32 %.02 to i64
  %163 = getelementptr inbounds i8* %block, i64 %162
  %164 = load i8* %163, align 1
  %165 = icmp eq i8 %161, %164
  br i1 %165, label %169, label %166

; <label>:166                                     ; preds = %158
  %.lcssa929 = phi i8 [ %164, %158 ]
  %.lcssa = phi i8 [ %161, %158 ]
  %167 = icmp ugt i8 %.lcssa, %.lcssa929
  %168 = zext i1 %167 to i8
  br label %.loopexit

; <label>:169                                     ; preds = %158
  %170 = getelementptr inbounds i16* %quadrant, i64 %159
  %171 = load i16* %170, align 2
  %172 = getelementptr inbounds i16* %quadrant, i64 %162
  %173 = load i16* %172, align 2
  %174 = icmp eq i16 %171, %173
  br i1 %174, label %178, label %175

; <label>:175                                     ; preds = %169
  %.lcssa962 = phi i16 [ %173, %169 ]
  %.lcssa946 = phi i16 [ %171, %169 ]
  %176 = icmp ugt i16 %.lcssa946, %.lcssa962
  %177 = zext i1 %176 to i8
  br label %.loopexit

; <label>:178                                     ; preds = %169
  %179 = add i32 %.01, 1
  %180 = add i32 %.02, 1
  %181 = zext i32 %179 to i64
  %182 = getelementptr inbounds i8* %block, i64 %181
  %183 = load i8* %182, align 1
  %184 = zext i32 %180 to i64
  %185 = getelementptr inbounds i8* %block, i64 %184
  %186 = load i8* %185, align 1
  %187 = icmp eq i8 %183, %186
  br i1 %187, label %191, label %188

; <label>:188                                     ; preds = %178
  %.lcssa993 = phi i8 [ %186, %178 ]
  %.lcssa978 = phi i8 [ %183, %178 ]
  %189 = icmp ugt i8 %.lcssa978, %.lcssa993
  %190 = zext i1 %189 to i8
  br label %.loopexit

; <label>:191                                     ; preds = %178
  %192 = getelementptr inbounds i16* %quadrant, i64 %181
  %193 = load i16* %192, align 2
  %194 = getelementptr inbounds i16* %quadrant, i64 %184
  %195 = load i16* %194, align 2
  %196 = icmp eq i16 %193, %195
  br i1 %196, label %200, label %197

; <label>:197                                     ; preds = %191
  %.lcssa1022 = phi i16 [ %195, %191 ]
  %.lcssa1008 = phi i16 [ %193, %191 ]
  %198 = icmp ugt i16 %.lcssa1008, %.lcssa1022
  %199 = zext i1 %198 to i8
  br label %.loopexit

; <label>:200                                     ; preds = %191
  %201 = add i32 %.01, 2
  %202 = add i32 %.02, 2
  %203 = zext i32 %201 to i64
  %204 = getelementptr inbounds i8* %block, i64 %203
  %205 = load i8* %204, align 1
  %206 = zext i32 %202 to i64
  %207 = getelementptr inbounds i8* %block, i64 %206
  %208 = load i8* %207, align 1
  %209 = icmp eq i8 %205, %208
  br i1 %209, label %213, label %210

; <label>:210                                     ; preds = %200
  %.lcssa1049 = phi i8 [ %208, %200 ]
  %.lcssa1036 = phi i8 [ %205, %200 ]
  %211 = icmp ugt i8 %.lcssa1036, %.lcssa1049
  %212 = zext i1 %211 to i8
  br label %.loopexit

; <label>:213                                     ; preds = %200
  %214 = getelementptr inbounds i16* %quadrant, i64 %203
  %215 = load i16* %214, align 2
  %216 = getelementptr inbounds i16* %quadrant, i64 %206
  %217 = load i16* %216, align 2
  %218 = icmp eq i16 %215, %217
  br i1 %218, label %222, label %219

; <label>:219                                     ; preds = %213
  %.lcssa1074 = phi i16 [ %217, %213 ]
  %.lcssa1062 = phi i16 [ %215, %213 ]
  %220 = icmp ugt i16 %.lcssa1062, %.lcssa1074
  %221 = zext i1 %220 to i8
  br label %.loopexit

; <label>:222                                     ; preds = %213
  %223 = add i32 %.01, 3
  %224 = add i32 %.02, 3
  %225 = zext i32 %223 to i64
  %226 = getelementptr inbounds i8* %block, i64 %225
  %227 = load i8* %226, align 1
  %228 = zext i32 %224 to i64
  %229 = getelementptr inbounds i8* %block, i64 %228
  %230 = load i8* %229, align 1
  %231 = icmp eq i8 %227, %230
  br i1 %231, label %235, label %232

; <label>:232                                     ; preds = %222
  %.lcssa1097 = phi i8 [ %230, %222 ]
  %.lcssa1086 = phi i8 [ %227, %222 ]
  %233 = icmp ugt i8 %.lcssa1086, %.lcssa1097
  %234 = zext i1 %233 to i8
  br label %.loopexit

; <label>:235                                     ; preds = %222
  %236 = getelementptr inbounds i16* %quadrant, i64 %225
  %237 = load i16* %236, align 2
  %238 = getelementptr inbounds i16* %quadrant, i64 %228
  %239 = load i16* %238, align 2
  %240 = icmp eq i16 %237, %239
  br i1 %240, label %244, label %241

; <label>:241                                     ; preds = %235
  %.lcssa1118 = phi i16 [ %239, %235 ]
  %.lcssa1108 = phi i16 [ %237, %235 ]
  %242 = icmp ugt i16 %.lcssa1108, %.lcssa1118
  %243 = zext i1 %242 to i8
  br label %.loopexit

; <label>:244                                     ; preds = %235
  %245 = add i32 %.01, 4
  %246 = add i32 %.02, 4
  %247 = zext i32 %245 to i64
  %248 = getelementptr inbounds i8* %block, i64 %247
  %249 = load i8* %248, align 1
  %250 = zext i32 %246 to i64
  %251 = getelementptr inbounds i8* %block, i64 %250
  %252 = load i8* %251, align 1
  %253 = icmp eq i8 %249, %252
  br i1 %253, label %257, label %254

; <label>:254                                     ; preds = %244
  %.lcssa1137 = phi i8 [ %252, %244 ]
  %.lcssa1128 = phi i8 [ %249, %244 ]
  %255 = icmp ugt i8 %.lcssa1128, %.lcssa1137
  %256 = zext i1 %255 to i8
  br label %.loopexit

; <label>:257                                     ; preds = %244
  %258 = getelementptr inbounds i16* %quadrant, i64 %247
  %259 = load i16* %258, align 2
  %260 = getelementptr inbounds i16* %quadrant, i64 %250
  %261 = load i16* %260, align 2
  %262 = icmp eq i16 %259, %261
  br i1 %262, label %266, label %263

; <label>:263                                     ; preds = %257
  %.lcssa1154 = phi i16 [ %261, %257 ]
  %.lcssa1146 = phi i16 [ %259, %257 ]
  %264 = icmp ugt i16 %.lcssa1146, %.lcssa1154
  %265 = zext i1 %264 to i8
  br label %.loopexit

; <label>:266                                     ; preds = %257
  %267 = add i32 %.01, 5
  %268 = add i32 %.02, 5
  %269 = zext i32 %267 to i64
  %270 = getelementptr inbounds i8* %block, i64 %269
  %271 = load i8* %270, align 1
  %272 = zext i32 %268 to i64
  %273 = getelementptr inbounds i8* %block, i64 %272
  %274 = load i8* %273, align 1
  %275 = icmp eq i8 %271, %274
  br i1 %275, label %279, label %276

; <label>:276                                     ; preds = %266
  %.lcssa1169 = phi i8 [ %274, %266 ]
  %.lcssa1162 = phi i8 [ %271, %266 ]
  %277 = icmp ugt i8 %.lcssa1162, %.lcssa1169
  %278 = zext i1 %277 to i8
  br label %.loopexit

; <label>:279                                     ; preds = %266
  %280 = getelementptr inbounds i16* %quadrant, i64 %269
  %281 = load i16* %280, align 2
  %282 = getelementptr inbounds i16* %quadrant, i64 %272
  %283 = load i16* %282, align 2
  %284 = icmp eq i16 %281, %283
  br i1 %284, label %288, label %285

; <label>:285                                     ; preds = %279
  %.lcssa1182 = phi i16 [ %283, %279 ]
  %.lcssa1176 = phi i16 [ %281, %279 ]
  %286 = icmp ugt i16 %.lcssa1176, %.lcssa1182
  %287 = zext i1 %286 to i8
  br label %.loopexit

; <label>:288                                     ; preds = %279
  %289 = add i32 %.01, 6
  %290 = add i32 %.02, 6
  %291 = zext i32 %289 to i64
  %292 = getelementptr inbounds i8* %block, i64 %291
  %293 = load i8* %292, align 1
  %294 = zext i32 %290 to i64
  %295 = getelementptr inbounds i8* %block, i64 %294
  %296 = load i8* %295, align 1
  %297 = icmp eq i8 %293, %296
  br i1 %297, label %301, label %298

; <label>:298                                     ; preds = %288
  %.lcssa1193 = phi i8 [ %296, %288 ]
  %.lcssa1188 = phi i8 [ %293, %288 ]
  %299 = icmp ugt i8 %.lcssa1188, %.lcssa1193
  %300 = zext i1 %299 to i8
  br label %.loopexit

; <label>:301                                     ; preds = %288
  %302 = getelementptr inbounds i16* %quadrant, i64 %291
  %303 = load i16* %302, align 2
  %304 = getelementptr inbounds i16* %quadrant, i64 %294
  %305 = load i16* %304, align 2
  %306 = icmp eq i16 %303, %305
  br i1 %306, label %310, label %307

; <label>:307                                     ; preds = %301
  %.lcssa1202 = phi i16 [ %305, %301 ]
  %.lcssa1198 = phi i16 [ %303, %301 ]
  %308 = icmp ugt i16 %.lcssa1198, %.lcssa1202
  %309 = zext i1 %308 to i8
  br label %.loopexit

; <label>:310                                     ; preds = %301
  %311 = add i32 %.01, 7
  %312 = add i32 %.02, 7
  %313 = zext i32 %311 to i64
  %314 = getelementptr inbounds i8* %block, i64 %313
  %315 = load i8* %314, align 1
  %316 = zext i32 %312 to i64
  %317 = getelementptr inbounds i8* %block, i64 %316
  %318 = load i8* %317, align 1
  %319 = icmp eq i8 %315, %318
  br i1 %319, label %323, label %320

; <label>:320                                     ; preds = %310
  %.lcssa1209 = phi i8 [ %318, %310 ]
  %.lcssa1206 = phi i8 [ %315, %310 ]
  %321 = icmp ugt i8 %.lcssa1206, %.lcssa1209
  %322 = zext i1 %321 to i8
  br label %.loopexit

; <label>:323                                     ; preds = %310
  %324 = getelementptr inbounds i16* %quadrant, i64 %313
  %325 = load i16* %324, align 2
  %326 = getelementptr inbounds i16* %quadrant, i64 %316
  %327 = load i16* %326, align 2
  %328 = icmp eq i16 %325, %327
  br i1 %328, label %332, label %329

; <label>:329                                     ; preds = %323
  %.lcssa1214 = phi i16 [ %327, %323 ]
  %.lcssa1212 = phi i16 [ %325, %323 ]
  %330 = icmp ugt i16 %.lcssa1212, %.lcssa1214
  %331 = zext i1 %330 to i8
  br label %.loopexit

; <label>:332                                     ; preds = %323
  %333 = add i32 %.01, 8
  %334 = add i32 %.02, 8
  %335 = icmp ult i32 %333, %nblock
  %336 = select i1 %335, i32 0, i32 %nblock
  %. = sub i32 %333, %336
  %337 = icmp ult i32 %334, %nblock
  %338 = select i1 %337, i32 0, i32 %nblock
  %.13 = sub i32 %334, %338
  %339 = add nsw i32 %k.0, -8
  %340 = load i32* %budget, align 4
  %341 = add nsw i32 %340, -1
  store i32 %341, i32* %budget, align 4
  %342 = icmp sgt i32 %339, -1
  br i1 %342, label %158, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %332
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %329, %320, %307, %298, %285, %276, %263, %254, %241, %232, %219, %210, %197, %188, %175, %166, %151, %138, %125, %112, %99, %86, %73, %60, %47, %34, %21, %8
  %.0 = phi i8 [ %10, %8 ], [ %23, %21 ], [ %36, %34 ], [ %49, %47 ], [ %62, %60 ], [ %75, %73 ], [ %88, %86 ], [ %101, %99 ], [ %114, %112 ], [ %127, %125 ], [ %140, %138 ], [ %153, %151 ], [ %168, %166 ], [ %177, %175 ], [ %190, %188 ], [ %199, %197 ], [ %212, %210 ], [ %221, %219 ], [ %234, %232 ], [ %243, %241 ], [ %256, %254 ], [ %265, %263 ], [ %278, %276 ], [ %287, %285 ], [ %300, %298 ], [ %309, %307 ], [ %322, %320 ], [ %331, %329 ], [ 0, %.loopexit.loopexit ]
  ret i8 %.0
}

; Function Attrs: nounwind uwtable
define void @compressStream(i32 %stream, i32 %zStream) #0 {
  %ibuf = alloca [5000 x i8], align 16
  %nbytes_in_lo32 = alloca i32, align 4
  %nbytes_in_hi32 = alloca i32, align 4
  %nbytes_out_lo32 = alloca i32, align 4
  %nbytes_out_hi32 = alloca i32, align 4
  %bzerr = alloca i32, align 4
  %bzerr_dummy = alloca i32, align 4
  %buf_nin = alloca [32 x i8], align 16
  %buf_nout = alloca [32 x i8], align 16
  %nbytes_in = alloca %struct.UInt64, align 1
  %nbytes_out = alloca %struct.UInt64, align 1
  %1 = getelementptr inbounds [5000 x i8]* %ibuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %1) #2
  %2 = load i32* @blockSize100k, align 4
  %3 = load i32* @verbosity, align 4
  %4 = load i32* @workFactor, align 4
  %5 = call i8* @BZ2_bzWriteOpen(i32* %bzerr, i32 %zStream, i32 %2, i32 %3, i32 %4) #2
  %6 = load i32* %bzerr, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %.loopexit

; <label>:8                                       ; preds = %0
  %9 = load i32* @verbosity, align 4
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %11, label %.preheader.preheader

; <label>:11                                      ; preds = %8
  %12 = load %struct._IO_FILE** @stderr, align 8
  %fputc = call i32 @fputc(i32 10, %struct._IO_FILE* %12) #13
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %11, %8
  br label %.preheader

.preheader:                                       ; preds = %21, %.preheader.preheader
  %13 = call i32 @spec_getc(i32 %stream) #2
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %24, label %15

; <label>:15                                      ; preds = %.preheader
  %16 = trunc i32 %13 to i8
  %17 = call i32 @spec_ungetc(i8 zeroext %16, i32 %stream) #2
  %18 = call i32 @spec_fread(i8* %1, i32 1, i32 5000, i32 %stream) #2
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %15
  call void @BZ2_bzWrite(i32* %bzerr, i8* %5, i8* %1, i32 %18) #2
  br label %21

; <label>:21                                      ; preds = %20, %15
  %22 = load i32* %bzerr, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %.preheader, label %.loopexit.loopexit

; <label>:24                                      ; preds = %.preheader
  call void @BZ2_bzWriteClose64(i32* %bzerr, i8* %5, i32 0, i32* %nbytes_in_lo32, i32* %nbytes_in_hi32, i32* %nbytes_out_lo32, i32* %nbytes_out_hi32) #2
  %25 = load i32* %bzerr, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %.loopexit

; <label>:27                                      ; preds = %24
  %28 = icmp eq i32 %zStream, 1
  br i1 %28, label %30, label %29

; <label>:29                                      ; preds = %27
  store i32 0, i32* @outputHandleJustInCase, align 4
  br label %30

; <label>:30                                      ; preds = %29, %27
  store i32 0, i32* @outputHandleJustInCase, align 4
  %31 = load i32* @verbosity, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %147

; <label>:33                                      ; preds = %30
  %34 = load i32* %nbytes_in_lo32, align 4
  %35 = load i32* %nbytes_in_hi32, align 4
  %36 = or i32 %35, %34
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

; <label>:38                                      ; preds = %33
  %39 = load %struct._IO_FILE** @stderr, align 8
  %40 = call i64 @fwrite(i8* getelementptr inbounds ([22 x i8]* @.str113, i64 0, i64 0), i64 21, i64 1, %struct._IO_FILE* %39) #13
  br label %147

; <label>:41                                      ; preds = %33
  %42 = lshr i32 %35, 24
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 7
  store i8 %43, i8* %44, align 1
  %45 = lshr i32 %35, 16
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 6
  store i8 %46, i8* %47, align 1
  %48 = lshr i32 %35, 8
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 5
  store i8 %49, i8* %50, align 1
  %51 = trunc i32 %35 to i8
  %52 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 4
  store i8 %51, i8* %52, align 1
  %53 = lshr i32 %34, 24
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 3
  store i8 %54, i8* %55, align 1
  %56 = lshr i32 %34, 16
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 2
  store i8 %57, i8* %58, align 1
  %59 = lshr i32 %34, 8
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 1
  store i8 %60, i8* %61, align 1
  %62 = trunc i32 %34 to i8
  %63 = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 0
  store i8 %62, i8* %63, align 1
  %64 = load i32* %nbytes_out_lo32, align 4
  %65 = load i32* %nbytes_out_hi32, align 4
  %66 = lshr i32 %65, 24
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 7
  store i8 %67, i8* %68, align 1
  %69 = lshr i32 %65, 16
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 6
  store i8 %70, i8* %71, align 1
  %72 = lshr i32 %65, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 5
  store i8 %73, i8* %74, align 1
  %75 = trunc i32 %65 to i8
  %76 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 4
  store i8 %75, i8* %76, align 1
  %77 = lshr i32 %64, 24
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 3
  store i8 %78, i8* %79, align 1
  %80 = lshr i32 %64, 16
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 2
  store i8 %81, i8* %82, align 1
  %83 = lshr i32 %64, 8
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 1
  store i8 %84, i8* %85, align 1
  %86 = trunc i32 %64 to i8
  %87 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 0
  store i8 %86, i8* %87, align 1
  %88 = uitofp i8 %62 to double
  %89 = uitofp i8 %60 to double
  %90 = fmul double %89, 2.560000e+02
  %91 = fadd double %88, %90
  %92 = uitofp i8 %57 to double
  %93 = fmul double %92, 6.553600e+04
  %94 = fadd double %91, %93
  %95 = uitofp i8 %54 to double
  %96 = fmul double %95, 0x4170000000000000
  %97 = fadd double %94, %96
  %98 = uitofp i8 %51 to double
  %99 = fmul double %98, 0x41F0000000000000
  %100 = fadd double %97, %99
  %101 = uitofp i8 %49 to double
  %102 = fmul double %101, 0x4270000000000000
  %103 = fadd double %100, %102
  %104 = uitofp i8 %46 to double
  %105 = fmul double %104, 0x42F0000000000000
  %106 = fadd double %103, %105
  %107 = uitofp i8 %43 to double
  %108 = fmul double %107, 0x4370000000000000
  %109 = fadd double %106, %108
  %110 = uitofp i8 %86 to double
  %111 = uitofp i8 %84 to double
  %112 = fmul double %111, 2.560000e+02
  %113 = fadd double %110, %112
  %114 = uitofp i8 %81 to double
  %115 = fmul double %114, 6.553600e+04
  %116 = fadd double %113, %115
  %117 = uitofp i8 %78 to double
  %118 = fmul double %117, 0x4170000000000000
  %119 = fadd double %116, %118
  %120 = uitofp i8 %75 to double
  %121 = fmul double %120, 0x41F0000000000000
  %122 = fadd double %119, %121
  %123 = uitofp i8 %73 to double
  %124 = fmul double %123, 0x4270000000000000
  %125 = fadd double %122, %124
  %126 = uitofp i8 %70 to double
  %127 = fmul double %126, 0x42F0000000000000
  %128 = fadd double %125, %127
  %129 = uitofp i8 %67 to double
  %130 = fmul double %129, 0x4370000000000000
  %131 = fadd double %128, %130
  %132 = getelementptr inbounds [32 x i8]* %buf_nin, i64 0, i64 0
  call fastcc void @uInt64_toAscii(i8* %132, %struct.UInt64* %nbytes_in)
  %133 = getelementptr inbounds [32 x i8]* %buf_nout, i64 0, i64 0
  call fastcc void @uInt64_toAscii(i8* %133, %struct.UInt64* %nbytes_out)
  %134 = load %struct._IO_FILE** @stderr, align 8
  %135 = fdiv double %109, %131
  %136 = fmul double %131, 8.000000e+00
  %137 = fdiv double %136, %109
  %138 = fdiv double %131, %109
  %139 = fsub double 1.000000e+00, %138
  %140 = fmul double %139, 1.000000e+02
  %141 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([57 x i8]* @.str214, i64 0, i64 0), double %135, double %137, double %140, i8* %132, i8* %133) #12
  br label %147

.loopexit.loopexit:                               ; preds = %21
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %24, %0
  call void @BZ2_bzWriteClose64(i32* %bzerr_dummy, i8* %5, i32 1, i32* %nbytes_in_lo32, i32* %nbytes_in_hi32, i32* %nbytes_out_lo32, i32* %nbytes_out_hi32) #2
  %142 = load i32* %bzerr, align 4
  switch i32 %142, label %146 [
    i32 -9, label %143
    i32 -3, label %144
    i32 -6, label %145
  ]

; <label>:143                                     ; preds = %.loopexit
  call fastcc void @configError()
  unreachable

; <label>:144                                     ; preds = %.loopexit
  call fastcc void @outOfMemory()
  unreachable

; <label>:145                                     ; preds = %.loopexit
  call fastcc void @ioError()
  unreachable

; <label>:146                                     ; preds = %.loopexit
  call fastcc void @panic(i8* getelementptr inbounds ([26 x i8]* @.str315, i64 0, i64 0))
  unreachable

; <label>:147                                     ; preds = %41, %38, %30
  call void @llvm.lifetime.end(i64 5000, i8* %1) #2
  ret void
}

; Function Attrs: nounwind uwtable
define zeroext i8 @uncompressStream(i32 %zStream, i32 %stream) #0 {
  %bzerr = alloca i32, align 4
  %bzerr_dummy = alloca i32, align 4
  %obuf = alloca [5000 x i8], align 16
  %unused = alloca [5000 x i8], align 16
  %unused68 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 0
  %nUnused = alloca i32, align 4
  %unusedTmpV = alloca i8*, align 8
  %1 = getelementptr inbounds [5000 x i8]* %obuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %1) #2
  %2 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %2) #2
  store i32 0, i32* %nUnused, align 4
  %3 = load i32* @verbosity, align 4
  %4 = load i8* @smallMode, align 1
  %5 = zext i8 %4 to i32
  %6 = call i8* @BZ2_bzReadOpen(i32* %bzerr, i32 %zStream, i32 %3, i32 %5, i8* %2, i32 0) #2
  %7 = icmp eq i8* %6, null
  %8 = load i32* %bzerr, align 4
  %9 = icmp ne i32 %8, 0
  %or.cond34 = or i1 %7, %9
  br i1 %or.cond34, label %.loopexit, label %.lr.ph37.preheader

.lr.ph37.preheader:                               ; preds = %0
  br label %.lr.ph37

.lr.ph37:                                         ; preds = %.backedge16, %.lr.ph37.preheader
  %10 = phi i8* [ %119, %.backedge16 ], [ %6, %.lr.ph37.preheader ]
  %streamNo.035 = phi i32 [ %11, %.backedge16 ], [ 0, %.lr.ph37.preheader ]
  %11 = add nsw i32 %streamNo.035, 1
  br label %.backedge13

.backedge13:                                      ; preds = %.backedge13.backedge, %.lr.ph37
  %12 = phi i32 [ 0, %.lr.ph37 ], [ %.be, %.backedge13.backedge ]
  switch i32 %12, label %.loopexit.loopexit [
    i32 0, label %13
    i32 4, label %23
  ]

; <label>:13                                      ; preds = %.backedge13
  %14 = call i32 @BZ2_bzRead(i32* %bzerr, i8* %10, i8* %1, i32 5000) #2
  %15 = load i32* %bzerr, align 4
  %16 = icmp eq i32 %15, -5
  br i1 %16, label %136, label %17

; <label>:17                                      ; preds = %13
  %18 = and i32 %15, -5
  %19 = icmp eq i32 %18, 0
  %20 = icmp sgt i32 %14, 0
  %or.cond5 = and i1 %19, %20
  br i1 %or.cond5, label %21, label %.backedge13.backedge

.backedge13.backedge:                             ; preds = %21, %17
  %.be = phi i32 [ %15, %17 ], [ %.pre.pre, %21 ]
  br label %.backedge13

; <label>:21                                      ; preds = %17
  %22 = call i32 @spec_fwrite(i8* %1, i32 1, i32 %14, i32 %stream) #2
  %.pre.pre = load i32* %bzerr, align 4
  br label %.backedge13.backedge

; <label>:23                                      ; preds = %.backedge13
  call void @BZ2_bzReadGetUnused(i32* %bzerr, i8* %10, i8** %unusedTmpV, i32* %nUnused) #2
  %24 = load i32* %bzerr, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

; <label>:26                                      ; preds = %23
  call fastcc void @panic(i8* getelementptr inbounds ([27 x i8]* @.str518, i64 0, i64 0))
  unreachable

; <label>:27                                      ; preds = %23
  %28 = load i8** %unusedTmpV, align 8
  %29 = load i32* %nUnused, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %overflow.checked, label %._crit_edge

overflow.checked:                                 ; preds = %27
  %31 = add i32 %29, -1
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %32, 1
  %end.idx = add nuw nsw i64 %32, 1
  %n.vec = and i64 %33, 8589934560
  %cmp.zero = icmp eq i64 %n.vec, 0
  %34 = add i32 %29, -1
  %35 = zext i32 %34 to i64
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %overflow.checked
  %scevgep69 = getelementptr i8* %28, i64 %35
  %bound0 = icmp ule i8* %unused68, %scevgep69
  %scevgep = getelementptr [5000 x i8]* %unused, i64 0, i64 %35
  %bound1 = icmp ule i8* %28, %scevgep
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %36 = add i32 %29, -1
  %37 = zext i32 %36 to i64
  %38 = add i64 %37, 1
  %39 = lshr i64 %38, 5
  %40 = mul i64 %39, 32
  %41 = add i64 %40, -32
  %42 = lshr i64 %41, 5
  %43 = add i64 %42, 1
  %xtraiter = and i64 %43, 1
  %lcmp.mod = icmp ne i64 %xtraiter, 0
  %lcmp.overflow = icmp eq i64 %43, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %vector.body.unr, label %vector.body.preheader.split

vector.body.unr:                                  ; preds = %vector.body.preheader
  %44 = getelementptr inbounds i8* %28, i64 0
  %45 = bitcast i8* %44 to <16 x i8>*
  %wide.load.unr = load <16 x i8>* %45, align 1
  %.sum74.unr = or i64 0, 16
  %46 = getelementptr i8* %28, i64 %.sum74.unr
  %47 = bitcast i8* %46 to <16 x i8>*
  %wide.load71.unr = load <16 x i8>* %47, align 1
  %48 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 0
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %wide.load.unr, <16 x i8>* %49, align 16
  %.sum75.unr = or i64 0, 16
  %50 = getelementptr [5000 x i8]* %unused, i64 0, i64 %.sum75.unr
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %wide.load71.unr, <16 x i8>* %51, align 16
  %index.next.unr = add i64 0, 32
  %52 = icmp eq i64 %index.next.unr, %n.vec
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.unr, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.unr, %vector.body.unr ]
  %53 = icmp ult i64 %43, 2
  br i1 %53, label %middle.block.loopexit, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %54 = getelementptr inbounds i8* %28, i64 %index
  %55 = bitcast i8* %54 to <16 x i8>*
  %wide.load = load <16 x i8>* %55, align 1
  %.sum74 = or i64 %index, 16
  %56 = getelementptr i8* %28, i64 %.sum74
  %57 = bitcast i8* %56 to <16 x i8>*
  %wide.load71 = load <16 x i8>* %57, align 1
  %58 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %index
  %59 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %59, align 16
  %.sum75 = or i64 %index, 16
  %60 = getelementptr [5000 x i8]* %unused, i64 0, i64 %.sum75
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %wide.load71, <16 x i8>* %61, align 16
  %index.next = add i64 %index, 32
  %62 = getelementptr inbounds i8* %28, i64 %index.next
  %63 = bitcast i8* %62 to <16 x i8>*
  %wide.load.1 = load <16 x i8>* %63, align 1
  %.sum74.1 = or i64 %index.next, 16
  %64 = getelementptr i8* %28, i64 %.sum74.1
  %65 = bitcast i8* %64 to <16 x i8>*
  %wide.load71.1 = load <16 x i8>* %65, align 1
  %66 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %index.next
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %wide.load.1, <16 x i8>* %67, align 16
  %.sum75.1 = or i64 %index.next, 16
  %68 = getelementptr [5000 x i8]* %unused, i64 0, i64 %.sum75.1
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %wide.load71.1, <16 x i8>* %69, align 16
  %index.next.1 = add i64 %index.next, 32
  %70 = icmp eq i64 %index.next.1, %n.vec
  br i1 %70, label %middle.block.loopexit.unr-lcssa, label %vector.body, !llvm.loop !14

middle.block.loopexit.unr-lcssa:                  ; preds = %vector.body
  br label %middle.block.loopexit

middle.block.loopexit:                            ; preds = %middle.block.loopexit.unr-lcssa, %vector.body.preheader.split
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %vector.memcheck, %overflow.checked
  %resume.val = phi i64 [ 0, %overflow.checked ], [ 0, %vector.memcheck ], [ %n.vec, %middle.block.loopexit ]
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %._crit_edge, label %.lr.ph33.preheader

.lr.ph33.preheader:                               ; preds = %middle.block
  %71 = add i64 %resume.val, 1
  %72 = trunc i64 %71 to i32
  %73 = icmp sgt i32 %29, %72
  %smax = select i1 %73, i32 %29, i32 %72
  %74 = add i32 %smax, 1
  %75 = sub i32 %74, %72
  %xtraiter90 = and i32 %75, 3
  %lcmp.mod91 = icmp ne i32 %xtraiter90, 0
  %lcmp.overflow92 = icmp eq i32 %75, 0
  %lcmp.or93 = or i1 %lcmp.overflow92, %lcmp.mod91
  br i1 %lcmp.or93, label %unr.cmp99, label %.lr.ph33.preheader.split

unr.cmp99:                                        ; preds = %.lr.ph33.preheader
  %un.tmp100 = icmp eq i32 %xtraiter90, 1
  br i1 %un.tmp100, label %.lr.ph33.unr96, label %unr.cmp

unr.cmp:                                          ; preds = %unr.cmp99
  %un.tmp = icmp eq i32 %xtraiter90, 2
  br i1 %un.tmp, label %.lr.ph33.unr94, label %.lr.ph33.unr

.lr.ph33.unr:                                     ; preds = %unr.cmp
  %76 = getelementptr inbounds i8* %28, i64 %resume.val
  %77 = load i8* %76, align 1
  %78 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %resume.val
  store i8 %77, i8* %78, align 1
  %indvars.iv.next.unr = add nuw nsw i64 %resume.val, 1
  %79 = trunc i64 %indvars.iv.next.unr to i32
  %80 = icmp slt i32 %79, %29
  br label %.lr.ph33.unr94

.lr.ph33.unr94:                                   ; preds = %.lr.ph33.unr, %unr.cmp
  %indvars.iv.unr = phi i64 [ %indvars.iv.next.unr, %.lr.ph33.unr ], [ %resume.val, %unr.cmp ]
  %81 = getelementptr inbounds i8* %28, i64 %indvars.iv.unr
  %82 = load i8* %81, align 1
  %83 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %indvars.iv.unr
  store i8 %82, i8* %83, align 1
  %indvars.iv.next.unr95 = add nuw nsw i64 %indvars.iv.unr, 1
  %84 = trunc i64 %indvars.iv.next.unr95 to i32
  %85 = icmp slt i32 %84, %29
  br label %.lr.ph33.unr96

.lr.ph33.unr96:                                   ; preds = %.lr.ph33.unr94, %unr.cmp99
  %indvars.iv.unr97 = phi i64 [ %indvars.iv.next.unr95, %.lr.ph33.unr94 ], [ %resume.val, %unr.cmp99 ]
  %86 = getelementptr inbounds i8* %28, i64 %indvars.iv.unr97
  %87 = load i8* %86, align 1
  %88 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %indvars.iv.unr97
  store i8 %87, i8* %88, align 1
  %indvars.iv.next.unr98 = add nuw nsw i64 %indvars.iv.unr97, 1
  %89 = trunc i64 %indvars.iv.next.unr98 to i32
  %90 = icmp slt i32 %89, %29
  br label %.lr.ph33.preheader.split

.lr.ph33.preheader.split:                         ; preds = %.lr.ph33.unr96, %.lr.ph33.preheader
  %indvars.iv.unr101 = phi i64 [ %resume.val, %.lr.ph33.preheader ], [ %indvars.iv.next.unr98, %.lr.ph33.unr96 ]
  %91 = icmp ult i32 %75, 4
  br i1 %91, label %._crit_edge.loopexit, label %.lr.ph33.preheader.split.split

.lr.ph33.preheader.split.split:                   ; preds = %.lr.ph33.preheader.split
  br label %.lr.ph33

.lr.ph33:                                         ; preds = %.lr.ph33, %.lr.ph33.preheader.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr101, %.lr.ph33.preheader.split.split ], [ %indvars.iv.next.3, %.lr.ph33 ]
  %92 = getelementptr inbounds i8* %28, i64 %indvars.iv
  %93 = load i8* %92, align 1
  %94 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %indvars.iv
  store i8 %93, i8* %94, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %95 = trunc i64 %indvars.iv.next to i32
  %96 = getelementptr inbounds i8* %28, i64 %indvars.iv.next
  %97 = load i8* %96, align 1
  %98 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %indvars.iv.next
  store i8 %97, i8* %98, align 1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1
  %99 = trunc i64 %indvars.iv.next.1 to i32
  %100 = getelementptr inbounds i8* %28, i64 %indvars.iv.next.1
  %101 = load i8* %100, align 1
  %102 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %indvars.iv.next.1
  store i8 %101, i8* %102, align 1
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.next.1, 1
  %103 = trunc i64 %indvars.iv.next.2 to i32
  %104 = getelementptr inbounds i8* %28, i64 %indvars.iv.next.2
  %105 = load i8* %104, align 1
  %106 = getelementptr inbounds [5000 x i8]* %unused, i64 0, i64 %indvars.iv.next.2
  store i8 %105, i8* %106, align 1
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.next.2, 1
  %107 = trunc i64 %indvars.iv.next.3 to i32
  %108 = icmp slt i32 %107, %29
  br i1 %108, label %.lr.ph33, label %._crit_edge.loopexit.unr-lcssa, !llvm.loop !15

._crit_edge.loopexit.unr-lcssa:                   ; preds = %.lr.ph33
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph33.preheader.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %27
  call void @BZ2_bzReadClose(i32* %bzerr, i8* %10) #2
  %109 = load i32* %bzerr, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %112, label %111

; <label>:111                                     ; preds = %._crit_edge
  call fastcc void @panic(i8* getelementptr inbounds ([27 x i8]* @.str518, i64 0, i64 0))
  unreachable

; <label>:112                                     ; preds = %._crit_edge
  %113 = load i32* %nUnused, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %123, label %.backedge16

.backedge16:                                      ; preds = %myfeof.exit.thread, %112
  %115 = phi i32 [ %113, %112 ], [ %.pre53, %myfeof.exit.thread ]
  %116 = load i32* @verbosity, align 4
  %117 = load i8* @smallMode, align 1
  %118 = zext i8 %117 to i32
  %119 = call i8* @BZ2_bzReadOpen(i32* %bzerr, i32 %zStream, i32 %116, i32 %118, i8* %2, i32 %115) #2
  %120 = icmp eq i8* %119, null
  %121 = load i32* %bzerr, align 4
  %122 = icmp ne i32 %121, 0
  %or.cond = or i1 %120, %122
  br i1 %or.cond, label %.loopexit.loopexit77, label %.lr.ph37

; <label>:123                                     ; preds = %112
  %124 = call i32 @spec_getc(i32 %zStream) #2
  %125 = icmp eq i32 %124, -1
  br i1 %125, label %myfeof.exit.thread11.loopexit76, label %myfeof.exit.thread

myfeof.exit.thread:                               ; preds = %123
  %126 = trunc i32 %124 to i8
  %127 = call i32 @spec_ungetc(i8 zeroext %126, i32 %zStream) #2
  %.pre53 = load i32* %nUnused, align 4
  br label %.backedge16

myfeof.exit.thread11.loopexit:                    ; preds = %.backedge
  br label %myfeof.exit.thread11

myfeof.exit.thread11.loopexit76:                  ; preds = %123
  br label %myfeof.exit.thread11

myfeof.exit.thread11:                             ; preds = %139, %myfeof.exit.thread11.loopexit76, %myfeof.exit.thread11.loopexit
  %128 = icmp eq i32 %stream, 1
  br i1 %128, label %130, label %129

; <label>:129                                     ; preds = %myfeof.exit.thread11
  store i32 0, i32* @outputHandleJustInCase, align 4
  br label %130

; <label>:130                                     ; preds = %129, %myfeof.exit.thread11
  store i32 0, i32* @outputHandleJustInCase, align 4
  %131 = load i32* @verbosity, align 4
  %132 = icmp sgt i32 %131, 1
  br i1 %132, label %133, label %195

; <label>:133                                     ; preds = %130
  %134 = load %struct._IO_FILE** @stderr, align 8
  %135 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str619, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %134) #13
  br label %195

; <label>:136                                     ; preds = %13
  %.lcssa88 = phi i32 [ %11, %13 ]
  %.lcssa82 = phi i8* [ %10, %13 ]
  %137 = load i8* @forceOverwrite, align 1
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %.loopexit, label %139

; <label>:139                                     ; preds = %136
  %140 = call i32 @spec_rewind(i32 %zStream) #2
  %141 = call i32 @spec_getc(i32 %zStream) #2
  %142 = icmp eq i32 %141, -1
  br i1 %142, label %myfeof.exit.thread11, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %139
  br label %.lr.ph

.lr.ph:                                           ; preds = %.backedge, %.lr.ph.preheader
  %143 = phi i32 [ %150, %.backedge ], [ %141, %.lr.ph.preheader ]
  %144 = trunc i32 %143 to i8
  %145 = call i32 @spec_ungetc(i8 zeroext %144, i32 %zStream) #2
  %146 = call i32 @spec_fread(i8* %1, i32 1, i32 5000, i32 %zStream) #2
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %.backedge

; <label>:148                                     ; preds = %.lr.ph
  %149 = call i32 @spec_fwrite(i8* %1, i32 1, i32 %146, i32 %stream) #2
  br label %.backedge

.backedge:                                        ; preds = %148, %.lr.ph
  %150 = call i32 @spec_getc(i32 %zStream) #2
  %151 = icmp eq i32 %150, -1
  br i1 %151, label %myfeof.exit.thread11.loopexit, label %.lr.ph

.loopexit.loopexit:                               ; preds = %.backedge13
  %.lcssa83 = phi i32 [ %11, %.backedge13 ]
  %.lcssa = phi i8* [ %10, %.backedge13 ]
  br label %.loopexit

.loopexit.loopexit77:                             ; preds = %.backedge16
  %.lcssa89 = phi i8* [ %119, %.backedge16 ]
  %.lcssa87 = phi i32 [ %11, %.backedge16 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit77, %.loopexit.loopexit, %136, %0
  %152 = phi i8* [ %.lcssa82, %136 ], [ %6, %0 ], [ %.lcssa, %.loopexit.loopexit ], [ %.lcssa89, %.loopexit.loopexit77 ]
  %streamNo.1 = phi i32 [ %.lcssa88, %136 ], [ 0, %0 ], [ %.lcssa83, %.loopexit.loopexit ], [ %.lcssa87, %.loopexit.loopexit77 ]
  call void @BZ2_bzReadClose(i32* %bzerr_dummy, i8* %152) #2
  %153 = load i32* %bzerr, align 4
  switch i32 %153, label %194 [
    i32 -9, label %154
    i32 -6, label %155
    i32 -4, label %156
    i32 -3, label %168
    i32 -7, label %169
    i32 -5, label %185
  ]

; <label>:154                                     ; preds = %.loopexit
  call fastcc void @configError()
  unreachable

; <label>:155                                     ; preds = %.loopexit
  call fastcc void @ioError()
  unreachable

; <label>:156                                     ; preds = %.loopexit
  %157 = load %struct._IO_FILE** @stderr, align 8
  %158 = load i8** @progName, align 8
  %159 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %157, i8* getelementptr inbounds ([47 x i8]* @.str1627, i64 0, i64 0), i8* %158) #12
  %160 = load i8* @noisy, align 1
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %cadvise.exit.i, label %showFileNames.exit.i

showFileNames.exit.i:                             ; preds = %156
  %162 = load %struct._IO_FILE** @stderr, align 8
  %163 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %162, i8* getelementptr inbounds ([36 x i8]* @.str1223, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @inName, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @outName, i64 0, i64 0)) #12
  %.pr.i = load i8* @noisy, align 1
  %164 = icmp eq i8 %.pr.i, 0
  br i1 %164, label %cadvise.exit.i, label %165

; <label>:165                                     ; preds = %showFileNames.exit.i
  %166 = load %struct._IO_FILE** @stderr, align 8
  %167 = call i64 @fwrite(i8* getelementptr inbounds ([241 x i8]* @.str1526, i64 0, i64 0), i64 240, i64 1, %struct._IO_FILE* %166) #12
  br label %cadvise.exit.i

cadvise.exit.i:                                   ; preds = %165, %showFileNames.exit.i, %156
  call fastcc void @cleanUpAndFail() #2
  unreachable

; <label>:168                                     ; preds = %.loopexit
  call fastcc void @outOfMemory()
  unreachable

; <label>:169                                     ; preds = %.loopexit
  %170 = load i8* @noisy, align 1
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %cadvise.exit.i10, label %172

; <label>:172                                     ; preds = %169
  %173 = load %struct._IO_FILE** @stderr, align 8
  %174 = load i8** @progName, align 8
  %175 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %173, i8* getelementptr inbounds ([95 x i8]* @.str1425, i64 0, i64 0), i8* %174) #12
  %176 = load i8** @progName, align 8
  call void @perror(i8* %176) #12
  %177 = load i8* @noisy, align 1
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %cadvise.exit.i10, label %showFileNames.exit.i9

showFileNames.exit.i9:                            ; preds = %172
  %179 = load %struct._IO_FILE** @stderr, align 8
  %180 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %179, i8* getelementptr inbounds ([36 x i8]* @.str1223, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @inName, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @outName, i64 0, i64 0)) #12
  %.pr.i8 = load i8* @noisy, align 1
  %181 = icmp eq i8 %.pr.i8, 0
  br i1 %181, label %cadvise.exit.i10, label %182

; <label>:182                                     ; preds = %showFileNames.exit.i9
  %183 = load %struct._IO_FILE** @stderr, align 8
  %184 = call i64 @fwrite(i8* getelementptr inbounds ([241 x i8]* @.str1526, i64 0, i64 0), i64 240, i64 1, %struct._IO_FILE* %183) #12
  br label %cadvise.exit.i10

cadvise.exit.i10:                                 ; preds = %182, %showFileNames.exit.i9, %172, %169
  call fastcc void @cleanUpAndFail() #2
  unreachable

; <label>:185                                     ; preds = %.loopexit
  %186 = icmp eq i32 %streamNo.1, 1
  br i1 %186, label %195, label %187

; <label>:187                                     ; preds = %185
  %188 = load i8* @noisy, align 1
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %195, label %190

; <label>:190                                     ; preds = %187
  %191 = load %struct._IO_FILE** @stderr, align 8
  %192 = load i8** @progName, align 8
  %193 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %191, i8* getelementptr inbounds ([45 x i8]* @.str720, i64 0, i64 0), i8* %192, i8* getelementptr inbounds ([1034 x i8]* @inName, i64 0, i64 0)) #12
  br label %195

; <label>:194                                     ; preds = %.loopexit
  call fastcc void @panic(i8* getelementptr inbounds ([28 x i8]* @.str821, i64 0, i64 0))
  unreachable

; <label>:195                                     ; preds = %190, %187, %185, %133, %130
  %.0 = phi i8 [ 1, %133 ], [ 1, %130 ], [ 0, %185 ], [ 1, %187 ], [ 1, %190 ]
  call void @llvm.lifetime.end(i64 5000, i8* %2) #2
  call void @llvm.lifetime.end(i64 5000, i8* %1) #2
  ret i8 %.0
}

; Function Attrs: nounwind
declare void @perror(i8* nocapture readonly) #1

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @uInt64_toAscii(i8* nocapture %outbuf, %struct.UInt64* nocapture readonly %n) #0 {
  %buf = alloca [32 x i8], align 16
  %n_copy = alloca i64, align 8
  %tmpcast = bitcast i64* %n_copy to %struct.UInt64*
  %1 = bitcast %struct.UInt64* %n to i64*
  %2 = load i64* %1, align 1
  store i64 %2, i64* %n_copy, align 8
  %3 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 7
  %4 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 6
  %5 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 5
  %6 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 4
  %7 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 3
  %8 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 2
  %9 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 1
  %10 = bitcast i64* %n_copy to i8*
  %11 = lshr i64 %2, 24
  %12 = trunc i64 %11 to i32
  %13 = lshr i64 %2, 16
  %14 = trunc i64 %13 to i32
  %15 = lshr i64 %2, 8
  %16 = trunc i64 %15 to i32
  br label %uInt64_isZero.exit.thread

uInt64_isZero.exit.thread.loopexit:               ; preds = %84
  br label %uInt64_isZero.exit.thread

uInt64_isZero.exit.thread:                        ; preds = %uInt64_isZero.exit.thread.loopexit, %0
  %17 = phi i32 [ %16, %0 ], [ %80, %uInt64_isZero.exit.thread.loopexit ]
  %18 = phi i32 [ %14, %0 ], [ %78, %uInt64_isZero.exit.thread.loopexit ]
  %19 = phi i32 [ %12, %0 ], [ %77, %uInt64_isZero.exit.thread.loopexit ]
  %.in.in = phi i64 [ %2, %0 ], [ %67, %uInt64_isZero.exit.thread.loopexit ]
  %indvars.iv3 = phi i64 [ 0, %0 ], [ %indvars.iv.next4, %uInt64_isZero.exit.thread.loopexit ]
  %.in7 = lshr i64 %.in.in, 56
  %.in6 = lshr i64 %.in.in, 48
  %.in5 = lshr i64 %.in.in, 40
  %.in = lshr i64 %.in.in, 32
  %20 = trunc i64 %.in7 to i8
  %21 = trunc i64 %.in6 to i32
  %22 = trunc i64 %.in5 to i32
  %23 = trunc i64 %.in to i32
  %div.i = udiv i8 %20, 10
  store i8 %div.i, i8* %3, align 1
  %24 = urem i8 %20, 10
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 8
  %27 = and i32 %21, 255
  %28 = or i32 %27, %26
  %29 = udiv i32 %28, 10
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %4, align 2
  %31 = urem i32 %28, 10
  %32 = shl nuw nsw i32 %31, 8
  %33 = and i32 %22, 255
  %34 = or i32 %33, %32
  %35 = udiv i32 %34, 10
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %5, align 1
  %37 = urem i32 %34, 10
  %38 = shl nuw nsw i32 %37, 8
  %39 = and i32 %23, 255
  %40 = or i32 %39, %38
  %41 = udiv i32 %40, 10
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %6, align 4
  %43 = urem i32 %40, 10
  %44 = shl nuw nsw i32 %43, 8
  %45 = and i32 %19, 255
  %46 = or i32 %45, %44
  %47 = udiv i32 %46, 10
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %7, align 1
  %49 = urem i32 %46, 10
  %50 = shl nuw nsw i32 %49, 8
  %51 = and i32 %18, 255
  %52 = or i32 %51, %50
  %53 = udiv i32 %52, 10
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %8, align 2
  %55 = urem i32 %52, 10
  %56 = shl nuw nsw i32 %55, 8
  %57 = and i32 %17, 255
  %58 = or i32 %57, %56
  %59 = udiv i32 %58, 10
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %9, align 1
  %61 = urem i32 %58, 10
  %62 = shl nuw nsw i32 %61, 8
  %63 = bitcast i64* %n_copy to i16*
  %64 = load i16* %63, align 8
  %65 = bitcast i64* %n_copy to i32*
  %66 = load i32* %65, align 8
  %67 = load i64* %n_copy, align 8
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 255
  %70 = or i32 %69, %62
  %71 = udiv i32 %70, 10
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %10, align 8
  %73 = urem i32 %70, 10
  %74 = or i32 %73, 48
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %indvars.iv3
  store i8 %75, i8* %76, align 1
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  %77 = lshr i32 %66, 24
  %78 = lshr i32 %66, 16
  %79 = lshr i16 %64, 8
  %80 = zext i16 %79 to i32
  br label %84

; <label>:81                                      ; preds = %84
  %82 = trunc i64 %indvars.iv.next.i to i32
  %83 = icmp slt i32 %82, 8
  br i1 %83, label %84, label %88

; <label>:84                                      ; preds = %81, %uInt64_isZero.exit.thread
  %indvars.iv.i = phi i64 [ 0, %uInt64_isZero.exit.thread ], [ %indvars.iv.next.i, %81 ]
  %85 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 %indvars.iv.i
  %86 = load i8* %85, align 1
  %87 = icmp eq i8 %86, 0
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  br i1 %87, label %81, label %uInt64_isZero.exit.thread.loopexit

; <label>:88                                      ; preds = %81
  %indvars.iv.next4.lcssa = phi i64 [ %indvars.iv.next4, %81 ]
  %indvars.iv3.lcssa = phi i64 [ %indvars.iv3, %81 ]
  %89 = trunc i64 %indvars.iv3.lcssa to i32
  %sext = shl i64 %indvars.iv.next4.lcssa, 32
  %90 = ashr exact i64 %sext, 32
  %91 = getelementptr inbounds i8* %outbuf, i64 %90
  store i8 0, i8* %91, align 1
  %92 = icmp slt i32 %89, 0
  br i1 %92, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %88
  %93 = add i32 %89, 1
  %94 = and i64 %indvars.iv3.lcssa, 4294967295
  %95 = add nuw nsw i64 %94, 1
  %end.idx = add nuw nsw i64 %94, 1
  %fold = and i64 %indvars.iv3.lcssa, 1
  %n.mod.vf = xor i64 %fold, 1
  %n.vec = sub i64 %95, %n.mod.vf
  %cmp.zero = icmp eq i64 %95, %n.mod.vf
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %.lr.ph
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %induction910 = or i64 %index, 1
  %96 = sub i64 %indvars.iv3.lcssa, %index
  %97 = sub i64 %indvars.iv3.lcssa, %induction910
  %98 = shl i64 %96, 32
  %99 = shl i64 %97, 32
  %100 = ashr exact i64 %98, 32
  %101 = ashr exact i64 %99, 32
  %102 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %100
  %103 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %101
  %104 = load i8* %102, align 1
  %105 = load i8* %103, align 1
  %106 = getelementptr inbounds i8* %outbuf, i64 %index
  %107 = getelementptr inbounds i8* %outbuf, i64 %induction910
  store i8 %104, i8* %106, align 1
  store i8 %105, i8* %107, align 1
  %index.next = add i64 %index, 2
  %108 = icmp eq i64 %index.next, %n.vec
  br i1 %108, label %middle.block.loopexit, label %vector.body, !llvm.loop !16

middle.block.loopexit:                            ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %.lr.ph
  %resume.val = phi i64 [ 0, %.lr.ph ], [ %n.vec, %middle.block.loopexit ]
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block
  %109 = trunc i64 %indvars.iv3.lcssa to i32
  %110 = add i32 %109, 2
  %111 = add i64 %resume.val, 1
  %112 = trunc i64 %111 to i32
  %113 = sub i32 %110, %112
  %xtraiter = and i32 %113, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %113, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %scalar.ph.unr, label %scalar.ph.preheader.split

scalar.ph.unr:                                    ; preds = %scalar.ph.preheader
  %114 = sub i64 %indvars.iv3.lcssa, %resume.val
  %sext8.unr = shl i64 %114, 32
  %115 = ashr exact i64 %sext8.unr, 32
  %116 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %115
  %117 = load i8* %116, align 1
  %118 = getelementptr inbounds i8* %outbuf, i64 %resume.val
  store i8 %117, i8* %118, align 1
  %indvars.iv.next.unr = add nuw nsw i64 %resume.val, 1
  %lftr.wideiv.unr = trunc i64 %indvars.iv.next.unr to i32
  %exitcond.unr = icmp eq i32 %lftr.wideiv.unr, %93
  br label %scalar.ph.preheader.split

scalar.ph.preheader.split:                        ; preds = %scalar.ph.unr, %scalar.ph.preheader
  %indvars.iv.unr = phi i64 [ %resume.val, %scalar.ph.preheader ], [ %indvars.iv.next.unr, %scalar.ph.unr ]
  %119 = icmp ult i32 %113, 2
  br i1 %119, label %._crit_edge.loopexit, label %scalar.ph.preheader.split.split

scalar.ph.preheader.split.split:                  ; preds = %scalar.ph.preheader.split
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %scalar.ph.preheader.split.split ], [ %indvars.iv.next.1, %scalar.ph ]
  %120 = sub i64 %indvars.iv3.lcssa, %indvars.iv
  %sext8 = shl i64 %120, 32
  %121 = ashr exact i64 %sext8, 32
  %122 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %121
  %123 = load i8* %122, align 1
  %124 = getelementptr inbounds i8* %outbuf, i64 %indvars.iv
  store i8 %123, i8* %124, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %125 = sub i64 %indvars.iv3.lcssa, %indvars.iv.next
  %sext8.1 = shl i64 %125, 32
  %126 = ashr exact i64 %sext8.1, 32
  %127 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %126
  %128 = load i8* %127, align 1
  %129 = getelementptr inbounds i8* %outbuf, i64 %indvars.iv.next
  store i8 %128, i8* %129, align 1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %93
  br i1 %exitcond.1, label %._crit_edge.loopexit.unr-lcssa, label %scalar.ph, !llvm.loop !17

._crit_edge.loopexit.unr-lcssa:                   ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %scalar.ph.preheader.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %88
  ret void
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @configError() #7 {
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = tail call i64 @fwrite(i8* getelementptr inbounds ([236 x i8]* @.str10, i64 0, i64 0), i64 235, i64 1, %struct._IO_FILE* %1) #13
  store i32 0, i32* @exitValue, align 4
  tail call void @exit(i32 0) #10
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @outOfMemory() #7 {
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = load i8** @progName, align 8
  %3 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([38 x i8]* @.str1122, i64 0, i64 0), i8* %2) #12
  %4 = load i8* @noisy, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %showFileNames.exit, label %6

; <label>:6                                       ; preds = %0
  %7 = load %struct._IO_FILE** @stderr, align 8
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([36 x i8]* @.str1223, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @inName, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @outName, i64 0, i64 0)) #12
  br label %showFileNames.exit

showFileNames.exit:                               ; preds = %6, %0
  tail call fastcc void @cleanUpAndFail()
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @ioError() #7 {
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = load i8** @progName, align 8
  %3 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([65 x i8]* @.str1324, i64 0, i64 0), i8* %2) #12
  %4 = load i8** @progName, align 8
  tail call void @perror(i8* %4) #12
  %5 = load i8* @noisy, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %showFileNames.exit, label %7

; <label>:7                                       ; preds = %0
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([36 x i8]* @.str1223, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @inName, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @outName, i64 0, i64 0)) #12
  br label %showFileNames.exit

showFileNames.exit:                               ; preds = %7, %0
  tail call fastcc void @cleanUpAndFail()
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @panic(i8* %s) #7 {
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = load i8** @progName, align 8
  %3 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([148 x i8]* @.str1728, i64 0, i64 0), i8* %2, i8* %s) #12
  %4 = load i8* @noisy, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %showFileNames.exit, label %6

; <label>:6                                       ; preds = %0
  %7 = load %struct._IO_FILE** @stderr, align 8
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([36 x i8]* @.str1223, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @inName, i64 0, i64 0), i8* getelementptr inbounds ([1034 x i8]* @outName, i64 0, i64 0)) #12
  br label %showFileNames.exit

showFileNames.exit:                               ; preds = %6, %0
  tail call fastcc void @cleanUpAndFail()
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @cleanUpAndFail() #7 {
  store i32 0, i32* @exitValue, align 4
  tail call void @exit(i32 0) #10
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define void @BZ2_bz__AssertH__fail(i32 %errcode) #7 {
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([269 x i8]* @.str34, i64 0, i64 0), i32 %errcode, i8* getelementptr inbounds ([19 x i8]* @.str538, i64 0, i64 0)) #12
  %3 = icmp eq i32 %errcode, 1007
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = load %struct._IO_FILE** @stderr, align 8
  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([1057 x i8]* @.str135, i64 0, i64 0), i64 1056, i64 1, %struct._IO_FILE* %5) #13
  br label %7

; <label>:7                                       ; preds = %4, %0
  tail call void @exit(i32 0) #10
  unreachable
}

; Function Attrs: nounwind readnone uwtable
define i8* @BZ2_bzlibVersion() #6 {
  ret i8* getelementptr inbounds ([19 x i8]* @.str538, i64 0, i64 0)
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzCompressInit(%struct.bz_stream* %strm, i32 %blockSize100k, i32 %verbosity, i32 %workFactor) #0 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  %2 = icmp slt i32 %blockSize100k, 1
  %or.cond = or i1 %1, %2
  %3 = icmp sgt i32 %blockSize100k, 9
  %or.cond3 = or i1 %or.cond, %3
  %4 = icmp slt i32 %workFactor, 0
  %or.cond5 = or i1 %or.cond3, %4
  %5 = icmp sgt i32 %workFactor, 250
  %or.cond7 = or i1 %or.cond5, %5
  br i1 %or.cond7, label %120, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp eq i32 %workFactor, 0
  %.workFactor = select i1 %7, i32 30, i32 %workFactor
  %8 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 9
  %9 = load i8* (i8*, i32, i32)** %8, align 8
  %10 = icmp eq i8* (i8*, i32, i32)* %9, null
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %6
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %8, align 8
  br label %12

; <label>:12                                      ; preds = %11, %6
  %13 = phi i8* (i8*, i32, i32)* [ @default_bzalloc, %11 ], [ %9, %6 ]
  %14 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %15 = load void (i8*, i8*)** %14, align 8
  %16 = icmp eq void (i8*, i8*)* %15, null
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %12
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %14, align 8
  br label %18

; <label>:18                                      ; preds = %17, %12
  %19 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %20 = load i8** %19, align 8
  %21 = tail call i8* %13(i8* %20, i32 55768, i32 1) #2
  %22 = icmp eq i8* %21, null
  br i1 %22, label %120, label %23

; <label>:23                                      ; preds = %18
  %24 = bitcast i8* %21 to %struct.bz_stream**
  store %struct.bz_stream* %strm, %struct.bz_stream** %24, align 8
  %25 = getelementptr inbounds i8* %21, i64 24
  %26 = bitcast i8* %25 to i32**
  %27 = getelementptr inbounds i8* %21, i64 32
  %28 = bitcast i8* %27 to i32**
  %29 = getelementptr inbounds i8* %21, i64 40
  %30 = bitcast i8* %29 to i32**
  %31 = mul nsw i32 %blockSize100k, 100000
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 24, i32 8, i1 false)
  %32 = load i8* (i8*, i32, i32)** %8, align 8
  %33 = load i8** %19, align 8
  %34 = mul i32 %blockSize100k, 400000
  %35 = tail call i8* %32(i8* %33, i32 %34, i32 1) #2
  %36 = bitcast i8* %35 to i32*
  store i32* %36, i32** %26, align 8
  %37 = load i8* (i8*, i32, i32)** %8, align 8
  %38 = load i8** %19, align 8
  %39 = add i32 %34, 136
  %40 = tail call i8* %37(i8* %38, i32 %39, i32 1) #2
  %41 = bitcast i8* %40 to i32*
  store i32* %41, i32** %28, align 8
  %42 = load i8* (i8*, i32, i32)** %8, align 8
  %43 = load i8** %19, align 8
  %44 = tail call i8* %42(i8* %43, i32 262148, i32 1) #2
  %45 = bitcast i8* %44 to i32*
  store i32* %45, i32** %30, align 8
  %46 = load i32** %26, align 8
  %47 = icmp eq i32* %46, null
  br i1 %47, label %.thread, label %48

; <label>:48                                      ; preds = %23
  %49 = load i32** %28, align 8
  %50 = icmp eq i32* %49, null
  %51 = icmp eq i8* %44, null
  %or.cond9 = or i1 %50, %51
  br i1 %or.cond9, label %52, label %72

; <label>:52                                      ; preds = %48
  %53 = load void (i8*, i8*)** %14, align 8
  %54 = load i8** %19, align 8
  %55 = bitcast i32* %46 to i8*
  tail call void %53(i8* %54, i8* %55) #2
  br label %.thread

.thread:                                          ; preds = %52, %23
  %56 = load i32** %28, align 8
  %57 = icmp eq i32* %56, null
  br i1 %57, label %62, label %58

; <label>:58                                      ; preds = %.thread
  %59 = load void (i8*, i8*)** %14, align 8
  %60 = load i8** %19, align 8
  %61 = bitcast i32* %56 to i8*
  tail call void %59(i8* %60, i8* %61) #2
  br label %62

; <label>:62                                      ; preds = %58, %.thread
  %63 = load i32** %30, align 8
  %64 = icmp eq i32* %63, null
  br i1 %64, label %69, label %65

; <label>:65                                      ; preds = %62
  %66 = load void (i8*, i8*)** %14, align 8
  %67 = load i8** %19, align 8
  %68 = bitcast i32* %63 to i8*
  tail call void %66(i8* %67, i8* %68) #2
  br label %69

; <label>:69                                      ; preds = %65, %62
  %70 = load void (i8*, i8*)** %14, align 8
  %71 = load i8** %19, align 8
  tail call void %70(i8* %71, i8* %21) #2
  br label %120

; <label>:72                                      ; preds = %48
  %73 = getelementptr inbounds i8* %21, i64 660
  %74 = bitcast i8* %73 to i32*
  store i32 0, i32* %74, align 4
  %75 = getelementptr inbounds i8* %21, i64 12
  %76 = bitcast i8* %75 to i32*
  store i32 2, i32* %76, align 4
  %77 = getelementptr inbounds i8* %21, i64 8
  %78 = bitcast i8* %77 to i32*
  store i32 2, i32* %78, align 4
  %79 = getelementptr inbounds i8* %21, i64 652
  %80 = bitcast i8* %79 to i32*
  store i32 0, i32* %80, align 4
  %81 = getelementptr inbounds i8* %21, i64 664
  %82 = bitcast i8* %81 to i32*
  store i32 %blockSize100k, i32* %82, align 4
  %83 = add nsw i32 %31, -19
  %84 = getelementptr inbounds i8* %21, i64 112
  %85 = bitcast i8* %84 to i32*
  store i32 %83, i32* %85, align 4
  %86 = getelementptr inbounds i8* %21, i64 656
  %87 = bitcast i8* %86 to i32*
  store i32 %verbosity, i32* %87, align 4
  %88 = getelementptr inbounds i8* %21, i64 88
  %89 = bitcast i8* %88 to i32*
  store i32 %.workFactor, i32* %89, align 4
  %90 = bitcast i32* %49 to i8*
  %91 = getelementptr inbounds i8* %21, i64 64
  %92 = bitcast i8* %91 to i8**
  store i8* %90, i8** %92, align 8
  %93 = bitcast i32* %46 to i16*
  %94 = getelementptr inbounds i8* %21, i64 72
  %95 = bitcast i8* %94 to i16**
  store i16* %93, i16** %95, align 8
  %96 = getelementptr inbounds i8* %21, i64 80
  %97 = bitcast i8* %96 to i8**
  store i8* null, i8** %97, align 8
  %98 = getelementptr inbounds i8* %21, i64 56
  %99 = bitcast i8* %98 to i32**
  store i32* %46, i32** %99, align 8
  %100 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  store i8* %21, i8** %100, align 8
  %101 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 2
  store i32 0, i32* %101, align 4
  %102 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 3
  store i32 0, i32* %102, align 4
  %103 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 6
  store i32 0, i32* %103, align 4
  %104 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 7
  store i32 0, i32* %104, align 4
  %105 = getelementptr inbounds i8* %21, i64 92
  %106 = bitcast i8* %105 to i32*
  store i32 256, i32* %106, align 4
  %107 = getelementptr inbounds i8* %21, i64 96
  %108 = bitcast i8* %107 to i32*
  store i32 0, i32* %108, align 4
  %109 = getelementptr inbounds i8* %21, i64 108
  %110 = bitcast i8* %109 to i32*
  store i32 0, i32* %110, align 4
  %111 = getelementptr inbounds i8* %21, i64 116
  %112 = bitcast i8* %111 to i32*
  store i32 0, i32* %112, align 4
  %113 = getelementptr inbounds i8* %21, i64 120
  %114 = bitcast i8* %113 to i32*
  store i32 0, i32* %114, align 4
  %115 = getelementptr inbounds i8* %21, i64 648
  %116 = bitcast i8* %115 to i32*
  store i32 -1, i32* %116, align 4
  %117 = getelementptr i8* %21, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* %117, i8 0, i64 256, i32 1, i1 false) #2
  %118 = load i32* %74, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %74, align 4
  br label %120

; <label>:120                                     ; preds = %72, %69, %18, %0
  %.0 = phi i32 [ 0, %72 ], [ -2, %0 ], [ -3, %18 ], [ -3, %69 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzCompress(%struct.bz_stream* readonly %strm, i32 %action) #0 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  br i1 %1, label %isempty_RL.exit.thread, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %4 = load i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %isempty_RL.exit.thread, label %6

; <label>:6                                       ; preds = %2
  %7 = bitcast i8* %4 to %struct.bz_stream**
  %8 = load %struct.bz_stream** %7, align 8
  %9 = icmp eq %struct.bz_stream* %8, %strm
  br i1 %9, label %.preheader, label %isempty_RL.exit.thread

.preheader:                                       ; preds = %6
  %10 = getelementptr inbounds i8* %4, i64 8
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 1
  %13 = getelementptr inbounds i8* %4, i64 16
  %14 = bitcast i8* %13 to i32*
  switch i32 %action, label %22 [
    i32 0, label %15
    i32 1, label %.preheader.split.split.us
    i32 2, label %.preheader.split.split.split.us
  ]

; <label>:15                                      ; preds = %.preheader
  %.pre = load i32* %11, align 4
  switch i32 %.pre, label %isempty_RL.exit.thread [
    i32 1, label %isempty_RL.exit.thread.loopexit
    i32 2, label %.us-lcssa11.us
    i32 3, label %.us-lcssa9.us.thread
    i32 4, label %.us-lcssa10.us.thread
  ]

.us-lcssa10.us.thread:                            ; preds = %15
  br label %isempty_RL.exit.thread

.us-lcssa9.us.thread:                             ; preds = %15
  br label %isempty_RL.exit.thread

.preheader.split.split.us:                        ; preds = %.preheader
  %.pre18 = load i32* %11, align 4
  br label %16

; <label>:16                                      ; preds = %.backedge.us12, %.preheader.split.split.us
  %17 = phi i32 [ 3, %.backedge.us12 ], [ %.pre18, %.preheader.split.split.us ]
  switch i32 %17, label %isempty_RL.exit.thread.loopexit26 [
    i32 1, label %isempty_RL.exit.thread.loopexit.loopexit
    i32 2, label %.backedge.us12
    i32 3, label %.us-lcssa9.us.loopexit
    i32 4, label %.us-lcssa10.us.loopexit
  ]

.backedge.us12:                                   ; preds = %16
  %18 = load i32* %12, align 4
  store i32 %18, i32* %14, align 4
  store i32 3, i32* %11, align 4
  br label %16

.preheader.split.split.split.us:                  ; preds = %.preheader
  %.pre19 = load i32* %11, align 4
  br label %19

; <label>:19                                      ; preds = %.backedge.us14, %.preheader.split.split.split.us
  %20 = phi i32 [ 4, %.backedge.us14 ], [ %.pre19, %.preheader.split.split.split.us ]
  switch i32 %20, label %isempty_RL.exit.thread.loopexit27 [
    i32 1, label %isempty_RL.exit.thread.loopexit.loopexit28
    i32 2, label %.backedge.us14
    i32 3, label %.us-lcssa9.us.loopexit29
    i32 4, label %.us-lcssa10.us.loopexit30
  ]

.backedge.us14:                                   ; preds = %19
  %21 = load i32* %12, align 4
  store i32 %21, i32* %14, align 4
  store i32 4, i32* %11, align 4
  br label %19

; <label>:22                                      ; preds = %.preheader
  %.pre20 = load i32* %11, align 4
  switch i32 %.pre20, label %isempty_RL.exit.thread [
    i32 1, label %isempty_RL.exit.thread.loopexit
    i32 2, label %23
    i32 3, label %.us-lcssa9.us
    i32 4, label %.us-lcssa10.us
  ]

; <label>:23                                      ; preds = %22
  br label %isempty_RL.exit.thread.loopexit

.us-lcssa11.us:                                   ; preds = %15
  %24 = tail call fastcc zeroext i8 @handle_compress(i8* %4)
  %25 = icmp ne i8 %24, 0
  %26 = select i1 %25, i32 1, i32 -2
  br label %isempty_RL.exit.thread

.us-lcssa9.us.loopexit:                           ; preds = %16
  br label %.us-lcssa9.us

.us-lcssa9.us.loopexit29:                         ; preds = %19
  br label %.us-lcssa9.us

.us-lcssa9.us:                                    ; preds = %.us-lcssa9.us.loopexit29, %.us-lcssa9.us.loopexit, %22
  %27 = icmp eq i32 %action, 1
  br i1 %27, label %28, label %isempty_RL.exit.thread

; <label>:28                                      ; preds = %.us-lcssa9.us
  %29 = load i32* %14, align 4
  %30 = load i32* %12, align 4
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %32, label %isempty_RL.exit.thread

; <label>:32                                      ; preds = %28
  %strm.idx1.val = load i8** %3, align 8
  %33 = tail call fastcc zeroext i8 @handle_compress(i8* %strm.idx1.val)
  %34 = load i32* %14, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %isempty_RL.exit.thread

; <label>:36                                      ; preds = %32
  %37 = getelementptr inbounds i8* %4, i64 92
  %38 = bitcast i8* %37 to i32*
  %39 = load i32* %38, align 4
  %40 = icmp ult i32 %39, 256
  br i1 %40, label %41, label %isempty_RL.exit

; <label>:41                                      ; preds = %36
  %42 = getelementptr inbounds i8* %4, i64 96
  %43 = bitcast i8* %42 to i32*
  %44 = load i32* %43, align 4
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %isempty_RL.exit.thread, label %isempty_RL.exit

isempty_RL.exit:                                  ; preds = %41, %36
  %46 = getelementptr inbounds i8* %4, i64 120
  %47 = bitcast i8* %46 to i32*
  %48 = load i32* %47, align 4
  %49 = getelementptr inbounds i8* %4, i64 116
  %50 = bitcast i8* %49 to i32*
  %51 = load i32* %50, align 4
  %52 = icmp slt i32 %48, %51
  br i1 %52, label %isempty_RL.exit.thread, label %53

; <label>:53                                      ; preds = %isempty_RL.exit
  store i32 2, i32* %11, align 4
  br label %isempty_RL.exit.thread

.us-lcssa10.us.loopexit:                          ; preds = %16
  br label %.us-lcssa10.us

.us-lcssa10.us.loopexit30:                        ; preds = %19
  br label %.us-lcssa10.us

.us-lcssa10.us:                                   ; preds = %.us-lcssa10.us.loopexit30, %.us-lcssa10.us.loopexit, %22
  %54 = icmp eq i32 %action, 2
  br i1 %54, label %55, label %isempty_RL.exit.thread

; <label>:55                                      ; preds = %.us-lcssa10.us
  %56 = load i32* %14, align 4
  %57 = load i32* %12, align 4
  %58 = icmp eq i32 %56, %57
  br i1 %58, label %59, label %isempty_RL.exit.thread

; <label>:59                                      ; preds = %55
  %strm.idx.val = load i8** %3, align 8
  %60 = tail call fastcc zeroext i8 @handle_compress(i8* %strm.idx.val)
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %isempty_RL.exit.thread, label %62

; <label>:62                                      ; preds = %59
  %63 = load i32* %14, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %isempty_RL.exit.thread

; <label>:65                                      ; preds = %62
  %66 = getelementptr inbounds i8* %4, i64 92
  %67 = bitcast i8* %66 to i32*
  %68 = load i32* %67, align 4
  %69 = icmp ult i32 %68, 256
  br i1 %69, label %70, label %isempty_RL.exit4

; <label>:70                                      ; preds = %65
  %71 = getelementptr inbounds i8* %4, i64 96
  %72 = bitcast i8* %71 to i32*
  %73 = load i32* %72, align 4
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %isempty_RL.exit.thread, label %isempty_RL.exit4

isempty_RL.exit4:                                 ; preds = %70, %65
  %75 = getelementptr inbounds i8* %4, i64 120
  %76 = bitcast i8* %75 to i32*
  %77 = load i32* %76, align 4
  %78 = getelementptr inbounds i8* %4, i64 116
  %79 = bitcast i8* %78 to i32*
  %80 = load i32* %79, align 4
  %81 = icmp slt i32 %77, %80
  br i1 %81, label %isempty_RL.exit.thread, label %82

; <label>:82                                      ; preds = %isempty_RL.exit4
  store i32 1, i32* %11, align 4
  br label %isempty_RL.exit.thread

isempty_RL.exit.thread.loopexit.loopexit:         ; preds = %16
  br label %isempty_RL.exit.thread.loopexit

isempty_RL.exit.thread.loopexit.loopexit28:       ; preds = %19
  br label %isempty_RL.exit.thread.loopexit

isempty_RL.exit.thread.loopexit:                  ; preds = %isempty_RL.exit.thread.loopexit.loopexit28, %isempty_RL.exit.thread.loopexit.loopexit, %23, %22, %15
  %.0.ph = phi i32 [ -1, %15 ], [ -1, %22 ], [ -2, %23 ], [ -1, %isempty_RL.exit.thread.loopexit.loopexit ], [ -1, %isempty_RL.exit.thread.loopexit.loopexit28 ]
  br label %isempty_RL.exit.thread

isempty_RL.exit.thread.loopexit26:                ; preds = %16
  br label %isempty_RL.exit.thread

isempty_RL.exit.thread.loopexit27:                ; preds = %19
  br label %isempty_RL.exit.thread

isempty_RL.exit.thread:                           ; preds = %isempty_RL.exit.thread.loopexit27, %isempty_RL.exit.thread.loopexit26, %isempty_RL.exit.thread.loopexit, %82, %isempty_RL.exit4, %70, %62, %59, %55, %.us-lcssa10.us, %53, %isempty_RL.exit, %41, %32, %28, %.us-lcssa9.us, %.us-lcssa11.us, %22, %.us-lcssa9.us.thread, %.us-lcssa10.us.thread, %15, %6, %2, %0
  %.0 = phi i32 [ 4, %82 ], [ 1, %53 ], [ %26, %.us-lcssa11.us ], [ -2, %0 ], [ -2, %2 ], [ -2, %6 ], [ -1, %.us-lcssa9.us ], [ -1, %28 ], [ 2, %32 ], [ 2, %isempty_RL.exit ], [ -1, %.us-lcssa10.us ], [ -1, %55 ], [ -1, %59 ], [ 3, %62 ], [ 3, %isempty_RL.exit4 ], [ 2, %41 ], [ 3, %70 ], [ %.0.ph, %isempty_RL.exit.thread.loopexit ], [ -1, %.us-lcssa9.us.thread ], [ -1, %.us-lcssa10.us.thread ], [ 0, %22 ], [ 0, %15 ], [ 0, %isempty_RL.exit.thread.loopexit26 ], [ 0, %isempty_RL.exit.thread.loopexit27 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzCompressEnd(%struct.bz_stream* %strm) #0 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  br i1 %1, label %46, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %4 = load i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %46, label %6

; <label>:6                                       ; preds = %2
  %7 = bitcast i8* %4 to %struct.bz_stream**
  %8 = load %struct.bz_stream** %7, align 8
  %9 = icmp eq %struct.bz_stream* %8, %strm
  br i1 %9, label %10, label %46

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds i8* %4, i64 24
  %12 = bitcast i8* %11 to i32**
  %13 = load i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %21, label %15

; <label>:15                                      ; preds = %10
  %16 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %17 = load void (i8*, i8*)** %16, align 8
  %18 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %19 = load i8** %18, align 8
  %20 = bitcast i32* %13 to i8*
  tail call void %17(i8* %19, i8* %20) #2
  br label %21

; <label>:21                                      ; preds = %15, %10
  %22 = getelementptr inbounds i8* %4, i64 32
  %23 = bitcast i8* %22 to i32**
  %24 = load i32** %23, align 8
  %25 = icmp eq i32* %24, null
  br i1 %25, label %32, label %26

; <label>:26                                      ; preds = %21
  %27 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %28 = load void (i8*, i8*)** %27, align 8
  %29 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %30 = load i8** %29, align 8
  %31 = bitcast i32* %24 to i8*
  tail call void %28(i8* %30, i8* %31) #2
  br label %32

; <label>:32                                      ; preds = %26, %21
  %33 = getelementptr inbounds i8* %4, i64 40
  %34 = bitcast i8* %33 to i32**
  %35 = load i32** %34, align 8
  %36 = icmp eq i32* %35, null
  %.pre = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  br i1 %36, label %._crit_edge, label %37

._crit_edge:                                      ; preds = %32
  %.pre1 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  br label %42

; <label>:37                                      ; preds = %32
  %38 = load void (i8*, i8*)** %.pre, align 8
  %39 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %40 = load i8** %39, align 8
  %41 = bitcast i32* %35 to i8*
  tail call void %38(i8* %40, i8* %41) #2
  br label %42

; <label>:42                                      ; preds = %37, %._crit_edge
  %.pre-phi2 = phi i8** [ %.pre1, %._crit_edge ], [ %39, %37 ]
  %43 = load void (i8*, i8*)** %.pre, align 8
  %44 = load i8** %.pre-phi2, align 8
  %45 = load i8** %3, align 8
  tail call void %43(i8* %44, i8* %45) #2
  store i8* null, i8** %3, align 8
  br label %46

; <label>:46                                      ; preds = %42, %6, %2, %0
  %.0 = phi i32 [ 0, %42 ], [ -2, %0 ], [ -2, %2 ], [ -2, %6 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzDecompressInit(%struct.bz_stream* %strm, i32 %verbosity, i32 %small) #0 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  %small.cmp = icmp ugt i32 %small, 1
  %or.cond = or i1 %1, %small.cmp
  %2 = icmp ugt i32 %verbosity, 4
  %or.cond4 = or i1 %or.cond, %2
  br i1 %or.cond4, label %41, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 9
  %5 = load i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %3
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %4, align 8
  br label %8

; <label>:8                                       ; preds = %7, %3
  %9 = phi i8* (i8*, i32, i32)* [ @default_bzalloc, %7 ], [ %5, %3 ]
  %10 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %11 = load void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %8
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %10, align 8
  br label %14

; <label>:14                                      ; preds = %13, %8
  %15 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %16 = load i8** %15, align 8
  %17 = tail call i8* %9(i8* %16, i32 64144, i32 1) #2
  %18 = icmp eq i8* %17, null
  br i1 %18, label %41, label %19

; <label>:19                                      ; preds = %14
  %20 = bitcast i8* %17 to %struct.bz_stream**
  store %struct.bz_stream* %strm, %struct.bz_stream** %20, align 8
  %21 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds i8* %17, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 10, i32* %23, align 4
  %24 = getelementptr inbounds i8* %17, i64 36
  %25 = bitcast i8* %24 to i32*
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds i8* %17, i64 32
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds i8* %17, i64 3188
  %29 = bitcast i8* %28 to i32*
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 2
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 3
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 6
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 7
  store i32 0, i32* %33, align 4
  %34 = trunc i32 %small to i8
  %35 = getelementptr inbounds i8* %17, i64 44
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds i8* %17, i64 3152
  %37 = getelementptr inbounds i8* %17, i64 48
  %38 = bitcast i8* %37 to i32*
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds i8* %17, i64 52
  %40 = bitcast i8* %39 to i32*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 24, i32 8, i1 false)
  store i32 %verbosity, i32* %40, align 4
  br label %41

; <label>:41                                      ; preds = %19, %14, %0
  %.0 = phi i32 [ 0, %19 ], [ -2, %0 ], [ -3, %14 ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @BZ2_indexIntoF(i32 %indx, i32* nocapture readonly %cftab) #8 {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %na.0 = phi i32 [ 256, %0 ], [ %.na.0, %1 ]
  %nb.0 = phi i32 [ 0, %0 ], [ %nb.0., %1 ]
  %2 = add nsw i32 %nb.0, %na.0
  %3 = ashr i32 %2, 1
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i32* %cftab, i64 %4
  %6 = load i32* %5, align 4
  %7 = icmp sgt i32 %6, %indx
  %.na.0 = select i1 %7, i32 %3, i32 %na.0
  %nb.0. = select i1 %7, i32 %nb.0, i32 %3
  %8 = sub nsw i32 %.na.0, %nb.0.
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %1

; <label>:10                                      ; preds = %1
  %nb.0..lcssa = phi i32 [ %nb.0., %1 ]
  ret i32 %nb.0..lcssa
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzDecompress(%struct.bz_stream* readonly %strm) #0 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  br i1 %1, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %4 = load i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.DState*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %7

; <label>:7                                       ; preds = %2
  %8 = bitcast i8* %4 to %struct.bz_stream**
  %9 = load %struct.bz_stream** %8, align 8
  %10 = icmp eq %struct.bz_stream* %9, %strm
  br i1 %10, label %.preheader24, label %unRLE_obuf_to_output_SMALL.exit.thread16

.preheader24:                                     ; preds = %7
  %11 = getelementptr inbounds i8* %4, i64 8
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds i8* %4, i64 44
  %14 = getelementptr inbounds i8* %4, i64 20
  %15 = getelementptr inbounds i8* %4, i64 3184
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds i8* %4, i64 12
  %18 = getelementptr inbounds i8* %4, i64 16
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds i8* %4, i64 1092
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds i8* %4, i64 64
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds i8* %4, i64 3152
  %25 = bitcast i8* %24 to i32**
  %26 = getelementptr inbounds i8* %4, i64 60
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds i8* %4, i64 64080
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8* %4, i64 24
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8* %4, i64 28
  %33 = bitcast i8* %32 to i32*
  %34 = getelementptr inbounds i8* %4, i64 52
  %35 = bitcast i8* %34 to i32*
  %36 = getelementptr inbounds i8* %4, i64 3176
  %37 = bitcast i8* %36 to i32*
  %38 = getelementptr inbounds i8* %4, i64 3188
  %39 = bitcast i8* %38 to i32*
  %40 = getelementptr inbounds i8* %4, i64 3160
  %41 = bitcast i8* %40 to i16**
  %42 = getelementptr inbounds i8* %4, i64 3168
  %43 = bitcast i8* %42 to i8**
  %.pre = load i32* %12, align 4
  br label %.backedge.outer

.backedge.outer:                                  ; preds = %850, %.preheader24
  %.ph = phi i32 [ 2, %850 ], [ %.pre, %.preheader24 ]
  br label %.backedge

.backedge:                                        ; preds = %832, %.backedge.outer
  switch i32 %.ph, label %832 [
    i32 1, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit85
    i32 2, label %44
  ]

; <label>:44                                      ; preds = %.backedge
  %45 = load i8* %13, align 1
  %46 = icmp eq i8 %45, 0
  %47 = load i8* %14, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %46, label %519, label %49

; <label>:49                                      ; preds = %44
  %50 = load %struct.bz_stream** %8, align 8
  %51 = getelementptr inbounds %struct.bz_stream* %50, i64 0, i32 5
  %52 = load i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %48, label %.preheader.i, label %.preheader53.i

.preheader53.i:                                   ; preds = %49
  br i1 %53, label %.loopexit, label %.lr.ph61.i.preheader

.lr.ph61.i.preheader:                             ; preds = %.preheader53.i
  br label %.lr.ph61.i

.preheader.i:                                     ; preds = %49
  br i1 %53, label %.loopexit, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %.preheader.i
  br label %.lr.ph.i

.lr.ph61.i:                                       ; preds = %.backedge56.i, %.lr.ph61.i.preheader
  %54 = phi %struct.bz_stream* [ %150, %.backedge56.i ], [ %50, %.lr.ph61.i.preheader ]
  %55 = load i32* %19, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %93, label %57

; <label>:57                                      ; preds = %.lr.ph61.i
  %58 = load i8* %17, align 1
  %59 = getelementptr inbounds %struct.bz_stream* %54, i64 0, i32 4
  %60 = load i8** %59, align 8
  store i8 %58, i8* %60, align 1
  %61 = load i32* %16, align 4
  %62 = shl i32 %61, 8
  %63 = lshr i32 %61, 24
  %64 = load i8* %17, align 1
  %65 = zext i8 %64 to i32
  %66 = xor i32 %65, %63
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %67
  %69 = load i32* %68, align 4
  %70 = xor i32 %69, %62
  store i32 %70, i32* %16, align 4
  %71 = load i32* %19, align 4
  %72 = add nsw i32 %71, -1
  store i32 %72, i32* %19, align 4
  %73 = load %struct.bz_stream** %8, align 8
  %74 = getelementptr inbounds %struct.bz_stream* %73, i64 0, i32 4
  %75 = load i8** %74, align 8
  %76 = getelementptr inbounds i8* %75, i64 1
  store i8* %76, i8** %74, align 8
  %77 = load %struct.bz_stream** %8, align 8
  %78 = getelementptr inbounds %struct.bz_stream* %77, i64 0, i32 5
  %79 = load i32* %78, align 4
  %80 = add i32 %79, -1
  store i32 %80, i32* %78, align 4
  %81 = load %struct.bz_stream** %8, align 8
  %82 = getelementptr inbounds %struct.bz_stream* %81, i64 0, i32 6
  %83 = load i32* %82, align 4
  %84 = add i32 %83, 1
  store i32 %84, i32* %82, align 4
  %85 = load %struct.bz_stream** %8, align 8
  %86 = getelementptr inbounds %struct.bz_stream* %85, i64 0, i32 6
  %87 = load i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %.backedge56.i

; <label>:89                                      ; preds = %57
  %90 = getelementptr inbounds %struct.bz_stream* %85, i64 0, i32 7
  %91 = load i32* %90, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %90, align 4
  %.pre67.i = load %struct.bz_stream** %8, align 8
  br label %.backedge56.i

; <label>:93                                      ; preds = %.lr.ph61.i
  %94 = load i32* %21, align 4
  %95 = load i32* %29, align 4
  %96 = add nsw i32 %95, 1
  %97 = icmp eq i32 %94, %96
  br i1 %97, label %.loopexit.loopexit83, label %98

; <label>:98                                      ; preds = %93
  %99 = icmp sgt i32 %94, %96
  br i1 %99, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit84, label %100

; <label>:100                                     ; preds = %98
  store i32 1, i32* %19, align 4
  %101 = load i32* %23, align 4
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %17, align 1
  %103 = load i32* %27, align 4
  br label %104

; <label>:104                                     ; preds = %104, %100
  %na.0.i.i = phi i32 [ 256, %100 ], [ %.na.0.i.i, %104 ]
  %nb.0.i.i = phi i32 [ 0, %100 ], [ %nb.0..i.i, %104 ]
  %105 = add nsw i32 %nb.0.i.i, %na.0.i.i
  %106 = ashr i32 %105, 1
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %107
  %109 = load i32* %108, align 4
  %110 = icmp sgt i32 %109, %103
  %.na.0.i.i = select i1 %110, i32 %106, i32 %na.0.i.i
  %nb.0..i.i = select i1 %110, i32 %nb.0.i.i, i32 %106
  %111 = sub nsw i32 %.na.0.i.i, %nb.0..i.i
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %BZ2_indexIntoF.exit.i, label %104

BZ2_indexIntoF.exit.i:                            ; preds = %104
  %nb.0..i.i.lcssa = phi i32 [ %nb.0..i.i, %104 ]
  %113 = zext i32 %103 to i64
  %114 = load i16** %41, align 8
  %115 = getelementptr inbounds i16* %114, i64 %113
  %116 = load i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = lshr i32 %103, 1
  %119 = zext i32 %118 to i64
  %120 = load i8** %43, align 8
  %121 = getelementptr inbounds i8* %120, i64 %119
  %122 = load i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = shl i32 %103, 2
  %125 = and i32 %124, 4
  %126 = lshr i32 %123, %125
  %127 = shl i32 %126, 16
  %128 = and i32 %127, 983040
  %129 = or i32 %128, %117
  store i32 %129, i32* %27, align 4
  %130 = load i32* %31, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %139

; <label>:132                                     ; preds = %BZ2_indexIntoF.exit.i
  %133 = load i32* %33, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %134
  %136 = load i32* %135, align 4
  store i32 %136, i32* %31, align 4
  %137 = add nsw i32 %133, 1
  %138 = icmp eq i32 %137, 512
  %..i = select i1 %138, i32 0, i32 %137
  store i32 %..i, i32* %33, align 4
  br label %139

; <label>:139                                     ; preds = %132, %BZ2_indexIntoF.exit.i
  %140 = phi i32 [ %136, %132 ], [ %130, %BZ2_indexIntoF.exit.i ]
  %141 = add nsw i32 %140, -1
  store i32 %141, i32* %31, align 4
  %142 = add nsw i32 %94, 1
  store i32 %142, i32* %21, align 4
  %143 = icmp eq i32 %94, %95
  br i1 %143, label %.backedge56.i, label %144

; <label>:144                                     ; preds = %139
  %145 = icmp eq i32 %141, 1
  %146 = zext i1 %145 to i32
  %.masked.i = and i32 %nb.0..i.i.lcssa, 255
  %147 = xor i32 %146, %.masked.i
  %148 = icmp eq i32 %147, %101
  br i1 %148, label %154, label %149

; <label>:149                                     ; preds = %144
  store i32 %147, i32* %23, align 4
  br label %.backedge56.i

.backedge56.i:                                    ; preds = %313, %241, %231, %197, %187, %149, %139, %89, %57
  %150 = phi %struct.bz_stream* [ %54, %149 ], [ %54, %197 ], [ %54, %241 ], [ %54, %313 ], [ %.pre67.i, %89 ], [ %85, %57 ], [ %54, %139 ], [ %54, %187 ], [ %54, %231 ]
  %151 = getelementptr inbounds %struct.bz_stream* %150, i64 0, i32 5
  %152 = load i32* %151, align 4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %.loopexit.loopexit83, label %.lr.ph61.i

; <label>:154                                     ; preds = %144
  store i32 2, i32* %19, align 4
  br label %155

; <label>:155                                     ; preds = %155, %154
  %na.0.i48.i = phi i32 [ 256, %154 ], [ %.na.0.i50.i, %155 ]
  %nb.0.i49.i = phi i32 [ 0, %154 ], [ %nb.0..i51.i, %155 ]
  %156 = add nsw i32 %nb.0.i49.i, %na.0.i48.i
  %157 = ashr i32 %156, 1
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %158
  %160 = load i32* %159, align 4
  %161 = icmp sgt i32 %160, %129
  %.na.0.i50.i = select i1 %161, i32 %157, i32 %na.0.i48.i
  %nb.0..i51.i = select i1 %161, i32 %nb.0.i49.i, i32 %157
  %162 = sub nsw i32 %.na.0.i50.i, %nb.0..i51.i
  %163 = icmp eq i32 %162, 1
  br i1 %163, label %BZ2_indexIntoF.exit52.i, label %155

BZ2_indexIntoF.exit52.i:                          ; preds = %155
  %nb.0..i51.i.lcssa = phi i32 [ %nb.0..i51.i, %155 ]
  %164 = zext i32 %129 to i64
  %165 = getelementptr inbounds i16* %114, i64 %164
  %166 = load i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = lshr i32 %129, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds i8* %120, i64 %169
  %171 = load i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = shl nuw nsw i32 %117, 2
  %174 = and i32 %173, 4
  %175 = lshr i32 %172, %174
  %176 = shl i32 %175, 16
  %177 = and i32 %176, 983040
  %178 = or i32 %177, %167
  store i32 %178, i32* %27, align 4
  %179 = icmp eq i32 %141, 0
  br i1 %179, label %180, label %187

; <label>:180                                     ; preds = %BZ2_indexIntoF.exit52.i
  %181 = load i32* %33, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %182
  %184 = load i32* %183, align 4
  store i32 %184, i32* %31, align 4
  %185 = add nsw i32 %181, 1
  %186 = icmp eq i32 %185, 512
  %.4.i = select i1 %186, i32 0, i32 %185
  store i32 %.4.i, i32* %33, align 4
  br label %187

; <label>:187                                     ; preds = %180, %BZ2_indexIntoF.exit52.i
  %188 = phi i32 [ %184, %180 ], [ %141, %BZ2_indexIntoF.exit52.i ]
  %189 = add nsw i32 %188, -1
  store i32 %189, i32* %31, align 4
  %190 = add nsw i32 %94, 2
  store i32 %190, i32* %21, align 4
  %191 = icmp eq i32 %142, %95
  br i1 %191, label %.backedge56.i, label %192

; <label>:192                                     ; preds = %187
  %193 = icmp eq i32 %189, 1
  %194 = zext i1 %193 to i32
  %.masked1.i = and i32 %nb.0..i51.i.lcssa, 255
  %195 = xor i32 %194, %.masked1.i
  %196 = icmp eq i32 %195, %101
  br i1 %196, label %198, label %197

; <label>:197                                     ; preds = %192
  store i32 %195, i32* %23, align 4
  br label %.backedge56.i

; <label>:198                                     ; preds = %192
  store i32 3, i32* %19, align 4
  br label %199

; <label>:199                                     ; preds = %199, %198
  %na.0.i43.i = phi i32 [ 256, %198 ], [ %.na.0.i45.i, %199 ]
  %nb.0.i44.i = phi i32 [ 0, %198 ], [ %nb.0..i46.i, %199 ]
  %200 = add nsw i32 %nb.0.i44.i, %na.0.i43.i
  %201 = ashr i32 %200, 1
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %202
  %204 = load i32* %203, align 4
  %205 = icmp sgt i32 %204, %178
  %.na.0.i45.i = select i1 %205, i32 %201, i32 %na.0.i43.i
  %nb.0..i46.i = select i1 %205, i32 %nb.0.i44.i, i32 %201
  %206 = sub nsw i32 %.na.0.i45.i, %nb.0..i46.i
  %207 = icmp eq i32 %206, 1
  br i1 %207, label %BZ2_indexIntoF.exit47.i, label %199

BZ2_indexIntoF.exit47.i:                          ; preds = %199
  %nb.0..i46.i.lcssa = phi i32 [ %nb.0..i46.i, %199 ]
  %208 = zext i32 %178 to i64
  %209 = getelementptr inbounds i16* %114, i64 %208
  %210 = load i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = lshr i32 %178, 1
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds i8* %120, i64 %213
  %215 = load i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = shl nuw nsw i32 %167, 2
  %218 = and i32 %217, 4
  %219 = lshr i32 %216, %218
  %220 = shl i32 %219, 16
  %221 = and i32 %220, 983040
  %222 = or i32 %221, %211
  store i32 %222, i32* %27, align 4
  %223 = icmp eq i32 %189, 0
  br i1 %223, label %224, label %231

; <label>:224                                     ; preds = %BZ2_indexIntoF.exit47.i
  %225 = load i32* %33, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %226
  %228 = load i32* %227, align 4
  store i32 %228, i32* %31, align 4
  %229 = add nsw i32 %225, 1
  %230 = icmp eq i32 %229, 512
  %.5.i = select i1 %230, i32 0, i32 %229
  store i32 %.5.i, i32* %33, align 4
  br label %231

; <label>:231                                     ; preds = %224, %BZ2_indexIntoF.exit47.i
  %232 = phi i32 [ %228, %224 ], [ %189, %BZ2_indexIntoF.exit47.i ]
  %233 = add nsw i32 %232, -1
  store i32 %233, i32* %31, align 4
  %234 = add nsw i32 %94, 3
  store i32 %234, i32* %21, align 4
  %235 = icmp eq i32 %190, %95
  br i1 %235, label %.backedge56.i, label %236

; <label>:236                                     ; preds = %231
  %237 = icmp eq i32 %233, 1
  %238 = zext i1 %237 to i32
  %.masked2.i = and i32 %nb.0..i46.i.lcssa, 255
  %239 = xor i32 %238, %.masked2.i
  %240 = icmp eq i32 %239, %101
  br i1 %240, label %.preheader17.preheader, label %241

.preheader17.preheader:                           ; preds = %236
  br label %.preheader17

; <label>:241                                     ; preds = %236
  store i32 %239, i32* %23, align 4
  br label %.backedge56.i

.preheader17:                                     ; preds = %.preheader17, %.preheader17.preheader
  %na.0.i38.i = phi i32 [ %.na.0.i40.i, %.preheader17 ], [ 256, %.preheader17.preheader ]
  %nb.0.i39.i = phi i32 [ %nb.0..i41.i, %.preheader17 ], [ 0, %.preheader17.preheader ]
  %242 = add nsw i32 %nb.0.i39.i, %na.0.i38.i
  %243 = ashr i32 %242, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %244
  %246 = load i32* %245, align 4
  %247 = icmp sgt i32 %246, %222
  %.na.0.i40.i = select i1 %247, i32 %243, i32 %na.0.i38.i
  %nb.0..i41.i = select i1 %247, i32 %nb.0.i39.i, i32 %243
  %248 = sub nsw i32 %.na.0.i40.i, %nb.0..i41.i
  %249 = icmp eq i32 %248, 1
  br i1 %249, label %BZ2_indexIntoF.exit42.i, label %.preheader17

BZ2_indexIntoF.exit42.i:                          ; preds = %.preheader17
  %nb.0..i41.i.lcssa = phi i32 [ %nb.0..i41.i, %.preheader17 ]
  %250 = zext i32 %222 to i64
  %251 = getelementptr inbounds i16* %114, i64 %250
  %252 = load i16* %251, align 2
  %253 = zext i16 %252 to i32
  %254 = lshr i32 %222, 1
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds i8* %120, i64 %255
  %257 = load i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = shl nuw nsw i32 %211, 2
  %260 = and i32 %259, 4
  %261 = lshr i32 %258, %260
  %262 = shl i32 %261, 16
  %263 = and i32 %262, 983040
  %264 = or i32 %263, %253
  store i32 %264, i32* %27, align 4
  %265 = icmp eq i32 %233, 0
  br i1 %265, label %266, label %273

; <label>:266                                     ; preds = %BZ2_indexIntoF.exit42.i
  %267 = load i32* %33, align 4
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %268
  %270 = load i32* %269, align 4
  store i32 %270, i32* %31, align 4
  %271 = add nsw i32 %267, 1
  %272 = icmp eq i32 %271, 512
  %.6.i = select i1 %272, i32 0, i32 %271
  store i32 %.6.i, i32* %33, align 4
  br label %273

; <label>:273                                     ; preds = %266, %BZ2_indexIntoF.exit42.i
  %274 = phi i32 [ %270, %266 ], [ %233, %BZ2_indexIntoF.exit42.i ]
  %275 = add nsw i32 %274, -1
  store i32 %275, i32* %31, align 4
  %276 = icmp eq i32 %275, 1
  %277 = zext i1 %276 to i32
  %278 = add nsw i32 %94, 4
  store i32 %278, i32* %21, align 4
  %.masked3.i = and i32 %nb.0..i41.i.lcssa, 255
  %279 = xor i32 %277, %.masked3.i
  %280 = add nuw nsw i32 %279, 4
  store i32 %280, i32* %19, align 4
  br label %281

; <label>:281                                     ; preds = %281, %273
  %na.0.i33.i = phi i32 [ 256, %273 ], [ %.na.0.i35.i, %281 ]
  %nb.0.i34.i = phi i32 [ 0, %273 ], [ %nb.0..i36.i, %281 ]
  %282 = add nsw i32 %nb.0.i34.i, %na.0.i33.i
  %283 = ashr i32 %282, 1
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %284
  %286 = load i32* %285, align 4
  %287 = icmp sgt i32 %286, %264
  %.na.0.i35.i = select i1 %287, i32 %283, i32 %na.0.i33.i
  %nb.0..i36.i = select i1 %287, i32 %nb.0.i34.i, i32 %283
  %288 = sub nsw i32 %.na.0.i35.i, %nb.0..i36.i
  %289 = icmp eq i32 %288, 1
  br i1 %289, label %BZ2_indexIntoF.exit37.i, label %281

BZ2_indexIntoF.exit37.i:                          ; preds = %281
  %nb.0..i36.i.lcssa = phi i32 [ %nb.0..i36.i, %281 ]
  store i32 %nb.0..i36.i.lcssa, i32* %23, align 4
  %290 = zext i32 %264 to i64
  %291 = getelementptr inbounds i16* %114, i64 %290
  %292 = load i16* %291, align 2
  %293 = zext i16 %292 to i32
  %294 = lshr i32 %264, 1
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds i8* %120, i64 %295
  %297 = load i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = shl nuw nsw i32 %253, 2
  %300 = and i32 %299, 4
  %301 = lshr i32 %298, %300
  %302 = shl i32 %301, 16
  %303 = and i32 %302, 983040
  %304 = or i32 %303, %293
  store i32 %304, i32* %27, align 4
  %305 = icmp eq i32 %275, 0
  br i1 %305, label %306, label %313

; <label>:306                                     ; preds = %BZ2_indexIntoF.exit37.i
  %307 = load i32* %33, align 4
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %308
  %310 = load i32* %309, align 4
  store i32 %310, i32* %31, align 4
  %311 = add nsw i32 %307, 1
  %312 = icmp eq i32 %311, 512
  %.7.i = select i1 %312, i32 0, i32 %311
  store i32 %.7.i, i32* %33, align 4
  br label %313

; <label>:313                                     ; preds = %306, %BZ2_indexIntoF.exit37.i
  %314 = phi i32 [ %310, %306 ], [ %275, %BZ2_indexIntoF.exit37.i ]
  %315 = add nsw i32 %314, -1
  store i32 %315, i32* %31, align 4
  %316 = icmp eq i32 %315, 1
  %317 = zext i1 %316 to i32
  %318 = xor i32 %317, %nb.0..i36.i.lcssa
  store i32 %318, i32* %23, align 4
  %319 = add nsw i32 %94, 5
  store i32 %319, i32* %21, align 4
  br label %.backedge56.i

.lr.ph.i:                                         ; preds = %.backedge.i, %.lr.ph.i.preheader
  %320 = phi %struct.bz_stream* [ %402, %.backedge.i ], [ %50, %.lr.ph.i.preheader ]
  %321 = load i32* %19, align 4
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %359, label %323

; <label>:323                                     ; preds = %.lr.ph.i
  %324 = load i8* %17, align 1
  %325 = getelementptr inbounds %struct.bz_stream* %320, i64 0, i32 4
  %326 = load i8** %325, align 8
  store i8 %324, i8* %326, align 1
  %327 = load i32* %16, align 4
  %328 = shl i32 %327, 8
  %329 = lshr i32 %327, 24
  %330 = load i8* %17, align 1
  %331 = zext i8 %330 to i32
  %332 = xor i32 %331, %329
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %333
  %335 = load i32* %334, align 4
  %336 = xor i32 %335, %328
  store i32 %336, i32* %16, align 4
  %337 = load i32* %19, align 4
  %338 = add nsw i32 %337, -1
  store i32 %338, i32* %19, align 4
  %339 = load %struct.bz_stream** %8, align 8
  %340 = getelementptr inbounds %struct.bz_stream* %339, i64 0, i32 4
  %341 = load i8** %340, align 8
  %342 = getelementptr inbounds i8* %341, i64 1
  store i8* %342, i8** %340, align 8
  %343 = load %struct.bz_stream** %8, align 8
  %344 = getelementptr inbounds %struct.bz_stream* %343, i64 0, i32 5
  %345 = load i32* %344, align 4
  %346 = add i32 %345, -1
  store i32 %346, i32* %344, align 4
  %347 = load %struct.bz_stream** %8, align 8
  %348 = getelementptr inbounds %struct.bz_stream* %347, i64 0, i32 6
  %349 = load i32* %348, align 4
  %350 = add i32 %349, 1
  store i32 %350, i32* %348, align 4
  %351 = load %struct.bz_stream** %8, align 8
  %352 = getelementptr inbounds %struct.bz_stream* %351, i64 0, i32 6
  %353 = load i32* %352, align 4
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %.backedge.i

; <label>:355                                     ; preds = %323
  %356 = getelementptr inbounds %struct.bz_stream* %351, i64 0, i32 7
  %357 = load i32* %356, align 4
  %358 = add i32 %357, 1
  store i32 %358, i32* %356, align 4
  %.pre.i = load %struct.bz_stream** %8, align 8
  br label %.backedge.i

; <label>:359                                     ; preds = %.lr.ph.i
  %360 = load i32* %21, align 4
  %361 = load i32* %29, align 4
  %362 = add nsw i32 %361, 1
  %363 = icmp eq i32 %360, %362
  br i1 %363, label %.loopexit.loopexit81, label %364

; <label>:364                                     ; preds = %359
  %365 = icmp sgt i32 %360, %362
  br i1 %365, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit82, label %366

; <label>:366                                     ; preds = %364
  store i32 1, i32* %19, align 4
  %367 = load i32* %23, align 4
  %368 = trunc i32 %367 to i8
  store i8 %368, i8* %17, align 1
  %369 = load i32* %27, align 4
  br label %370

; <label>:370                                     ; preds = %370, %366
  %na.0.i28.i = phi i32 [ 256, %366 ], [ %.na.0.i30.i, %370 ]
  %nb.0.i29.i = phi i32 [ 0, %366 ], [ %nb.0..i31.i, %370 ]
  %371 = add nsw i32 %nb.0.i29.i, %na.0.i28.i
  %372 = ashr i32 %371, 1
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %373
  %375 = load i32* %374, align 4
  %376 = icmp sgt i32 %375, %369
  %.na.0.i30.i = select i1 %376, i32 %372, i32 %na.0.i28.i
  %nb.0..i31.i = select i1 %376, i32 %nb.0.i29.i, i32 %372
  %377 = sub nsw i32 %.na.0.i30.i, %nb.0..i31.i
  %378 = icmp eq i32 %377, 1
  br i1 %378, label %BZ2_indexIntoF.exit32.i, label %370

BZ2_indexIntoF.exit32.i:                          ; preds = %370
  %nb.0..i31.i.lcssa = phi i32 [ %nb.0..i31.i, %370 ]
  %379 = zext i32 %369 to i64
  %380 = load i16** %41, align 8
  %381 = getelementptr inbounds i16* %380, i64 %379
  %382 = load i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = lshr i32 %369, 1
  %385 = zext i32 %384 to i64
  %386 = load i8** %43, align 8
  %387 = getelementptr inbounds i8* %386, i64 %385
  %388 = load i8* %387, align 1
  %389 = zext i8 %388 to i32
  %390 = shl i32 %369, 2
  %391 = and i32 %390, 4
  %392 = lshr i32 %389, %391
  %393 = shl i32 %392, 16
  %394 = and i32 %393, 983040
  %395 = or i32 %394, %383
  store i32 %395, i32* %27, align 4
  %396 = add nsw i32 %360, 1
  store i32 %396, i32* %21, align 4
  %397 = icmp eq i32 %360, %361
  br i1 %397, label %.backedge.i, label %398

; <label>:398                                     ; preds = %BZ2_indexIntoF.exit32.i
  %399 = and i32 %nb.0..i31.i.lcssa, 255
  %400 = icmp eq i32 %399, %367
  br i1 %400, label %406, label %401

; <label>:401                                     ; preds = %398
  store i32 %399, i32* %23, align 4
  br label %.backedge.i

.backedge.i:                                      ; preds = %BZ2_indexIntoF.exit12.i, %467, %BZ2_indexIntoF.exit22.i, %436, %BZ2_indexIntoF.exit27.i, %401, %BZ2_indexIntoF.exit32.i, %355, %323
  %402 = phi %struct.bz_stream* [ %320, %401 ], [ %320, %436 ], [ %320, %467 ], [ %320, %BZ2_indexIntoF.exit12.i ], [ %.pre.i, %355 ], [ %351, %323 ], [ %320, %BZ2_indexIntoF.exit32.i ], [ %320, %BZ2_indexIntoF.exit27.i ], [ %320, %BZ2_indexIntoF.exit22.i ]
  %403 = getelementptr inbounds %struct.bz_stream* %402, i64 0, i32 5
  %404 = load i32* %403, align 4
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %.loopexit.loopexit81, label %.lr.ph.i

; <label>:406                                     ; preds = %398
  store i32 2, i32* %19, align 4
  br label %407

; <label>:407                                     ; preds = %407, %406
  %na.0.i23.i = phi i32 [ 256, %406 ], [ %.na.0.i25.i, %407 ]
  %nb.0.i24.i = phi i32 [ 0, %406 ], [ %nb.0..i26.i, %407 ]
  %408 = add nsw i32 %nb.0.i24.i, %na.0.i23.i
  %409 = ashr i32 %408, 1
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %410
  %412 = load i32* %411, align 4
  %413 = icmp sgt i32 %412, %395
  %.na.0.i25.i = select i1 %413, i32 %409, i32 %na.0.i23.i
  %nb.0..i26.i = select i1 %413, i32 %nb.0.i24.i, i32 %409
  %414 = sub nsw i32 %.na.0.i25.i, %nb.0..i26.i
  %415 = icmp eq i32 %414, 1
  br i1 %415, label %BZ2_indexIntoF.exit27.i, label %407

BZ2_indexIntoF.exit27.i:                          ; preds = %407
  %nb.0..i26.i.lcssa = phi i32 [ %nb.0..i26.i, %407 ]
  %416 = zext i32 %395 to i64
  %417 = getelementptr inbounds i16* %380, i64 %416
  %418 = load i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = lshr i32 %395, 1
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds i8* %386, i64 %421
  %423 = load i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = shl nuw nsw i32 %383, 2
  %426 = and i32 %425, 4
  %427 = lshr i32 %424, %426
  %428 = shl i32 %427, 16
  %429 = and i32 %428, 983040
  %430 = or i32 %429, %419
  store i32 %430, i32* %27, align 4
  %431 = add nsw i32 %360, 2
  store i32 %431, i32* %21, align 4
  %432 = icmp eq i32 %396, %361
  br i1 %432, label %.backedge.i, label %433

; <label>:433                                     ; preds = %BZ2_indexIntoF.exit27.i
  %434 = and i32 %nb.0..i26.i.lcssa, 255
  %435 = icmp eq i32 %434, %367
  br i1 %435, label %437, label %436

; <label>:436                                     ; preds = %433
  store i32 %434, i32* %23, align 4
  br label %.backedge.i

; <label>:437                                     ; preds = %433
  store i32 3, i32* %19, align 4
  br label %438

; <label>:438                                     ; preds = %438, %437
  %na.0.i18.i = phi i32 [ 256, %437 ], [ %.na.0.i20.i, %438 ]
  %nb.0.i19.i = phi i32 [ 0, %437 ], [ %nb.0..i21.i, %438 ]
  %439 = add nsw i32 %nb.0.i19.i, %na.0.i18.i
  %440 = ashr i32 %439, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %441
  %443 = load i32* %442, align 4
  %444 = icmp sgt i32 %443, %430
  %.na.0.i20.i = select i1 %444, i32 %440, i32 %na.0.i18.i
  %nb.0..i21.i = select i1 %444, i32 %nb.0.i19.i, i32 %440
  %445 = sub nsw i32 %.na.0.i20.i, %nb.0..i21.i
  %446 = icmp eq i32 %445, 1
  br i1 %446, label %BZ2_indexIntoF.exit22.i, label %438

BZ2_indexIntoF.exit22.i:                          ; preds = %438
  %nb.0..i21.i.lcssa = phi i32 [ %nb.0..i21.i, %438 ]
  %447 = zext i32 %430 to i64
  %448 = getelementptr inbounds i16* %380, i64 %447
  %449 = load i16* %448, align 2
  %450 = zext i16 %449 to i32
  %451 = lshr i32 %430, 1
  %452 = zext i32 %451 to i64
  %453 = getelementptr inbounds i8* %386, i64 %452
  %454 = load i8* %453, align 1
  %455 = zext i8 %454 to i32
  %456 = shl nuw nsw i32 %419, 2
  %457 = and i32 %456, 4
  %458 = lshr i32 %455, %457
  %459 = shl i32 %458, 16
  %460 = and i32 %459, 983040
  %461 = or i32 %460, %450
  store i32 %461, i32* %27, align 4
  %462 = add nsw i32 %360, 3
  store i32 %462, i32* %21, align 4
  %463 = icmp eq i32 %431, %361
  br i1 %463, label %.backedge.i, label %464

; <label>:464                                     ; preds = %BZ2_indexIntoF.exit22.i
  %465 = and i32 %nb.0..i21.i.lcssa, 255
  %466 = icmp eq i32 %465, %367
  br i1 %466, label %.preheader.preheader, label %467

.preheader.preheader:                             ; preds = %464
  br label %.preheader

; <label>:467                                     ; preds = %464
  store i32 %465, i32* %23, align 4
  br label %.backedge.i

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %na.0.i13.i = phi i32 [ %.na.0.i15.i, %.preheader ], [ 256, %.preheader.preheader ]
  %nb.0.i14.i = phi i32 [ %nb.0..i16.i, %.preheader ], [ 0, %.preheader.preheader ]
  %468 = add nsw i32 %nb.0.i14.i, %na.0.i13.i
  %469 = ashr i32 %468, 1
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %470
  %472 = load i32* %471, align 4
  %473 = icmp sgt i32 %472, %461
  %.na.0.i15.i = select i1 %473, i32 %469, i32 %na.0.i13.i
  %nb.0..i16.i = select i1 %473, i32 %nb.0.i14.i, i32 %469
  %474 = sub nsw i32 %.na.0.i15.i, %nb.0..i16.i
  %475 = icmp eq i32 %474, 1
  br i1 %475, label %BZ2_indexIntoF.exit17.i, label %.preheader

BZ2_indexIntoF.exit17.i:                          ; preds = %.preheader
  %nb.0..i16.i.lcssa = phi i32 [ %nb.0..i16.i, %.preheader ]
  %476 = zext i32 %461 to i64
  %477 = getelementptr inbounds i16* %380, i64 %476
  %478 = load i16* %477, align 2
  %479 = zext i16 %478 to i32
  %480 = lshr i32 %461, 1
  %481 = zext i32 %480 to i64
  %482 = getelementptr inbounds i8* %386, i64 %481
  %483 = load i8* %482, align 1
  %484 = zext i8 %483 to i32
  %485 = shl nuw nsw i32 %450, 2
  %486 = and i32 %485, 4
  %487 = lshr i32 %484, %486
  %488 = shl i32 %487, 16
  %489 = and i32 %488, 983040
  %490 = or i32 %489, %479
  store i32 %490, i32* %27, align 4
  %491 = add nsw i32 %360, 4
  store i32 %491, i32* %21, align 4
  %492 = and i32 %nb.0..i16.i.lcssa, 255
  %493 = add nuw nsw i32 %492, 4
  store i32 %493, i32* %19, align 4
  br label %494

; <label>:494                                     ; preds = %494, %BZ2_indexIntoF.exit17.i
  %na.0.i8.i = phi i32 [ 256, %BZ2_indexIntoF.exit17.i ], [ %.na.0.i10.i, %494 ]
  %nb.0.i9.i = phi i32 [ 0, %BZ2_indexIntoF.exit17.i ], [ %nb.0..i11.i, %494 ]
  %495 = add nsw i32 %nb.0.i9.i, %na.0.i8.i
  %496 = ashr i32 %495, 1
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %497
  %499 = load i32* %498, align 4
  %500 = icmp sgt i32 %499, %490
  %.na.0.i10.i = select i1 %500, i32 %496, i32 %na.0.i8.i
  %nb.0..i11.i = select i1 %500, i32 %nb.0.i9.i, i32 %496
  %501 = sub nsw i32 %.na.0.i10.i, %nb.0..i11.i
  %502 = icmp eq i32 %501, 1
  br i1 %502, label %BZ2_indexIntoF.exit12.i, label %494

BZ2_indexIntoF.exit12.i:                          ; preds = %494
  %nb.0..i11.i.lcssa = phi i32 [ %nb.0..i11.i, %494 ]
  store i32 %nb.0..i11.i.lcssa, i32* %23, align 4
  %503 = zext i32 %490 to i64
  %504 = getelementptr inbounds i16* %380, i64 %503
  %505 = load i16* %504, align 2
  %506 = zext i16 %505 to i32
  %507 = lshr i32 %490, 1
  %508 = zext i32 %507 to i64
  %509 = getelementptr inbounds i8* %386, i64 %508
  %510 = load i8* %509, align 1
  %511 = zext i8 %510 to i32
  %512 = shl nuw nsw i32 %479, 2
  %513 = and i32 %512, 4
  %514 = lshr i32 %511, %513
  %515 = shl i32 %514, 16
  %516 = and i32 %515, 983040
  %517 = or i32 %516, %506
  store i32 %517, i32* %27, align 4
  %518 = add nsw i32 %360, 5
  store i32 %518, i32* %21, align 4
  br label %.backedge.i

; <label>:519                                     ; preds = %44
  br i1 %48, label %692, label %.preheader11.i

.preheader11.i:                                   ; preds = %519
  %520 = load %struct.bz_stream** %8, align 8
  %521 = getelementptr inbounds %struct.bz_stream* %520, i64 0, i32 5
  %522 = load i32* %521, align 4
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %.loopexit, label %.lr.ph43.i.preheader

.lr.ph43.i.preheader:                             ; preds = %.preheader11.i
  br label %.lr.ph43.i

.lr.ph43.i:                                       ; preds = %.backedge13.i, %.lr.ph43.i.preheader
  %524 = phi %struct.bz_stream* [ %599, %.backedge13.i ], [ %520, %.lr.ph43.i.preheader ]
  %525 = load i32* %19, align 4
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %563, label %527

; <label>:527                                     ; preds = %.lr.ph43.i
  %528 = load i8* %17, align 1
  %529 = getelementptr inbounds %struct.bz_stream* %524, i64 0, i32 4
  %530 = load i8** %529, align 8
  store i8 %528, i8* %530, align 1
  %531 = load i32* %16, align 4
  %532 = shl i32 %531, 8
  %533 = lshr i32 %531, 24
  %534 = load i8* %17, align 1
  %535 = zext i8 %534 to i32
  %536 = xor i32 %535, %533
  %537 = zext i32 %536 to i64
  %538 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %537
  %539 = load i32* %538, align 4
  %540 = xor i32 %539, %532
  store i32 %540, i32* %16, align 4
  %541 = load i32* %19, align 4
  %542 = add nsw i32 %541, -1
  store i32 %542, i32* %19, align 4
  %543 = load %struct.bz_stream** %8, align 8
  %544 = getelementptr inbounds %struct.bz_stream* %543, i64 0, i32 4
  %545 = load i8** %544, align 8
  %546 = getelementptr inbounds i8* %545, i64 1
  store i8* %546, i8** %544, align 8
  %547 = load %struct.bz_stream** %8, align 8
  %548 = getelementptr inbounds %struct.bz_stream* %547, i64 0, i32 5
  %549 = load i32* %548, align 4
  %550 = add i32 %549, -1
  store i32 %550, i32* %548, align 4
  %551 = load %struct.bz_stream** %8, align 8
  %552 = getelementptr inbounds %struct.bz_stream* %551, i64 0, i32 6
  %553 = load i32* %552, align 4
  %554 = add i32 %553, 1
  store i32 %554, i32* %552, align 4
  %555 = load %struct.bz_stream** %8, align 8
  %556 = getelementptr inbounds %struct.bz_stream* %555, i64 0, i32 6
  %557 = load i32* %556, align 4
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %559, label %.backedge13.i

; <label>:559                                     ; preds = %527
  %560 = getelementptr inbounds %struct.bz_stream* %555, i64 0, i32 7
  %561 = load i32* %560, align 4
  %562 = add i32 %561, 1
  store i32 %562, i32* %560, align 4
  %.pre79.i = load %struct.bz_stream** %8, align 8
  br label %.backedge13.i

; <label>:563                                     ; preds = %.lr.ph43.i
  %564 = load i32* %21, align 4
  %565 = load i32* %29, align 4
  %566 = add nsw i32 %565, 1
  %567 = icmp eq i32 %564, %566
  br i1 %567, label %.loopexit.loopexit, label %568

; <label>:568                                     ; preds = %563
  %569 = icmp sgt i32 %564, %566
  br i1 %569, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit80, label %570

; <label>:570                                     ; preds = %568
  store i32 1, i32* %19, align 4
  %571 = load i32* %23, align 4
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %17, align 1
  %573 = load i32* %27, align 4
  %574 = zext i32 %573 to i64
  %575 = load i32** %25, align 8
  %576 = getelementptr inbounds i32* %575, i64 %574
  %577 = load i32* %576, align 4
  %578 = lshr i32 %577, 8
  store i32 %578, i32* %27, align 4
  %579 = load i32* %31, align 4
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %581, label %588

; <label>:581                                     ; preds = %570
  %582 = load i32* %33, align 4
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %583
  %585 = load i32* %584, align 4
  store i32 %585, i32* %31, align 4
  %586 = add nsw i32 %582, 1
  %587 = icmp eq i32 %586, 512
  %..i1 = select i1 %587, i32 0, i32 %586
  store i32 %..i1, i32* %33, align 4
  br label %588

; <label>:588                                     ; preds = %581, %570
  %589 = phi i32 [ %585, %581 ], [ %579, %570 ]
  %590 = add nsw i32 %589, -1
  store i32 %590, i32* %31, align 4
  %591 = add nsw i32 %564, 1
  store i32 %591, i32* %21, align 4
  %592 = icmp eq i32 %564, %565
  br i1 %592, label %.backedge13.i, label %593

; <label>:593                                     ; preds = %588
  %594 = icmp eq i32 %590, 1
  %595 = zext i1 %594 to i32
  %.masked.i2 = and i32 %577, 255
  %596 = xor i32 %595, %.masked.i2
  %597 = icmp eq i32 %596, %571
  br i1 %597, label %603, label %598

; <label>:598                                     ; preds = %593
  store i32 %596, i32* %23, align 4
  br label %.backedge13.i

.backedge13.i:                                    ; preds = %685, %650, %640, %626, %616, %598, %588, %559, %527
  %599 = phi %struct.bz_stream* [ %524, %598 ], [ %524, %626 ], [ %524, %650 ], [ %524, %685 ], [ %.pre79.i, %559 ], [ %555, %527 ], [ %524, %588 ], [ %524, %616 ], [ %524, %640 ]
  %600 = getelementptr inbounds %struct.bz_stream* %599, i64 0, i32 5
  %601 = load i32* %600, align 4
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %.loopexit.loopexit, label %.lr.ph43.i

; <label>:603                                     ; preds = %593
  store i32 2, i32* %19, align 4
  %604 = zext i32 %578 to i64
  %605 = getelementptr inbounds i32* %575, i64 %604
  %606 = load i32* %605, align 4
  %607 = lshr i32 %606, 8
  store i32 %607, i32* %27, align 4
  %608 = icmp eq i32 %590, 0
  br i1 %608, label %609, label %616

; <label>:609                                     ; preds = %603
  %610 = load i32* %33, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %611
  %613 = load i32* %612, align 4
  store i32 %613, i32* %31, align 4
  %614 = add nsw i32 %610, 1
  %615 = icmp eq i32 %614, 512
  %.4.i3 = select i1 %615, i32 0, i32 %614
  store i32 %.4.i3, i32* %33, align 4
  br label %616

; <label>:616                                     ; preds = %609, %603
  %617 = phi i32 [ %613, %609 ], [ %590, %603 ]
  %618 = add nsw i32 %617, -1
  store i32 %618, i32* %31, align 4
  %619 = add nsw i32 %564, 2
  store i32 %619, i32* %21, align 4
  %620 = icmp eq i32 %591, %565
  br i1 %620, label %.backedge13.i, label %621

; <label>:621                                     ; preds = %616
  %622 = icmp eq i32 %618, 1
  %623 = zext i1 %622 to i32
  %.masked1.i4 = and i32 %606, 255
  %624 = xor i32 %623, %.masked1.i4
  %625 = icmp eq i32 %624, %571
  br i1 %625, label %627, label %626

; <label>:626                                     ; preds = %621
  store i32 %624, i32* %23, align 4
  br label %.backedge13.i

; <label>:627                                     ; preds = %621
  store i32 3, i32* %19, align 4
  %628 = zext i32 %607 to i64
  %629 = getelementptr inbounds i32* %575, i64 %628
  %630 = load i32* %629, align 4
  %631 = lshr i32 %630, 8
  store i32 %631, i32* %27, align 4
  %632 = icmp eq i32 %618, 0
  br i1 %632, label %633, label %640

; <label>:633                                     ; preds = %627
  %634 = load i32* %33, align 4
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %635
  %637 = load i32* %636, align 4
  store i32 %637, i32* %31, align 4
  %638 = add nsw i32 %634, 1
  %639 = icmp eq i32 %638, 512
  %.5.i5 = select i1 %639, i32 0, i32 %638
  store i32 %.5.i5, i32* %33, align 4
  br label %640

; <label>:640                                     ; preds = %633, %627
  %641 = phi i32 [ %637, %633 ], [ %618, %627 ]
  %642 = add nsw i32 %641, -1
  store i32 %642, i32* %31, align 4
  %643 = add nsw i32 %564, 3
  store i32 %643, i32* %21, align 4
  %644 = icmp eq i32 %619, %565
  br i1 %644, label %.backedge13.i, label %645

; <label>:645                                     ; preds = %640
  %646 = icmp eq i32 %642, 1
  %647 = zext i1 %646 to i32
  %.masked2.i6 = and i32 %630, 255
  %648 = xor i32 %647, %.masked2.i6
  %649 = icmp eq i32 %648, %571
  br i1 %649, label %651, label %650

; <label>:650                                     ; preds = %645
  store i32 %648, i32* %23, align 4
  br label %.backedge13.i

; <label>:651                                     ; preds = %645
  %652 = zext i32 %631 to i64
  %653 = getelementptr inbounds i32* %575, i64 %652
  %654 = load i32* %653, align 4
  %655 = lshr i32 %654, 8
  store i32 %655, i32* %27, align 4
  %656 = icmp eq i32 %642, 0
  br i1 %656, label %657, label %664

; <label>:657                                     ; preds = %651
  %658 = load i32* %33, align 4
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %659
  %661 = load i32* %660, align 4
  store i32 %661, i32* %31, align 4
  %662 = add nsw i32 %658, 1
  %663 = icmp eq i32 %662, 512
  %.6.i7 = select i1 %663, i32 0, i32 %662
  store i32 %.6.i7, i32* %33, align 4
  br label %664

; <label>:664                                     ; preds = %657, %651
  %665 = phi i32 [ %661, %657 ], [ %642, %651 ]
  %666 = add nsw i32 %665, -1
  store i32 %666, i32* %31, align 4
  %667 = icmp eq i32 %666, 1
  %668 = zext i1 %667 to i32
  %669 = add nsw i32 %564, 4
  store i32 %669, i32* %21, align 4
  %.masked3.i8 = and i32 %654, 255
  %670 = xor i32 %668, %.masked3.i8
  %671 = add nuw nsw i32 %670, 4
  store i32 %671, i32* %19, align 4
  %672 = zext i32 %655 to i64
  %673 = getelementptr inbounds i32* %575, i64 %672
  %674 = load i32* %673, align 4
  %675 = and i32 %674, 255
  store i32 %675, i32* %23, align 4
  %676 = lshr i32 %674, 8
  store i32 %676, i32* %27, align 4
  %677 = icmp eq i32 %666, 0
  br i1 %677, label %678, label %685

; <label>:678                                     ; preds = %664
  %679 = load i32* %33, align 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %680
  %682 = load i32* %681, align 4
  store i32 %682, i32* %31, align 4
  %683 = add nsw i32 %679, 1
  %684 = icmp eq i32 %683, 512
  %.7.i9 = select i1 %684, i32 0, i32 %683
  store i32 %.7.i9, i32* %33, align 4
  br label %685

; <label>:685                                     ; preds = %678, %664
  %686 = phi i32 [ %682, %678 ], [ %666, %664 ]
  %687 = add nsw i32 %686, -1
  store i32 %687, i32* %31, align 4
  %688 = icmp eq i32 %687, 1
  %689 = zext i1 %688 to i32
  %690 = xor i32 %689, %675
  store i32 %690, i32* %23, align 4
  %691 = add nsw i32 %564, 5
  store i32 %691, i32* %21, align 4
  br label %.backedge13.i

; <label>:692                                     ; preds = %519
  %693 = load i32* %16, align 4
  %694 = load i8* %17, align 1
  %695 = load i32* %19, align 4
  %696 = load i32* %21, align 4
  %697 = load i32* %23, align 4
  %698 = load i32** %25, align 8
  %699 = load i32* %27, align 4
  %700 = load %struct.bz_stream** %8, align 8
  %701 = getelementptr inbounds %struct.bz_stream* %700, i64 0, i32 4
  %702 = load i8** %701, align 8
  %703 = getelementptr inbounds %struct.bz_stream* %700, i64 0, i32 5
  %704 = load i32* %703, align 4
  %705 = load i32* %29, align 4
  %706 = add nsw i32 %705, 1
  br label %.backedge.i10

.backedge.i10:                                    ; preds = %.backedge.i10.backedge, %692
  %c_state_out_len.0.i = phi i32 [ %695, %692 ], [ %c_state_out_len.0.i.be, %.backedge.i10.backedge ]
  %c_nblock_used.0.i = phi i32 [ %696, %692 ], [ %c_nblock_used.0.i.be, %.backedge.i10.backedge ]
  %c_k0.0.i = phi i32 [ %697, %692 ], [ %c_k0.0.i.be, %.backedge.i10.backedge ]
  %c_state_out_ch.0.i = phi i8 [ %694, %692 ], [ %741, %.backedge.i10.backedge ]
  %c_tPos.0.i = phi i32 [ %699, %692 ], [ %c_tPos.0.i.be, %.backedge.i10.backedge ]
  %cs_next_out.0.i = phi i8* [ %702, %692 ], [ %cs_next_out.3.i, %.backedge.i10.backedge ]
  %cs_avail_out.0.i = phi i32 [ %704, %692 ], [ %cs_avail_out.3.i, %.backedge.i10.backedge ]
  %c_calculatedBlockCRC.0.i = phi i32 [ %693, %692 ], [ %c_calculatedBlockCRC.3.i, %.backedge.i10.backedge ]
  %707 = icmp sgt i32 %c_state_out_len.0.i, 0
  br i1 %707, label %.preheader.i11, label %736

.preheader.i11:                                   ; preds = %.backedge.i10
  %708 = icmp eq i32 %cs_avail_out.0.i, 0
  br i1 %708, label %.loopexit.i.loopexit79, label %.lr.ph.i12

.lr.ph.i12:                                       ; preds = %.preheader.i11
  %709 = zext i8 %c_state_out_ch.0.i to i32
  br label %710

; <label>:710                                     ; preds = %712, %.lr.ph.i12
  %c_calculatedBlockCRC.129.i = phi i32 [ %c_calculatedBlockCRC.0.i, %.lr.ph.i12 ], [ %719, %712 ]
  %cs_avail_out.128.i = phi i32 [ %cs_avail_out.0.i, %.lr.ph.i12 ], [ %722, %712 ]
  %cs_next_out.127.i = phi i8* [ %cs_next_out.0.i, %.lr.ph.i12 ], [ %721, %712 ]
  %c_state_out_len.126.i = phi i32 [ %c_state_out_len.0.i, %.lr.ph.i12 ], [ %720, %712 ]
  %711 = icmp eq i32 %c_state_out_len.126.i, 1
  br i1 %711, label %.loopexit8.i.loopexit, label %712

; <label>:712                                     ; preds = %710
  store i8 %c_state_out_ch.0.i, i8* %cs_next_out.127.i, align 1
  %713 = shl i32 %c_calculatedBlockCRC.129.i, 8
  %714 = lshr i32 %c_calculatedBlockCRC.129.i, 24
  %715 = xor i32 %714, %709
  %716 = zext i32 %715 to i64
  %717 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %716
  %718 = load i32* %717, align 4
  %719 = xor i32 %718, %713
  %720 = add nsw i32 %c_state_out_len.126.i, -1
  %721 = getelementptr inbounds i8* %cs_next_out.127.i, i64 1
  %722 = add i32 %cs_avail_out.128.i, -1
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %.loopexit.i.loopexit, label %710

.loopexit8.i.loopexit:                            ; preds = %710
  %cs_next_out.127.i.lcssa = phi i8* [ %cs_next_out.127.i, %710 ]
  %cs_avail_out.128.i.lcssa = phi i32 [ %cs_avail_out.128.i, %710 ]
  %c_calculatedBlockCRC.129.i.lcssa = phi i32 [ %c_calculatedBlockCRC.129.i, %710 ]
  br label %.loopexit8.i

.loopexit8.i:                                     ; preds = %749, %740, %.loopexit8.i.loopexit
  %c_nblock_used.1.i = phi i32 [ %706, %749 ], [ %746, %740 ], [ %c_nblock_used.0.i, %.loopexit8.i.loopexit ]
  %c_k0.1.i = phi i32 [ %c_k0.2.i, %749 ], [ %747, %740 ], [ %c_k0.0.i, %.loopexit8.i.loopexit ]
  %c_state_out_ch.1.i = phi i8 [ %741, %749 ], [ %741, %740 ], [ %c_state_out_ch.0.i, %.loopexit8.i.loopexit ]
  %c_tPos.1.i = phi i32 [ %745, %749 ], [ %745, %740 ], [ %c_tPos.0.i, %.loopexit8.i.loopexit ]
  %cs_next_out.2.i = phi i8* [ %cs_next_out.3.i, %749 ], [ %cs_next_out.3.i, %740 ], [ %cs_next_out.127.i.lcssa, %.loopexit8.i.loopexit ]
  %cs_avail_out.2.i = phi i32 [ %cs_avail_out.3.i, %749 ], [ %cs_avail_out.3.i, %740 ], [ %cs_avail_out.128.i.lcssa, %.loopexit8.i.loopexit ]
  %c_calculatedBlockCRC.2.i = phi i32 [ %c_calculatedBlockCRC.3.i, %749 ], [ %c_calculatedBlockCRC.3.i, %740 ], [ %c_calculatedBlockCRC.129.i.lcssa, %.loopexit8.i.loopexit ]
  %724 = icmp eq i32 %cs_avail_out.2.i, 0
  br i1 %724, label %.loopexit.i.loopexit79, label %725

; <label>:725                                     ; preds = %.loopexit8.i
  store i8 %c_state_out_ch.1.i, i8* %cs_next_out.2.i, align 1
  %726 = shl i32 %c_calculatedBlockCRC.2.i, 8
  %727 = lshr i32 %c_calculatedBlockCRC.2.i, 24
  %728 = zext i8 %c_state_out_ch.1.i to i32
  %729 = xor i32 %727, %728
  %730 = zext i32 %729 to i64
  %731 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %730
  %732 = load i32* %731, align 4
  %733 = xor i32 %732, %726
  %734 = getelementptr inbounds i8* %cs_next_out.2.i, i64 1
  %735 = add i32 %cs_avail_out.2.i, -1
  br label %736

; <label>:736                                     ; preds = %725, %.backedge.i10
  %c_nblock_used.2.i = phi i32 [ %c_nblock_used.1.i, %725 ], [ %c_nblock_used.0.i, %.backedge.i10 ]
  %c_k0.2.i = phi i32 [ %c_k0.1.i, %725 ], [ %c_k0.0.i, %.backedge.i10 ]
  %c_state_out_ch.2.i = phi i8 [ %c_state_out_ch.1.i, %725 ], [ %c_state_out_ch.0.i, %.backedge.i10 ]
  %c_tPos.2.i = phi i32 [ %c_tPos.1.i, %725 ], [ %c_tPos.0.i, %.backedge.i10 ]
  %cs_next_out.3.i = phi i8* [ %734, %725 ], [ %cs_next_out.0.i, %.backedge.i10 ]
  %cs_avail_out.3.i = phi i32 [ %735, %725 ], [ %cs_avail_out.0.i, %.backedge.i10 ]
  %c_calculatedBlockCRC.3.i = phi i32 [ %733, %725 ], [ %c_calculatedBlockCRC.0.i, %.backedge.i10 ]
  %737 = icmp sgt i32 %c_nblock_used.2.i, %706
  br i1 %737, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit, label %738

; <label>:738                                     ; preds = %736
  %739 = icmp eq i32 %c_nblock_used.2.i, %706
  br i1 %739, label %.loopexit.i.loopexit79, label %740

; <label>:740                                     ; preds = %738
  %741 = trunc i32 %c_k0.2.i to i8
  %742 = zext i32 %c_tPos.2.i to i64
  %743 = getelementptr inbounds i32* %698, i64 %742
  %744 = load i32* %743, align 4
  %745 = lshr i32 %744, 8
  %746 = add nsw i32 %c_nblock_used.2.i, 1
  %747 = and i32 %744, 255
  %748 = icmp eq i32 %747, %c_k0.2.i
  br i1 %748, label %749, label %.loopexit8.i

; <label>:749                                     ; preds = %740
  %750 = icmp eq i32 %746, %706
  br i1 %750, label %.loopexit8.i, label %751

; <label>:751                                     ; preds = %749
  %752 = zext i32 %745 to i64
  %753 = getelementptr inbounds i32* %698, i64 %752
  %754 = load i32* %753, align 4
  %755 = lshr i32 %754, 8
  %756 = add nsw i32 %c_nblock_used.2.i, 2
  %757 = icmp eq i32 %756, %706
  br i1 %757, label %.backedge.i10.backedge, label %758

.backedge.i10.backedge:                           ; preds = %771, %768, %761, %758, %751
  %c_state_out_len.0.i.be = phi i32 [ 2, %751 ], [ 3, %761 ], [ %777, %771 ], [ 2, %758 ], [ 3, %768 ]
  %c_nblock_used.0.i.be = phi i32 [ %706, %751 ], [ %706, %761 ], [ %783, %771 ], [ %756, %758 ], [ %766, %768 ]
  %c_k0.0.i.be = phi i32 [ %c_k0.2.i, %751 ], [ %c_k0.2.i, %761 ], [ %781, %771 ], [ %759, %758 ], [ %769, %768 ]
  %c_tPos.0.i.be = phi i32 [ %755, %751 ], [ %765, %761 ], [ %782, %771 ], [ %755, %758 ], [ %765, %768 ]
  br label %.backedge.i10

; <label>:758                                     ; preds = %751
  %759 = and i32 %754, 255
  %760 = icmp eq i32 %759, %c_k0.2.i
  br i1 %760, label %761, label %.backedge.i10.backedge

; <label>:761                                     ; preds = %758
  %762 = zext i32 %755 to i64
  %763 = getelementptr inbounds i32* %698, i64 %762
  %764 = load i32* %763, align 4
  %765 = lshr i32 %764, 8
  %766 = add nsw i32 %c_nblock_used.2.i, 3
  %767 = icmp eq i32 %766, %706
  br i1 %767, label %.backedge.i10.backedge, label %768

; <label>:768                                     ; preds = %761
  %769 = and i32 %764, 255
  %770 = icmp eq i32 %769, %c_k0.2.i
  br i1 %770, label %771, label %.backedge.i10.backedge

; <label>:771                                     ; preds = %768
  %772 = zext i32 %765 to i64
  %773 = getelementptr inbounds i32* %698, i64 %772
  %774 = load i32* %773, align 4
  %775 = lshr i32 %774, 8
  %776 = and i32 %774, 255
  %777 = add nuw nsw i32 %776, 4
  %778 = zext i32 %775 to i64
  %779 = getelementptr inbounds i32* %698, i64 %778
  %780 = load i32* %779, align 4
  %781 = and i32 %780, 255
  %782 = lshr i32 %780, 8
  %783 = add nsw i32 %c_nblock_used.2.i, 5
  br label %.backedge.i10.backedge

.loopexit.i.loopexit:                             ; preds = %712
  %c_tPos.0.i.lcssa98 = phi i32 [ %c_tPos.0.i, %712 ]
  %c_state_out_ch.0.i.lcssa96 = phi i8 [ %c_state_out_ch.0.i, %712 ]
  %c_k0.0.i.lcssa94 = phi i32 [ %c_k0.0.i, %712 ]
  %c_nblock_used.0.i.lcssa92 = phi i32 [ %c_nblock_used.0.i, %712 ]
  %.lcssa91 = phi i8* [ %721, %712 ]
  %.lcssa90 = phi i32 [ %720, %712 ]
  %.lcssa = phi i32 [ %719, %712 ]
  br label %.loopexit.i

.loopexit.i.loopexit79:                           ; preds = %738, %.loopexit8.i, %.preheader.i11
  %c_state_out_len.2.i.ph = phi i32 [ 1, %.loopexit8.i ], [ 0, %738 ], [ %c_state_out_len.0.i, %.preheader.i11 ]
  %c_nblock_used.3.i.ph = phi i32 [ %c_nblock_used.1.i, %.loopexit8.i ], [ %706, %738 ], [ %c_nblock_used.0.i, %.preheader.i11 ]
  %c_k0.3.i.ph = phi i32 [ %c_k0.1.i, %.loopexit8.i ], [ %c_k0.2.i, %738 ], [ %c_k0.0.i, %.preheader.i11 ]
  %c_state_out_ch.3.i.ph = phi i8 [ %c_state_out_ch.1.i, %.loopexit8.i ], [ %c_state_out_ch.2.i, %738 ], [ %c_state_out_ch.0.i, %.preheader.i11 ]
  %c_tPos.3.i.ph = phi i32 [ %c_tPos.1.i, %.loopexit8.i ], [ %c_tPos.2.i, %738 ], [ %c_tPos.0.i, %.preheader.i11 ]
  %cs_next_out.4.i.ph = phi i8* [ %cs_next_out.2.i, %.loopexit8.i ], [ %cs_next_out.3.i, %738 ], [ %cs_next_out.0.i, %.preheader.i11 ]
  %cs_avail_out.4.i.ph = phi i32 [ 0, %.loopexit8.i ], [ %cs_avail_out.3.i, %738 ], [ 0, %.preheader.i11 ]
  %c_calculatedBlockCRC.4.i.ph = phi i32 [ %c_calculatedBlockCRC.2.i, %.loopexit8.i ], [ %c_calculatedBlockCRC.3.i, %738 ], [ %c_calculatedBlockCRC.0.i, %.preheader.i11 ]
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit79, %.loopexit.i.loopexit
  %c_state_out_len.2.i = phi i32 [ %.lcssa90, %.loopexit.i.loopexit ], [ %c_state_out_len.2.i.ph, %.loopexit.i.loopexit79 ]
  %c_nblock_used.3.i = phi i32 [ %c_nblock_used.0.i.lcssa92, %.loopexit.i.loopexit ], [ %c_nblock_used.3.i.ph, %.loopexit.i.loopexit79 ]
  %c_k0.3.i = phi i32 [ %c_k0.0.i.lcssa94, %.loopexit.i.loopexit ], [ %c_k0.3.i.ph, %.loopexit.i.loopexit79 ]
  %c_state_out_ch.3.i = phi i8 [ %c_state_out_ch.0.i.lcssa96, %.loopexit.i.loopexit ], [ %c_state_out_ch.3.i.ph, %.loopexit.i.loopexit79 ]
  %c_tPos.3.i = phi i32 [ %c_tPos.0.i.lcssa98, %.loopexit.i.loopexit ], [ %c_tPos.3.i.ph, %.loopexit.i.loopexit79 ]
  %cs_next_out.4.i = phi i8* [ %.lcssa91, %.loopexit.i.loopexit ], [ %cs_next_out.4.i.ph, %.loopexit.i.loopexit79 ]
  %cs_avail_out.4.i = phi i32 [ 0, %.loopexit.i.loopexit ], [ %cs_avail_out.4.i.ph, %.loopexit.i.loopexit79 ]
  %c_calculatedBlockCRC.4.i = phi i32 [ %.lcssa, %.loopexit.i.loopexit ], [ %c_calculatedBlockCRC.4.i.ph, %.loopexit.i.loopexit79 ]
  %784 = load %struct.bz_stream** %8, align 8
  %785 = getelementptr inbounds %struct.bz_stream* %784, i64 0, i32 6
  %786 = load i32* %785, align 4
  %787 = sub i32 %704, %cs_avail_out.4.i
  %788 = add i32 %787, %786
  store i32 %788, i32* %785, align 4
  %789 = load %struct.bz_stream** %8, align 8
  %790 = getelementptr inbounds %struct.bz_stream* %789, i64 0, i32 6
  %791 = load i32* %790, align 4
  %792 = icmp ult i32 %791, %786
  br i1 %792, label %793, label %797

; <label>:793                                     ; preds = %.loopexit.i
  %794 = getelementptr inbounds %struct.bz_stream* %789, i64 0, i32 7
  %795 = load i32* %794, align 4
  %796 = add i32 %795, 1
  store i32 %796, i32* %794, align 4
  %.pre.i13 = load %struct.bz_stream** %8, align 8
  br label %797

; <label>:797                                     ; preds = %793, %.loopexit.i
  %798 = phi %struct.bz_stream* [ %.pre.i13, %793 ], [ %789, %.loopexit.i ]
  store i32 %c_calculatedBlockCRC.4.i, i32* %16, align 4
  store i8 %c_state_out_ch.3.i, i8* %17, align 1
  store i32 %c_state_out_len.2.i, i32* %19, align 4
  store i32 %c_nblock_used.3.i, i32* %21, align 4
  store i32 %c_k0.3.i, i32* %23, align 4
  store i32* %698, i32** %25, align 8
  store i32 %c_tPos.3.i, i32* %27, align 4
  %799 = getelementptr inbounds %struct.bz_stream* %798, i64 0, i32 4
  store i8* %cs_next_out.4.i, i8** %799, align 8
  %800 = load %struct.bz_stream** %8, align 8
  %801 = getelementptr inbounds %struct.bz_stream* %800, i64 0, i32 5
  store i32 %cs_avail_out.4.i, i32* %801, align 4
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %.backedge13.i, %563
  br label %.loopexit

.loopexit.loopexit81:                             ; preds = %.backedge.i, %359
  br label %.loopexit

.loopexit.loopexit83:                             ; preds = %.backedge56.i, %93
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit83, %.loopexit.loopexit81, %.loopexit.loopexit, %797, %.preheader11.i, %.preheader.i, %.preheader53.i
  %802 = load i32* %21, align 4
  %803 = load i32* %29, align 4
  %804 = add nsw i32 %803, 1
  %805 = icmp eq i32 %802, %804
  br i1 %805, label %806, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86

; <label>:806                                     ; preds = %.loopexit
  %807 = load i32* %19, align 4
  %808 = icmp eq i32 %807, 0
  br i1 %808, label %809, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86

; <label>:809                                     ; preds = %806
  %810 = load i32* %16, align 4
  %811 = xor i32 %810, -1
  store i32 %811, i32* %16, align 4
  %812 = load i32* %35, align 4
  %813 = icmp sgt i32 %812, 2
  br i1 %813, label %814, label %818

; <label>:814                                     ; preds = %809
  %815 = load %struct._IO_FILE** @stderr, align 8
  %816 = load i32* %37, align 4
  %817 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %815, i8* getelementptr inbounds ([18 x i8]* @.str236, i64 0, i64 0), i32 %816, i32 %811) #12
  %.pr = load i32* %35, align 4
  br label %818

; <label>:818                                     ; preds = %814, %809
  %819 = phi i32 [ %.pr, %814 ], [ %812, %809 ]
  %820 = icmp sgt i32 %819, 1
  br i1 %820, label %821, label %823

; <label>:821                                     ; preds = %818
  %822 = load %struct._IO_FILE** @stderr, align 8
  %fputc = tail call i32 @fputc(i32 93, %struct._IO_FILE* %822) #13
  br label %823

; <label>:823                                     ; preds = %821, %818
  %824 = load i32* %16, align 4
  %825 = load i32* %37, align 4
  %826 = icmp eq i32 %824, %825
  br i1 %826, label %.thread, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86

.thread:                                          ; preds = %823
  %827 = load i32* %39, align 4
  %828 = shl i32 %827, 1
  %829 = lshr i32 %827, 31
  %830 = or i32 %828, %829
  %831 = xor i32 %830, %824
  store i32 %831, i32* %39, align 4
  store i32 14, i32* %12, align 4
  br label %.loopexit64

; <label>:832                                     ; preds = %.backedge
  %833 = icmp sgt i32 %.ph, 9
  br i1 %833, label %.loopexit64.loopexit, label %.backedge

.loopexit64.loopexit:                             ; preds = %832
  br label %.loopexit64

.loopexit64:                                      ; preds = %.loopexit64.loopexit, %.thread
  %834 = tail call i32 @BZ2_decompress(%struct.DState* %5) #2
  %835 = icmp eq i32 %834, 4
  br i1 %835, label %836, label %850

; <label>:836                                     ; preds = %.loopexit64
  %837 = load i32* %35, align 4
  %838 = icmp sgt i32 %837, 2
  br i1 %838, label %839, label %._crit_edge

._crit_edge:                                      ; preds = %836
  %.pre54 = getelementptr inbounds i8* %4, i64 3180
  %.pre55 = bitcast i8* %.pre54 to i32*
  br label %846

; <label>:839                                     ; preds = %836
  %840 = load %struct._IO_FILE** @stderr, align 8
  %841 = getelementptr inbounds i8* %4, i64 3180
  %842 = bitcast i8* %841 to i32*
  %843 = load i32* %842, align 4
  %844 = load i32* %39, align 4
  %845 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %840, i8* getelementptr inbounds ([55 x i8]* @.str437, i64 0, i64 0), i32 %843, i32 %844) #12
  br label %846

; <label>:846                                     ; preds = %839, %._crit_edge
  %.pre-phi56 = phi i32* [ %.pre55, %._crit_edge ], [ %842, %839 ]
  %847 = load i32* %39, align 4
  %848 = load i32* %.pre-phi56, align 4
  %849 = icmp eq i32 %847, %848
  %. = select i1 %849, i32 4, i32 -4
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

; <label>:850                                     ; preds = %.loopexit64
  %851 = load i32* %12, align 4
  %852 = icmp eq i32 %851, 2
  br i1 %852, label %.backedge.outer, label %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86

unRLE_obuf_to_output_SMALL.exit.thread16.loopexit: ; preds = %736
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16.loopexit80: ; preds = %568
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16.loopexit82: ; preds = %364
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16.loopexit84: ; preds = %98
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16.loopexit85: ; preds = %.backedge
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86: ; preds = %850, %823, %806, %.loopexit
  %.0.ph = phi i32 [ -4, %823 ], [ 0, %806 ], [ 0, %.loopexit ], [ %834, %850 ]
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16:         ; preds = %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit85, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit84, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit82, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit80, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit, %846, %7, %2, %0
  %.0 = phi i32 [ -2, %0 ], [ -2, %2 ], [ -2, %7 ], [ %., %846 ], [ -4, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit ], [ -4, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit80 ], [ -4, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit82 ], [ -4, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit84 ], [ -1, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit85 ], [ %.0.ph, %unRLE_obuf_to_output_SMALL.exit.thread16.loopexit86 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzDecompressEnd(%struct.bz_stream* %strm) #0 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  br i1 %1, label %45, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %4 = load i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %45, label %6

; <label>:6                                       ; preds = %2
  %7 = bitcast i8* %4 to %struct.bz_stream**
  %8 = load %struct.bz_stream** %7, align 8
  %9 = icmp eq %struct.bz_stream* %8, %strm
  br i1 %9, label %10, label %45

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds i8* %4, i64 3152
  %12 = bitcast i8* %11 to i32**
  %13 = load i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %21, label %15

; <label>:15                                      ; preds = %10
  %16 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %17 = load void (i8*, i8*)** %16, align 8
  %18 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %19 = load i8** %18, align 8
  %20 = bitcast i32* %13 to i8*
  tail call void %17(i8* %19, i8* %20) #2
  br label %21

; <label>:21                                      ; preds = %15, %10
  %22 = getelementptr inbounds i8* %4, i64 3160
  %23 = bitcast i8* %22 to i16**
  %24 = load i16** %23, align 8
  %25 = icmp eq i16* %24, null
  br i1 %25, label %32, label %26

; <label>:26                                      ; preds = %21
  %27 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %28 = load void (i8*, i8*)** %27, align 8
  %29 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %30 = load i8** %29, align 8
  %31 = bitcast i16* %24 to i8*
  tail call void %28(i8* %30, i8* %31) #2
  br label %32

; <label>:32                                      ; preds = %26, %21
  %33 = getelementptr inbounds i8* %4, i64 3168
  %34 = bitcast i8* %33 to i8**
  %35 = load i8** %34, align 8
  %36 = icmp eq i8* %35, null
  %.pre = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  br i1 %36, label %._crit_edge, label %37

._crit_edge:                                      ; preds = %32
  %.pre1 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  br label %41

; <label>:37                                      ; preds = %32
  %38 = load void (i8*, i8*)** %.pre, align 8
  %39 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %40 = load i8** %39, align 8
  tail call void %38(i8* %40, i8* %35) #2
  br label %41

; <label>:41                                      ; preds = %37, %._crit_edge
  %.pre-phi2 = phi i8** [ %.pre1, %._crit_edge ], [ %39, %37 ]
  %42 = load void (i8*, i8*)** %.pre, align 8
  %43 = load i8** %.pre-phi2, align 8
  %44 = load i8** %3, align 8
  tail call void %42(i8* %43, i8* %44) #2
  store i8* null, i8** %3, align 8
  br label %45

; <label>:45                                      ; preds = %41, %6, %2, %0
  %.0 = phi i32 [ 0, %41 ], [ -2, %0 ], [ -2, %2 ], [ -2, %6 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzWriteOpen(i32* %bzerror, i32 %f, i32 %blockSize100k, i32 %verbosity, i32 %workFactor) #0 {
  %1 = icmp ne i32* %bzerror, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* %bzerror, align 4
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = icmp eq i32 %f, 0
  %5 = icmp slt i32 %blockSize100k, 1
  %or.cond = or i1 %4, %5
  %6 = icmp sgt i32 %blockSize100k, 9
  %or.cond3 = or i1 %or.cond, %6
  %7 = icmp slt i32 %workFactor, 0
  %or.cond5 = or i1 %or.cond3, %7
  %8 = icmp sgt i32 %workFactor, 250
  %or.cond7 = or i1 %or.cond5, %8
  %9 = icmp slt i32 %verbosity, 0
  %or.cond9 = or i1 %or.cond7, %9
  %10 = icmp sgt i32 %verbosity, 4
  %or.cond11 = or i1 %or.cond9, %10
  br i1 %or.cond11, label %11, label %13

; <label>:11                                      ; preds = %3
  br i1 %1, label %12, label %.thread

; <label>:12                                      ; preds = %11
  store i32 -2, i32* %bzerror, align 4
  br label %.thread

; <label>:13                                      ; preds = %3
  %14 = tail call noalias i8* @malloc(i64 5104) #2
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %13
  br i1 %1, label %17, label %.thread

; <label>:17                                      ; preds = %16
  store i32 -3, i32* %bzerror, align 4
  br label %.thread

; <label>:18                                      ; preds = %13
  br i1 %1, label %19, label %.thread13

; <label>:19                                      ; preds = %18
  store i32 0, i32* %bzerror, align 4
  br label %.thread13

.thread13:                                        ; preds = %19, %18
  %20 = getelementptr inbounds i8* %14, i64 5096
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds i8* %14, i64 5100
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds i8* %14, i64 5004
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 4
  %25 = bitcast i8* %14 to i32*
  store i32 %f, i32* %25, align 4
  %26 = getelementptr inbounds i8* %14, i64 5008
  store i8 1, i8* %26, align 1
  %27 = getelementptr inbounds i8* %14, i64 5016
  %28 = bitcast i8* %27 to %struct.bz_stream*
  %29 = getelementptr inbounds i8* %14, i64 5072
  %30 = icmp eq i32 %workFactor, 0
  %.workFactor = select i1 %30, i32 30, i32 %workFactor
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 24, i32 8, i1 false)
  %31 = tail call i32 @BZ2_bzCompressInit(%struct.bz_stream* %28, i32 %blockSize100k, i32 %verbosity, i32 %.workFactor)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %36, label %33

; <label>:33                                      ; preds = %.thread13
  br i1 %1, label %34, label %35

; <label>:34                                      ; preds = %33
  store i32 %31, i32* %bzerror, align 4
  br label %35

; <label>:35                                      ; preds = %34, %33
  tail call void @free(i8* %14) #2
  br label %.thread

; <label>:36                                      ; preds = %.thread13
  %37 = getelementptr inbounds i8* %14, i64 5024
  %38 = bitcast i8* %37 to i32*
  store i32 0, i32* %38, align 4
  store i8 1, i8* %22, align 1
  br label %.thread

.thread:                                          ; preds = %36, %35, %17, %16, %12, %11
  %.0 = phi i8* [ null, %35 ], [ %14, %36 ], [ null, %11 ], [ null, %12 ], [ null, %17 ], [ null, %16 ]
  ret i8* %.0
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @BZ2_bzWrite(i32* %bzerror, i8* %b, i8* %buf, i32 %len) #0 {
  %1 = icmp ne i32* %bzerror, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* %bzerror, align 4
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = icmp ne i8* %b, null
  br i1 %4, label %5, label %.thread

; <label>:5                                       ; preds = %3
  %6 = getelementptr inbounds i8* %b, i64 5096
  %7 = bitcast i8* %6 to i32*
  store i32 0, i32* %7, align 4
  %8 = icmp eq i8* %buf, null
  %9 = icmp slt i32 %len, 0
  %or.cond3 = or i1 %8, %9
  br i1 %or.cond3, label %.thread, label %15

.thread:                                          ; preds = %5, %3
  br i1 %1, label %10, label %11

; <label>:10                                      ; preds = %.thread
  store i32 -2, i32* %bzerror, align 4
  br label %11

; <label>:11                                      ; preds = %10, %.thread
  br i1 %4, label %12, label %70

; <label>:12                                      ; preds = %11
  %13 = getelementptr inbounds i8* %b, i64 5096
  %14 = bitcast i8* %13 to i32*
  store i32 -2, i32* %14, align 4
  br label %70

; <label>:15                                      ; preds = %5
  %16 = getelementptr inbounds i8* %b, i64 5008
  %17 = load i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %15
  br i1 %1, label %20, label %21

; <label>:20                                      ; preds = %19
  store i32 -1, i32* %bzerror, align 4
  br label %21

; <label>:21                                      ; preds = %20, %19
  store i32 -1, i32* %7, align 4
  br label %70

; <label>:22                                      ; preds = %15
  %23 = icmp eq i32 %len, 0
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %22
  br i1 %1, label %25, label %26

; <label>:25                                      ; preds = %24
  store i32 0, i32* %bzerror, align 4
  br label %26

; <label>:26                                      ; preds = %25, %24
  store i32 0, i32* %7, align 4
  br label %70

; <label>:27                                      ; preds = %22
  %28 = getelementptr inbounds i8* %b, i64 5016
  %29 = bitcast i8* %28 to %struct.bz_stream*
  %30 = getelementptr inbounds i8* %b, i64 5024
  %31 = bitcast i8* %30 to i32*
  store i32 %len, i32* %31, align 4
  %32 = bitcast i8* %28 to i8**
  store i8* %buf, i8** %32, align 8
  %33 = getelementptr inbounds i8* %b, i64 5048
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds i8* %b, i64 4
  %36 = getelementptr inbounds i8* %b, i64 5040
  %37 = bitcast i8* %36 to i8**
  %38 = getelementptr inbounds i8* %b, i64 5064
  %39 = bitcast i8* %38 to i8**
  %40 = bitcast i8* %b to i32*
  br label %41

; <label>:41                                      ; preds = %64, %27
  store i32 5000, i32* %34, align 4
  store i8* %35, i8** %37, align 8
  %42 = load i8** %39, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %.us-lcssa10.us.thread.i.loopexit11, label %44

; <label>:44                                      ; preds = %41
  %45 = bitcast i8* %42 to %struct.bz_stream**
  %46 = load %struct.bz_stream** %45, align 8
  %47 = icmp eq %struct.bz_stream* %46, %29
  br i1 %47, label %.preheader.i, label %.us-lcssa10.us.thread.i.loopexit11

.preheader.i:                                     ; preds = %44
  %48 = getelementptr inbounds i8* %42, i64 8
  %49 = bitcast i8* %48 to i32*
  %.pre.i = load i32* %49, align 4
  switch i32 %.pre.i, label %.us-lcssa10.us.thread.i.loopexit11 [
    i32 1, label %.us-lcssa10.us.thread.i.loopexit
    i32 2, label %.us-lcssa11.us.i
    i32 3, label %.us-lcssa10.us.thread.i.loopexit
    i32 4, label %.us-lcssa10.us.thread.i.loopexit
  ]

.us-lcssa11.us.i:                                 ; preds = %.preheader.i
  %50 = tail call fastcc zeroext i8 @handle_compress(i8* %42) #2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %.us-lcssa10.us.thread.i.loopexit11, label %BZ2_bzCompress.exit

.us-lcssa10.us.thread.i.loopexit:                 ; preds = %.preheader.i, %.preheader.i, %.preheader.i
  br label %.us-lcssa10.us.thread.i

.us-lcssa10.us.thread.i.loopexit11:               ; preds = %.us-lcssa11.us.i, %.preheader.i, %44, %41
  %.0.i.ph.ph = phi i32 [ 0, %.preheader.i ], [ -2, %44 ], [ -2, %41 ], [ -2, %.us-lcssa11.us.i ]
  br label %.us-lcssa10.us.thread.i

.us-lcssa10.us.thread.i:                          ; preds = %.us-lcssa10.us.thread.i.loopexit11, %.us-lcssa10.us.thread.i.loopexit
  %.0.i.ph = phi i32 [ -1, %.us-lcssa10.us.thread.i.loopexit ], [ %.0.i.ph.ph, %.us-lcssa10.us.thread.i.loopexit11 ]
  br i1 %1, label %52, label %53

; <label>:52                                      ; preds = %.us-lcssa10.us.thread.i
  store i32 %.0.i.ph, i32* %bzerror, align 4
  br label %53

; <label>:53                                      ; preds = %52, %.us-lcssa10.us.thread.i
  store i32 %.0.i.ph, i32* %7, align 4
  br label %70

BZ2_bzCompress.exit:                              ; preds = %.us-lcssa11.us.i
  %54 = load i32* %34, align 4
  %55 = icmp ult i32 %54, 5000
  br i1 %55, label %56, label %64

; <label>:56                                      ; preds = %BZ2_bzCompress.exit
  %57 = sub i32 5000, %54
  %58 = load i32* %40, align 4
  %59 = tail call i32 @spec_fwrite(i8* %35, i32 1, i32 %57, i32 %58) #2
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %64, label %61

; <label>:61                                      ; preds = %56
  br i1 %1, label %62, label %63

; <label>:62                                      ; preds = %61
  store i32 -6, i32* %bzerror, align 4
  br label %63

; <label>:63                                      ; preds = %62, %61
  store i32 -6, i32* %7, align 4
  br label %70

; <label>:64                                      ; preds = %56, %BZ2_bzCompress.exit
  %65 = load i32* %31, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %41

; <label>:67                                      ; preds = %64
  br i1 %1, label %68, label %69

; <label>:68                                      ; preds = %67
  store i32 0, i32* %bzerror, align 4
  br label %69

; <label>:69                                      ; preds = %68, %67
  store i32 0, i32* %7, align 4
  br label %70

; <label>:70                                      ; preds = %69, %63, %53, %26, %21, %12, %11
  ret void
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzWriteClose(i32* %bzerror, i8* %b, i32 %abandon, i32* %nbytes_in, i32* %nbytes_out) #0 {
  tail call void @BZ2_bzWriteClose64(i32* %bzerror, i8* %b, i32 %abandon, i32* %nbytes_in, i32* null, i32* %nbytes_out, i32* null)
  ret void
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzWriteClose64(i32* %bzerror, i8* %b, i32 %abandon, i32* %nbytes_in_lo32, i32* %nbytes_in_hi32, i32* %nbytes_out_lo32, i32* %nbytes_out_hi32) #0 {
  %1 = icmp eq i8* %b, null
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = icmp eq i32* %bzerror, null
  br i1 %3, label %178, label %4

; <label>:4                                       ; preds = %2
  store i32 0, i32* %bzerror, align 4
  br label %178

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %b, i64 5008
  %7 = load i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %15

; <label>:9                                       ; preds = %5
  %10 = icmp eq i32* %bzerror, null
  br i1 %10, label %12, label %11

; <label>:11                                      ; preds = %9
  store i32 -1, i32* %bzerror, align 4
  br label %12

; <label>:12                                      ; preds = %11, %9
  %13 = getelementptr inbounds i8* %b, i64 5096
  %14 = bitcast i8* %13 to i32*
  store i32 -1, i32* %14, align 4
  br label %178

; <label>:15                                      ; preds = %5
  %16 = icmp ne i32* %nbytes_in_lo32, null
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %15
  store i32 0, i32* %nbytes_in_lo32, align 4
  br label %18

; <label>:18                                      ; preds = %17, %15
  %19 = icmp ne i32* %nbytes_in_hi32, null
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %18
  store i32 0, i32* %nbytes_in_hi32, align 4
  br label %21

; <label>:21                                      ; preds = %20, %18
  %22 = icmp ne i32* %nbytes_out_lo32, null
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %21
  store i32 0, i32* %nbytes_out_lo32, align 4
  br label %24

; <label>:24                                      ; preds = %23, %21
  %25 = icmp ne i32* %nbytes_out_hi32, null
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %24
  store i32 0, i32* %nbytes_out_hi32, align 4
  br label %27

; <label>:27                                      ; preds = %26, %24
  %28 = icmp eq i32 %abandon, 0
  br i1 %28, label %29, label %.loopexit13

; <label>:29                                      ; preds = %27
  %30 = getelementptr inbounds i8* %b, i64 5096
  %31 = bitcast i8* %30 to i32*
  %32 = load i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %.preheader, label %.loopexit13

.preheader:                                       ; preds = %29
  %34 = getelementptr inbounds i8* %b, i64 5016
  %35 = bitcast i8* %34 to %struct.bz_stream*
  %36 = getelementptr inbounds i8* %b, i64 5048
  %37 = bitcast i8* %36 to i32*
  %38 = getelementptr inbounds i8* %b, i64 4
  %39 = getelementptr inbounds i8* %b, i64 5040
  %40 = bitcast i8* %39 to i8**
  %41 = getelementptr inbounds i8* %b, i64 5064
  %42 = bitcast i8* %41 to i8**
  %43 = getelementptr inbounds i8* %b, i64 5024
  %44 = bitcast i8* %43 to i32*
  %45 = bitcast i8* %b to i32*
  br label %46

; <label>:46                                      ; preds = %102, %.preheader
  store i32 5000, i32* %37, align 4
  store i8* %38, i8** %40, align 8
  %47 = load i8** %42, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %.us-lcssa9.us.i.loopexit19, label %49

; <label>:49                                      ; preds = %46
  %50 = bitcast i8* %47 to %struct.bz_stream**
  %51 = load %struct.bz_stream** %50, align 8
  %52 = icmp eq %struct.bz_stream* %51, %35
  br i1 %52, label %.preheader.i, label %.us-lcssa9.us.i.loopexit19

.preheader.i:                                     ; preds = %49
  %53 = getelementptr inbounds i8* %47, i64 8
  %54 = bitcast i8* %53 to i32*
  %55 = getelementptr inbounds i8* %47, i64 16
  %56 = bitcast i8* %55 to i32*
  %.pre19.i = load i32* %54, align 4
  br label %57

; <label>:57                                      ; preds = %.backedge.us14.i, %.preheader.i
  %58 = phi i32 [ 4, %.backedge.us14.i ], [ %.pre19.i, %.preheader.i ]
  switch i32 %58, label %.us-lcssa9.us.i.loopexit18 [
    i32 1, label %.us-lcssa9.us.i.loopexit
    i32 2, label %.backedge.us14.i
    i32 3, label %.us-lcssa9.us.i.loopexit
    i32 4, label %.us-lcssa10.us.i
  ]

.backedge.us14.i:                                 ; preds = %57
  %59 = load i32* %44, align 4
  store i32 %59, i32* %56, align 4
  store i32 4, i32* %54, align 4
  br label %57

.us-lcssa10.us.i:                                 ; preds = %57
  %60 = load i32* %56, align 4
  %61 = load i32* %44, align 4
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %63, label %.us-lcssa9.us.i.loopexit19

; <label>:63                                      ; preds = %.us-lcssa10.us.i
  %strm.idx.val.i = load i8** %42, align 8
  %64 = tail call fastcc zeroext i8 @handle_compress(i8* %strm.idx.val.i) #2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %.us-lcssa9.us.i.loopexit19, label %66

; <label>:66                                      ; preds = %63
  %67 = load i32* %56, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69                                      ; preds = %66
  %70 = getelementptr inbounds i8* %47, i64 92
  %71 = bitcast i8* %70 to i32*
  %72 = load i32* %71, align 4
  %73 = icmp ult i32 %72, 256
  br i1 %73, label %74, label %isempty_RL.exit4.i

; <label>:74                                      ; preds = %69
  %75 = getelementptr inbounds i8* %47, i64 96
  %76 = bitcast i8* %75 to i32*
  %77 = load i32* %76, align 4
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %90, label %isempty_RL.exit4.i

isempty_RL.exit4.i:                               ; preds = %74, %69
  %79 = getelementptr inbounds i8* %47, i64 120
  %80 = bitcast i8* %79 to i32*
  %81 = load i32* %80, align 4
  %82 = getelementptr inbounds i8* %47, i64 116
  %83 = bitcast i8* %82 to i32*
  %84 = load i32* %83, align 4
  %85 = icmp slt i32 %81, %84
  br i1 %85, label %90, label %86

; <label>:86                                      ; preds = %isempty_RL.exit4.i
  store i32 1, i32* %54, align 4
  br label %90

.us-lcssa9.us.i.loopexit:                         ; preds = %57, %57
  br label %.us-lcssa9.us.i

.us-lcssa9.us.i.loopexit18:                       ; preds = %57
  br label %.us-lcssa9.us.i

.us-lcssa9.us.i.loopexit19:                       ; preds = %63, %.us-lcssa10.us.i, %49, %46
  %.0.i.ph.ph = phi i32 [ -2, %46 ], [ -2, %49 ], [ -1, %.us-lcssa10.us.i ], [ -1, %63 ]
  br label %.us-lcssa9.us.i

.us-lcssa9.us.i:                                  ; preds = %.us-lcssa9.us.i.loopexit19, %.us-lcssa9.us.i.loopexit18, %.us-lcssa9.us.i.loopexit
  %.0.i.ph = phi i32 [ -1, %.us-lcssa9.us.i.loopexit ], [ 0, %.us-lcssa9.us.i.loopexit18 ], [ %.0.i.ph.ph, %.us-lcssa9.us.i.loopexit19 ]
  %87 = icmp eq i32* %bzerror, null
  br i1 %87, label %89, label %88

; <label>:88                                      ; preds = %.us-lcssa9.us.i
  store i32 %.0.i.ph, i32* %bzerror, align 4
  br label %89

; <label>:89                                      ; preds = %88, %.us-lcssa9.us.i
  store i32 %.0.i.ph, i32* %31, align 4
  br label %178

; <label>:90                                      ; preds = %86, %isempty_RL.exit4.i, %74, %66
  %.0.i.ph7 = phi i32 [ 3, %74 ], [ 3, %isempty_RL.exit4.i ], [ 3, %66 ], [ 4, %86 ]
  %91 = load i32* %37, align 4
  %92 = icmp ult i32 %91, 5000
  br i1 %92, label %93, label %102

; <label>:93                                      ; preds = %90
  %94 = sub i32 5000, %91
  %95 = load i32* %45, align 4
  %96 = tail call i32 @spec_fwrite(i8* %38, i32 1, i32 %94, i32 %95) #2
  %97 = icmp eq i32 %94, %96
  br i1 %97, label %102, label %98

; <label>:98                                      ; preds = %93
  %99 = icmp eq i32* %bzerror, null
  br i1 %99, label %101, label %100

; <label>:100                                     ; preds = %98
  store i32 -6, i32* %bzerror, align 4
  br label %101

; <label>:101                                     ; preds = %100, %98
  store i32 -6, i32* %31, align 4
  br label %178

; <label>:102                                     ; preds = %93, %90
  %103 = icmp eq i32 %.0.i.ph7, 4
  br i1 %103, label %.loopexit13.loopexit, label %46

.loopexit13.loopexit:                             ; preds = %102
  br label %.loopexit13

.loopexit13:                                      ; preds = %.loopexit13.loopexit, %29, %27
  br i1 %16, label %104, label %108

; <label>:104                                     ; preds = %.loopexit13
  %105 = getelementptr inbounds i8* %b, i64 5028
  %106 = bitcast i8* %105 to i32*
  %107 = load i32* %106, align 4
  store i32 %107, i32* %nbytes_in_lo32, align 4
  br label %108

; <label>:108                                     ; preds = %104, %.loopexit13
  br i1 %19, label %109, label %113

; <label>:109                                     ; preds = %108
  %110 = getelementptr inbounds i8* %b, i64 5032
  %111 = bitcast i8* %110 to i32*
  %112 = load i32* %111, align 4
  store i32 %112, i32* %nbytes_in_hi32, align 4
  br label %113

; <label>:113                                     ; preds = %109, %108
  br i1 %22, label %114, label %118

; <label>:114                                     ; preds = %113
  %115 = getelementptr inbounds i8* %b, i64 5052
  %116 = bitcast i8* %115 to i32*
  %117 = load i32* %116, align 4
  store i32 %117, i32* %nbytes_out_lo32, align 4
  br label %118

; <label>:118                                     ; preds = %114, %113
  br i1 %25, label %119, label %123

; <label>:119                                     ; preds = %118
  %120 = getelementptr inbounds i8* %b, i64 5056
  %121 = bitcast i8* %120 to i32*
  %122 = load i32* %121, align 4
  store i32 %122, i32* %nbytes_out_hi32, align 4
  br label %123

; <label>:123                                     ; preds = %119, %118
  %124 = icmp eq i32* %bzerror, null
  br i1 %124, label %126, label %125

; <label>:125                                     ; preds = %123
  store i32 0, i32* %bzerror, align 4
  br label %126

; <label>:126                                     ; preds = %125, %123
  %127 = getelementptr inbounds i8* %b, i64 5096
  %128 = bitcast i8* %127 to i32*
  store i32 0, i32* %128, align 4
  %129 = getelementptr inbounds i8* %b, i64 5064
  %130 = bitcast i8* %129 to i8**
  %131 = load i8** %130, align 8
  %132 = icmp eq i8* %131, null
  br i1 %132, label %BZ2_bzCompressEnd.exit, label %133

; <label>:133                                     ; preds = %126
  %134 = getelementptr inbounds i8* %b, i64 5016
  %135 = bitcast i8* %134 to %struct.bz_stream*
  %136 = bitcast i8* %131 to %struct.bz_stream**
  %137 = load %struct.bz_stream** %136, align 8
  %138 = icmp eq %struct.bz_stream* %137, %135
  br i1 %138, label %139, label %BZ2_bzCompressEnd.exit

; <label>:139                                     ; preds = %133
  %140 = getelementptr inbounds i8* %131, i64 24
  %141 = bitcast i8* %140 to i32**
  %142 = load i32** %141, align 8
  %143 = icmp eq i32* %142, null
  br i1 %143, label %152, label %144

; <label>:144                                     ; preds = %139
  %145 = getelementptr inbounds i8* %b, i64 5080
  %146 = bitcast i8* %145 to void (i8*, i8*)**
  %147 = load void (i8*, i8*)** %146, align 8
  %148 = getelementptr inbounds i8* %b, i64 5088
  %149 = bitcast i8* %148 to i8**
  %150 = load i8** %149, align 8
  %151 = bitcast i32* %142 to i8*
  tail call void %147(i8* %150, i8* %151) #2
  br label %152

; <label>:152                                     ; preds = %144, %139
  %153 = getelementptr inbounds i8* %131, i64 32
  %154 = bitcast i8* %153 to i32**
  %155 = load i32** %154, align 8
  %156 = icmp eq i32* %155, null
  %.pre.i.pre = getelementptr inbounds i8* %b, i64 5080
  %.pre = bitcast i8* %.pre.i.pre to void (i8*, i8*)**
  br i1 %156, label %._crit_edge16, label %157

; <label>:157                                     ; preds = %152
  %158 = load void (i8*, i8*)** %.pre, align 8
  %159 = getelementptr inbounds i8* %b, i64 5088
  %160 = bitcast i8* %159 to i8**
  %161 = load i8** %160, align 8
  %162 = bitcast i32* %155 to i8*
  tail call void %158(i8* %161, i8* %162) #2
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %157, %152
  %163 = getelementptr inbounds i8* %131, i64 40
  %164 = bitcast i8* %163 to i32**
  %165 = load i32** %164, align 8
  %166 = icmp eq i32* %165, null
  br i1 %166, label %._crit_edge.i, label %168

._crit_edge.i:                                    ; preds = %._crit_edge16
  %.pre1.i = getelementptr inbounds i8* %b, i64 5088
  %167 = bitcast i8* %.pre1.i to i8**
  br label %174

; <label>:168                                     ; preds = %._crit_edge16
  %169 = load void (i8*, i8*)** %.pre, align 8
  %170 = getelementptr inbounds i8* %b, i64 5088
  %171 = bitcast i8* %170 to i8**
  %172 = load i8** %171, align 8
  %173 = bitcast i32* %165 to i8*
  tail call void %169(i8* %172, i8* %173) #2
  br label %174

; <label>:174                                     ; preds = %168, %._crit_edge.i
  %.pre-phi2.i = phi i8** [ %167, %._crit_edge.i ], [ %171, %168 ]
  %175 = load void (i8*, i8*)** %.pre, align 8
  %176 = load i8** %.pre-phi2.i, align 8
  %177 = load i8** %130, align 8
  tail call void %175(i8* %176, i8* %177) #2
  br label %BZ2_bzCompressEnd.exit

BZ2_bzCompressEnd.exit:                           ; preds = %174, %133, %126
  tail call void @free(i8* %b) #2
  br label %178

; <label>:178                                     ; preds = %BZ2_bzCompressEnd.exit, %101, %89, %12, %4, %2
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzReadOpen(i32* %bzerror, i32 %f, i32 %verbosity, i32 %small, i8* readonly %unused, i32 %nUnused) #0 {
  %1 = icmp ne i32* %bzerror, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* %bzerror, align 4
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = icmp eq i32 %f, 0
  br i1 %4, label %14, label %5

; <label>:5                                       ; preds = %3
  %small.cmp = icmp ugt i32 %small, 1
  %6 = icmp slt i32 %verbosity, 0
  %or.cond3 = or i1 %small.cmp, %6
  %7 = icmp sgt i32 %verbosity, 4
  %or.cond5 = or i1 %or.cond3, %7
  br i1 %or.cond5, label %14, label %8

; <label>:8                                       ; preds = %5
  %9 = icmp eq i8* %unused, null
  %10 = icmp ne i32 %nUnused, 0
  %or.cond7 = and i1 %9, %10
  br i1 %or.cond7, label %14, label %11

; <label>:11                                      ; preds = %8
  %12 = icmp ne i8* %unused, null
  %13 = icmp ugt i32 %nUnused, 5000
  %or.cond = and i1 %12, %13
  br i1 %or.cond, label %14, label %16

; <label>:14                                      ; preds = %11, %8, %5, %3
  br i1 %1, label %15, label %.thread

; <label>:15                                      ; preds = %14
  store i32 -2, i32* %bzerror, align 4
  br label %.thread

; <label>:16                                      ; preds = %11
  %17 = tail call noalias i8* @malloc(i64 5104) #2
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %21

; <label>:19                                      ; preds = %16
  br i1 %1, label %20, label %.thread

; <label>:20                                      ; preds = %19
  store i32 -3, i32* %bzerror, align 4
  br label %.thread

; <label>:21                                      ; preds = %16
  br i1 %1, label %22, label %.thread12

; <label>:22                                      ; preds = %21
  store i32 0, i32* %bzerror, align 4
  br label %.thread12

.thread12:                                        ; preds = %22, %21
  %23 = getelementptr inbounds i8* %17, i64 5096
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds i8* %17, i64 5100
  store i8 0, i8* %25, align 1
  %26 = bitcast i8* %17 to i32*
  store i32 %f, i32* %26, align 4
  %27 = getelementptr inbounds i8* %17, i64 5004
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds i8* %17, i64 5008
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds i8* %17, i64 5016
  %31 = bitcast i8* %30 to %struct.bz_stream*
  %32 = getelementptr inbounds i8* %17, i64 5072
  %33 = bitcast i8* %32 to i8* (i8*, i32, i32)**
  %34 = getelementptr inbounds i8* %17, i64 5080
  %35 = bitcast i8* %34 to void (i8*, i8*)**
  %36 = getelementptr inbounds i8* %17, i64 5088
  %37 = bitcast i8* %36 to i8**
  %38 = icmp sgt i32 %nUnused, 0
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 24, i32 8, i1 false)
  br i1 %38, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.thread12
  %xtraiter = and i32 %nUnused, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %nUnused, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %.lr.ph.unr, label %.lr.ph.preheader.split

.lr.ph.unr:                                       ; preds = %.lr.ph.preheader
  %39 = load i8* %unused, align 1
  %40 = sext i32 0 to i64
  %.sum.unr = add nsw i64 %40, 4
  %41 = getelementptr inbounds i8* %17, i64 %.sum.unr
  store i8 %39, i8* %41, align 1
  %42 = load i32* %28, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %28, align 4
  %44 = getelementptr inbounds i8* %unused, i64 1
  %45 = add nsw i32 %nUnused, -1
  %46 = icmp sgt i32 %45, 0
  br label %.lr.ph.preheader.split

.lr.ph.preheader.split:                           ; preds = %.lr.ph.unr, %.lr.ph.preheader
  %.unr = phi i32 [ 0, %.lr.ph.preheader ], [ %43, %.lr.ph.unr ]
  %.01015.unr = phi i32 [ %nUnused, %.lr.ph.preheader ], [ %45, %.lr.ph.unr ]
  %.01114.unr = phi i8* [ %unused, %.lr.ph.preheader ], [ %44, %.lr.ph.unr ]
  %47 = icmp ult i32 %nUnused, 2
  br i1 %47, label %._crit_edge.loopexit, label %.lr.ph.preheader.split.split

.lr.ph.preheader.split.split:                     ; preds = %.lr.ph.preheader.split
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader.split.split
  %48 = phi i32 [ %.unr, %.lr.ph.preheader.split.split ], [ %60, %.lr.ph ]
  %.01015 = phi i32 [ %.01015.unr, %.lr.ph.preheader.split.split ], [ %62, %.lr.ph ]
  %.01114 = phi i8* [ %.01114.unr, %.lr.ph.preheader.split.split ], [ %61, %.lr.ph ]
  %49 = load i8* %.01114, align 1
  %50 = sext i32 %48 to i64
  %.sum = add nsw i64 %50, 4
  %51 = getelementptr inbounds i8* %17, i64 %.sum
  store i8 %49, i8* %51, align 1
  %52 = load i32* %28, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %28, align 4
  %54 = getelementptr inbounds i8* %.01114, i64 1
  %55 = add nsw i32 %.01015, -1
  %56 = load i8* %54, align 1
  %57 = sext i32 %53 to i64
  %.sum.1 = add nsw i64 %57, 4
  %58 = getelementptr inbounds i8* %17, i64 %.sum.1
  store i8 %56, i8* %58, align 1
  %59 = load i32* %28, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %28, align 4
  %61 = getelementptr inbounds i8* %54, i64 1
  %62 = add nsw i32 %55, -1
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %.lr.ph, label %._crit_edge.loopexit.unr-lcssa

._crit_edge.loopexit.unr-lcssa:                   ; preds = %.lr.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph.preheader.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.thread12
  %64 = icmp ugt i32 %verbosity, 4
  br i1 %64, label %78, label %65

; <label>:65                                      ; preds = %._crit_edge
  %66 = load i8* (i8*, i32, i32)** %33, align 8
  %67 = icmp eq i8* (i8*, i32, i32)* %66, null
  br i1 %67, label %68, label %69

; <label>:68                                      ; preds = %65
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %33, align 8
  br label %69

; <label>:69                                      ; preds = %68, %65
  %70 = phi i8* (i8*, i32, i32)* [ @default_bzalloc, %68 ], [ %66, %65 ]
  %71 = load void (i8*, i8*)** %35, align 8
  %72 = icmp eq void (i8*, i8*)* %71, null
  br i1 %72, label %73, label %74

; <label>:73                                      ; preds = %69
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %35, align 8
  br label %74

; <label>:74                                      ; preds = %73, %69
  %75 = load i8** %37, align 8
  %76 = tail call i8* %70(i8* %75, i32 64144, i32 1) #2
  %77 = icmp eq i8* %76, null
  br i1 %77, label %78, label %81

; <label>:78                                      ; preds = %74, %._crit_edge
  %.0.i.ph = phi i32 [ -3, %74 ], [ -2, %._crit_edge ]
  br i1 %1, label %79, label %80

; <label>:79                                      ; preds = %78
  store i32 %.0.i.ph, i32* %bzerror, align 4
  br label %80

; <label>:80                                      ; preds = %79, %78
  tail call void @free(i8* %17) #2
  br label %.thread

; <label>:81                                      ; preds = %74
  %82 = bitcast i8* %76 to %struct.bz_stream**
  store %struct.bz_stream* %31, %struct.bz_stream** %82, align 8
  %83 = getelementptr inbounds i8* %17, i64 5064
  %84 = bitcast i8* %83 to i8**
  store i8* %76, i8** %84, align 8
  %85 = getelementptr inbounds i8* %76, i64 8
  %86 = bitcast i8* %85 to i32*
  store i32 10, i32* %86, align 4
  %87 = getelementptr inbounds i8* %76, i64 36
  %88 = bitcast i8* %87 to i32*
  store i32 0, i32* %88, align 4
  %89 = getelementptr inbounds i8* %76, i64 32
  %90 = bitcast i8* %89 to i32*
  store i32 0, i32* %90, align 4
  %91 = getelementptr inbounds i8* %76, i64 3188
  %92 = bitcast i8* %91 to i32*
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds i8* %17, i64 5028
  %94 = bitcast i8* %93 to i32*
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds i8* %17, i64 5032
  %96 = bitcast i8* %95 to i32*
  store i32 0, i32* %96, align 4
  %97 = getelementptr inbounds i8* %17, i64 5052
  %98 = bitcast i8* %97 to i32*
  store i32 0, i32* %98, align 4
  %99 = getelementptr inbounds i8* %17, i64 5056
  %100 = bitcast i8* %99 to i32*
  store i32 0, i32* %100, align 4
  %101 = trunc i32 %small to i8
  %102 = getelementptr inbounds i8* %76, i64 44
  store i8 %101, i8* %102, align 1
  %103 = getelementptr inbounds i8* %76, i64 3152
  %104 = getelementptr inbounds i8* %76, i64 48
  %105 = bitcast i8* %104 to i32*
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds i8* %76, i64 52
  %107 = bitcast i8* %106 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* %103, i8 0, i64 24, i32 8, i1 false) #2
  store i32 %verbosity, i32* %107, align 4
  %108 = load i32* %28, align 4
  %109 = getelementptr inbounds i8* %17, i64 5024
  %110 = bitcast i8* %109 to i32*
  store i32 %108, i32* %110, align 4
  %111 = getelementptr inbounds i8* %17, i64 4
  %112 = bitcast i8* %30 to i8**
  store i8* %111, i8** %112, align 8
  store i8 1, i8* %25, align 1
  br label %.thread

.thread:                                          ; preds = %81, %80, %20, %19, %15, %14
  %.0 = phi i8* [ null, %80 ], [ %17, %81 ], [ null, %14 ], [ null, %15 ], [ null, %20 ], [ null, %19 ]
  ret i8* %.0
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzReadClose(i32* %bzerror, i8* %b) #0 {
  %1 = icmp ne i32* %bzerror, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* %bzerror, align 4
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = icmp eq i8* %b, null
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %3
  br i1 %1, label %6, label %.thread

; <label>:6                                       ; preds = %5
  store i32 0, i32* %bzerror, align 4
  br label %.thread

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds i8* %b, i64 5096
  %9 = bitcast i8* %8 to i32*
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds i8* %b, i64 5008
  %11 = load i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %7
  br i1 %1, label %14, label %15

; <label>:14                                      ; preds = %13
  store i32 -1, i32* %bzerror, align 4
  br label %15

; <label>:15                                      ; preds = %14, %13
  store i32 -1, i32* %9, align 4
  br label %.thread

; <label>:16                                      ; preds = %7
  %17 = getelementptr inbounds i8* %b, i64 5100
  %18 = load i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %BZ2_bzDecompressEnd.exit, label %20

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds i8* %b, i64 5064
  %22 = bitcast i8* %21 to i8**
  %23 = load i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %BZ2_bzDecompressEnd.exit, label %25

; <label>:25                                      ; preds = %20
  %26 = getelementptr inbounds i8* %b, i64 5016
  %27 = bitcast i8* %26 to %struct.bz_stream*
  %28 = bitcast i8* %23 to %struct.bz_stream**
  %29 = load %struct.bz_stream** %28, align 8
  %30 = icmp eq %struct.bz_stream* %29, %27
  br i1 %30, label %31, label %BZ2_bzDecompressEnd.exit

; <label>:31                                      ; preds = %25
  %32 = getelementptr inbounds i8* %23, i64 3152
  %33 = bitcast i8* %32 to i32**
  %34 = load i32** %33, align 8
  %35 = icmp eq i32* %34, null
  br i1 %35, label %44, label %36

; <label>:36                                      ; preds = %31
  %37 = getelementptr inbounds i8* %b, i64 5080
  %38 = bitcast i8* %37 to void (i8*, i8*)**
  %39 = load void (i8*, i8*)** %38, align 8
  %40 = getelementptr inbounds i8* %b, i64 5088
  %41 = bitcast i8* %40 to i8**
  %42 = load i8** %41, align 8
  %43 = bitcast i32* %34 to i8*
  tail call void %39(i8* %42, i8* %43) #2
  br label %44

; <label>:44                                      ; preds = %36, %31
  %45 = getelementptr inbounds i8* %23, i64 3160
  %46 = bitcast i8* %45 to i16**
  %47 = load i16** %46, align 8
  %48 = icmp eq i16* %47, null
  %.pre.i.pre = getelementptr inbounds i8* %b, i64 5080
  %.pre = bitcast i8* %.pre.i.pre to void (i8*, i8*)**
  br i1 %48, label %._crit_edge, label %49

; <label>:49                                      ; preds = %44
  %50 = load void (i8*, i8*)** %.pre, align 8
  %51 = getelementptr inbounds i8* %b, i64 5088
  %52 = bitcast i8* %51 to i8**
  %53 = load i8** %52, align 8
  %54 = bitcast i16* %47 to i8*
  tail call void %50(i8* %53, i8* %54) #2
  br label %._crit_edge

._crit_edge:                                      ; preds = %49, %44
  %55 = getelementptr inbounds i8* %23, i64 3168
  %56 = bitcast i8* %55 to i8**
  %57 = load i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %._crit_edge.i, label %60

._crit_edge.i:                                    ; preds = %._crit_edge
  %.pre1.i = getelementptr inbounds i8* %b, i64 5088
  %59 = bitcast i8* %.pre1.i to i8**
  br label %65

; <label>:60                                      ; preds = %._crit_edge
  %61 = load void (i8*, i8*)** %.pre, align 8
  %62 = getelementptr inbounds i8* %b, i64 5088
  %63 = bitcast i8* %62 to i8**
  %64 = load i8** %63, align 8
  tail call void %61(i8* %64, i8* %57) #2
  br label %65

; <label>:65                                      ; preds = %60, %._crit_edge.i
  %.pre-phi2.i = phi i8** [ %59, %._crit_edge.i ], [ %63, %60 ]
  %66 = load void (i8*, i8*)** %.pre, align 8
  %67 = load i8** %.pre-phi2.i, align 8
  %68 = load i8** %22, align 8
  tail call void %66(i8* %67, i8* %68) #2
  br label %BZ2_bzDecompressEnd.exit

BZ2_bzDecompressEnd.exit:                         ; preds = %65, %25, %20, %16
  tail call void @free(i8* %b) #2
  br label %.thread

.thread:                                          ; preds = %BZ2_bzDecompressEnd.exit, %15, %6, %5
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzRead(i32* %bzerror, i8* %b, i8* %buf, i32 %len) #0 {
  %1 = icmp ne i32* %bzerror, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* %bzerror, align 4
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = icmp ne i8* %b, null
  br i1 %4, label %5, label %.thread

; <label>:5                                       ; preds = %3
  %6 = getelementptr inbounds i8* %b, i64 5096
  %7 = bitcast i8* %6 to i32*
  store i32 0, i32* %7, align 4
  %8 = icmp eq i8* %buf, null
  %9 = icmp slt i32 %len, 0
  %or.cond3 = or i1 %8, %9
  br i1 %or.cond3, label %.thread, label %15

.thread:                                          ; preds = %5, %3
  br i1 %1, label %10, label %11

; <label>:10                                      ; preds = %.thread
  store i32 -2, i32* %bzerror, align 4
  br label %11

; <label>:11                                      ; preds = %10, %.thread
  br i1 %4, label %12, label %80

; <label>:12                                      ; preds = %11
  %13 = getelementptr inbounds i8* %b, i64 5096
  %14 = bitcast i8* %13 to i32*
  store i32 -2, i32* %14, align 4
  br label %80

; <label>:15                                      ; preds = %5
  %16 = getelementptr inbounds i8* %b, i64 5008
  %17 = load i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %22, label %19

; <label>:19                                      ; preds = %15
  br i1 %1, label %20, label %21

; <label>:20                                      ; preds = %19
  store i32 -1, i32* %bzerror, align 4
  br label %21

; <label>:21                                      ; preds = %20, %19
  store i32 -1, i32* %7, align 4
  br label %80

; <label>:22                                      ; preds = %15
  %23 = icmp eq i32 %len, 0
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %22
  br i1 %1, label %25, label %26

; <label>:25                                      ; preds = %24
  store i32 0, i32* %bzerror, align 4
  br label %26

; <label>:26                                      ; preds = %25, %24
  store i32 0, i32* %7, align 4
  br label %80

; <label>:27                                      ; preds = %22
  %28 = getelementptr inbounds i8* %b, i64 5016
  %29 = bitcast i8* %28 to %struct.bz_stream*
  %30 = getelementptr inbounds i8* %b, i64 5048
  %31 = bitcast i8* %30 to i32*
  store i32 %len, i32* %31, align 4
  %32 = getelementptr inbounds i8* %b, i64 5040
  %33 = bitcast i8* %32 to i8**
  store i8* %buf, i8** %33, align 8
  %34 = getelementptr inbounds i8* %b, i64 5024
  %35 = bitcast i8* %34 to i32*
  %36 = bitcast i8* %b to i32*
  %37 = getelementptr inbounds i8* %b, i64 4
  %38 = getelementptr inbounds i8* %b, i64 5004
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i8* %28 to i8**
  br label %41

; <label>:41                                      ; preds = %.thread12, %27
  %42 = load i32* %35, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %myfeof.exit.thread10

; <label>:44                                      ; preds = %41
  %45 = load i32* %36, align 4
  %46 = tail call i32 @spec_getc(i32 %45) #2
  %47 = icmp eq i32 %46, -1
  br i1 %47, label %myfeof.exit.thread10, label %48

; <label>:48                                      ; preds = %44
  %49 = trunc i32 %46 to i8
  %50 = tail call i32 @spec_ungetc(i8 zeroext %49, i32 %45) #2
  %51 = load i32* %36, align 4
  %52 = tail call i32 @spec_fread(i8* %37, i32 1, i32 5000, i32 %51) #2
  store i32 %52, i32* %39, align 4
  store i32 %52, i32* %35, align 4
  store i8* %37, i8** %40, align 8
  br label %myfeof.exit.thread10

myfeof.exit.thread10:                             ; preds = %48, %44, %41
  %53 = tail call i32 @BZ2_bzDecompress(%struct.bz_stream* %29)
  switch i32 %53, label %54 [
    i32 0, label %57
    i32 4, label %72
  ]

; <label>:54                                      ; preds = %myfeof.exit.thread10
  %.lcssa = phi i32 [ %53, %myfeof.exit.thread10 ]
  br i1 %1, label %55, label %56

; <label>:55                                      ; preds = %54
  store i32 %.lcssa, i32* %bzerror, align 4
  br label %56

; <label>:56                                      ; preds = %55, %54
  store i32 %.lcssa, i32* %7, align 4
  br label %80

; <label>:57                                      ; preds = %myfeof.exit.thread10
  %58 = load i32* %36, align 4
  %59 = tail call i32 @spec_getc(i32 %58) #2
  %60 = icmp eq i32 %59, -1
  br i1 %60, label %63, label %myfeof.exit7.thread

myfeof.exit7.thread:                              ; preds = %57
  %61 = trunc i32 %59 to i8
  %62 = tail call i32 @spec_ungetc(i8 zeroext %61, i32 %58) #2
  br label %.thread12

; <label>:63                                      ; preds = %57
  %64 = load i32* %35, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %.thread12

; <label>:66                                      ; preds = %63
  %67 = load i32* %31, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %.thread12.thread, label %69

; <label>:69                                      ; preds = %66
  br i1 %1, label %70, label %71

; <label>:70                                      ; preds = %69
  store i32 -7, i32* %bzerror, align 4
  br label %71

; <label>:71                                      ; preds = %70, %69
  store i32 -7, i32* %7, align 4
  br label %80

; <label>:72                                      ; preds = %myfeof.exit.thread10
  br i1 %1, label %73, label %74

; <label>:73                                      ; preds = %72
  store i32 4, i32* %bzerror, align 4
  br label %74

; <label>:74                                      ; preds = %73, %72
  store i32 4, i32* %7, align 4
  %75 = load i32* %31, align 4
  %76 = sub i32 %len, %75
  br label %80

.thread12:                                        ; preds = %63, %myfeof.exit7.thread
  %.pr = load i32* %31, align 4
  %77 = icmp eq i32 %.pr, 0
  br i1 %77, label %.thread12.thread.loopexit, label %41

.thread12.thread.loopexit:                        ; preds = %.thread12
  br label %.thread12.thread

.thread12.thread:                                 ; preds = %.thread12.thread.loopexit, %66
  br i1 %1, label %78, label %79

; <label>:78                                      ; preds = %.thread12.thread
  store i32 0, i32* %bzerror, align 4
  br label %79

; <label>:79                                      ; preds = %78, %.thread12.thread
  store i32 0, i32* %7, align 4
  br label %80

; <label>:80                                      ; preds = %79, %74, %71, %56, %26, %21, %12, %11
  %.0 = phi i32 [ %76, %74 ], [ 0, %12 ], [ 0, %11 ], [ 0, %21 ], [ 0, %26 ], [ 0, %56 ], [ 0, %71 ], [ %len, %79 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzReadGetUnused(i32* %bzerror, i8* %b, i8** %unused, i32* %nUnused) #0 {
  %1 = icmp eq i8* %b, null
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = icmp eq i32* %bzerror, null
  br i1 %3, label %29, label %4

; <label>:4                                       ; preds = %2
  store i32 -2, i32* %bzerror, align 4
  br label %29

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %b, i64 5096
  %7 = bitcast i8* %6 to i32*
  %8 = load i32* %7, align 4
  %9 = icmp eq i32 %8, 4
  br i1 %9, label %14, label %10

; <label>:10                                      ; preds = %5
  %11 = icmp eq i32* %bzerror, null
  br i1 %11, label %13, label %12

; <label>:12                                      ; preds = %10
  store i32 -1, i32* %bzerror, align 4
  br label %13

; <label>:13                                      ; preds = %12, %10
  store i32 -1, i32* %7, align 4
  br label %29

; <label>:14                                      ; preds = %5
  %15 = icmp eq i8** %unused, null
  %16 = icmp eq i32* %nUnused, null
  %or.cond = or i1 %15, %16
  %17 = icmp ne i32* %bzerror, null
  br i1 %or.cond, label %18, label %21

; <label>:18                                      ; preds = %14
  br i1 %17, label %19, label %20

; <label>:19                                      ; preds = %18
  store i32 -2, i32* %bzerror, align 4
  br label %20

; <label>:20                                      ; preds = %19, %18
  store i32 -2, i32* %7, align 4
  br label %29

; <label>:21                                      ; preds = %14
  br i1 %17, label %22, label %.thread

; <label>:22                                      ; preds = %21
  store i32 0, i32* %bzerror, align 4
  br label %.thread

.thread:                                          ; preds = %22, %21
  store i32 0, i32* %7, align 4
  %23 = getelementptr inbounds i8* %b, i64 5016
  %24 = getelementptr inbounds i8* %b, i64 5024
  %25 = bitcast i8* %24 to i32*
  %26 = load i32* %25, align 4
  store i32 %26, i32* %nUnused, align 4
  %27 = bitcast i8* %23 to i8**
  %28 = load i8** %27, align 8
  store i8* %28, i8** %unused, align 8
  br label %29

; <label>:29                                      ; preds = %.thread, %20, %13, %4, %2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzBuffToBuffCompress(i8* %dest, i32* %destLen, i8* %source, i32 %sourceLen, i32 %blockSize100k, i32 %verbosity, i32 %workFactor) #0 {
  %strm = alloca %struct.bz_stream, align 8
  %1 = bitcast %struct.bz_stream* %strm to i8*
  call void @llvm.lifetime.start(i64 80, i8* %1) #2
  %2 = icmp eq i8* %dest, null
  %3 = icmp eq i32* %destLen, null
  %or.cond = or i1 %2, %3
  %4 = icmp eq i8* %source, null
  %or.cond3 = or i1 %or.cond, %4
  %5 = icmp slt i32 %blockSize100k, 1
  %or.cond5 = or i1 %or.cond3, %5
  %6 = icmp sgt i32 %blockSize100k, 9
  %or.cond7 = or i1 %or.cond5, %6
  %7 = icmp slt i32 %verbosity, 0
  %or.cond9 = or i1 %or.cond7, %7
  %8 = icmp sgt i32 %verbosity, 4
  %or.cond11 = or i1 %or.cond9, %8
  %9 = icmp slt i32 %workFactor, 0
  %or.cond13 = or i1 %or.cond11, %9
  %10 = icmp sgt i32 %workFactor, 250
  %or.cond15 = or i1 %or.cond13, %10
  br i1 %or.cond15, label %BZ2_bzCompressEnd.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = icmp eq i32 %workFactor, 0
  %.workFactor = select i1 %12, i32 30, i32 %workFactor
  %13 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 9
  %14 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %15 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %16 = bitcast i8* (i8*, i32, i32)** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 24, i32 8, i1 false)
  %17 = call i32 @BZ2_bzCompressInit(%struct.bz_stream* %strm, i32 %blockSize100k, i32 %verbosity, i32 %.workFactor)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %BZ2_bzCompressEnd.exit

; <label>:19                                      ; preds = %11
  %20 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 0
  store i8* %source, i8** %20, align 8
  %21 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 4
  store i8* %dest, i8** %21, align 8
  %22 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 1
  store i32 %sourceLen, i32* %22, align 8
  %23 = load i32* %destLen, align 4
  %24 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 5
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %26 = load i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %BZ2_bzCompressEnd.exit, label %28

; <label>:28                                      ; preds = %19
  %29 = bitcast i8* %26 to %struct.bz_stream**
  %30 = load %struct.bz_stream** %29, align 8
  %31 = icmp eq %struct.bz_stream* %30, %strm
  br i1 %31, label %.preheader.i, label %.us-lcssa9.us.i

.preheader.i:                                     ; preds = %28
  %32 = getelementptr inbounds i8* %26, i64 8
  %33 = bitcast i8* %32 to i32*
  %34 = getelementptr inbounds i8* %26, i64 16
  %35 = bitcast i8* %34 to i32*
  %.pre19.i = load i32* %33, align 4
  br label %36

; <label>:36                                      ; preds = %.backedge.us14.i, %.preheader.i
  %37 = phi i32 [ 4, %.backedge.us14.i ], [ %.pre19.i, %.preheader.i ]
  switch i32 %37, label %.us-lcssa9.us.i.loopexit34 [
    i32 1, label %.us-lcssa9.us.i.loopexit
    i32 2, label %.backedge.us14.i
    i32 3, label %.us-lcssa9.us.i.loopexit
    i32 4, label %.us-lcssa10.us.i
  ]

.backedge.us14.i:                                 ; preds = %36
  %38 = load i32* %22, align 8
  store i32 %38, i32* %35, align 4
  store i32 4, i32* %33, align 4
  br label %36

.us-lcssa10.us.i:                                 ; preds = %36
  %39 = load i32* %35, align 4
  %40 = load i32* %22, align 8
  %41 = icmp eq i32 %39, %40
  br i1 %41, label %42, label %.us-lcssa9.us.i

; <label>:42                                      ; preds = %.us-lcssa10.us.i
  %strm.idx.val.i = load i8** %25, align 8
  %43 = call fastcc zeroext i8 @handle_compress(i8* %strm.idx.val.i) #2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %.us-lcssa9.us.i, label %45

; <label>:45                                      ; preds = %42
  %46 = load i32* %35, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %105

; <label>:48                                      ; preds = %45
  %49 = getelementptr inbounds i8* %26, i64 92
  %50 = bitcast i8* %49 to i32*
  %51 = load i32* %50, align 4
  %52 = icmp ult i32 %51, 256
  br i1 %52, label %53, label %isempty_RL.exit4.i

; <label>:53                                      ; preds = %48
  %54 = getelementptr inbounds i8* %26, i64 96
  %55 = bitcast i8* %54 to i32*
  %56 = load i32* %55, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %105, label %isempty_RL.exit4.i

isempty_RL.exit4.i:                               ; preds = %53, %48
  %58 = getelementptr inbounds i8* %26, i64 120
  %59 = bitcast i8* %58 to i32*
  %60 = load i32* %59, align 4
  %61 = getelementptr inbounds i8* %26, i64 116
  %62 = bitcast i8* %61 to i32*
  %63 = load i32* %62, align 4
  %64 = icmp slt i32 %60, %63
  br i1 %64, label %105, label %65

; <label>:65                                      ; preds = %isempty_RL.exit4.i
  store i32 1, i32* %33, align 4
  %66 = load i32* %24, align 8
  %67 = load i32* %destLen, align 4
  %68 = sub i32 %67, %66
  store i32 %68, i32* %destLen, align 4
  %69 = load i8** %25, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %BZ2_bzCompressEnd.exit, label %71

; <label>:71                                      ; preds = %65
  %72 = bitcast i8* %69 to %struct.bz_stream**
  %73 = load %struct.bz_stream** %72, align 8
  %74 = icmp eq %struct.bz_stream* %73, %strm
  br i1 %74, label %75, label %BZ2_bzCompressEnd.exit

; <label>:75                                      ; preds = %71
  %76 = getelementptr inbounds i8* %69, i64 24
  %77 = bitcast i8* %76 to i32**
  %78 = load i32** %77, align 8
  %79 = icmp eq i32* %78, null
  br i1 %79, label %84, label %80

; <label>:80                                      ; preds = %75
  %81 = load void (i8*, i8*)** %14, align 8
  %82 = load i8** %15, align 8
  %83 = bitcast i32* %78 to i8*
  call void %81(i8* %82, i8* %83) #2
  br label %84

; <label>:84                                      ; preds = %80, %75
  %85 = getelementptr inbounds i8* %69, i64 32
  %86 = bitcast i8* %85 to i32**
  %87 = load i32** %86, align 8
  %88 = icmp eq i32* %87, null
  br i1 %88, label %93, label %89

; <label>:89                                      ; preds = %84
  %90 = load void (i8*, i8*)** %14, align 8
  %91 = load i8** %15, align 8
  %92 = bitcast i32* %87 to i8*
  call void %90(i8* %91, i8* %92) #2
  br label %93

; <label>:93                                      ; preds = %89, %84
  %94 = getelementptr inbounds i8* %69, i64 40
  %95 = bitcast i8* %94 to i32**
  %96 = load i32** %95, align 8
  %97 = icmp eq i32* %96, null
  br i1 %97, label %._crit_edge.i, label %98

; <label>:98                                      ; preds = %93
  %99 = load void (i8*, i8*)** %14, align 8
  %100 = load i8** %15, align 8
  %101 = bitcast i32* %96 to i8*
  call void %99(i8* %100, i8* %101) #2
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %98, %93
  %102 = load void (i8*, i8*)** %14, align 8
  %103 = load i8** %15, align 8
  %104 = load i8** %25, align 8
  call void %102(i8* %103, i8* %104) #2
  store i8* null, i8** %25, align 8
  br label %BZ2_bzCompressEnd.exit

; <label>:105                                     ; preds = %isempty_RL.exit4.i, %53, %45
  %106 = load i8** %25, align 8
  %107 = icmp eq i8* %106, null
  br i1 %107, label %BZ2_bzCompressEnd.exit, label %108

; <label>:108                                     ; preds = %105
  %109 = bitcast i8* %106 to %struct.bz_stream**
  %110 = load %struct.bz_stream** %109, align 8
  %111 = icmp eq %struct.bz_stream* %110, %strm
  br i1 %111, label %112, label %BZ2_bzCompressEnd.exit

; <label>:112                                     ; preds = %108
  %113 = getelementptr inbounds i8* %106, i64 24
  %114 = bitcast i8* %113 to i32**
  %115 = load i32** %114, align 8
  %116 = icmp eq i32* %115, null
  br i1 %116, label %121, label %117

; <label>:117                                     ; preds = %112
  %118 = load void (i8*, i8*)** %14, align 8
  %119 = load i8** %15, align 8
  %120 = bitcast i32* %115 to i8*
  call void %118(i8* %119, i8* %120) #2
  br label %121

; <label>:121                                     ; preds = %117, %112
  %122 = getelementptr inbounds i8* %106, i64 32
  %123 = bitcast i8* %122 to i32**
  %124 = load i32** %123, align 8
  %125 = icmp eq i32* %124, null
  br i1 %125, label %130, label %126

; <label>:126                                     ; preds = %121
  %127 = load void (i8*, i8*)** %14, align 8
  %128 = load i8** %15, align 8
  %129 = bitcast i32* %124 to i8*
  call void %127(i8* %128, i8* %129) #2
  br label %130

; <label>:130                                     ; preds = %126, %121
  %131 = getelementptr inbounds i8* %106, i64 40
  %132 = bitcast i8* %131 to i32**
  %133 = load i32** %132, align 8
  %134 = icmp eq i32* %133, null
  br i1 %134, label %._crit_edge.i20, label %135

; <label>:135                                     ; preds = %130
  %136 = load void (i8*, i8*)** %14, align 8
  %137 = load i8** %15, align 8
  %138 = bitcast i32* %133 to i8*
  call void %136(i8* %137, i8* %138) #2
  br label %._crit_edge.i20

._crit_edge.i20:                                  ; preds = %135, %130
  %139 = load void (i8*, i8*)** %14, align 8
  %140 = load i8** %15, align 8
  %141 = load i8** %25, align 8
  call void %139(i8* %140, i8* %141) #2
  store i8* null, i8** %25, align 8
  br label %BZ2_bzCompressEnd.exit

.us-lcssa9.us.i.loopexit:                         ; preds = %36, %36
  br label %.us-lcssa9.us.i

.us-lcssa9.us.i.loopexit34:                       ; preds = %36
  br label %.us-lcssa9.us.i

.us-lcssa9.us.i:                                  ; preds = %.us-lcssa9.us.i.loopexit34, %.us-lcssa9.us.i.loopexit, %42, %.us-lcssa10.us.i, %28
  %.0.i.ph.ph = phi i32 [ -2, %28 ], [ -1, %.us-lcssa10.us.i ], [ -1, %42 ], [ -1, %.us-lcssa9.us.i.loopexit ], [ 0, %.us-lcssa9.us.i.loopexit34 ]
  %.pr = load i8** %25, align 8
  %142 = icmp eq i8* %.pr, null
  br i1 %142, label %BZ2_bzCompressEnd.exit, label %143

; <label>:143                                     ; preds = %.us-lcssa9.us.i
  %144 = bitcast i8* %.pr to %struct.bz_stream**
  %145 = load %struct.bz_stream** %144, align 8
  %146 = icmp eq %struct.bz_stream* %145, %strm
  br i1 %146, label %147, label %BZ2_bzCompressEnd.exit

; <label>:147                                     ; preds = %143
  %148 = getelementptr inbounds i8* %.pr, i64 24
  %149 = bitcast i8* %148 to i32**
  %150 = load i32** %149, align 8
  %151 = icmp eq i32* %150, null
  br i1 %151, label %156, label %152

; <label>:152                                     ; preds = %147
  %153 = load void (i8*, i8*)** %14, align 8
  %154 = load i8** %15, align 8
  %155 = bitcast i32* %150 to i8*
  call void %153(i8* %154, i8* %155) #2
  br label %156

; <label>:156                                     ; preds = %152, %147
  %157 = getelementptr inbounds i8* %.pr, i64 32
  %158 = bitcast i8* %157 to i32**
  %159 = load i32** %158, align 8
  %160 = icmp eq i32* %159, null
  br i1 %160, label %165, label %161

; <label>:161                                     ; preds = %156
  %162 = load void (i8*, i8*)** %14, align 8
  %163 = load i8** %15, align 8
  %164 = bitcast i32* %159 to i8*
  call void %162(i8* %163, i8* %164) #2
  br label %165

; <label>:165                                     ; preds = %161, %156
  %166 = getelementptr inbounds i8* %.pr, i64 40
  %167 = bitcast i8* %166 to i32**
  %168 = load i32** %167, align 8
  %169 = icmp eq i32* %168, null
  br i1 %169, label %._crit_edge.i26, label %170

; <label>:170                                     ; preds = %165
  %171 = load void (i8*, i8*)** %14, align 8
  %172 = load i8** %15, align 8
  %173 = bitcast i32* %168 to i8*
  call void %171(i8* %172, i8* %173) #2
  br label %._crit_edge.i26

._crit_edge.i26:                                  ; preds = %170, %165
  %174 = load void (i8*, i8*)** %14, align 8
  %175 = load i8** %15, align 8
  %176 = load i8** %25, align 8
  call void %174(i8* %175, i8* %176) #2
  store i8* null, i8** %25, align 8
  br label %BZ2_bzCompressEnd.exit

BZ2_bzCompressEnd.exit:                           ; preds = %._crit_edge.i26, %143, %.us-lcssa9.us.i, %._crit_edge.i20, %108, %105, %._crit_edge.i, %71, %65, %19, %11, %0
  %.016 = phi i32 [ -2, %0 ], [ %17, %11 ], [ 0, %65 ], [ 0, %71 ], [ 0, %._crit_edge.i ], [ -8, %105 ], [ -8, %108 ], [ -8, %._crit_edge.i20 ], [ %.0.i.ph.ph, %.us-lcssa9.us.i ], [ %.0.i.ph.ph, %143 ], [ %.0.i.ph.ph, %._crit_edge.i26 ], [ -2, %19 ]
  call void @llvm.lifetime.end(i64 80, i8* %1) #2
  ret i32 %.016
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzBuffToBuffDecompress(i8* %dest, i32* %destLen, i8* %source, i32 %sourceLen, i32 %small, i32 %verbosity) #0 {
  %strm = alloca %struct.bz_stream, align 8
  %1 = bitcast %struct.bz_stream* %strm to i8*
  call void @llvm.lifetime.start(i64 80, i8* %1) #2
  %2 = icmp eq i8* %dest, null
  %3 = icmp eq i32* %destLen, null
  %or.cond = or i1 %2, %3
  %4 = icmp eq i8* %source, null
  %or.cond3 = or i1 %or.cond, %4
  br i1 %or.cond3, label %BZ2_bzDecompressEnd.exit, label %5

; <label>:5                                       ; preds = %0
  %small.cmp = icmp ugt i32 %small, 1
  %6 = icmp slt i32 %verbosity, 0
  %or.cond7 = or i1 %small.cmp, %6
  %7 = icmp sgt i32 %verbosity, 4
  %or.cond9 = or i1 %or.cond7, %7
  br i1 %or.cond9, label %BZ2_bzDecompressEnd.exit, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 9
  %10 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 10
  %11 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 11
  %12 = icmp ugt i32 %verbosity, 4
  %13 = bitcast i8* (i8*, i32, i32)** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 24, i32 8, i1 false)
  br i1 %12, label %BZ2_bzDecompressEnd.exit, label %14

; <label>:14                                      ; preds = %8
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %9, align 8
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %10, align 8
  %15 = tail call noalias i8* @malloc(i64 64144) #2
  %16 = icmp eq i8* %15, null
  br i1 %16, label %BZ2_bzDecompressEnd.exit, label %17

; <label>:17                                      ; preds = %14
  %18 = bitcast i8* %15 to %struct.bz_stream**
  store %struct.bz_stream* %strm, %struct.bz_stream** %18, align 8
  %19 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  store i8* %15, i8** %19, align 8
  %20 = getelementptr inbounds i8* %15, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 10, i32* %21, align 4
  %22 = getelementptr inbounds i8* %15, i64 36
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds i8* %15, i64 32
  %25 = bitcast i8* %24 to i32*
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds i8* %15, i64 3188
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 2
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 3
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 6
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 7
  store i32 0, i32* %31, align 8
  %32 = trunc i32 %small to i8
  %33 = getelementptr inbounds i8* %15, i64 44
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds i8* %15, i64 3152
  %35 = getelementptr inbounds i8* %15, i64 48
  %36 = bitcast i8* %35 to i32*
  store i32 0, i32* %36, align 4
  %37 = getelementptr inbounds i8* %15, i64 52
  %38 = bitcast i8* %37 to i32*
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 24, i32 8, i1 false) #2
  store i32 %verbosity, i32* %38, align 4
  %39 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 0
  store i8* %source, i8** %39, align 8
  %40 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 4
  store i8* %dest, i8** %40, align 8
  %41 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 1
  store i32 %sourceLen, i32* %41, align 8
  %42 = load i32* %destLen, align 4
  %43 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 5
  store i32 %42, i32* %43, align 8
  %44 = call i32 @BZ2_bzDecompress(%struct.bz_stream* %strm)
  switch i32 %44, label %122 [
    i32 0, label %84
    i32 4, label %45
  ]

; <label>:45                                      ; preds = %17
  %46 = load i32* %43, align 8
  %47 = load i32* %destLen, align 4
  %48 = sub i32 %47, %46
  store i32 %48, i32* %destLen, align 4
  %49 = load i8** %19, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %BZ2_bzDecompressEnd.exit, label %51

; <label>:51                                      ; preds = %45
  %52 = bitcast i8* %49 to %struct.bz_stream**
  %53 = load %struct.bz_stream** %52, align 8
  %54 = icmp eq %struct.bz_stream* %53, %strm
  br i1 %54, label %55, label %BZ2_bzDecompressEnd.exit

; <label>:55                                      ; preds = %51
  %56 = getelementptr inbounds i8* %49, i64 3152
  %57 = bitcast i8* %56 to i32**
  %58 = load i32** %57, align 8
  %59 = icmp eq i32* %58, null
  br i1 %59, label %64, label %60

; <label>:60                                      ; preds = %55
  %61 = load void (i8*, i8*)** %10, align 8
  %62 = load i8** %11, align 8
  %63 = bitcast i32* %58 to i8*
  call void %61(i8* %62, i8* %63) #2
  br label %64

; <label>:64                                      ; preds = %60, %55
  %65 = getelementptr inbounds i8* %49, i64 3160
  %66 = bitcast i8* %65 to i16**
  %67 = load i16** %66, align 8
  %68 = icmp eq i16* %67, null
  br i1 %68, label %73, label %69

; <label>:69                                      ; preds = %64
  %70 = load void (i8*, i8*)** %10, align 8
  %71 = load i8** %11, align 8
  %72 = bitcast i16* %67 to i8*
  call void %70(i8* %71, i8* %72) #2
  br label %73

; <label>:73                                      ; preds = %69, %64
  %74 = getelementptr inbounds i8* %49, i64 3168
  %75 = bitcast i8* %74 to i8**
  %76 = load i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %._crit_edge.i, label %78

; <label>:78                                      ; preds = %73
  %79 = load void (i8*, i8*)** %10, align 8
  %80 = load i8** %11, align 8
  call void %79(i8* %80, i8* %76) #2
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %78, %73
  %81 = load void (i8*, i8*)** %10, align 8
  %82 = load i8** %11, align 8
  %83 = load i8** %19, align 8
  call void %81(i8* %82, i8* %83) #2
  store i8* null, i8** %19, align 8
  br label %BZ2_bzDecompressEnd.exit

; <label>:84                                      ; preds = %17
  %85 = load i32* %43, align 8
  %86 = icmp eq i32 %85, 0
  %87 = load i8** %19, align 8
  %88 = icmp eq i8* %87, null
  br i1 %88, label %BZ2_bzDecompressEnd.exit16, label %89

; <label>:89                                      ; preds = %84
  %90 = bitcast i8* %87 to %struct.bz_stream**
  %91 = load %struct.bz_stream** %90, align 8
  %92 = icmp eq %struct.bz_stream* %91, %strm
  br i1 %92, label %93, label %BZ2_bzDecompressEnd.exit16

; <label>:93                                      ; preds = %89
  %94 = getelementptr inbounds i8* %87, i64 3152
  %95 = bitcast i8* %94 to i32**
  %96 = load i32** %95, align 8
  %97 = icmp eq i32* %96, null
  br i1 %97, label %102, label %98

; <label>:98                                      ; preds = %93
  %99 = load void (i8*, i8*)** %10, align 8
  %100 = load i8** %11, align 8
  %101 = bitcast i32* %96 to i8*
  call void %99(i8* %100, i8* %101) #2
  br label %102

; <label>:102                                     ; preds = %98, %93
  %103 = getelementptr inbounds i8* %87, i64 3160
  %104 = bitcast i8* %103 to i16**
  %105 = load i16** %104, align 8
  %106 = icmp eq i16* %105, null
  br i1 %106, label %111, label %107

; <label>:107                                     ; preds = %102
  %108 = load void (i8*, i8*)** %10, align 8
  %109 = load i8** %11, align 8
  %110 = bitcast i16* %105 to i8*
  call void %108(i8* %109, i8* %110) #2
  br label %111

; <label>:111                                     ; preds = %107, %102
  %112 = getelementptr inbounds i8* %87, i64 3168
  %113 = bitcast i8* %112 to i8**
  %114 = load i8** %113, align 8
  %115 = icmp eq i8* %114, null
  br i1 %115, label %._crit_edge.i13, label %116

; <label>:116                                     ; preds = %111
  %117 = load void (i8*, i8*)** %10, align 8
  %118 = load i8** %11, align 8
  call void %117(i8* %118, i8* %114) #2
  br label %._crit_edge.i13

._crit_edge.i13:                                  ; preds = %116, %111
  %119 = load void (i8*, i8*)** %10, align 8
  %120 = load i8** %11, align 8
  %121 = load i8** %19, align 8
  call void %119(i8* %120, i8* %121) #2
  store i8* null, i8** %19, align 8
  br label %BZ2_bzDecompressEnd.exit16

BZ2_bzDecompressEnd.exit16:                       ; preds = %._crit_edge.i13, %89, %84
  %. = select i1 %86, i32 -8, i32 -7
  br label %BZ2_bzDecompressEnd.exit

; <label>:122                                     ; preds = %17
  %123 = load i8** %19, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %BZ2_bzDecompressEnd.exit, label %125

; <label>:125                                     ; preds = %122
  %126 = bitcast i8* %123 to %struct.bz_stream**
  %127 = load %struct.bz_stream** %126, align 8
  %128 = icmp eq %struct.bz_stream* %127, %strm
  br i1 %128, label %129, label %BZ2_bzDecompressEnd.exit

; <label>:129                                     ; preds = %125
  %130 = getelementptr inbounds i8* %123, i64 3152
  %131 = bitcast i8* %130 to i32**
  %132 = load i32** %131, align 8
  %133 = icmp eq i32* %132, null
  br i1 %133, label %138, label %134

; <label>:134                                     ; preds = %129
  %135 = load void (i8*, i8*)** %10, align 8
  %136 = load i8** %11, align 8
  %137 = bitcast i32* %132 to i8*
  call void %135(i8* %136, i8* %137) #2
  br label %138

; <label>:138                                     ; preds = %134, %129
  %139 = getelementptr inbounds i8* %123, i64 3160
  %140 = bitcast i8* %139 to i16**
  %141 = load i16** %140, align 8
  %142 = icmp eq i16* %141, null
  br i1 %142, label %147, label %143

; <label>:143                                     ; preds = %138
  %144 = load void (i8*, i8*)** %10, align 8
  %145 = load i8** %11, align 8
  %146 = bitcast i16* %141 to i8*
  call void %144(i8* %145, i8* %146) #2
  br label %147

; <label>:147                                     ; preds = %143, %138
  %148 = getelementptr inbounds i8* %123, i64 3168
  %149 = bitcast i8* %148 to i8**
  %150 = load i8** %149, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %._crit_edge.i19, label %152

; <label>:152                                     ; preds = %147
  %153 = load void (i8*, i8*)** %10, align 8
  %154 = load i8** %11, align 8
  call void %153(i8* %154, i8* %150) #2
  br label %._crit_edge.i19

._crit_edge.i19:                                  ; preds = %152, %147
  %155 = load void (i8*, i8*)** %10, align 8
  %156 = load i8** %11, align 8
  %157 = load i8** %19, align 8
  call void %155(i8* %156, i8* %157) #2
  store i8* null, i8** %19, align 8
  br label %BZ2_bzDecompressEnd.exit

BZ2_bzDecompressEnd.exit:                         ; preds = %._crit_edge.i19, %125, %122, %BZ2_bzDecompressEnd.exit16, %._crit_edge.i, %51, %45, %14, %8, %5, %0
  %.0 = phi i32 [ -2, %5 ], [ -2, %0 ], [ %., %BZ2_bzDecompressEnd.exit16 ], [ 0, %45 ], [ 0, %51 ], [ 0, %._crit_edge.i ], [ %44, %122 ], [ %44, %125 ], [ %44, %._crit_edge.i19 ], [ -3, %14 ], [ -2, %8 ]
  call void @llvm.lifetime.end(i64 80, i8* %1) #2
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzopen(i8* readonly %path, i8* readonly %mode) #0 {
  %1 = tail call fastcc i8* @bzopen_or_bzdopen(i8* %path, i8* %mode, i32 0)
  ret i8* %1
}

; Function Attrs: nounwind readonly uwtable
define noalias i8* @BZ2_bzdopen(i32 %fd, i8* readonly %mode) #8 {
  %mode2.i = alloca [10 x i8], align 1
  %1 = getelementptr inbounds [10 x i8]* %mode2.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 10, i8* %1)
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 10, i32 1, i1 false) #2
  %2 = icmp eq i8* %mode, null
  br i1 %2, label %bzopen_or_bzdopen.exit, label %.preheader.i

.preheader.i:                                     ; preds = %0
  %3 = load i8* %mode, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %._crit_edge.i, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %.preheader.i
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %10, %.lr.ph.i.preheader
  %5 = phi i8 [ %12, %10 ], [ %3, %.lr.ph.i.preheader ]
  %.087.i = phi i8* [ %11, %10 ], [ %mode, %.lr.ph.i.preheader ]
  %writing.05.i = phi i32 [ %writing.1.i, %10 ], [ 0, %.lr.ph.i.preheader ]
  %6 = sext i8 %5 to i32
  switch i32 %6, label %9 [
    i32 114, label %10
    i32 119, label %7
    i32 115, label %8
  ]

; <label>:7                                       ; preds = %.lr.ph.i
  br label %10

; <label>:8                                       ; preds = %.lr.ph.i
  br label %10

; <label>:9                                       ; preds = %.lr.ph.i
  br label %10

; <label>:10                                      ; preds = %9, %8, %7, %.lr.ph.i
  %writing.1.i = phi i32 [ %writing.05.i, %8 ], [ 1, %7 ], [ 0, %.lr.ph.i ], [ %writing.05.i, %9 ]
  %11 = getelementptr inbounds i8* %.087.i, i64 1
  %12 = load i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %._crit_edge.i.loopexit, label %.lr.ph.i

._crit_edge.i.loopexit:                           ; preds = %10
  %writing.1.i.lcssa = phi i32 [ %writing.1.i, %10 ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %.preheader.i
  %writing.0.lcssa.i = phi i32 [ 0, %.preheader.i ], [ %writing.1.i.lcssa, %._crit_edge.i.loopexit ]
  %14 = icmp ne i32 %writing.0.lcssa.i, 0
  %strlen.i = call i64 @strlen(i8* %1) #2
  %endptr.i = getelementptr [10 x i8]* %mode2.i, i64 0, i64 %strlen.i
  %15 = bitcast i8* %endptr.i to i16*
  %16 = select i1 %14, i16 119, i16 114
  store i16 %16, i16* %15, align 1
  %strlen1.i = call i64 @strlen(i8* %1) #2
  %endptr2.i = getelementptr [10 x i8]* %mode2.i, i64 0, i64 %strlen1.i
  %17 = bitcast i8* %endptr2.i to i16*
  store i16 98, i16* %17, align 1
  br label %bzopen_or_bzdopen.exit

bzopen_or_bzdopen.exit:                           ; preds = %._crit_edge.i, %0
  call void @llvm.lifetime.end(i64 10, i8* %1)
  ret i8* null
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzread(i8* %b, i8* %buf, i32 %len) #0 {
  %bzerr = alloca i32, align 4
  %1 = getelementptr inbounds i8* %b, i64 5096
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = call i32 @BZ2_bzRead(i32* %bzerr, i8* %b, i8* %buf, i32 %len)
  %7 = load i32* %bzerr, align 4
  %8 = and i32 %7, -5
  %9 = icmp eq i32 %8, 0
  %. = select i1 %9, i32 %6, i32 -1
  br label %10

; <label>:10                                      ; preds = %5, %0
  %.0 = phi i32 [ 0, %0 ], [ %., %5 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzwrite(i8* %b, i8* %buf, i32 %len) #0 {
  %bzerr = alloca i32, align 4
  call void @BZ2_bzWrite(i32* %bzerr, i8* %b, i8* %buf, i32 %len)
  %1 = load i32* %bzerr, align 4
  %2 = icmp eq i32 %1, 0
  %len. = select i1 %2, i32 %len, i32 -1
  ret i32 %len.
}

; Function Attrs: nounwind readnone uwtable
define i32 @BZ2_bzflush(i8* nocapture readnone %b) #6 {
  ret i32 0
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzclose(i8* %b) #0 {
  %bzerr = alloca i32, align 4
  %1 = icmp eq i8* %b, null
  br i1 %1, label %BZ2_bzWriteClose64.exit, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds i8* %b, i64 5008
  %4 = load i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %62, label %6

; <label>:6                                       ; preds = %2
  call void @BZ2_bzWriteClose64(i32* %bzerr, i8* %b, i32 0, i32* null, i32* null, i32* null, i32* null) #2
  %7 = load i32* %bzerr, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %BZ2_bzWriteClose64.exit, label %9

; <label>:9                                       ; preds = %6
  %10 = load i8* %3, align 1
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds i8* %b, i64 5096
  %13 = bitcast i8* %12 to i32*
  br i1 %11, label %14, label %15

; <label>:14                                      ; preds = %9
  store i32 -1, i32* %13, align 4
  br label %BZ2_bzWriteClose64.exit

; <label>:15                                      ; preds = %9
  store i32 0, i32* %13, align 4
  %16 = getelementptr inbounds i8* %b, i64 5064
  %17 = bitcast i8* %16 to i8**
  %18 = load i8** %17, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %BZ2_bzCompressEnd.exit.i, label %20

; <label>:20                                      ; preds = %15
  %21 = getelementptr inbounds i8* %b, i64 5016
  %22 = bitcast i8* %21 to %struct.bz_stream*
  %23 = bitcast i8* %18 to %struct.bz_stream**
  %24 = load %struct.bz_stream** %23, align 8
  %25 = icmp eq %struct.bz_stream* %24, %22
  br i1 %25, label %26, label %BZ2_bzCompressEnd.exit.i

; <label>:26                                      ; preds = %20
  %27 = getelementptr inbounds i8* %18, i64 24
  %28 = bitcast i8* %27 to i32**
  %29 = load i32** %28, align 8
  %30 = icmp eq i32* %29, null
  %.pre.i.pre.i.pre = getelementptr inbounds i8* %b, i64 5080
  %.pre.i.pre = bitcast i8* %.pre.i.pre.i.pre to void (i8*, i8*)**
  br i1 %30, label %._crit_edge, label %31

; <label>:31                                      ; preds = %26
  %32 = load void (i8*, i8*)** %.pre.i.pre, align 8
  %33 = getelementptr inbounds i8* %b, i64 5088
  %34 = bitcast i8* %33 to i8**
  %35 = load i8** %34, align 8
  %36 = bitcast i32* %29 to i8*
  call void %32(i8* %35, i8* %36) #2
  br label %._crit_edge

._crit_edge:                                      ; preds = %31, %26
  %37 = getelementptr inbounds i8* %18, i64 32
  %38 = bitcast i8* %37 to i32**
  %39 = load i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %._crit_edge16.i, label %41

; <label>:41                                      ; preds = %._crit_edge
  %42 = load void (i8*, i8*)** %.pre.i.pre, align 8
  %43 = getelementptr inbounds i8* %b, i64 5088
  %44 = bitcast i8* %43 to i8**
  %45 = load i8** %44, align 8
  %46 = bitcast i32* %39 to i8*
  call void %42(i8* %45, i8* %46) #2
  br label %._crit_edge16.i

._crit_edge16.i:                                  ; preds = %41, %._crit_edge
  %47 = getelementptr inbounds i8* %18, i64 40
  %48 = bitcast i8* %47 to i32**
  %49 = load i32** %48, align 8
  %50 = icmp eq i32* %49, null
  br i1 %50, label %._crit_edge.i.i, label %52

._crit_edge.i.i:                                  ; preds = %._crit_edge16.i
  %.pre1.i.i = getelementptr inbounds i8* %b, i64 5088
  %51 = bitcast i8* %.pre1.i.i to i8**
  br label %58

; <label>:52                                      ; preds = %._crit_edge16.i
  %53 = load void (i8*, i8*)** %.pre.i.pre, align 8
  %54 = getelementptr inbounds i8* %b, i64 5088
  %55 = bitcast i8* %54 to i8**
  %56 = load i8** %55, align 8
  %57 = bitcast i32* %49 to i8*
  call void %53(i8* %56, i8* %57) #2
  br label %58

; <label>:58                                      ; preds = %52, %._crit_edge.i.i
  %.pre-phi2.i.i = phi i8** [ %51, %._crit_edge.i.i ], [ %55, %52 ]
  %59 = load void (i8*, i8*)** %.pre.i.pre, align 8
  %60 = load i8** %.pre-phi2.i.i, align 8
  %61 = load i8** %17, align 8
  call void %59(i8* %60, i8* %61) #2
  br label %BZ2_bzCompressEnd.exit.i

BZ2_bzCompressEnd.exit.i:                         ; preds = %58, %20, %15
  call void @free(i8* %b) #2
  br label %BZ2_bzWriteClose64.exit

; <label>:62                                      ; preds = %2
  store i32 0, i32* %bzerr, align 4
  %63 = getelementptr inbounds i8* %b, i64 5096
  %64 = bitcast i8* %63 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds i8* %b, i64 5100
  %66 = load i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %BZ2_bzDecompressEnd.exit.i, label %68

; <label>:68                                      ; preds = %62
  %69 = getelementptr inbounds i8* %b, i64 5064
  %70 = bitcast i8* %69 to i8**
  %71 = load i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %BZ2_bzDecompressEnd.exit.i, label %73

; <label>:73                                      ; preds = %68
  %74 = getelementptr inbounds i8* %b, i64 5016
  %75 = bitcast i8* %74 to %struct.bz_stream*
  %76 = bitcast i8* %71 to %struct.bz_stream**
  %77 = load %struct.bz_stream** %76, align 8
  %78 = icmp eq %struct.bz_stream* %77, %75
  br i1 %78, label %79, label %BZ2_bzDecompressEnd.exit.i

; <label>:79                                      ; preds = %73
  %80 = getelementptr inbounds i8* %71, i64 3152
  %81 = bitcast i8* %80 to i32**
  %82 = load i32** %81, align 8
  %83 = icmp eq i32* %82, null
  %.pre.i.pre.i2.pre = getelementptr inbounds i8* %b, i64 5080
  %.pre.i3.pre = bitcast i8* %.pre.i.pre.i2.pre to void (i8*, i8*)**
  br i1 %83, label %._crit_edge7, label %84

; <label>:84                                      ; preds = %79
  %85 = load void (i8*, i8*)** %.pre.i3.pre, align 8
  %86 = getelementptr inbounds i8* %b, i64 5088
  %87 = bitcast i8* %86 to i8**
  %88 = load i8** %87, align 8
  %89 = bitcast i32* %82 to i8*
  tail call void %85(i8* %88, i8* %89) #2
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %84, %79
  %90 = getelementptr inbounds i8* %71, i64 3160
  %91 = bitcast i8* %90 to i16**
  %92 = load i16** %91, align 8
  %93 = icmp eq i16* %92, null
  br i1 %93, label %._crit_edge.i, label %94

; <label>:94                                      ; preds = %._crit_edge7
  %95 = load void (i8*, i8*)** %.pre.i3.pre, align 8
  %96 = getelementptr inbounds i8* %b, i64 5088
  %97 = bitcast i8* %96 to i8**
  %98 = load i8** %97, align 8
  %99 = bitcast i16* %92 to i8*
  tail call void %95(i8* %98, i8* %99) #2
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %94, %._crit_edge7
  %100 = getelementptr inbounds i8* %71, i64 3168
  %101 = bitcast i8* %100 to i8**
  %102 = load i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %._crit_edge.i.i5, label %105

._crit_edge.i.i5:                                 ; preds = %._crit_edge.i
  %.pre1.i.i4 = getelementptr inbounds i8* %b, i64 5088
  %104 = bitcast i8* %.pre1.i.i4 to i8**
  br label %110

; <label>:105                                     ; preds = %._crit_edge.i
  %106 = load void (i8*, i8*)** %.pre.i3.pre, align 8
  %107 = getelementptr inbounds i8* %b, i64 5088
  %108 = bitcast i8* %107 to i8**
  %109 = load i8** %108, align 8
  tail call void %106(i8* %109, i8* %102) #2
  br label %110

; <label>:110                                     ; preds = %105, %._crit_edge.i.i5
  %.pre-phi2.i.i6 = phi i8** [ %104, %._crit_edge.i.i5 ], [ %108, %105 ]
  %111 = load void (i8*, i8*)** %.pre.i3.pre, align 8
  %112 = load i8** %.pre-phi2.i.i6, align 8
  %113 = load i8** %70, align 8
  tail call void %111(i8* %112, i8* %113) #2
  br label %BZ2_bzDecompressEnd.exit.i

BZ2_bzDecompressEnd.exit.i:                       ; preds = %110, %73, %68, %62
  tail call void @free(i8* %b) #2
  br label %BZ2_bzWriteClose64.exit

BZ2_bzWriteClose64.exit:                          ; preds = %BZ2_bzDecompressEnd.exit.i, %BZ2_bzCompressEnd.exit.i, %14, %6, %0
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzerror(i8* nocapture readonly %b, i32* nocapture %errnum) #0 {
  %1 = getelementptr inbounds i8* %b, i64 5096
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  %. = select i1 %4, i32 0, i32 %3
  store i32 %., i32* %errnum, align 4
  %5 = sub i32 0, %.
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [16 x i8*]* @bzerrorstrings, i64 0, i64 %6
  %8 = load i8** %7, align 8
  ret i8* %8
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #5

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #9

; Function Attrs: nounwind uwtable
define internal noalias i8* @default_bzalloc(i8* nocapture readnone %opaque, i32 %items, i32 %size) #0 {
  %1 = mul nsw i32 %size, %items
  %2 = sext i32 %1 to i64
  %3 = tail call noalias i8* @malloc(i64 %2) #2
  ret i8* %3
}

; Function Attrs: nounwind uwtable
define internal void @default_bzfree(i8* nocapture readnone %opaque, i8* %addr) #0 {
  %1 = icmp eq i8* %addr, null
  br i1 %1, label %3, label %2

; <label>:2                                       ; preds = %0
  tail call void @free(i8* %addr) #2
  br label %3

; <label>:3                                       ; preds = %2, %0
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @handle_compress(i8* %strm.0.8.val) #0 {
  %1 = bitcast i8* %strm.0.8.val to %struct.EState*
  %2 = getelementptr inbounds i8* %strm.0.8.val, i64 12
  %3 = bitcast i8* %2 to i32*
  %4 = getelementptr inbounds i8* %strm.0.8.val, i64 120
  %5 = bitcast i8* %4 to i32*
  %6 = bitcast i8* %strm.0.8.val to %struct.bz_stream**
  %7 = getelementptr inbounds i8* %strm.0.8.val, i64 116
  %8 = bitcast i8* %7 to i32*
  %9 = getelementptr inbounds i8* %strm.0.8.val, i64 8
  %10 = bitcast i8* %9 to i32*
  %11 = getelementptr inbounds i8* %strm.0.8.val, i64 16
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds i8* %strm.0.8.val, i64 92
  %14 = bitcast i8* %13 to i32*
  %15 = getelementptr inbounds i8* %strm.0.8.val, i64 96
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds i8* %strm.0.8.val, i64 108
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds i8* %strm.0.8.val, i64 648
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr i8* %strm.0.8.val, i64 128
  %22 = getelementptr inbounds i8* %strm.0.8.val, i64 660
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds i8* %strm.0.8.val, i64 80
  %25 = bitcast i8* %24 to i8**
  %26 = getelementptr inbounds i8* %strm.0.8.val, i64 112
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds i8* %strm.0.8.val, i64 64
  %29 = bitcast i8* %28 to i8**
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %progress_out.0.ph = phi i8 [ 0, %0 ], [ %progress_out.11, %.outer.backedge ]
  %progress_in.0.ph = phi i8 [ 0, %0 ], [ %246, %.outer.backedge ]
  %.pre = load i32* %3, align 4
  br label %30

; <label>:30                                      ; preds = %30, %.outer
  switch i32 %.pre, label %30 [
    i32 1, label %31
    i32 2, label %..thread_crit_edge.loopexit
  ]

; <label>:31                                      ; preds = %30
  %32 = load %struct.bz_stream** %6, align 8
  %33 = getelementptr inbounds %struct.bz_stream* %32, i64 0, i32 5
  %34 = load i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %copy_output_until_stop.exit, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %31
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.backedge.i, %.lr.ph.i.preheader
  %36 = phi %struct.bz_stream* [ %69, %.backedge.i ], [ %32, %.lr.ph.i.preheader ]
  %progress_out.01.i = phi i8 [ 1, %.backedge.i ], [ 0, %.lr.ph.i.preheader ]
  %37 = load i32* %5, align 4
  %38 = load i32* %8, align 4
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %copy_output_until_stop.exit.loopexit

; <label>:40                                      ; preds = %.lr.ph.i
  %41 = sext i32 %37 to i64
  %42 = load i8** %25, align 8
  %43 = getelementptr inbounds i8* %42, i64 %41
  %44 = load i8* %43, align 1
  %45 = getelementptr inbounds %struct.bz_stream* %36, i64 0, i32 4
  %46 = load i8** %45, align 8
  store i8 %44, i8* %46, align 1
  %47 = load i32* %5, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %5, align 4
  %49 = load %struct.bz_stream** %6, align 8
  %50 = getelementptr inbounds %struct.bz_stream* %49, i64 0, i32 5
  %51 = load i32* %50, align 4
  %52 = add i32 %51, -1
  store i32 %52, i32* %50, align 4
  %53 = load %struct.bz_stream** %6, align 8
  %54 = getelementptr inbounds %struct.bz_stream* %53, i64 0, i32 4
  %55 = load i8** %54, align 8
  %56 = getelementptr inbounds i8* %55, i64 1
  store i8* %56, i8** %54, align 8
  %57 = load %struct.bz_stream** %6, align 8
  %58 = getelementptr inbounds %struct.bz_stream* %57, i64 0, i32 6
  %59 = load i32* %58, align 4
  %60 = add i32 %59, 1
  store i32 %60, i32* %58, align 4
  %61 = load %struct.bz_stream** %6, align 8
  %62 = getelementptr inbounds %struct.bz_stream* %61, i64 0, i32 6
  %63 = load i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %.backedge.i

; <label>:65                                      ; preds = %40
  %66 = getelementptr inbounds %struct.bz_stream* %61, i64 0, i32 7
  %67 = load i32* %66, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %66, align 4
  %.pre.i = load %struct.bz_stream** %6, align 8
  br label %.backedge.i

.backedge.i:                                      ; preds = %65, %40
  %69 = phi %struct.bz_stream* [ %.pre.i, %65 ], [ %61, %40 ]
  %70 = getelementptr inbounds %struct.bz_stream* %69, i64 0, i32 5
  %71 = load i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %copy_output_until_stop.exit.loopexit, label %.lr.ph.i

copy_output_until_stop.exit.loopexit:             ; preds = %.backedge.i, %.lr.ph.i
  %progress_out.0.lcssa.i.ph = phi i8 [ 1, %.backedge.i ], [ %progress_out.01.i, %.lr.ph.i ]
  br label %copy_output_until_stop.exit

copy_output_until_stop.exit:                      ; preds = %copy_output_until_stop.exit.loopexit, %31
  %progress_out.0.lcssa.i = phi i8 [ 0, %31 ], [ %progress_out.0.lcssa.i.ph, %copy_output_until_stop.exit.loopexit ]
  %73 = or i8 %progress_out.0.lcssa.i, %progress_out.0.ph
  %74 = load i32* %5, align 4
  %75 = load i32* %8, align 4
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %isempty_RL.exit, label %77

; <label>:77                                      ; preds = %copy_output_until_stop.exit
  %78 = load i32* %10, align 4
  %79 = icmp eq i32 %78, 4
  br i1 %79, label %80, label %isempty_RL.exit.thread

; <label>:80                                      ; preds = %77
  %81 = load i32* %12, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %isempty_RL.exit.thread

; <label>:83                                      ; preds = %80
  %84 = load i32* %14, align 4
  %85 = icmp ult i32 %84, 256
  br i1 %85, label %86, label %isempty_RL.exit

; <label>:86                                      ; preds = %83
  %87 = load i32* %16, align 4
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %isempty_RL.exit.thread, label %isempty_RL.exit

isempty_RL.exit.thread:                           ; preds = %86, %80, %77
  store i32 0, i32* %18, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %5, align 4
  store i32 -1, i32* %20, align 4
  tail call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 256, i32 1, i1 false) #2
  %89 = load i32* %23, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %23, align 4
  store i32 2, i32* %3, align 4
  %91 = icmp eq i32 %78, 3
  br i1 %91, label %92, label %.thread

; <label>:92                                      ; preds = %isempty_RL.exit.thread
  %93 = load i32* %12, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %..thread_crit_edge

; <label>:95                                      ; preds = %92
  %96 = load i32* %14, align 4
  %97 = icmp ult i32 %96, 256
  br i1 %97, label %98, label %isempty_RL.exit

; <label>:98                                      ; preds = %95
  %99 = load i32* %16, align 4
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %..thread_crit_edge, label %isempty_RL.exit

..thread_crit_edge.loopexit:                      ; preds = %30
  br label %..thread_crit_edge

..thread_crit_edge:                               ; preds = %..thread_crit_edge.loopexit, %98, %92
  %progress_out.112 = phi i8 [ %73, %98 ], [ %73, %92 ], [ %progress_out.0.ph, %..thread_crit_edge.loopexit ]
  %.pre10 = load i32* %10, align 4
  br label %.thread

.thread:                                          ; preds = %..thread_crit_edge, %isempty_RL.exit.thread
  %101 = phi i32 [ %.pre10, %..thread_crit_edge ], [ %78, %isempty_RL.exit.thread ]
  %progress_out.11 = phi i8 [ %progress_out.112, %..thread_crit_edge ], [ %73, %isempty_RL.exit.thread ]
  %102 = icmp eq i32 %101, 2
  %103 = load i32* %18, align 4
  %104 = load i32* %27, align 4
  %105 = icmp slt i32 %103, %104
  br i1 %102, label %.preheader.i, label %.preheader5.i

.preheader5.i:                                    ; preds = %.thread
  br i1 %105, label %.lr.ph11.i.preheader, label %copy_input_until_stop.exit

.lr.ph11.i.preheader:                             ; preds = %.preheader5.i
  br label %.lr.ph11.i

.preheader.i:                                     ; preds = %.thread
  br i1 %105, label %.lr.ph.i1.preheader, label %copy_input_until_stop.exit

.lr.ph.i1.preheader:                              ; preds = %.preheader.i
  br label %.lr.ph.i1

.lr.ph.i1:                                        ; preds = %.backedge.i2, %.lr.ph.i1.preheader
  %106 = phi i32 [ %170, %.backedge.i2 ], [ %104, %.lr.ph.i1.preheader ]
  %107 = phi i32 [ %169, %.backedge.i2 ], [ %103, %.lr.ph.i1.preheader ]
  %progress_in.07.i = phi i8 [ 1, %.backedge.i2 ], [ 0, %.lr.ph.i1.preheader ]
  %108 = load %struct.bz_stream** %6, align 8
  %109 = getelementptr inbounds %struct.bz_stream* %108, i64 0, i32 1
  %110 = load i32* %109, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %copy_input_until_stop.exit.loopexit, label %112

; <label>:112                                     ; preds = %.lr.ph.i1
  %113 = getelementptr inbounds %struct.bz_stream* %108, i64 0, i32 0
  %114 = load i8** %113, align 8
  %115 = load i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = load i32* %14, align 4
  %118 = icmp eq i32 %116, %117
  %119 = load i32* %16, align 4
  br i1 %118, label %141, label %120

; <label>:120                                     ; preds = %112
  %121 = icmp eq i32 %119, 1
  br i1 %121, label %122, label %thread-pre-split.i

; <label>:122                                     ; preds = %120
  %123 = trunc i32 %117 to i8
  %124 = load i32* %20, align 4
  %125 = shl i32 %124, 8
  %126 = lshr i32 %124, 24
  %127 = and i32 %117, 255
  %128 = xor i32 %126, %127
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %129
  %131 = load i32* %130, align 4
  %132 = xor i32 %125, %131
  store i32 %132, i32* %20, align 4
  %133 = zext i32 %117 to i64
  %134 = getelementptr inbounds %struct.EState* %1, i64 0, i32 22, i64 %133
  store i8 1, i8* %134, align 1
  %135 = load i32* %18, align 4
  %136 = sext i32 %135 to i64
  %137 = load i8** %29, align 8
  %138 = getelementptr inbounds i8* %137, i64 %136
  store i8 %123, i8* %138, align 1
  %139 = load i32* %18, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %18, align 4
  store i32 %116, i32* %14, align 4
  br label %148

; <label>:141                                     ; preds = %112
  %142 = icmp eq i32 %119, 255
  br i1 %142, label %thread-pre-split.i, label %146

thread-pre-split.i:                               ; preds = %141, %120
  %143 = icmp ult i32 %117, 256
  br i1 %143, label %144, label %145

; <label>:144                                     ; preds = %thread-pre-split.i
  tail call fastcc void @add_pair_to_block(%struct.EState* %1) #2
  br label %145

; <label>:145                                     ; preds = %144, %thread-pre-split.i
  store i32 %116, i32* %14, align 4
  store i32 1, i32* %16, align 4
  br label %148

; <label>:146                                     ; preds = %141
  %147 = add nsw i32 %119, 1
  store i32 %147, i32* %16, align 4
  br label %148

; <label>:148                                     ; preds = %146, %145, %122
  %149 = load %struct.bz_stream** %6, align 8
  %150 = getelementptr inbounds %struct.bz_stream* %149, i64 0, i32 0
  %151 = load i8** %150, align 8
  %152 = getelementptr inbounds i8* %151, i64 1
  store i8* %152, i8** %150, align 8
  %153 = load %struct.bz_stream** %6, align 8
  %154 = getelementptr inbounds %struct.bz_stream* %153, i64 0, i32 1
  %155 = load i32* %154, align 4
  %156 = add i32 %155, -1
  store i32 %156, i32* %154, align 4
  %157 = load %struct.bz_stream** %6, align 8
  %158 = getelementptr inbounds %struct.bz_stream* %157, i64 0, i32 2
  %159 = load i32* %158, align 4
  %160 = add i32 %159, 1
  store i32 %160, i32* %158, align 4
  %161 = load %struct.bz_stream** %6, align 8
  %162 = getelementptr inbounds %struct.bz_stream* %161, i64 0, i32 2
  %163 = load i32* %162, align 4
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %.backedge.i2

; <label>:165                                     ; preds = %148
  %166 = getelementptr inbounds %struct.bz_stream* %161, i64 0, i32 3
  %167 = load i32* %166, align 4
  %168 = add i32 %167, 1
  store i32 %168, i32* %166, align 4
  br label %.backedge.i2

.backedge.i2:                                     ; preds = %165, %148
  %169 = load i32* %18, align 4
  %170 = load i32* %27, align 4
  %171 = icmp slt i32 %169, %170
  br i1 %171, label %.lr.ph.i1, label %copy_input_until_stop.exit.loopexit

.lr.ph11.i:                                       ; preds = %238, %.lr.ph11.i.preheader
  %172 = phi i32 [ %242, %238 ], [ %104, %.lr.ph11.i.preheader ]
  %173 = phi i32 [ %241, %238 ], [ %103, %.lr.ph11.i.preheader ]
  %progress_in.110.i = phi i8 [ 1, %238 ], [ 0, %.lr.ph11.i.preheader ]
  %174 = load %struct.bz_stream** %6, align 8
  %175 = getelementptr inbounds %struct.bz_stream* %174, i64 0, i32 1
  %176 = load i32* %175, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %copy_input_until_stop.exit.loopexit19, label %178

; <label>:178                                     ; preds = %.lr.ph11.i
  %179 = load i32* %12, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %copy_input_until_stop.exit.loopexit19, label %181

; <label>:181                                     ; preds = %178
  %182 = getelementptr inbounds %struct.bz_stream* %174, i64 0, i32 0
  %183 = load i8** %182, align 8
  %184 = load i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = load i32* %14, align 4
  %187 = icmp eq i32 %185, %186
  %188 = load i32* %16, align 4
  br i1 %187, label %210, label %189

; <label>:189                                     ; preds = %181
  %190 = icmp eq i32 %188, 1
  br i1 %190, label %191, label %thread-pre-split3.i

; <label>:191                                     ; preds = %189
  %192 = trunc i32 %186 to i8
  %193 = load i32* %20, align 4
  %194 = shl i32 %193, 8
  %195 = lshr i32 %193, 24
  %196 = and i32 %186, 255
  %197 = xor i32 %195, %196
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %198
  %200 = load i32* %199, align 4
  %201 = xor i32 %194, %200
  store i32 %201, i32* %20, align 4
  %202 = zext i32 %186 to i64
  %203 = getelementptr inbounds %struct.EState* %1, i64 0, i32 22, i64 %202
  store i8 1, i8* %203, align 1
  %204 = load i32* %18, align 4
  %205 = sext i32 %204 to i64
  %206 = load i8** %29, align 8
  %207 = getelementptr inbounds i8* %206, i64 %205
  store i8 %192, i8* %207, align 1
  %208 = load i32* %18, align 4
  %209 = add nsw i32 %208, 1
  store i32 %209, i32* %18, align 4
  store i32 %185, i32* %14, align 4
  br label %217

; <label>:210                                     ; preds = %181
  %211 = icmp eq i32 %188, 255
  br i1 %211, label %thread-pre-split3.i, label %215

thread-pre-split3.i:                              ; preds = %210, %189
  %212 = icmp ult i32 %186, 256
  br i1 %212, label %213, label %214

; <label>:213                                     ; preds = %thread-pre-split3.i
  tail call fastcc void @add_pair_to_block(%struct.EState* %1) #2
  br label %214

; <label>:214                                     ; preds = %213, %thread-pre-split3.i
  store i32 %185, i32* %14, align 4
  store i32 1, i32* %16, align 4
  br label %217

; <label>:215                                     ; preds = %210
  %216 = add nsw i32 %188, 1
  store i32 %216, i32* %16, align 4
  br label %217

; <label>:217                                     ; preds = %215, %214, %191
  %218 = load %struct.bz_stream** %6, align 8
  %219 = getelementptr inbounds %struct.bz_stream* %218, i64 0, i32 0
  %220 = load i8** %219, align 8
  %221 = getelementptr inbounds i8* %220, i64 1
  store i8* %221, i8** %219, align 8
  %222 = load %struct.bz_stream** %6, align 8
  %223 = getelementptr inbounds %struct.bz_stream* %222, i64 0, i32 1
  %224 = load i32* %223, align 4
  %225 = add i32 %224, -1
  store i32 %225, i32* %223, align 4
  %226 = load %struct.bz_stream** %6, align 8
  %227 = getelementptr inbounds %struct.bz_stream* %226, i64 0, i32 2
  %228 = load i32* %227, align 4
  %229 = add i32 %228, 1
  store i32 %229, i32* %227, align 4
  %230 = load %struct.bz_stream** %6, align 8
  %231 = getelementptr inbounds %struct.bz_stream* %230, i64 0, i32 2
  %232 = load i32* %231, align 4
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %238

; <label>:234                                     ; preds = %217
  %235 = getelementptr inbounds %struct.bz_stream* %230, i64 0, i32 3
  %236 = load i32* %235, align 4
  %237 = add i32 %236, 1
  store i32 %237, i32* %235, align 4
  br label %238

; <label>:238                                     ; preds = %234, %217
  %239 = load i32* %12, align 4
  %240 = add i32 %239, -1
  store i32 %240, i32* %12, align 4
  %241 = load i32* %18, align 4
  %242 = load i32* %27, align 4
  %243 = icmp slt i32 %241, %242
  br i1 %243, label %.lr.ph11.i, label %copy_input_until_stop.exit.loopexit19

copy_input_until_stop.exit.loopexit:              ; preds = %.backedge.i2, %.lr.ph.i1
  %.ph = phi i32 [ %170, %.backedge.i2 ], [ %106, %.lr.ph.i1 ]
  %.ph18 = phi i32 [ %169, %.backedge.i2 ], [ %107, %.lr.ph.i1 ]
  %progress_in.2.i.ph = phi i8 [ 1, %.backedge.i2 ], [ %progress_in.07.i, %.lr.ph.i1 ]
  br label %copy_input_until_stop.exit

copy_input_until_stop.exit.loopexit19:            ; preds = %238, %178, %.lr.ph11.i
  %.ph20 = phi i32 [ %242, %238 ], [ %172, %.lr.ph11.i ], [ %172, %178 ]
  %.ph21 = phi i32 [ %241, %238 ], [ %173, %.lr.ph11.i ], [ %173, %178 ]
  %progress_in.2.i.ph22 = phi i8 [ 1, %238 ], [ %progress_in.110.i, %.lr.ph11.i ], [ %progress_in.110.i, %178 ]
  br label %copy_input_until_stop.exit

copy_input_until_stop.exit:                       ; preds = %copy_input_until_stop.exit.loopexit19, %copy_input_until_stop.exit.loopexit, %.preheader.i, %.preheader5.i
  %244 = phi i32 [ %104, %.preheader.i ], [ %104, %.preheader5.i ], [ %.ph, %copy_input_until_stop.exit.loopexit ], [ %.ph20, %copy_input_until_stop.exit.loopexit19 ]
  %245 = phi i32 [ %103, %.preheader.i ], [ %103, %.preheader5.i ], [ %.ph18, %copy_input_until_stop.exit.loopexit ], [ %.ph21, %copy_input_until_stop.exit.loopexit19 ]
  %progress_in.2.i = phi i8 [ 0, %.preheader.i ], [ 0, %.preheader5.i ], [ %progress_in.2.i.ph, %copy_input_until_stop.exit.loopexit ], [ %progress_in.2.i.ph22, %copy_input_until_stop.exit.loopexit19 ]
  %246 = or i8 %progress_in.2.i, %progress_in.0.ph
  %247 = load i32* %10, align 4
  %248 = icmp eq i32 %247, 2
  br i1 %248, label %259, label %249

; <label>:249                                     ; preds = %copy_input_until_stop.exit
  %250 = load i32* %12, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %259

; <label>:252                                     ; preds = %249
  %253 = load i32* %14, align 4
  %254 = icmp ult i32 %253, 256
  br i1 %254, label %255, label %flush_RL.exit

; <label>:255                                     ; preds = %252
  tail call fastcc void @add_pair_to_block(%struct.EState* %1) #2
  %.pre11 = load i32* %10, align 4
  br label %flush_RL.exit

flush_RL.exit:                                    ; preds = %255, %252
  %256 = phi i32 [ %247, %252 ], [ %.pre11, %255 ]
  store i32 256, i32* %14, align 4
  store i32 0, i32* %16, align 4
  %257 = icmp eq i32 %256, 4
  %258 = zext i1 %257 to i8
  tail call void @BZ2_compressBlock(%struct.EState* %1, i8 zeroext %258) #2
  store i32 1, i32* %3, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %262, %261, %flush_RL.exit
  br label %.outer

; <label>:259                                     ; preds = %249, %copy_input_until_stop.exit
  %260 = icmp slt i32 %245, %244
  br i1 %260, label %262, label %261

; <label>:261                                     ; preds = %259
  tail call void @BZ2_compressBlock(%struct.EState* %1, i8 zeroext 0) #2
  store i32 1, i32* %3, align 4
  br label %.outer.backedge

; <label>:262                                     ; preds = %259
  %263 = load %struct.bz_stream** %6, align 8
  %264 = getelementptr inbounds %struct.bz_stream* %263, i64 0, i32 1
  %265 = load i32* %264, align 4
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %isempty_RL.exit, label %.outer.backedge

isempty_RL.exit:                                  ; preds = %262, %98, %95, %86, %83, %copy_output_until_stop.exit
  %progress_out.2 = phi i8 [ %73, %copy_output_until_stop.exit ], [ %73, %83 ], [ %73, %86 ], [ %73, %95 ], [ %73, %98 ], [ %progress_out.11, %262 ]
  %progress_in.1 = phi i8 [ %progress_in.0.ph, %copy_output_until_stop.exit ], [ %progress_in.0.ph, %83 ], [ %progress_in.0.ph, %86 ], [ %progress_in.0.ph, %95 ], [ %progress_in.0.ph, %98 ], [ %246, %262 ]
  %267 = or i8 %progress_in.1, %progress_out.2
  %268 = icmp ne i8 %267, 0
  %269 = zext i1 %268 to i8
  ret i8 %269
}

; Function Attrs: nounwind uwtable
define internal fastcc i8* @bzopen_or_bzdopen(i8* readonly %path, i8* readonly %mode, i32 %open_mode) #0 {
  %mode2 = alloca [10 x i8], align 1
  %1 = getelementptr inbounds [10 x i8]* %mode2, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 10, i32 1, i1 false)
  %2 = icmp eq i8* %mode, null
  br i1 %2, label %.thread, label %.preheader

.preheader:                                       ; preds = %0
  %3 = load i8* %mode, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

.lr.ph:                                           ; preds = %18, %.lr.ph.preheader
  %5 = phi i8 [ %20, %18 ], [ %3, %.lr.ph.preheader ]
  %.087 = phi i8* [ %19, %18 ], [ %mode, %.lr.ph.preheader ]
  %blockSize100k.06 = phi i32 [ %blockSize100k.1, %18 ], [ 9, %.lr.ph.preheader ]
  %writing.05 = phi i32 [ %writing.1, %18 ], [ 0, %.lr.ph.preheader ]
  %6 = sext i8 %5 to i32
  switch i32 %6, label %9 [
    i32 114, label %18
    i32 119, label %7
    i32 115, label %8
  ]

; <label>:7                                       ; preds = %.lr.ph
  br label %18

; <label>:8                                       ; preds = %.lr.ph
  br label %18

; <label>:9                                       ; preds = %.lr.ph
  %10 = sext i8 %5 to i64
  %11 = tail call i16** @__ctype_b_loc() #11
  %12 = load i16** %11, align 8
  %13 = getelementptr inbounds i16* %12, i64 %10
  %14 = load i16* %13, align 2
  %15 = and i16 %14, 2048
  %16 = icmp eq i16 %15, 0
  %17 = add nsw i32 %6, -48
  %blockSize100k.0. = select i1 %16, i32 %blockSize100k.06, i32 %17
  br label %18

; <label>:18                                      ; preds = %9, %8, %7, %.lr.ph
  %writing.1 = phi i32 [ %writing.05, %8 ], [ 1, %7 ], [ 0, %.lr.ph ], [ %writing.05, %9 ]
  %blockSize100k.1 = phi i32 [ %blockSize100k.06, %8 ], [ %blockSize100k.06, %7 ], [ %blockSize100k.06, %.lr.ph ], [ %blockSize100k.0., %9 ]
  %19 = getelementptr inbounds i8* %.087, i64 1
  %20 = load i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %18
  %blockSize100k.1.lcssa = phi i32 [ %blockSize100k.1, %18 ]
  %writing.1.lcssa = phi i32 [ %writing.1, %18 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %blockSize100k.0.lcssa = phi i32 [ 9, %.preheader ], [ %blockSize100k.1.lcssa, %._crit_edge.loopexit ]
  %writing.0.lcssa = phi i32 [ 0, %.preheader ], [ %writing.1.lcssa, %._crit_edge.loopexit ]
  %22 = icmp ne i32 %writing.0.lcssa, 0
  %strlen = call i64 @strlen(i8* %1)
  %endptr = getelementptr [10 x i8]* %mode2, i64 0, i64 %strlen
  %23 = bitcast i8* %endptr to i16*
  %24 = select i1 %22, i16 119, i16 114
  store i16 %24, i16* %23, align 1
  %strlen1 = call i64 @strlen(i8* %1)
  %endptr2 = getelementptr [10 x i8]* %mode2, i64 0, i64 %strlen1
  %25 = bitcast i8* %endptr2 to i16*
  store i16 98, i16* %25, align 1
  %26 = icmp eq i32 %open_mode, 0
  br i1 %26, label %27, label %.thread

; <label>:27                                      ; preds = %._crit_edge
  %28 = icmp eq i8* %path, null
  br i1 %28, label %31, label %29

; <label>:29                                      ; preds = %27
  %30 = load i8* %path, align 1
  %phitmp = icmp eq i8 %30, 0
  br i1 %phitmp, label %31, label %.thread

; <label>:31                                      ; preds = %29, %27
  %32 = zext i1 %22 to i32
  br i1 %22, label %33, label %.thread

; <label>:33                                      ; preds = %31
  %34 = icmp slt i32 %blockSize100k.0.lcssa, 1
  %.blockSize100k.0 = select i1 %34, i32 1, i32 %blockSize100k.0.lcssa
  %35 = tail call noalias i8* @malloc(i64 5104) #2
  %36 = icmp eq i8* %35, null
  br i1 %36, label %.thread, label %37

; <label>:37                                      ; preds = %33
  %38 = icmp sgt i32 %.blockSize100k.0, 9
  %blockSize100k.3 = select i1 %38, i32 9, i32 %.blockSize100k.0
  %39 = getelementptr inbounds i8* %35, i64 5096
  %40 = bitcast i8* %39 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8* %35, i64 5100
  store i8 0, i8* %41, align 1
  %42 = getelementptr inbounds i8* %35, i64 5004
  %43 = bitcast i8* %42 to i32*
  store i32 0, i32* %43, align 4
  %44 = bitcast i8* %35 to i32*
  store i32 %32, i32* %44, align 4
  %45 = getelementptr inbounds i8* %35, i64 5008
  store i8 1, i8* %45, align 1
  %46 = getelementptr inbounds i8* %35, i64 5016
  %47 = bitcast i8* %46 to %struct.bz_stream*
  %48 = getelementptr inbounds i8* %35, i64 5072
  tail call void @llvm.memset.p0i8.i64(i8* %48, i8 0, i64 24, i32 8, i1 false) #2
  %49 = tail call i32 @BZ2_bzCompressInit(%struct.bz_stream* %47, i32 %blockSize100k.3, i32 0, i32 30) #2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %52, label %51

; <label>:51                                      ; preds = %37
  tail call void @free(i8* %35) #2
  br label %.thread

; <label>:52                                      ; preds = %37
  %53 = getelementptr inbounds i8* %35, i64 5024
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 4
  store i8 1, i8* %41, align 1
  br label %.thread

.thread:                                          ; preds = %52, %51, %33, %31, %29, %._crit_edge, %0
  %.0 = phi i8* [ null, %0 ], [ null, %31 ], [ null, %29 ], [ null, %._crit_edge ], [ null, %51 ], [ %35, %52 ], [ null, %33 ]
  ret i8* %.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @add_pair_to_block(%struct.EState* nocapture %s) #0 {
  %1 = getelementptr inbounds %struct.EState* %s, i64 0, i32 13
  %2 = load i32* %1, align 4
  %3 = trunc i32 %2 to i8
  %4 = getelementptr inbounds %struct.EState* %s, i64 0, i32 14
  %5 = load i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %7 = getelementptr inbounds %struct.EState* %s, i64 0, i32 26
  %8 = and i32 %2, 255
  %.pre = load i32* %7, align 4
  %xtraiter = and i32 %5, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %5, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %9, label %.lr.ph.split

; <label>:9                                       ; preds = %.lr.ph
  %10 = shl i32 %.pre, 8
  %11 = lshr i32 %.pre, 24
  %12 = xor i32 %11, %8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %13
  %15 = load i32* %14, align 4
  %16 = xor i32 %10, %15
  store i32 %16, i32* %7, align 4
  %17 = add nsw i32 0, 1
  %18 = icmp slt i32 %17, %5
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %9, %.lr.ph
  %.unr = phi i32 [ %.pre, %.lr.ph ], [ %16, %9 ]
  %i.01.unr = phi i32 [ 0, %.lr.ph ], [ %17, %9 ]
  %19 = icmp ult i32 %5, 2
  br i1 %19, label %._crit_edge.loopexit, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %20

; <label>:20                                      ; preds = %20, %.lr.ph.split.split
  %21 = phi i32 [ %.unr, %.lr.ph.split.split ], [ %36, %20 ]
  %i.01 = phi i32 [ %i.01.unr, %.lr.ph.split.split ], [ %37, %20 ]
  %22 = shl i32 %21, 8
  %23 = lshr i32 %21, 24
  %24 = xor i32 %23, %8
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %25
  %27 = load i32* %26, align 4
  %28 = xor i32 %22, %27
  store i32 %28, i32* %7, align 4
  %29 = add nsw i32 %i.01, 1
  %30 = shl i32 %28, 8
  %31 = lshr i32 %28, 24
  %32 = xor i32 %31, %8
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %33
  %35 = load i32* %34, align 4
  %36 = xor i32 %30, %35
  store i32 %36, i32* %7, align 4
  %37 = add nsw i32 %29, 1
  %38 = icmp slt i32 %37, %5
  br i1 %38, label %20, label %._crit_edge.loopexit.unr-lcssa

._crit_edge.loopexit.unr-lcssa:                   ; preds = %20
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %39 = zext i32 %2 to i64
  %40 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %39
  store i8 1, i8* %40, align 1
  %41 = load i32* %4, align 4
  switch i32 %41, label %84 [
    i32 1, label %42
    i32 2, label %51
    i32 3, label %65
  ]

; <label>:42                                      ; preds = %._crit_edge
  %43 = getelementptr inbounds %struct.EState* %s, i64 0, i32 17
  %44 = load i32* %43, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.EState* %s, i64 0, i32 9
  %47 = load i8** %46, align 8
  %48 = getelementptr inbounds i8* %47, i64 %45
  store i8 %3, i8* %48, align 1
  %49 = load i32* %43, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %43, align 4
  br label %119

; <label>:51                                      ; preds = %._crit_edge
  %52 = getelementptr inbounds %struct.EState* %s, i64 0, i32 17
  %53 = load i32* %52, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.EState* %s, i64 0, i32 9
  %56 = load i8** %55, align 8
  %57 = getelementptr inbounds i8* %56, i64 %54
  store i8 %3, i8* %57, align 1
  %58 = load i32* %52, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %52, align 4
  %60 = sext i32 %59 to i64
  %61 = load i8** %55, align 8
  %62 = getelementptr inbounds i8* %61, i64 %60
  store i8 %3, i8* %62, align 1
  %63 = load i32* %52, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %52, align 4
  br label %119

; <label>:65                                      ; preds = %._crit_edge
  %66 = getelementptr inbounds %struct.EState* %s, i64 0, i32 17
  %67 = load i32* %66, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.EState* %s, i64 0, i32 9
  %70 = load i8** %69, align 8
  %71 = getelementptr inbounds i8* %70, i64 %68
  store i8 %3, i8* %71, align 1
  %72 = load i32* %66, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %66, align 4
  %74 = sext i32 %73 to i64
  %75 = load i8** %69, align 8
  %76 = getelementptr inbounds i8* %75, i64 %74
  store i8 %3, i8* %76, align 1
  %77 = load i32* %66, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %66, align 4
  %79 = sext i32 %78 to i64
  %80 = load i8** %69, align 8
  %81 = getelementptr inbounds i8* %80, i64 %79
  store i8 %3, i8* %81, align 1
  %82 = load i32* %66, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %66, align 4
  br label %119

; <label>:84                                      ; preds = %._crit_edge
  %85 = add nsw i32 %41, -4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %86
  store i8 1, i8* %87, align 1
  %88 = getelementptr inbounds %struct.EState* %s, i64 0, i32 17
  %89 = load i32* %88, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.EState* %s, i64 0, i32 9
  %92 = load i8** %91, align 8
  %93 = getelementptr inbounds i8* %92, i64 %90
  store i8 %3, i8* %93, align 1
  %94 = load i32* %88, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %88, align 4
  %96 = sext i32 %95 to i64
  %97 = load i8** %91, align 8
  %98 = getelementptr inbounds i8* %97, i64 %96
  store i8 %3, i8* %98, align 1
  %99 = load i32* %88, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %88, align 4
  %101 = sext i32 %100 to i64
  %102 = load i8** %91, align 8
  %103 = getelementptr inbounds i8* %102, i64 %101
  store i8 %3, i8* %103, align 1
  %104 = load i32* %88, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %88, align 4
  %106 = sext i32 %105 to i64
  %107 = load i8** %91, align 8
  %108 = getelementptr inbounds i8* %107, i64 %106
  store i8 %3, i8* %108, align 1
  %109 = load i32* %88, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %88, align 4
  %111 = load i32* %4, align 4
  %112 = add nsw i32 %111, 252
  %113 = trunc i32 %112 to i8
  %114 = sext i32 %110 to i64
  %115 = load i8** %91, align 8
  %116 = getelementptr inbounds i8* %115, i64 %114
  store i8 %113, i8* %116, align 1
  %117 = load i32* %88, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %88, align 4
  br label %119

; <label>:119                                     ; preds = %84, %65, %51, %42
  ret void
}

; Function Attrs: nounwind uwtable
define void @BZ2_bsInitWrite(%struct.EState* nocapture %s) #0 {
  %1 = getelementptr inbounds %struct.EState* %s, i64 0, i32 25
  store i32 0, i32* %1, align 4
  %2 = getelementptr inbounds %struct.EState* %s, i64 0, i32 24
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @BZ2_compressBlock(%struct.EState* %s, i8 zeroext %is_last_block) #0 {
  %yy.i = alloca [256 x i8], align 16
  %cost.i = alloca [6 x i16], align 2
  %fave.i = alloca [6 x i32], align 16
  %pos.i = alloca [6 x i8], align 1
  %inUse16.i = alloca [16 x i8], align 16
  %1 = getelementptr inbounds %struct.EState* %s, i64 0, i32 17
  %2 = load i32* %1, align 4
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %._crit_edge998

._crit_edge998:                                   ; preds = %0
  %.pre999 = getelementptr inbounds %struct.EState* %s, i64 0, i32 29
  br label %27

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.EState* %s, i64 0, i32 26
  %6 = load i32* %5, align 4
  %7 = xor i32 %6, -1
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %struct.EState* %s, i64 0, i32 27
  %9 = load i32* %8, align 4
  %10 = shl i32 %9, 1
  %11 = lshr i32 %9, 31
  %12 = or i32 %10, %11
  %13 = xor i32 %12, %7
  store i32 %13, i32* %8, align 4
  %14 = getelementptr inbounds %struct.EState* %s, i64 0, i32 29
  %15 = load i32* %14, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %4
  %18 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  store i32 0, i32* %18, align 4
  br label %19

; <label>:19                                      ; preds = %17, %4
  %20 = getelementptr inbounds %struct.EState* %s, i64 0, i32 28
  %21 = load i32* %20, align 4
  %22 = icmp sgt i32 %21, 1
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %19
  %24 = load %struct._IO_FILE** @stderr, align 8
  %25 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([62 x i8]* @.str66, i64 0, i64 0), i32 %15, i32 %7, i32 %13, i32 %2) #12
  br label %26

; <label>:26                                      ; preds = %23, %19
  tail call void @BZ2_blockSort(%struct.EState* %s) #2
  %.pre = load i32* %1, align 4
  br label %27

; <label>:27                                      ; preds = %26, %._crit_edge998
  %.pre-phi = phi i32* [ %.pre999, %._crit_edge998 ], [ %14, %26 ]
  %28 = phi i32 [ %2, %._crit_edge998 ], [ %.pre, %26 ]
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.EState* %s, i64 0, i32 5
  %31 = load i32** %30, align 8
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds i8* %32, i64 %29
  %34 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  store i8* %33, i8** %34, align 8
  %35 = load i32* %.pre-phi, align 4
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %.lr.ph.i.i69, label %107

.lr.ph.i.i69:                                     ; preds = %27
  %37 = getelementptr inbounds %struct.EState* %s, i64 0, i32 25
  %38 = getelementptr inbounds %struct.EState* %s, i64 0, i32 24
  store i32 1107296256, i32* %38, align 4
  store i32 8, i32* %37, align 4
  %39 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i68 = load i32* %39, align 4
  br label %40

; <label>:40                                      ; preds = %._crit_edge, %.lr.ph.i.i69
  %41 = phi i8* [ %33, %.lr.ph.i.i69 ], [ %.pre955, %._crit_edge ]
  %42 = phi i32 [ %.pre3.i.i68, %.lr.ph.i.i69 ], [ %47, %._crit_edge ]
  %43 = phi i8 [ 66, %.lr.ph.i.i69 ], [ %phitmp1000, %._crit_edge ]
  %44 = sext i32 %42 to i64
  %45 = getelementptr inbounds i8* %41, i64 %44
  store i8 %43, i8* %45, align 1
  %46 = load i32* %39, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %39, align 4
  %48 = load i32* %38, align 4
  %49 = shl i32 %48, 8
  store i32 %49, i32* %38, align 4
  %50 = load i32* %37, align 4
  %51 = add nsw i32 %50, -8
  store i32 %51, i32* %37, align 4
  %52 = icmp sgt i32 %51, 7
  br i1 %52, label %._crit_edge, label %bsPutUChar.exit71

._crit_edge:                                      ; preds = %40
  %.pre955 = load i8** %34, align 8
  %53 = lshr i32 %48, 16
  %phitmp1000 = trunc i32 %53 to i8
  br label %40

bsPutUChar.exit71:                                ; preds = %40
  %.lcssa1544 = phi i32 [ %50, %40 ]
  %.lcssa1543 = phi i32 [ %49, %40 ]
  %54 = sub i32 32, %.lcssa1544
  %55 = shl i32 90, %54
  %56 = or i32 %55, %.lcssa1543
  store i32 %56, i32* %38, align 4
  store i32 %.lcssa1544, i32* %37, align 4
  %57 = icmp sgt i32 %.lcssa1544, 7
  br i1 %57, label %.lr.ph.i.i76, label %bsPutUChar.exit78

.lr.ph.i.i76:                                     ; preds = %bsPutUChar.exit71
  %58 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i75 = load i32* %58, align 4
  br label %59

; <label>:59                                      ; preds = %59, %.lr.ph.i.i76
  %60 = phi i32 [ %.pre3.i.i75, %.lr.ph.i.i76 ], [ %68, %59 ]
  %61 = phi i32 [ %56, %.lr.ph.i.i76 ], [ %70, %59 ]
  %62 = lshr i32 %61, 24
  %63 = trunc i32 %62 to i8
  %64 = sext i32 %60 to i64
  %65 = load i8** %34, align 8
  %66 = getelementptr inbounds i8* %65, i64 %64
  store i8 %63, i8* %66, align 1
  %67 = load i32* %58, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %58, align 4
  %69 = load i32* %38, align 4
  %70 = shl i32 %69, 8
  store i32 %70, i32* %38, align 4
  %71 = load i32* %37, align 4
  %72 = add nsw i32 %71, -8
  store i32 %72, i32* %37, align 4
  %73 = icmp sgt i32 %72, 7
  br i1 %73, label %59, label %bsPutUChar.exit78.loopexit

bsPutUChar.exit78.loopexit:                       ; preds = %59
  %.lcssa1542 = phi i32 [ %72, %59 ]
  %.lcssa1541 = phi i32 [ %70, %59 ]
  br label %bsPutUChar.exit78

bsPutUChar.exit78:                                ; preds = %bsPutUChar.exit78.loopexit, %bsPutUChar.exit71
  %74 = phi i32 [ %56, %bsPutUChar.exit71 ], [ %.lcssa1541, %bsPutUChar.exit78.loopexit ]
  %75 = phi i32 [ %.lcssa1544, %bsPutUChar.exit71 ], [ %.lcssa1542, %bsPutUChar.exit78.loopexit ]
  %76 = sub i32 24, %75
  %77 = shl i32 104, %76
  %78 = or i32 %77, %74
  store i32 %78, i32* %38, align 4
  %79 = add nsw i32 %75, 8
  store i32 %79, i32* %37, align 4
  %80 = getelementptr inbounds %struct.EState* %s, i64 0, i32 30
  %81 = load i32* %80, align 4
  %82 = add nsw i32 %81, 48
  %83 = and i32 %82, 255
  %84 = icmp sgt i32 %79, 7
  br i1 %84, label %.lr.ph.i.i83, label %bsPutUChar.exit85

.lr.ph.i.i83:                                     ; preds = %bsPutUChar.exit78
  %85 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i82 = load i32* %85, align 4
  br label %86

; <label>:86                                      ; preds = %86, %.lr.ph.i.i83
  %87 = phi i32 [ %.pre3.i.i82, %.lr.ph.i.i83 ], [ %95, %86 ]
  %88 = phi i32 [ %78, %.lr.ph.i.i83 ], [ %97, %86 ]
  %89 = lshr i32 %88, 24
  %90 = trunc i32 %89 to i8
  %91 = sext i32 %87 to i64
  %92 = load i8** %34, align 8
  %93 = getelementptr inbounds i8* %92, i64 %91
  store i8 %90, i8* %93, align 1
  %94 = load i32* %85, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %85, align 4
  %96 = load i32* %38, align 4
  %97 = shl i32 %96, 8
  store i32 %97, i32* %38, align 4
  %98 = load i32* %37, align 4
  %99 = add nsw i32 %98, -8
  store i32 %99, i32* %37, align 4
  %100 = icmp sgt i32 %99, 7
  br i1 %100, label %86, label %bsPutUChar.exit85.loopexit

bsPutUChar.exit85.loopexit:                       ; preds = %86
  %.lcssa1540 = phi i32 [ %99, %86 ]
  %.lcssa1539 = phi i32 [ %97, %86 ]
  br label %bsPutUChar.exit85

bsPutUChar.exit85:                                ; preds = %bsPutUChar.exit85.loopexit, %bsPutUChar.exit78
  %101 = phi i32 [ %78, %bsPutUChar.exit78 ], [ %.lcssa1539, %bsPutUChar.exit85.loopexit ]
  %102 = phi i32 [ %79, %bsPutUChar.exit78 ], [ %.lcssa1540, %bsPutUChar.exit85.loopexit ]
  %103 = sub i32 24, %102
  %104 = shl i32 %83, %103
  %105 = or i32 %104, %101
  store i32 %105, i32* %38, align 4
  %106 = add nsw i32 %102, 8
  store i32 %106, i32* %37, align 4
  %.pre956 = load i32* %1, align 4
  br label %107

; <label>:107                                     ; preds = %bsPutUChar.exit85, %27
  %108 = phi i32 [ %.pre956, %bsPutUChar.exit85 ], [ %28, %27 ]
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %sendMTFValues.exit

; <label>:110                                     ; preds = %107
  %111 = getelementptr inbounds %struct.EState* %s, i64 0, i32 25
  %112 = load i32* %111, align 4
  %113 = icmp sgt i32 %112, 7
  %114 = getelementptr inbounds %struct.EState* %s, i64 0, i32 24
  br i1 %113, label %.lr.ph.i.i335, label %._crit_edge4.i.i332

._crit_edge4.i.i332:                              ; preds = %110
  %.pre5.i.i331 = load i32* %114, align 4
  br label %bsPutUChar.exit337

.lr.ph.i.i335:                                    ; preds = %110
  %115 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre.i.i333 = load i32* %114, align 4
  %.pre3.i.i334 = load i32* %115, align 4
  br label %116

; <label>:116                                     ; preds = %116, %.lr.ph.i.i335
  %117 = phi i32 [ %.pre3.i.i334, %.lr.ph.i.i335 ], [ %125, %116 ]
  %118 = phi i32 [ %.pre.i.i333, %.lr.ph.i.i335 ], [ %127, %116 ]
  %119 = lshr i32 %118, 24
  %120 = trunc i32 %119 to i8
  %121 = sext i32 %117 to i64
  %122 = load i8** %34, align 8
  %123 = getelementptr inbounds i8* %122, i64 %121
  store i8 %120, i8* %123, align 1
  %124 = load i32* %115, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %115, align 4
  %126 = load i32* %114, align 4
  %127 = shl i32 %126, 8
  store i32 %127, i32* %114, align 4
  %128 = load i32* %111, align 4
  %129 = add nsw i32 %128, -8
  store i32 %129, i32* %111, align 4
  %130 = icmp sgt i32 %129, 7
  br i1 %130, label %116, label %bsPutUChar.exit337.loopexit

bsPutUChar.exit337.loopexit:                      ; preds = %116
  %.lcssa1538 = phi i32 [ %129, %116 ]
  %.lcssa1537 = phi i32 [ %127, %116 ]
  br label %bsPutUChar.exit337

bsPutUChar.exit337:                               ; preds = %bsPutUChar.exit337.loopexit, %._crit_edge4.i.i332
  %131 = phi i32 [ %.pre5.i.i331, %._crit_edge4.i.i332 ], [ %.lcssa1537, %bsPutUChar.exit337.loopexit ]
  %132 = phi i32 [ %112, %._crit_edge4.i.i332 ], [ %.lcssa1538, %bsPutUChar.exit337.loopexit ]
  %133 = sub i32 24, %132
  %134 = shl i32 49, %133
  %135 = or i32 %134, %131
  store i32 %135, i32* %114, align 4
  %136 = add nsw i32 %132, 8
  store i32 %136, i32* %111, align 4
  %137 = icmp sgt i32 %136, 7
  br i1 %137, label %.lr.ph.i.i342, label %bsPutUChar.exit344

.lr.ph.i.i342:                                    ; preds = %bsPutUChar.exit337
  %138 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i341 = load i32* %138, align 4
  br label %139

; <label>:139                                     ; preds = %139, %.lr.ph.i.i342
  %140 = phi i32 [ %.pre3.i.i341, %.lr.ph.i.i342 ], [ %148, %139 ]
  %141 = phi i32 [ %135, %.lr.ph.i.i342 ], [ %150, %139 ]
  %142 = lshr i32 %141, 24
  %143 = trunc i32 %142 to i8
  %144 = sext i32 %140 to i64
  %145 = load i8** %34, align 8
  %146 = getelementptr inbounds i8* %145, i64 %144
  store i8 %143, i8* %146, align 1
  %147 = load i32* %138, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %138, align 4
  %149 = load i32* %114, align 4
  %150 = shl i32 %149, 8
  store i32 %150, i32* %114, align 4
  %151 = load i32* %111, align 4
  %152 = add nsw i32 %151, -8
  store i32 %152, i32* %111, align 4
  %153 = icmp sgt i32 %152, 7
  br i1 %153, label %139, label %bsPutUChar.exit344.loopexit

bsPutUChar.exit344.loopexit:                      ; preds = %139
  %.lcssa1536 = phi i32 [ %152, %139 ]
  %.lcssa1535 = phi i32 [ %150, %139 ]
  br label %bsPutUChar.exit344

bsPutUChar.exit344:                               ; preds = %bsPutUChar.exit344.loopexit, %bsPutUChar.exit337
  %154 = phi i32 [ %135, %bsPutUChar.exit337 ], [ %.lcssa1535, %bsPutUChar.exit344.loopexit ]
  %155 = phi i32 [ %136, %bsPutUChar.exit337 ], [ %.lcssa1536, %bsPutUChar.exit344.loopexit ]
  %156 = sub i32 24, %155
  %157 = shl i32 65, %156
  %158 = or i32 %157, %154
  store i32 %158, i32* %114, align 4
  %159 = add nsw i32 %155, 8
  store i32 %159, i32* %111, align 4
  %160 = icmp sgt i32 %159, 7
  br i1 %160, label %.lr.ph.i.i377, label %bsPutUChar.exit379

.lr.ph.i.i377:                                    ; preds = %bsPutUChar.exit344
  %161 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i376 = load i32* %161, align 4
  br label %162

; <label>:162                                     ; preds = %162, %.lr.ph.i.i377
  %163 = phi i32 [ %.pre3.i.i376, %.lr.ph.i.i377 ], [ %171, %162 ]
  %164 = phi i32 [ %158, %.lr.ph.i.i377 ], [ %173, %162 ]
  %165 = lshr i32 %164, 24
  %166 = trunc i32 %165 to i8
  %167 = sext i32 %163 to i64
  %168 = load i8** %34, align 8
  %169 = getelementptr inbounds i8* %168, i64 %167
  store i8 %166, i8* %169, align 1
  %170 = load i32* %161, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %161, align 4
  %172 = load i32* %114, align 4
  %173 = shl i32 %172, 8
  store i32 %173, i32* %114, align 4
  %174 = load i32* %111, align 4
  %175 = add nsw i32 %174, -8
  store i32 %175, i32* %111, align 4
  %176 = icmp sgt i32 %175, 7
  br i1 %176, label %162, label %bsPutUChar.exit379.loopexit

bsPutUChar.exit379.loopexit:                      ; preds = %162
  %.lcssa1534 = phi i32 [ %175, %162 ]
  %.lcssa1533 = phi i32 [ %173, %162 ]
  br label %bsPutUChar.exit379

bsPutUChar.exit379:                               ; preds = %bsPutUChar.exit379.loopexit, %bsPutUChar.exit344
  %177 = phi i32 [ %158, %bsPutUChar.exit344 ], [ %.lcssa1533, %bsPutUChar.exit379.loopexit ]
  %178 = phi i32 [ %159, %bsPutUChar.exit344 ], [ %.lcssa1534, %bsPutUChar.exit379.loopexit ]
  %179 = sub i32 24, %178
  %180 = shl i32 89, %179
  %181 = or i32 %180, %177
  store i32 %181, i32* %114, align 4
  %182 = add nsw i32 %178, 8
  store i32 %182, i32* %111, align 4
  %183 = icmp sgt i32 %182, 7
  br i1 %183, label %.lr.ph.i.i412, label %bsPutUChar.exit414

.lr.ph.i.i412:                                    ; preds = %bsPutUChar.exit379
  %184 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i411 = load i32* %184, align 4
  br label %185

; <label>:185                                     ; preds = %185, %.lr.ph.i.i412
  %186 = phi i32 [ %.pre3.i.i411, %.lr.ph.i.i412 ], [ %194, %185 ]
  %187 = phi i32 [ %181, %.lr.ph.i.i412 ], [ %196, %185 ]
  %188 = lshr i32 %187, 24
  %189 = trunc i32 %188 to i8
  %190 = sext i32 %186 to i64
  %191 = load i8** %34, align 8
  %192 = getelementptr inbounds i8* %191, i64 %190
  store i8 %189, i8* %192, align 1
  %193 = load i32* %184, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %184, align 4
  %195 = load i32* %114, align 4
  %196 = shl i32 %195, 8
  store i32 %196, i32* %114, align 4
  %197 = load i32* %111, align 4
  %198 = add nsw i32 %197, -8
  store i32 %198, i32* %111, align 4
  %199 = icmp sgt i32 %198, 7
  br i1 %199, label %185, label %bsPutUChar.exit414.loopexit

bsPutUChar.exit414.loopexit:                      ; preds = %185
  %.lcssa1532 = phi i32 [ %198, %185 ]
  %.lcssa1531 = phi i32 [ %196, %185 ]
  br label %bsPutUChar.exit414

bsPutUChar.exit414:                               ; preds = %bsPutUChar.exit414.loopexit, %bsPutUChar.exit379
  %200 = phi i32 [ %181, %bsPutUChar.exit379 ], [ %.lcssa1531, %bsPutUChar.exit414.loopexit ]
  %201 = phi i32 [ %182, %bsPutUChar.exit379 ], [ %.lcssa1532, %bsPutUChar.exit414.loopexit ]
  %202 = sub i32 24, %201
  %203 = shl i32 38, %202
  %204 = or i32 %203, %200
  store i32 %204, i32* %114, align 4
  %205 = add nsw i32 %201, 8
  store i32 %205, i32* %111, align 4
  %206 = icmp sgt i32 %205, 7
  br i1 %206, label %.lr.ph.i.i433, label %bsPutUChar.exit435

.lr.ph.i.i433:                                    ; preds = %bsPutUChar.exit414
  %207 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i432 = load i32* %207, align 4
  br label %208

; <label>:208                                     ; preds = %208, %.lr.ph.i.i433
  %209 = phi i32 [ %.pre3.i.i432, %.lr.ph.i.i433 ], [ %217, %208 ]
  %210 = phi i32 [ %204, %.lr.ph.i.i433 ], [ %219, %208 ]
  %211 = lshr i32 %210, 24
  %212 = trunc i32 %211 to i8
  %213 = sext i32 %209 to i64
  %214 = load i8** %34, align 8
  %215 = getelementptr inbounds i8* %214, i64 %213
  store i8 %212, i8* %215, align 1
  %216 = load i32* %207, align 4
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %207, align 4
  %218 = load i32* %114, align 4
  %219 = shl i32 %218, 8
  store i32 %219, i32* %114, align 4
  %220 = load i32* %111, align 4
  %221 = add nsw i32 %220, -8
  store i32 %221, i32* %111, align 4
  %222 = icmp sgt i32 %221, 7
  br i1 %222, label %208, label %bsPutUChar.exit435.loopexit

bsPutUChar.exit435.loopexit:                      ; preds = %208
  %.lcssa1530 = phi i32 [ %221, %208 ]
  %.lcssa1529 = phi i32 [ %219, %208 ]
  br label %bsPutUChar.exit435

bsPutUChar.exit435:                               ; preds = %bsPutUChar.exit435.loopexit, %bsPutUChar.exit414
  %223 = phi i32 [ %204, %bsPutUChar.exit414 ], [ %.lcssa1529, %bsPutUChar.exit435.loopexit ]
  %224 = phi i32 [ %205, %bsPutUChar.exit414 ], [ %.lcssa1530, %bsPutUChar.exit435.loopexit ]
  %225 = sub i32 24, %224
  %226 = shl i32 83, %225
  %227 = or i32 %226, %223
  store i32 %227, i32* %114, align 4
  %228 = add nsw i32 %224, 8
  store i32 %228, i32* %111, align 4
  %229 = icmp sgt i32 %228, 7
  br i1 %229, label %.lr.ph.i.i440, label %bsPutUChar.exit442

.lr.ph.i.i440:                                    ; preds = %bsPutUChar.exit435
  %230 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i439 = load i32* %230, align 4
  br label %231

; <label>:231                                     ; preds = %231, %.lr.ph.i.i440
  %232 = phi i32 [ %.pre3.i.i439, %.lr.ph.i.i440 ], [ %240, %231 ]
  %233 = phi i32 [ %227, %.lr.ph.i.i440 ], [ %242, %231 ]
  %234 = lshr i32 %233, 24
  %235 = trunc i32 %234 to i8
  %236 = sext i32 %232 to i64
  %237 = load i8** %34, align 8
  %238 = getelementptr inbounds i8* %237, i64 %236
  store i8 %235, i8* %238, align 1
  %239 = load i32* %230, align 4
  %240 = add nsw i32 %239, 1
  store i32 %240, i32* %230, align 4
  %241 = load i32* %114, align 4
  %242 = shl i32 %241, 8
  store i32 %242, i32* %114, align 4
  %243 = load i32* %111, align 4
  %244 = add nsw i32 %243, -8
  store i32 %244, i32* %111, align 4
  %245 = icmp sgt i32 %244, 7
  br i1 %245, label %231, label %bsPutUChar.exit442.loopexit

bsPutUChar.exit442.loopexit:                      ; preds = %231
  %.lcssa1528 = phi i32 [ %244, %231 ]
  %.lcssa1527 = phi i32 [ %242, %231 ]
  br label %bsPutUChar.exit442

bsPutUChar.exit442:                               ; preds = %bsPutUChar.exit442.loopexit, %bsPutUChar.exit435
  %246 = phi i32 [ %227, %bsPutUChar.exit435 ], [ %.lcssa1527, %bsPutUChar.exit442.loopexit ]
  %247 = phi i32 [ %228, %bsPutUChar.exit435 ], [ %.lcssa1528, %bsPutUChar.exit442.loopexit ]
  %248 = sub i32 24, %247
  %249 = shl i32 89, %248
  %250 = or i32 %249, %246
  store i32 %250, i32* %114, align 4
  %251 = add nsw i32 %247, 8
  store i32 %251, i32* %111, align 4
  %252 = getelementptr inbounds %struct.EState* %s, i64 0, i32 26
  %253 = load i32* %252, align 4
  tail call fastcc void @bsPutUInt32(%struct.EState* %s, i32 %253)
  %254 = load i32* %111, align 4
  %255 = icmp sgt i32 %254, 7
  br i1 %255, label %.lr.ph.i447, label %._crit_edge4.i444

._crit_edge4.i444:                                ; preds = %bsPutUChar.exit442
  %.pre5.i443 = load i32* %114, align 4
  br label %bsW.exit449

.lr.ph.i447:                                      ; preds = %bsPutUChar.exit442
  %256 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre.i445 = load i32* %114, align 4
  %.pre3.i446 = load i32* %256, align 4
  br label %257

; <label>:257                                     ; preds = %257, %.lr.ph.i447
  %258 = phi i32 [ %.pre3.i446, %.lr.ph.i447 ], [ %266, %257 ]
  %259 = phi i32 [ %.pre.i445, %.lr.ph.i447 ], [ %268, %257 ]
  %260 = lshr i32 %259, 24
  %261 = trunc i32 %260 to i8
  %262 = sext i32 %258 to i64
  %263 = load i8** %34, align 8
  %264 = getelementptr inbounds i8* %263, i64 %262
  store i8 %261, i8* %264, align 1
  %265 = load i32* %256, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %256, align 4
  %267 = load i32* %114, align 4
  %268 = shl i32 %267, 8
  store i32 %268, i32* %114, align 4
  %269 = load i32* %111, align 4
  %270 = add nsw i32 %269, -8
  store i32 %270, i32* %111, align 4
  %271 = icmp sgt i32 %270, 7
  br i1 %271, label %257, label %bsW.exit449.loopexit

bsW.exit449.loopexit:                             ; preds = %257
  %.lcssa1526 = phi i32 [ %270, %257 ]
  %.lcssa1525 = phi i32 [ %268, %257 ]
  br label %bsW.exit449

bsW.exit449:                                      ; preds = %bsW.exit449.loopexit, %._crit_edge4.i444
  %.pre5.i464 = phi i32 [ %.pre5.i443, %._crit_edge4.i444 ], [ %.lcssa1525, %bsW.exit449.loopexit ]
  %272 = phi i32 [ %254, %._crit_edge4.i444 ], [ %.lcssa1526, %bsW.exit449.loopexit ]
  store i32 %.pre5.i464, i32* %114, align 4
  %273 = add nsw i32 %272, 1
  store i32 %273, i32* %111, align 4
  %274 = getelementptr inbounds %struct.EState* %s, i64 0, i32 7
  %275 = load i32* %274, align 4
  %276 = icmp sgt i32 %272, 6
  br i1 %276, label %.lr.ph.i468, label %bsW.exit470

.lr.ph.i468:                                      ; preds = %bsW.exit449
  %277 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i467 = load i32* %277, align 4
  br label %278

; <label>:278                                     ; preds = %278, %.lr.ph.i468
  %279 = phi i32 [ %.pre3.i467, %.lr.ph.i468 ], [ %287, %278 ]
  %280 = phi i32 [ %.pre5.i464, %.lr.ph.i468 ], [ %289, %278 ]
  %281 = lshr i32 %280, 24
  %282 = trunc i32 %281 to i8
  %283 = sext i32 %279 to i64
  %284 = load i8** %34, align 8
  %285 = getelementptr inbounds i8* %284, i64 %283
  store i8 %282, i8* %285, align 1
  %286 = load i32* %277, align 4
  %287 = add nsw i32 %286, 1
  store i32 %287, i32* %277, align 4
  %288 = load i32* %114, align 4
  %289 = shl i32 %288, 8
  store i32 %289, i32* %114, align 4
  %290 = load i32* %111, align 4
  %291 = add nsw i32 %290, -8
  store i32 %291, i32* %111, align 4
  %292 = icmp sgt i32 %291, 7
  br i1 %292, label %278, label %bsW.exit470.loopexit

bsW.exit470.loopexit:                             ; preds = %278
  %.lcssa1524 = phi i32 [ %291, %278 ]
  %.lcssa1523 = phi i32 [ %289, %278 ]
  br label %bsW.exit470

bsW.exit470:                                      ; preds = %bsW.exit470.loopexit, %bsW.exit449
  %293 = phi i32 [ %.pre5.i464, %bsW.exit449 ], [ %.lcssa1523, %bsW.exit470.loopexit ]
  %294 = phi i32 [ %273, %bsW.exit449 ], [ %.lcssa1524, %bsW.exit470.loopexit ]
  %295 = sub i32 8, %294
  %296 = shl i32 %275, %295
  %297 = or i32 %296, %293
  store i32 %297, i32* %114, align 4
  %298 = add nsw i32 %294, 24
  store i32 %298, i32* %111, align 4
  %299 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %299) #2
  %300 = getelementptr inbounds %struct.EState* %s, i64 0, i32 8
  %301 = load i32** %300, align 8
  %302 = getelementptr inbounds %struct.EState* %s, i64 0, i32 9
  %303 = load i8** %302, align 8
  %304 = getelementptr inbounds %struct.EState* %s, i64 0, i32 10
  %305 = load i16** %304, align 8
  %306 = getelementptr inbounds %struct.EState* %s, i64 0, i32 21
  store i32 0, i32* %306, align 4
  br label %307

; <label>:307                                     ; preds = %4314, %bsW.exit470
  %308 = phi i32 [ 0, %bsW.exit470 ], [ %4315, %4314 ]
  %indvars.iv.i.i = phi i64 [ 0, %bsW.exit470 ], [ %indvars.iv.next.i.i.1, %4314 ]
  %309 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %indvars.iv.i.i
  %310 = load i8* %309, align 1
  %311 = icmp eq i8 %310, 0
  br i1 %311, label %317, label %312

; <label>:312                                     ; preds = %307
  %313 = trunc i32 %308 to i8
  %314 = getelementptr inbounds %struct.EState* %s, i64 0, i32 23, i64 %indvars.iv.i.i
  store i8 %313, i8* %314, align 1
  %315 = load i32* %306, align 4
  %316 = add nsw i32 %315, 1
  store i32 %316, i32* %306, align 4
  br label %317

; <label>:317                                     ; preds = %312, %307
  %318 = phi i32 [ %308, %307 ], [ %316, %312 ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %319 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %indvars.iv.next.i.i
  %320 = load i8* %319, align 1
  %321 = icmp eq i8 %320, 0
  br i1 %321, label %4314, label %4309

makeMaps_e.exit.i:                                ; preds = %4314
  %.lcssa1522 = phi i32 [ %4315, %4314 ]
  %322 = add i32 %.lcssa1522, 1
  %323 = icmp slt i32 %322, 0
  br i1 %323, label %.preheader2.i, label %.lr.ph16.i

.lr.ph16.i:                                       ; preds = %makeMaps_e.exit.i
  %scevgep.i471 = getelementptr %struct.EState* %s, i64 0, i32 32, i64 0
  %scevgep26.i = bitcast i32* %scevgep.i471 to i8*
  %324 = zext i32 %322 to i64
  %325 = shl nuw nsw i64 %324, 2
  %326 = add nuw nsw i64 %325, 4
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep26.i, i8 0, i64 %326, i32 4, i1 false) #2
  br label %.preheader2.i

.preheader2.i:                                    ; preds = %.lr.ph16.i, %makeMaps_e.exit.i
  %327 = icmp sgt i32 %.lcssa1522, 0
  br i1 %327, label %overflow.checked, label %.preheader.i472

overflow.checked:                                 ; preds = %.preheader2.i
  %328 = add i32 %.lcssa1522, -1
  %329 = zext i32 %328 to i64
  %330 = add nuw nsw i64 %329, 1
  %end.idx = add nuw nsw i64 %329, 1
  %n.vec = and i64 %330, 8589934560
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  %331 = add i32 %.lcssa1522, -1
  %332 = zext i32 %331 to i64
  %333 = add i64 %332, 1
  %334 = lshr i64 %333, 5
  %335 = mul i64 %334, 32
  %336 = add i64 %335, -32
  %337 = lshr i64 %336, 5
  %338 = add i64 %337, 1
  %xtraiter1625 = and i64 %338, 1
  %lcmp.mod1626 = icmp ne i64 %xtraiter1625, 0
  %lcmp.overflow1627 = icmp eq i64 %338, 0
  %lcmp.or1628 = or i1 %lcmp.overflow1627, %lcmp.mod1626
  br i1 %lcmp.or1628, label %vector.body.unr, label %vector.body.preheader.split

vector.body.unr:                                  ; preds = %vector.body.preheader
  %339 = trunc i64 0 to i8
  %broadcast.splatinsert1200.unr = insertelement <16 x i8> undef, i8 %339, i32 0
  %broadcast.splat1201.unr = shufflevector <16 x i8> %broadcast.splatinsert1200.unr, <16 x i8> undef, <16 x i32> zeroinitializer
  %induction1202.unr = add <16 x i8> %broadcast.splat1201.unr, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>
  %induction1203.unr = add <16 x i8> %broadcast.splat1201.unr, <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>
  %340 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 0
  %341 = bitcast i8* %340 to <16 x i8>*
  store <16 x i8> %induction1202.unr, <16 x i8>* %341, align 16
  %.sum1339.unr = or i64 0, 16
  %342 = getelementptr [256 x i8]* %yy.i, i64 0, i64 %.sum1339.unr
  %343 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %induction1203.unr, <16 x i8>* %343, align 16
  %index.next.unr = add i64 0, 32
  %344 = icmp eq i64 %index.next.unr, %n.vec
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.unr, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.unr, %vector.body.unr ]
  %345 = icmp ult i64 %338, 2
  br i1 %345, label %middle.block.loopexit, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %346 = trunc i64 %index to i8
  %broadcast.splatinsert1200 = insertelement <16 x i8> undef, i8 %346, i32 0
  %broadcast.splat1201 = shufflevector <16 x i8> %broadcast.splatinsert1200, <16 x i8> undef, <16 x i32> zeroinitializer
  %induction1202 = add <16 x i8> %broadcast.splat1201, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>
  %induction1203 = add <16 x i8> %broadcast.splat1201, <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>
  %347 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %index
  %348 = bitcast i8* %347 to <16 x i8>*
  store <16 x i8> %induction1202, <16 x i8>* %348, align 16
  %.sum1339 = or i64 %index, 16
  %349 = getelementptr [256 x i8]* %yy.i, i64 0, i64 %.sum1339
  %350 = bitcast i8* %349 to <16 x i8>*
  store <16 x i8> %induction1203, <16 x i8>* %350, align 16
  %index.next = add i64 %index, 32
  %351 = trunc i64 %index.next to i8
  %broadcast.splatinsert1200.1 = insertelement <16 x i8> undef, i8 %351, i32 0
  %broadcast.splat1201.1 = shufflevector <16 x i8> %broadcast.splatinsert1200.1, <16 x i8> undef, <16 x i32> zeroinitializer
  %induction1202.1 = add <16 x i8> %broadcast.splat1201.1, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>
  %induction1203.1 = add <16 x i8> %broadcast.splat1201.1, <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>
  %352 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %index.next
  %353 = bitcast i8* %352 to <16 x i8>*
  store <16 x i8> %induction1202.1, <16 x i8>* %353, align 16
  %.sum1339.1 = or i64 %index.next, 16
  %354 = getelementptr [256 x i8]* %yy.i, i64 0, i64 %.sum1339.1
  %355 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %induction1203.1, <16 x i8>* %355, align 16
  %index.next.1 = add i64 %index.next, 32
  %356 = icmp eq i64 %index.next.1, %n.vec
  br i1 %356, label %middle.block.loopexit.unr-lcssa, label %vector.body, !llvm.loop !18

middle.block.loopexit.unr-lcssa:                  ; preds = %vector.body
  br label %middle.block.loopexit

middle.block.loopexit:                            ; preds = %middle.block.loopexit.unr-lcssa, %vector.body.preheader.split
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i64 [ 0, %overflow.checked ], [ %n.vec, %middle.block.loopexit ]
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %.preheader.i472, label %.lr.ph14.i.preheader

.lr.ph14.i.preheader:                             ; preds = %middle.block
  %357 = add i32 %.lcssa1522, 1
  %358 = add i64 %resume.val, 1
  %359 = trunc i64 %358 to i32
  %360 = sub i32 %357, %359
  %xtraiter1607 = and i32 %360, 3
  %lcmp.mod1608 = icmp ne i32 %xtraiter1607, 0
  %lcmp.overflow1609 = icmp eq i32 %360, 0
  %lcmp.or1610 = or i1 %lcmp.overflow1609, %lcmp.mod1608
  br i1 %lcmp.or1610, label %unr.cmp1622, label %.lr.ph14.i.preheader.split

unr.cmp1622:                                      ; preds = %.lr.ph14.i.preheader
  %un.tmp1623 = icmp eq i32 %xtraiter1607, 1
  br i1 %un.tmp1623, label %.lr.ph14.i.unr1617, label %unr.cmp1615

unr.cmp1615:                                      ; preds = %unr.cmp1622
  %un.tmp1616 = icmp eq i32 %xtraiter1607, 2
  br i1 %un.tmp1616, label %.lr.ph14.i.unr1611, label %.lr.ph14.i.unr

.lr.ph14.i.unr:                                   ; preds = %unr.cmp1615
  %361 = trunc i64 %resume.val to i8
  %362 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %resume.val
  store i8 %361, i8* %362, align 1
  %indvars.iv.next23.i.unr = add nuw nsw i64 %resume.val, 1
  %lftr.wideiv953.unr = trunc i64 %indvars.iv.next23.i.unr to i32
  %exitcond954.unr = icmp eq i32 %lftr.wideiv953.unr, %.lcssa1522
  br label %.lr.ph14.i.unr1611

.lr.ph14.i.unr1611:                               ; preds = %.lr.ph14.i.unr, %unr.cmp1615
  %indvars.iv22.i.unr = phi i64 [ %indvars.iv.next23.i.unr, %.lr.ph14.i.unr ], [ %resume.val, %unr.cmp1615 ]
  %363 = trunc i64 %indvars.iv22.i.unr to i8
  %364 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %indvars.iv22.i.unr
  store i8 %363, i8* %364, align 1
  %indvars.iv.next23.i.unr1612 = add nuw nsw i64 %indvars.iv22.i.unr, 1
  %lftr.wideiv953.unr1613 = trunc i64 %indvars.iv.next23.i.unr1612 to i32
  %exitcond954.unr1614 = icmp eq i32 %lftr.wideiv953.unr1613, %.lcssa1522
  br label %.lr.ph14.i.unr1617

.lr.ph14.i.unr1617:                               ; preds = %.lr.ph14.i.unr1611, %unr.cmp1622
  %indvars.iv22.i.unr1618 = phi i64 [ %indvars.iv.next23.i.unr1612, %.lr.ph14.i.unr1611 ], [ %resume.val, %unr.cmp1622 ]
  %365 = trunc i64 %indvars.iv22.i.unr1618 to i8
  %366 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %indvars.iv22.i.unr1618
  store i8 %365, i8* %366, align 1
  %indvars.iv.next23.i.unr1619 = add nuw nsw i64 %indvars.iv22.i.unr1618, 1
  %lftr.wideiv953.unr1620 = trunc i64 %indvars.iv.next23.i.unr1619 to i32
  %exitcond954.unr1621 = icmp eq i32 %lftr.wideiv953.unr1620, %.lcssa1522
  br label %.lr.ph14.i.preheader.split

.lr.ph14.i.preheader.split:                       ; preds = %.lr.ph14.i.unr1617, %.lr.ph14.i.preheader
  %indvars.iv22.i.unr1624 = phi i64 [ %resume.val, %.lr.ph14.i.preheader ], [ %indvars.iv.next23.i.unr1619, %.lr.ph14.i.unr1617 ]
  %367 = icmp ult i32 %360, 4
  br i1 %367, label %.preheader.i472.loopexit, label %.lr.ph14.i.preheader.split.split

.lr.ph14.i.preheader.split.split:                 ; preds = %.lr.ph14.i.preheader.split
  br label %.lr.ph14.i

.preheader.i472.loopexit.unr-lcssa:               ; preds = %.lr.ph14.i
  br label %.preheader.i472.loopexit

.preheader.i472.loopexit:                         ; preds = %.preheader.i472.loopexit.unr-lcssa, %.lr.ph14.i.preheader.split
  br label %.preheader.i472

.preheader.i472:                                  ; preds = %.preheader.i472.loopexit, %middle.block, %.preheader2.i
  %368 = load i32* %1, align 4
  %369 = icmp sgt i32 %368, 0
  br i1 %369, label %.lr.ph9.i, label %generateMTFValues.exit

.lr.ph9.i:                                        ; preds = %.preheader.i472
  %370 = getelementptr inbounds %struct.EState* %s, i64 0, i32 32, i64 0
  %371 = getelementptr inbounds %struct.EState* %s, i64 0, i32 32, i64 1
  %372 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 1
  %373 = ptrtoint [256 x i8]* %yy.i to i64
  %374 = bitcast [256 x i8]* %yy.i to i16*
  br label %383

.lr.ph14.i:                                       ; preds = %.lr.ph14.i, %.lr.ph14.i.preheader.split.split
  %indvars.iv22.i = phi i64 [ %indvars.iv22.i.unr1624, %.lr.ph14.i.preheader.split.split ], [ %indvars.iv.next23.i.3, %.lr.ph14.i ]
  %375 = trunc i64 %indvars.iv22.i to i8
  %376 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %indvars.iv22.i
  store i8 %375, i8* %376, align 1
  %indvars.iv.next23.i = add nuw nsw i64 %indvars.iv22.i, 1
  %lftr.wideiv953 = trunc i64 %indvars.iv.next23.i to i32
  %377 = trunc i64 %indvars.iv.next23.i to i8
  %378 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %indvars.iv.next23.i
  store i8 %377, i8* %378, align 1
  %indvars.iv.next23.i.1 = add nuw nsw i64 %indvars.iv.next23.i, 1
  %lftr.wideiv953.1 = trunc i64 %indvars.iv.next23.i.1 to i32
  %379 = trunc i64 %indvars.iv.next23.i.1 to i8
  %380 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %indvars.iv.next23.i.1
  store i8 %379, i8* %380, align 1
  %indvars.iv.next23.i.2 = add nuw nsw i64 %indvars.iv.next23.i.1, 1
  %lftr.wideiv953.2 = trunc i64 %indvars.iv.next23.i.2 to i32
  %381 = trunc i64 %indvars.iv.next23.i.2 to i8
  %382 = getelementptr inbounds [256 x i8]* %yy.i, i64 0, i64 %indvars.iv.next23.i.2
  store i8 %381, i8* %382, align 1
  %indvars.iv.next23.i.3 = add nuw nsw i64 %indvars.iv.next23.i.2, 1
  %lftr.wideiv953.3 = trunc i64 %indvars.iv.next23.i.3 to i32
  %exitcond954.3 = icmp eq i32 %lftr.wideiv953.3, %.lcssa1522
  br i1 %exitcond954.3, label %.preheader.i472.loopexit.unr-lcssa, label %.lr.ph14.i, !llvm.loop !19

; <label>:383                                     ; preds = %443, %.lr.ph9.i
  %indvars.iv20.i = phi i64 [ 0, %.lr.ph9.i ], [ %indvars.iv.next21.i, %443 ]
  %384 = phi i32 [ %368, %.lr.ph9.i ], [ %444, %443 ]
  %zPend.07.i = phi i32 [ 0, %.lr.ph9.i ], [ %zPend.3.i, %443 ]
  %wr.06.i = phi i32 [ 0, %.lr.ph9.i ], [ %wr.4.i, %443 ]
  %385 = getelementptr inbounds i32* %301, i64 %indvars.iv20.i
  %386 = load i32* %385, align 4
  %387 = add i32 %386, -1
  %388 = icmp slt i32 %387, 0
  %389 = select i1 %388, i32 %384, i32 0
  %..i473 = add nsw i32 %389, %387
  %390 = sext i32 %..i473 to i64
  %391 = getelementptr inbounds i8* %303, i64 %390
  %392 = load i8* %391, align 1
  %393 = zext i8 %392 to i64
  %394 = getelementptr inbounds %struct.EState* %s, i64 0, i32 23, i64 %393
  %395 = load i8* %394, align 1
  %396 = load i16* %374, align 16
  %397 = trunc i16 %396 to i8
  %398 = icmp eq i8 %397, %395
  br i1 %398, label %399, label %401

; <label>:399                                     ; preds = %383
  %400 = add nsw i32 %zPend.07.i, 1
  br label %443

; <label>:401                                     ; preds = %383
  %402 = lshr i16 %396, 8
  %403 = trunc i16 %402 to i8
  %404 = icmp sgt i32 %zPend.07.i, 0
  br i1 %404, label %405, label %424

; <label>:405                                     ; preds = %401
  %406 = add nsw i32 %zPend.07.i, -1
  %407 = sext i32 %wr.06.i to i64
  br label %408

; <label>:408                                     ; preds = %420, %405
  %indvars.iv18.i = phi i64 [ %407, %405 ], [ %indvars.iv.next19.i, %420 ]
  %zPend.1.i = phi i32 [ %406, %405 ], [ %422, %420 ]
  %409 = and i32 %zPend.1.i, 1
  %410 = icmp eq i32 %409, 0
  %411 = getelementptr inbounds i16* %305, i64 %indvars.iv18.i
  br i1 %410, label %415, label %412

; <label>:412                                     ; preds = %408
  store i16 1, i16* %411, align 2
  %413 = load i32* %371, align 4
  %414 = add nsw i32 %413, 1
  store i32 %414, i32* %371, align 4
  br label %418

; <label>:415                                     ; preds = %408
  store i16 0, i16* %411, align 2
  %416 = load i32* %370, align 4
  %417 = add nsw i32 %416, 1
  store i32 %417, i32* %370, align 4
  br label %418

; <label>:418                                     ; preds = %415, %412
  %indvars.iv.next19.i = add nsw i64 %indvars.iv18.i, 1
  %419 = icmp slt i32 %zPend.1.i, 2
  br i1 %419, label %.loopexit1.i, label %420

; <label>:420                                     ; preds = %418
  %421 = add nsw i32 %zPend.1.i, -2
  %422 = sdiv i32 %421, 2
  br label %408

.loopexit1.i:                                     ; preds = %418
  %indvars.iv.next19.i.lcssa = phi i64 [ %indvars.iv.next19.i, %418 ]
  %423 = trunc i64 %indvars.iv.next19.i.lcssa to i32
  %.pre27.i = load i8* %372, align 1
  %.pre28.i = load i8* %299, align 16
  br label %424

; <label>:424                                     ; preds = %.loopexit1.i, %401
  %425 = phi i8 [ %397, %401 ], [ %.pre28.i, %.loopexit1.i ]
  %426 = phi i8 [ %403, %401 ], [ %.pre27.i, %.loopexit1.i ]
  %wr.3.i = phi i32 [ %wr.06.i, %401 ], [ %423, %.loopexit1.i ]
  %zPend.2.i = phi i32 [ %zPend.07.i, %401 ], [ 0, %.loopexit1.i ]
  store i8 %425, i8* %372, align 1
  %427 = icmp eq i8 %395, %426
  br i1 %427, label %._crit_edge.i476, label %.lr.ph.i474.preheader

.lr.ph.i474.preheader:                            ; preds = %424
  br label %.lr.ph.i474

.lr.ph.i474:                                      ; preds = %.lr.ph.i474, %.lr.ph.i474.preheader
  %ryy_j.04.i = phi i8* [ %428, %.lr.ph.i474 ], [ %372, %.lr.ph.i474.preheader ]
  %rtmp.03.i = phi i8 [ %429, %.lr.ph.i474 ], [ %426, %.lr.ph.i474.preheader ]
  %428 = getelementptr inbounds i8* %ryy_j.04.i, i64 1
  %429 = load i8* %428, align 1
  store i8 %rtmp.03.i, i8* %428, align 1
  %430 = icmp eq i8 %395, %429
  br i1 %430, label %._crit_edge.i476.loopexit, label %.lr.ph.i474

._crit_edge.i476.loopexit:                        ; preds = %.lr.ph.i474
  %.lcssa1521 = phi i8* [ %428, %.lr.ph.i474 ]
  br label %._crit_edge.i476

._crit_edge.i476:                                 ; preds = %._crit_edge.i476.loopexit, %424
  %ryy_j.0.lcssa.i = phi i8* [ %372, %424 ], [ %.lcssa1521, %._crit_edge.i476.loopexit ]
  store i8 %395, i8* %299, align 16
  %431 = ptrtoint i8* %ryy_j.0.lcssa.i to i64
  %432 = sub i64 %431, %373
  %433 = trunc i64 %432 to i32
  %434 = add nsw i32 %433, 1
  %435 = trunc i32 %434 to i16
  %436 = sext i32 %wr.3.i to i64
  %437 = getelementptr inbounds i16* %305, i64 %436
  store i16 %435, i16* %437, align 2
  %438 = add nsw i32 %wr.3.i, 1
  %439 = sext i32 %434 to i64
  %440 = getelementptr inbounds %struct.EState* %s, i64 0, i32 32, i64 %439
  %441 = load i32* %440, align 4
  %442 = add nsw i32 %441, 1
  store i32 %442, i32* %440, align 4
  %.pre.i475 = load i32* %1, align 4
  br label %443

; <label>:443                                     ; preds = %._crit_edge.i476, %399
  %444 = phi i32 [ %384, %399 ], [ %.pre.i475, %._crit_edge.i476 ]
  %wr.4.i = phi i32 [ %wr.06.i, %399 ], [ %438, %._crit_edge.i476 ]
  %zPend.3.i = phi i32 [ %400, %399 ], [ %zPend.2.i, %._crit_edge.i476 ]
  %indvars.iv.next21.i = add nuw nsw i64 %indvars.iv20.i, 1
  %445 = trunc i64 %indvars.iv.next21.i to i32
  %446 = icmp slt i32 %445, %444
  br i1 %446, label %383, label %._crit_edge10.i

._crit_edge10.i:                                  ; preds = %443
  %zPend.3.i.lcssa = phi i32 [ %zPend.3.i, %443 ]
  %wr.4.i.lcssa = phi i32 [ %wr.4.i, %443 ]
  %447 = icmp sgt i32 %zPend.3.i.lcssa, 0
  br i1 %447, label %448, label %generateMTFValues.exit

; <label>:448                                     ; preds = %._crit_edge10.i
  %449 = add nsw i32 %zPend.3.i.lcssa, -1
  %450 = sext i32 %wr.4.i.lcssa to i64
  br label %451

; <label>:451                                     ; preds = %463, %448
  %indvars.iv.i477 = phi i64 [ %450, %448 ], [ %indvars.iv.next.i478, %463 ]
  %zPend.4.i = phi i32 [ %449, %448 ], [ %465, %463 ]
  %452 = and i32 %zPend.4.i, 1
  %453 = icmp eq i32 %452, 0
  %454 = getelementptr inbounds i16* %305, i64 %indvars.iv.i477
  br i1 %453, label %458, label %455

; <label>:455                                     ; preds = %451
  store i16 1, i16* %454, align 2
  %456 = load i32* %371, align 4
  %457 = add nsw i32 %456, 1
  store i32 %457, i32* %371, align 4
  br label %461

; <label>:458                                     ; preds = %451
  store i16 0, i16* %454, align 2
  %459 = load i32* %370, align 4
  %460 = add nsw i32 %459, 1
  store i32 %460, i32* %370, align 4
  br label %461

; <label>:461                                     ; preds = %458, %455
  %indvars.iv.next.i478 = add nsw i64 %indvars.iv.i477, 1
  %462 = icmp slt i32 %zPend.4.i, 2
  br i1 %462, label %.loopexit.i479, label %463

; <label>:463                                     ; preds = %461
  %464 = add nsw i32 %zPend.4.i, -2
  %465 = sdiv i32 %464, 2
  br label %451

.loopexit.i479:                                   ; preds = %461
  %indvars.iv.next.i478.lcssa = phi i64 [ %indvars.iv.next.i478, %461 ]
  %466 = trunc i64 %indvars.iv.next.i478.lcssa to i32
  br label %generateMTFValues.exit

generateMTFValues.exit:                           ; preds = %.loopexit.i479, %._crit_edge10.i, %.preheader.i472
  %wr.7.i = phi i32 [ %wr.4.i.lcssa, %._crit_edge10.i ], [ %466, %.loopexit.i479 ], [ 0, %.preheader.i472 ]
  %467 = trunc i32 %322 to i16
  %468 = sext i32 %wr.7.i to i64
  %469 = getelementptr inbounds i16* %305, i64 %468
  store i16 %467, i16* %469, align 2
  %470 = add nsw i32 %wr.7.i, 1
  %471 = sext i32 %322 to i64
  %472 = getelementptr inbounds %struct.EState* %s, i64 0, i32 32, i64 %471
  %473 = load i32* %472, align 4
  %474 = add nsw i32 %473, 1
  store i32 %474, i32* %472, align 4
  %475 = getelementptr inbounds %struct.EState* %s, i64 0, i32 31
  store i32 %470, i32* %475, align 4
  call void @llvm.lifetime.end(i64 256, i8* %299) #2
  %476 = bitcast [6 x i16]* %cost.i to i8*
  call void @llvm.lifetime.start(i64 12, i8* %476)
  %477 = bitcast [6 x i32]* %fave.i to i8*
  call void @llvm.lifetime.start(i64 24, i8* %477)
  %478 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 6, i8* %478)
  %479 = getelementptr inbounds [16 x i8]* %inUse16.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 16, i8* %479)
  %480 = load i16** %304, align 8
  %481 = getelementptr inbounds %struct.EState* %s, i64 0, i32 28
  %482 = load i32* %481, align 4
  %483 = icmp sgt i32 %482, 2
  br i1 %483, label %484, label %.preheader135.i

; <label>:484                                     ; preds = %generateMTFValues.exit
  %485 = load %struct._IO_FILE** @stderr, align 8
  %486 = load i32* %1, align 4
  %487 = load i32* %306, align 4
  %488 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %485, i8* getelementptr inbounds ([64 x i8]* @.str268, i64 0, i64 0), i32 %486, i32 %470, i32 %487) #12
  br label %.preheader135.i

.preheader135.i:                                  ; preds = %484, %generateMTFValues.exit
  %489 = load i32* %306, align 4
  %490 = add i32 %489, 2
  %491 = icmp sgt i32 %490, 0
  %492 = add i32 %489, 1
  %493 = zext i32 %492 to i64
  %494 = add nuw nsw i64 %493, 1
  br i1 %491, label %.lr.ph247.5.i, label %.preheader135.5369.i

; <label>:495                                     ; preds = %.preheader135.5369.i
  call void @BZ2_bz__AssertH__fail(i32 3001) #2
  %.pr.i = load i32* %475, align 4
  br label %496

; <label>:496                                     ; preds = %.preheader135.5369.i, %495
  %497 = phi i32 [ %.pr.i, %495 ], [ %4134, %.preheader135.5369.i ]
  %498 = icmp slt i32 %497, 200
  br i1 %498, label %505, label %499

; <label>:499                                     ; preds = %496
  %500 = icmp slt i32 %497, 600
  br i1 %500, label %505, label %501

; <label>:501                                     ; preds = %499
  %502 = icmp slt i32 %497, 1200
  br i1 %502, label %505, label %503

; <label>:503                                     ; preds = %501
  %504 = icmp slt i32 %497, 2400
  %..i = select i1 %504, i32 5, i32 6
  br label %505

; <label>:505                                     ; preds = %503, %501, %499, %496
  %nGroups.0.i = phi i32 [ 2, %496 ], [ 3, %499 ], [ 4, %501 ], [ %..i, %503 ]
  %506 = zext i32 %nGroups.0.i to i64
  %507 = add i32 %489, 1
  %508 = zext i32 %507 to i64
  %509 = add nuw nsw i64 %508, 1
  %510 = zext i32 %507 to i64
  %511 = add i64 %510, 1
  %512 = lshr i64 %511, 4
  %513 = mul i64 %512, 16
  %514 = add i64 %513, -16
  %515 = lshr i64 %514, 4
  %516 = add i64 %515, 1
  %517 = add i32 %489, 3
  br label %538

.preheader133.i:                                  ; preds = %._crit_edge242.i
  %518 = icmp eq i32 %nGroups.0.i, 6
  %519 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 0
  %520 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 1
  %521 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 2
  %522 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 3
  %523 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 4
  %524 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 5
  %525 = add nsw i32 %nGroups.0.i, -1
  %526 = zext i32 %525 to i64
  %527 = shl nuw nsw i64 %526, 2
  %528 = add nuw nsw i64 %527, 4
  %529 = shl nuw nsw i64 %493, 2
  %530 = add nuw nsw i64 %529, 4
  %531 = shl nuw nsw i64 %526, 1
  %532 = add nuw nsw i64 %531, 2
  %brmerge.demorgan.i = and i1 %518, %491
  %533 = add nsw i32 %nGroups.0.i, -1
  %534 = zext i32 %533 to i64
  %535 = add nuw nsw i64 %534, 1
  %536 = icmp sgt i32 %nGroups.0.i, 1
  %smax1563 = select i1 %536, i32 %nGroups.0.i, i32 1
  %537 = icmp sgt i32 %nGroups.0.i, 1
  %smax1589 = select i1 %537, i32 %nGroups.0.i, i32 1
  br label %.preheader132.i

; <label>:538                                     ; preds = %._crit_edge242.i, %505
  %indvars.iv355.i = phi i64 [ %506, %505 ], [ %574, %._crit_edge242.i ]
  %gs.0245.i = phi i32 [ 0, %505 ], [ %615, %._crit_edge242.i ]
  %remF.0244.i = phi i32 [ %497, %505 ], [ %616, %._crit_edge242.i ]
  %539 = trunc i64 %indvars.iv355.i to i32
  %540 = sdiv i32 %remF.0244.i, %539
  %541 = add i32 %gs.0245.i, -1
  %542 = icmp sgt i32 %540, 0
  %543 = icmp sle i32 %gs.0245.i, %492
  %or.cond15233.i = and i1 %542, %543
  br i1 %or.cond15233.i, label %.lr.ph237.i.preheader, label %.critedge.thread.i

.lr.ph237.i.preheader:                            ; preds = %538
  %544 = sext i32 %541 to i64
  br label %.lr.ph237.i

.lr.ph237.i:                                      ; preds = %.lr.ph237.i, %.lr.ph237.i.preheader
  %indvars.iv = phi i64 [ %544, %.lr.ph237.i.preheader ], [ %indvars.iv.next, %.lr.ph237.i ]
  %ge.0235.i = phi i32 [ %541, %.lr.ph237.i.preheader ], [ %545, %.lr.ph237.i ]
  %aFreq.0234.i = phi i32 [ 0, %.lr.ph237.i.preheader ], [ %549, %.lr.ph237.i ]
  %545 = add nsw i32 %ge.0235.i, 1
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds %struct.EState* %s, i64 0, i32 32, i64 %546
  %548 = load i32* %547, align 4
  %549 = add nsw i32 %548, %aFreq.0234.i
  %550 = icmp slt i32 %549, %540
  %551 = icmp slt i32 %545, %492
  %or.cond15.i = and i1 %550, %551
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %or.cond15.i, label %.lr.ph237.i, label %.critedge.i

.critedge.i:                                      ; preds = %.lr.ph237.i
  %.lcssa1520 = phi i32 [ %549, %.lr.ph237.i ]
  %.lcssa1519 = phi i32 [ %545, %.lr.ph237.i ]
  %aFreq.0234.i.lcssa = phi i32 [ %aFreq.0234.i, %.lr.ph237.i ]
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %.lr.ph237.i ]
  %552 = trunc i64 %indvars.iv.lcssa to i32
  %553 = icmp slt i32 %552, %gs.0245.i
  br i1 %553, label %.critedge.thread.i, label %554

; <label>:554                                     ; preds = %.critedge.i
  %555 = icmp ne i32 %nGroups.0.i, %539
  %556 = icmp ne i32 %539, 1
  %or.cond.i = and i1 %555, %556
  br i1 %or.cond.i, label %557, label %.critedge.thread.i

; <label>:557                                     ; preds = %554
  %558 = sub nsw i64 %506, %indvars.iv355.i
  %559 = trunc i64 %558 to i32
  %560 = srem i32 %559, 2
  %561 = icmp eq i32 %560, 1
  %aFreq.0234.i. = select i1 %561, i32 %aFreq.0234.i.lcssa, i32 %.lcssa1520
  %ge.0235.i. = select i1 %561, i32 %552, i32 %.lcssa1519
  br label %.critedge.thread.i

.critedge.thread.i:                               ; preds = %557, %554, %.critedge.i, %538
  %aFreq.1.i = phi i32 [ %.lcssa1520, %554 ], [ %.lcssa1520, %.critedge.i ], [ 0, %538 ], [ %aFreq.0234.i., %557 ]
  %ge.1.i = phi i32 [ %.lcssa1519, %554 ], [ %.lcssa1519, %.critedge.i ], [ %541, %538 ], [ %ge.0235.i., %557 ]
  %562 = load i32* %481, align 4
  %563 = icmp sgt i32 %562, 2
  br i1 %563, label %564, label %.preheader134.i

; <label>:564                                     ; preds = %.critedge.thread.i
  %565 = load %struct._IO_FILE** @stderr, align 8
  %566 = sitofp i32 %aFreq.1.i to float
  %567 = fpext float %566 to double
  %568 = fmul double %567, 1.000000e+02
  %569 = load i32* %475, align 4
  %570 = sitofp i32 %569 to float
  %571 = fpext float %570 to double
  %572 = fdiv double %568, %571
  %573 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %565, i8* getelementptr inbounds ([59 x i8]* @.str369, i64 0, i64 0), i32 %539, i32 %gs.0245.i, i32 %ge.1.i, i32 %aFreq.1.i, double %572) #12
  br label %.preheader134.i

.preheader134.i:                                  ; preds = %564, %.critedge.thread.i
  %574 = add nsw i64 %indvars.iv355.i, -1
  br i1 %491, label %overflow.checked1218, label %._crit_edge242.i

overflow.checked1218:                             ; preds = %.preheader134.i
  %end.idx1213 = add nuw nsw i64 %508, 1
  %n.vec1215 = and i64 %509, 8589934576
  %cmp.zero1217 = icmp eq i64 %n.vec1215, 0
  br i1 %cmp.zero1217, label %middle.block1210, label %vector.ph1208

vector.ph1208:                                    ; preds = %overflow.checked1218
  %broadcast.splatinsert1231 = insertelement <16 x i32> undef, i32 %gs.0245.i, i32 0
  %broadcast.splat1232 = shufflevector <16 x i32> %broadcast.splatinsert1231, <16 x i32> undef, <16 x i32> zeroinitializer
  %broadcast.splatinsert1233 = insertelement <16 x i32> undef, i32 %ge.1.i, i32 0
  %broadcast.splat1234 = shufflevector <16 x i32> %broadcast.splatinsert1233, <16 x i32> undef, <16 x i32> zeroinitializer
  %xtraiter1599 = and i64 %516, 1
  %lcmp.mod1600 = icmp ne i64 %xtraiter1599, 0
  %lcmp.overflow1601 = icmp eq i64 %516, 0
  %lcmp.or1602 = or i1 %lcmp.overflow1601, %lcmp.mod1600
  br i1 %lcmp.or1602, label %vector.body1209.unr, label %vector.ph1208.split

vector.body1209.unr:                              ; preds = %vector.ph1208
  %575 = trunc i64 0 to i32
  %broadcast.splatinsert1228.unr = insertelement <16 x i32> undef, i32 %575, i32 0
  %broadcast.splat1229.unr = shufflevector <16 x i32> %broadcast.splatinsert1228.unr, <16 x i32> undef, <16 x i32> zeroinitializer
  %induction1230.unr = add <16 x i32> %broadcast.splat1229.unr, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %576 = icmp slt <16 x i32> %induction1230.unr, %broadcast.splat1232
  %577 = icmp sgt <16 x i32> %induction1230.unr, %broadcast.splat1234
  %578 = or <16 x i1> %576, %577
  %579 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %574, i64 0
  %580 = select <16 x i1> %578, <16 x i8> <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>, <16 x i8> zeroinitializer
  %581 = bitcast i8* %579 to <16 x i8>*
  store <16 x i8> %580, <16 x i8>* %581, align 1
  %index.next1224.unr = add i64 0, 16
  %582 = icmp eq i64 %index.next1224.unr, %n.vec1215
  br label %vector.ph1208.split

vector.ph1208.split:                              ; preds = %vector.body1209.unr, %vector.ph1208
  %index1212.unr = phi i64 [ 0, %vector.ph1208 ], [ %index.next1224.unr, %vector.body1209.unr ]
  %583 = icmp ult i64 %516, 2
  br i1 %583, label %middle.block1210.loopexit, label %vector.ph1208.split.split

vector.ph1208.split.split:                        ; preds = %vector.ph1208.split
  br label %vector.body1209

vector.body1209:                                  ; preds = %vector.body1209, %vector.ph1208.split.split
  %index1212 = phi i64 [ %index1212.unr, %vector.ph1208.split.split ], [ %index.next1224.1, %vector.body1209 ]
  %584 = trunc i64 %index1212 to i32
  %broadcast.splatinsert1228 = insertelement <16 x i32> undef, i32 %584, i32 0
  %broadcast.splat1229 = shufflevector <16 x i32> %broadcast.splatinsert1228, <16 x i32> undef, <16 x i32> zeroinitializer
  %induction1230 = add <16 x i32> %broadcast.splat1229, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %585 = icmp slt <16 x i32> %induction1230, %broadcast.splat1232
  %586 = icmp sgt <16 x i32> %induction1230, %broadcast.splat1234
  %587 = or <16 x i1> %585, %586
  %588 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %574, i64 %index1212
  %589 = select <16 x i1> %587, <16 x i8> <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>, <16 x i8> zeroinitializer
  %590 = bitcast i8* %588 to <16 x i8>*
  store <16 x i8> %589, <16 x i8>* %590, align 1
  %index.next1224 = add i64 %index1212, 16
  %591 = trunc i64 %index.next1224 to i32
  %broadcast.splatinsert1228.1 = insertelement <16 x i32> undef, i32 %591, i32 0
  %broadcast.splat1229.1 = shufflevector <16 x i32> %broadcast.splatinsert1228.1, <16 x i32> undef, <16 x i32> zeroinitializer
  %induction1230.1 = add <16 x i32> %broadcast.splat1229.1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %592 = icmp slt <16 x i32> %induction1230.1, %broadcast.splat1232
  %593 = icmp sgt <16 x i32> %induction1230.1, %broadcast.splat1234
  %594 = or <16 x i1> %592, %593
  %595 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %574, i64 %index.next1224
  %596 = select <16 x i1> %594, <16 x i8> <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>, <16 x i8> zeroinitializer
  %597 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %596, <16 x i8>* %597, align 1
  %index.next1224.1 = add i64 %index.next1224, 16
  %598 = icmp eq i64 %index.next1224.1, %n.vec1215
  br i1 %598, label %middle.block1210.loopexit.unr-lcssa, label %vector.body1209, !llvm.loop !20

middle.block1210.loopexit.unr-lcssa:              ; preds = %vector.body1209
  br label %middle.block1210.loopexit

middle.block1210.loopexit:                        ; preds = %middle.block1210.loopexit.unr-lcssa, %vector.ph1208.split
  br label %middle.block1210

middle.block1210:                                 ; preds = %middle.block1210.loopexit, %overflow.checked1218
  %resume.val1219 = phi i64 [ 0, %overflow.checked1218 ], [ %n.vec1215, %middle.block1210.loopexit ]
  %cmp.n1223 = icmp eq i64 %end.idx1213, %resume.val1219
  br i1 %cmp.n1223, label %._crit_edge242.i, label %.lr.ph241.i.preheader

.lr.ph241.i.preheader:                            ; preds = %middle.block1210
  %599 = add i64 %resume.val1219, 1
  %600 = trunc i64 %599 to i32
  %601 = sub i32 %517, %600
  %xtraiter1603 = and i32 %601, 1
  %lcmp.mod1604 = icmp ne i32 %xtraiter1603, 0
  %lcmp.overflow1605 = icmp eq i32 %601, 0
  %lcmp.or1606 = or i1 %lcmp.overflow1605, %lcmp.mod1604
  br i1 %lcmp.or1606, label %.lr.ph241.i.unr, label %.lr.ph241.i.preheader.split

.lr.ph241.i.unr:                                  ; preds = %.lr.ph241.i.preheader
  %602 = trunc i64 %resume.val1219 to i32
  %603 = icmp slt i32 %602, %gs.0245.i
  %604 = icmp sgt i32 %602, %ge.1.i
  %or.cond5.i.unr = or i1 %603, %604
  %605 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %574, i64 %resume.val1219
  %.90.i.unr = select i1 %or.cond5.i.unr, i8 15, i8 0
  store i8 %.90.i.unr, i8* %605, align 1
  %indvars.iv.next352.i.unr = add nuw nsw i64 %resume.val1219, 1
  %lftr.wideiv951.unr = trunc i64 %indvars.iv.next352.i.unr to i32
  %exitcond952.unr = icmp eq i32 %lftr.wideiv951.unr, %490
  br label %.lr.ph241.i.preheader.split

.lr.ph241.i.preheader.split:                      ; preds = %.lr.ph241.i.unr, %.lr.ph241.i.preheader
  %indvars.iv351.i.unr = phi i64 [ %resume.val1219, %.lr.ph241.i.preheader ], [ %indvars.iv.next352.i.unr, %.lr.ph241.i.unr ]
  %606 = icmp ult i32 %601, 2
  br i1 %606, label %._crit_edge242.i.loopexit, label %.lr.ph241.i.preheader.split.split

.lr.ph241.i.preheader.split.split:                ; preds = %.lr.ph241.i.preheader.split
  br label %.lr.ph241.i

.lr.ph241.i:                                      ; preds = %.lr.ph241.i, %.lr.ph241.i.preheader.split.split
  %indvars.iv351.i = phi i64 [ %indvars.iv351.i.unr, %.lr.ph241.i.preheader.split.split ], [ %indvars.iv.next352.i.1, %.lr.ph241.i ]
  %607 = trunc i64 %indvars.iv351.i to i32
  %608 = icmp slt i32 %607, %gs.0245.i
  %609 = icmp sgt i32 %607, %ge.1.i
  %or.cond5.i = or i1 %608, %609
  %610 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %574, i64 %indvars.iv351.i
  %.90.i = select i1 %or.cond5.i, i8 15, i8 0
  store i8 %.90.i, i8* %610, align 1
  %indvars.iv.next352.i = add nuw nsw i64 %indvars.iv351.i, 1
  %lftr.wideiv951 = trunc i64 %indvars.iv.next352.i to i32
  %611 = trunc i64 %indvars.iv.next352.i to i32
  %612 = icmp slt i32 %611, %gs.0245.i
  %613 = icmp sgt i32 %611, %ge.1.i
  %or.cond5.i.1 = or i1 %612, %613
  %614 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %574, i64 %indvars.iv.next352.i
  %.90.i.1 = select i1 %or.cond5.i.1, i8 15, i8 0
  store i8 %.90.i.1, i8* %614, align 1
  %indvars.iv.next352.i.1 = add nuw nsw i64 %indvars.iv.next352.i, 1
  %lftr.wideiv951.1 = trunc i64 %indvars.iv.next352.i.1 to i32
  %exitcond952.1 = icmp eq i32 %lftr.wideiv951.1, %490
  br i1 %exitcond952.1, label %._crit_edge242.i.loopexit.unr-lcssa, label %.lr.ph241.i, !llvm.loop !21

._crit_edge242.i.loopexit.unr-lcssa:              ; preds = %.lr.ph241.i
  br label %._crit_edge242.i.loopexit

._crit_edge242.i.loopexit:                        ; preds = %._crit_edge242.i.loopexit.unr-lcssa, %.lr.ph241.i.preheader.split
  br label %._crit_edge242.i

._crit_edge242.i:                                 ; preds = %._crit_edge242.i.loopexit, %middle.block1210, %.preheader134.i
  %615 = add nsw i32 %ge.1.i, 1
  %616 = sub nsw i32 %remF.0244.i, %aFreq.1.i
  %617 = trunc i64 %574 to i32
  %618 = icmp sgt i32 %617, 0
  br i1 %618, label %538, label %.preheader133.i

.preheader132.i:                                  ; preds = %1905, %.preheader133.i
  %iter.0232.i = phi i32 [ 0, %.preheader133.i ], [ %1906, %1905 ]
  call void @llvm.memset.p0i8.i64(i8* %477, i8 0, i64 %528, i32 16, i1 false) #2
  br i1 %491, label %.preheader.preheader, label %.preheader132.i..preheader132.i.split_crit_edge

.preheader.preheader:                             ; preds = %.preheader132.i
  %xtraiter1564 = and i32 %smax1563, 3
  %lcmp.mod1565 = icmp ne i32 %xtraiter1564, 0
  %lcmp.overflow1566 = icmp eq i32 %smax1563, 0
  %lcmp.or1567 = or i1 %lcmp.overflow1566, %lcmp.mod1565
  br i1 %lcmp.or1567, label %unr.cmp1580, label %.preheader.preheader.split

unr.cmp1580:                                      ; preds = %.preheader.preheader
  %un.tmp1581 = icmp eq i32 %xtraiter1564, 1
  br i1 %un.tmp1581, label %.preheader.unr1574, label %unr.cmp1572

unr.cmp1572:                                      ; preds = %unr.cmp1580
  %un.tmp1573 = icmp eq i32 %xtraiter1564, 2
  br i1 %un.tmp1573, label %.preheader.unr1568, label %.preheader.unr

.preheader.unr:                                   ; preds = %unr.cmp1572
  %scevgep.i.us.unr = getelementptr %struct.EState* %s, i64 0, i32 37, i64 0, i64 0
  %scevgep325.i.us.unr = bitcast i32* %scevgep.i.us.unr to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us.unr, i8 0, i64 %530, i32 4, i1 false) #2
  %619 = add nsw i32 0, 1
  %620 = icmp slt i32 %619, %nGroups.0.i
  %indvar.next.i.us.unr = add i64 0, 1
  br label %.preheader.unr1568

.preheader.unr1568:                               ; preds = %.preheader.unr, %unr.cmp1572
  %indvar.i.us.unr = phi i64 [ %indvar.next.i.us.unr, %.preheader.unr ], [ 0, %unr.cmp1572 ]
  %t.2211.i.us.unr = phi i32 [ %619, %.preheader.unr ], [ 0, %unr.cmp1572 ]
  %scevgep.i.us.unr1569 = getelementptr %struct.EState* %s, i64 0, i32 37, i64 %indvar.i.us.unr, i64 0
  %scevgep325.i.us.unr1570 = bitcast i32* %scevgep.i.us.unr1569 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us.unr1570, i8 0, i64 %530, i32 4, i1 false) #2
  %621 = add nsw i32 %t.2211.i.us.unr, 1
  %622 = icmp slt i32 %621, %nGroups.0.i
  %indvar.next.i.us.unr1571 = add i64 %indvar.i.us.unr, 1
  br label %.preheader.unr1574

.preheader.unr1574:                               ; preds = %.preheader.unr1568, %unr.cmp1580
  %indvar.i.us.unr1575 = phi i64 [ %indvar.next.i.us.unr1571, %.preheader.unr1568 ], [ 0, %unr.cmp1580 ]
  %t.2211.i.us.unr1576 = phi i32 [ %621, %.preheader.unr1568 ], [ 0, %unr.cmp1580 ]
  %scevgep.i.us.unr1577 = getelementptr %struct.EState* %s, i64 0, i32 37, i64 %indvar.i.us.unr1575, i64 0
  %scevgep325.i.us.unr1578 = bitcast i32* %scevgep.i.us.unr1577 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us.unr1578, i8 0, i64 %530, i32 4, i1 false) #2
  %623 = add nsw i32 %t.2211.i.us.unr1576, 1
  %624 = icmp slt i32 %623, %nGroups.0.i
  %indvar.next.i.us.unr1579 = add i64 %indvar.i.us.unr1575, 1
  br label %.preheader.preheader.split

.preheader.preheader.split:                       ; preds = %.preheader.unr1574, %.preheader.preheader
  %indvar.i.us.unr1582 = phi i64 [ 0, %.preheader.preheader ], [ %indvar.next.i.us.unr1579, %.preheader.unr1574 ]
  %t.2211.i.us.unr1583 = phi i32 [ 0, %.preheader.preheader ], [ %623, %.preheader.unr1574 ]
  %625 = icmp ult i32 %smax1563, 4
  br i1 %625, label %.preheader132.i..preheader132.i.split_crit_edge.loopexit, label %.preheader.preheader.split.split

.preheader.preheader.split.split:                 ; preds = %.preheader.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader, %.preheader.preheader.split.split
  %indvar.i.us = phi i64 [ %indvar.i.us.unr1582, %.preheader.preheader.split.split ], [ %indvar.next.i.us.3, %.preheader ]
  %t.2211.i.us = phi i32 [ %t.2211.i.us.unr1583, %.preheader.preheader.split.split ], [ %629, %.preheader ]
  %scevgep.i.us = getelementptr %struct.EState* %s, i64 0, i32 37, i64 %indvar.i.us, i64 0
  %scevgep325.i.us = bitcast i32* %scevgep.i.us to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us, i8 0, i64 %530, i32 4, i1 false) #2
  %626 = add nsw i32 %t.2211.i.us, 1
  %indvar.next.i.us = add i64 %indvar.i.us, 1
  %scevgep.i.us.1 = getelementptr %struct.EState* %s, i64 0, i32 37, i64 %indvar.next.i.us, i64 0
  %scevgep325.i.us.1 = bitcast i32* %scevgep.i.us.1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us.1, i8 0, i64 %530, i32 4, i1 false) #2
  %627 = add nsw i32 %626, 1
  %indvar.next.i.us.1 = add i64 %indvar.next.i.us, 1
  %scevgep.i.us.2 = getelementptr %struct.EState* %s, i64 0, i32 37, i64 %indvar.next.i.us.1, i64 0
  %scevgep325.i.us.2 = bitcast i32* %scevgep.i.us.2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us.2, i8 0, i64 %530, i32 4, i1 false) #2
  %628 = add nsw i32 %627, 1
  %indvar.next.i.us.2 = add i64 %indvar.next.i.us.1, 1
  %scevgep.i.us.3 = getelementptr %struct.EState* %s, i64 0, i32 37, i64 %indvar.next.i.us.2, i64 0
  %scevgep325.i.us.3 = bitcast i32* %scevgep.i.us.3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep325.i.us.3, i8 0, i64 %530, i32 4, i1 false) #2
  %629 = add nsw i32 %628, 1
  %630 = icmp slt i32 %629, %nGroups.0.i
  %indvar.next.i.us.3 = add i64 %indvar.next.i.us.2, 1
  br i1 %630, label %.preheader, label %.preheader132.i..preheader132.i.split_crit_edge.loopexit.unr-lcssa

.preheader132.i..preheader132.i.split_crit_edge.loopexit.unr-lcssa: ; preds = %.preheader
  br label %.preheader132.i..preheader132.i.split_crit_edge.loopexit

.preheader132.i..preheader132.i.split_crit_edge.loopexit: ; preds = %.preheader132.i..preheader132.i.split_crit_edge.loopexit.unr-lcssa, %.preheader.preheader.split
  br label %.preheader132.i..preheader132.i.split_crit_edge

.preheader132.i..preheader132.i.split_crit_edge:  ; preds = %.preheader132.i..preheader132.i.split_crit_edge.loopexit, %.preheader132.i
  br i1 %brmerge.demorgan.i, label %.lr.ph213.i.preheader, label %.preheader129.i

.lr.ph213.i.preheader:                            ; preds = %.preheader132.i..preheader132.i.split_crit_edge
  br label %.lr.ph213.i

.preheader129.i.loopexit:                         ; preds = %.lr.ph213.i
  br label %.preheader129.i

.preheader129.i:                                  ; preds = %.preheader129.i.loopexit, %.preheader132.i..preheader132.i.split_crit_edge
  %631 = load i32* %475, align 4
  %632 = icmp sgt i32 %631, 0
  br i1 %632, label %.lr.ph226.i.preheader, label %1884

.lr.ph226.i.preheader:                            ; preds = %.preheader129.i
  br label %.lr.ph226.i

.lr.ph213.i:                                      ; preds = %.lr.ph213.i, %.lr.ph213.i.preheader
  %indvars.iv326.i = phi i64 [ %indvars.iv.next327.i, %.lr.ph213.i ], [ 0, %.lr.ph213.i.preheader ]
  %633 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 1, i64 %indvars.iv326.i
  %634 = load i8* %633, align 1
  %635 = zext i8 %634 to i32
  %636 = shl nuw nsw i32 %635, 16
  %637 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 0, i64 %indvars.iv326.i
  %638 = load i8* %637, align 1
  %639 = zext i8 %638 to i32
  %640 = or i32 %636, %639
  %641 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %indvars.iv326.i, i64 0
  store i32 %640, i32* %641, align 4
  %642 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 3, i64 %indvars.iv326.i
  %643 = load i8* %642, align 1
  %644 = zext i8 %643 to i32
  %645 = shl nuw nsw i32 %644, 16
  %646 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 2, i64 %indvars.iv326.i
  %647 = load i8* %646, align 1
  %648 = zext i8 %647 to i32
  %649 = or i32 %645, %648
  %650 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %indvars.iv326.i, i64 1
  store i32 %649, i32* %650, align 4
  %651 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 5, i64 %indvars.iv326.i
  %652 = load i8* %651, align 1
  %653 = zext i8 %652 to i32
  %654 = shl nuw nsw i32 %653, 16
  %655 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 4, i64 %indvars.iv326.i
  %656 = load i8* %655, align 1
  %657 = zext i8 %656 to i32
  %658 = or i32 %654, %657
  %659 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %indvars.iv326.i, i64 2
  store i32 %658, i32* %659, align 4
  %indvars.iv.next327.i = add nuw nsw i64 %indvars.iv326.i, 1
  %lftr.wideiv949 = trunc i64 %indvars.iv.next327.i to i32
  %exitcond950 = icmp eq i32 %lftr.wideiv949, %490
  br i1 %exitcond950, label %.preheader129.i.loopexit, label %.lr.ph213.i

.lr.ph226.i:                                      ; preds = %.loopexit124.i, %.lr.ph226.i.preheader
  %indvars.iv342.i = phi i64 [ %indvars.iv.next343.i, %.loopexit124.i ], [ 0, %.lr.ph226.i.preheader ]
  %660 = phi i32 [ %1881, %.loopexit124.i ], [ %631, %.lr.ph226.i.preheader ]
  %gs.1225.i = phi i32 [ %1880, %.loopexit124.i ], [ 0, %.lr.ph226.i.preheader ]
  %totc.0224.i = phi i32 [ %1443, %.loopexit124.i ], [ 0, %.lr.ph226.i.preheader ]
  %661 = add nsw i32 %gs.1225.i, 49
  %662 = add nsw i32 %660, -1
  call void @llvm.memset.p0i8.i64(i8* %476, i8 0, i64 %532, i32 2, i1 false) #2
  %663 = icmp slt i32 %661, %660
  %.6.i = select i1 %663, i32 %661, i32 %662
  %664 = sub nsw i32 %.6.i, %gs.1225.i
  %665 = icmp eq i32 %664, 49
  %or.cond8.i = and i1 %518, %665
  br i1 %or.cond8.i, label %668, label %.preheader126.i

.preheader126.i:                                  ; preds = %.lr.ph226.i
  %666 = icmp slt i32 %.6.i, %gs.1225.i
  br i1 %666, label %.preheader125.i.preheader, label %.lr.ph217.i

.lr.ph217.i:                                      ; preds = %.preheader126.i
  %667 = sext i32 %gs.1225.i to i64
  br label %overflow.checked1249

; <label>:668                                     ; preds = %.lr.ph226.i
  %669 = sext i32 %gs.1225.i to i64
  %670 = getelementptr inbounds i16* %480, i64 %669
  %671 = load i16* %670, align 2
  %672 = zext i16 %671 to i64
  %673 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %672, i64 0
  %674 = load i32* %673, align 4
  %675 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %672, i64 1
  %676 = load i32* %675, align 4
  %677 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %672, i64 2
  %678 = load i32* %677, align 4
  %679 = add nsw i32 %gs.1225.i, 1
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds i16* %480, i64 %680
  %682 = load i16* %681, align 2
  %683 = zext i16 %682 to i64
  %684 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %683, i64 0
  %685 = load i32* %684, align 4
  %686 = add i32 %685, %674
  %687 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %683, i64 1
  %688 = load i32* %687, align 4
  %689 = add i32 %688, %676
  %690 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %683, i64 2
  %691 = load i32* %690, align 4
  %692 = add i32 %691, %678
  %693 = add nsw i32 %gs.1225.i, 2
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i16* %480, i64 %694
  %696 = load i16* %695, align 2
  %697 = zext i16 %696 to i64
  %698 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %697, i64 0
  %699 = load i32* %698, align 4
  %700 = add i32 %686, %699
  %701 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %697, i64 1
  %702 = load i32* %701, align 4
  %703 = add i32 %689, %702
  %704 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %697, i64 2
  %705 = load i32* %704, align 4
  %706 = add i32 %692, %705
  %707 = add nsw i32 %gs.1225.i, 3
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16* %480, i64 %708
  %710 = load i16* %709, align 2
  %711 = zext i16 %710 to i64
  %712 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %711, i64 0
  %713 = load i32* %712, align 4
  %714 = add i32 %700, %713
  %715 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %711, i64 1
  %716 = load i32* %715, align 4
  %717 = add i32 %703, %716
  %718 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %711, i64 2
  %719 = load i32* %718, align 4
  %720 = add i32 %706, %719
  %721 = add nsw i32 %gs.1225.i, 4
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds i16* %480, i64 %722
  %724 = load i16* %723, align 2
  %725 = zext i16 %724 to i64
  %726 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %725, i64 0
  %727 = load i32* %726, align 4
  %728 = add i32 %714, %727
  %729 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %725, i64 1
  %730 = load i32* %729, align 4
  %731 = add i32 %717, %730
  %732 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %725, i64 2
  %733 = load i32* %732, align 4
  %734 = add i32 %720, %733
  %735 = add nsw i32 %gs.1225.i, 5
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i16* %480, i64 %736
  %738 = load i16* %737, align 2
  %739 = zext i16 %738 to i64
  %740 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %739, i64 0
  %741 = load i32* %740, align 4
  %742 = add i32 %728, %741
  %743 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %739, i64 1
  %744 = load i32* %743, align 4
  %745 = add i32 %731, %744
  %746 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %739, i64 2
  %747 = load i32* %746, align 4
  %748 = add i32 %734, %747
  %749 = add nsw i32 %gs.1225.i, 6
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds i16* %480, i64 %750
  %752 = load i16* %751, align 2
  %753 = zext i16 %752 to i64
  %754 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %753, i64 0
  %755 = load i32* %754, align 4
  %756 = add i32 %742, %755
  %757 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %753, i64 1
  %758 = load i32* %757, align 4
  %759 = add i32 %745, %758
  %760 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %753, i64 2
  %761 = load i32* %760, align 4
  %762 = add i32 %748, %761
  %763 = add nsw i32 %gs.1225.i, 7
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i16* %480, i64 %764
  %766 = load i16* %765, align 2
  %767 = zext i16 %766 to i64
  %768 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %767, i64 0
  %769 = load i32* %768, align 4
  %770 = add i32 %756, %769
  %771 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %767, i64 1
  %772 = load i32* %771, align 4
  %773 = add i32 %759, %772
  %774 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %767, i64 2
  %775 = load i32* %774, align 4
  %776 = add i32 %762, %775
  %777 = add nsw i32 %gs.1225.i, 8
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds i16* %480, i64 %778
  %780 = load i16* %779, align 2
  %781 = zext i16 %780 to i64
  %782 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %781, i64 0
  %783 = load i32* %782, align 4
  %784 = add i32 %770, %783
  %785 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %781, i64 1
  %786 = load i32* %785, align 4
  %787 = add i32 %773, %786
  %788 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %781, i64 2
  %789 = load i32* %788, align 4
  %790 = add i32 %776, %789
  %791 = add nsw i32 %gs.1225.i, 9
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i16* %480, i64 %792
  %794 = load i16* %793, align 2
  %795 = zext i16 %794 to i64
  %796 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %795, i64 0
  %797 = load i32* %796, align 4
  %798 = add i32 %784, %797
  %799 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %795, i64 1
  %800 = load i32* %799, align 4
  %801 = add i32 %787, %800
  %802 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %795, i64 2
  %803 = load i32* %802, align 4
  %804 = add i32 %790, %803
  %805 = add nsw i32 %gs.1225.i, 10
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i16* %480, i64 %806
  %808 = load i16* %807, align 2
  %809 = zext i16 %808 to i64
  %810 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %809, i64 0
  %811 = load i32* %810, align 4
  %812 = add i32 %798, %811
  %813 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %809, i64 1
  %814 = load i32* %813, align 4
  %815 = add i32 %801, %814
  %816 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %809, i64 2
  %817 = load i32* %816, align 4
  %818 = add i32 %804, %817
  %819 = add nsw i32 %gs.1225.i, 11
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i16* %480, i64 %820
  %822 = load i16* %821, align 2
  %823 = zext i16 %822 to i64
  %824 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %823, i64 0
  %825 = load i32* %824, align 4
  %826 = add i32 %812, %825
  %827 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %823, i64 1
  %828 = load i32* %827, align 4
  %829 = add i32 %815, %828
  %830 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %823, i64 2
  %831 = load i32* %830, align 4
  %832 = add i32 %818, %831
  %833 = add nsw i32 %gs.1225.i, 12
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i16* %480, i64 %834
  %836 = load i16* %835, align 2
  %837 = zext i16 %836 to i64
  %838 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %837, i64 0
  %839 = load i32* %838, align 4
  %840 = add i32 %826, %839
  %841 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %837, i64 1
  %842 = load i32* %841, align 4
  %843 = add i32 %829, %842
  %844 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %837, i64 2
  %845 = load i32* %844, align 4
  %846 = add i32 %832, %845
  %847 = add nsw i32 %gs.1225.i, 13
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i16* %480, i64 %848
  %850 = load i16* %849, align 2
  %851 = zext i16 %850 to i64
  %852 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %851, i64 0
  %853 = load i32* %852, align 4
  %854 = add i32 %840, %853
  %855 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %851, i64 1
  %856 = load i32* %855, align 4
  %857 = add i32 %843, %856
  %858 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %851, i64 2
  %859 = load i32* %858, align 4
  %860 = add i32 %846, %859
  %861 = add nsw i32 %gs.1225.i, 14
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i16* %480, i64 %862
  %864 = load i16* %863, align 2
  %865 = zext i16 %864 to i64
  %866 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %865, i64 0
  %867 = load i32* %866, align 4
  %868 = add i32 %854, %867
  %869 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %865, i64 1
  %870 = load i32* %869, align 4
  %871 = add i32 %857, %870
  %872 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %865, i64 2
  %873 = load i32* %872, align 4
  %874 = add i32 %860, %873
  %875 = add nsw i32 %gs.1225.i, 15
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i16* %480, i64 %876
  %878 = load i16* %877, align 2
  %879 = zext i16 %878 to i64
  %880 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %879, i64 0
  %881 = load i32* %880, align 4
  %882 = add i32 %868, %881
  %883 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %879, i64 1
  %884 = load i32* %883, align 4
  %885 = add i32 %871, %884
  %886 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %879, i64 2
  %887 = load i32* %886, align 4
  %888 = add i32 %874, %887
  %889 = add nsw i32 %gs.1225.i, 16
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i16* %480, i64 %890
  %892 = load i16* %891, align 2
  %893 = zext i16 %892 to i64
  %894 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %893, i64 0
  %895 = load i32* %894, align 4
  %896 = add i32 %882, %895
  %897 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %893, i64 1
  %898 = load i32* %897, align 4
  %899 = add i32 %885, %898
  %900 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %893, i64 2
  %901 = load i32* %900, align 4
  %902 = add i32 %888, %901
  %903 = add nsw i32 %gs.1225.i, 17
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds i16* %480, i64 %904
  %906 = load i16* %905, align 2
  %907 = zext i16 %906 to i64
  %908 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %907, i64 0
  %909 = load i32* %908, align 4
  %910 = add i32 %896, %909
  %911 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %907, i64 1
  %912 = load i32* %911, align 4
  %913 = add i32 %899, %912
  %914 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %907, i64 2
  %915 = load i32* %914, align 4
  %916 = add i32 %902, %915
  %917 = add nsw i32 %gs.1225.i, 18
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i16* %480, i64 %918
  %920 = load i16* %919, align 2
  %921 = zext i16 %920 to i64
  %922 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %921, i64 0
  %923 = load i32* %922, align 4
  %924 = add i32 %910, %923
  %925 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %921, i64 1
  %926 = load i32* %925, align 4
  %927 = add i32 %913, %926
  %928 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %921, i64 2
  %929 = load i32* %928, align 4
  %930 = add i32 %916, %929
  %931 = add nsw i32 %gs.1225.i, 19
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i16* %480, i64 %932
  %934 = load i16* %933, align 2
  %935 = zext i16 %934 to i64
  %936 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %935, i64 0
  %937 = load i32* %936, align 4
  %938 = add i32 %924, %937
  %939 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %935, i64 1
  %940 = load i32* %939, align 4
  %941 = add i32 %927, %940
  %942 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %935, i64 2
  %943 = load i32* %942, align 4
  %944 = add i32 %930, %943
  %945 = add nsw i32 %gs.1225.i, 20
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i16* %480, i64 %946
  %948 = load i16* %947, align 2
  %949 = zext i16 %948 to i64
  %950 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %949, i64 0
  %951 = load i32* %950, align 4
  %952 = add i32 %938, %951
  %953 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %949, i64 1
  %954 = load i32* %953, align 4
  %955 = add i32 %941, %954
  %956 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %949, i64 2
  %957 = load i32* %956, align 4
  %958 = add i32 %944, %957
  %959 = add nsw i32 %gs.1225.i, 21
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds i16* %480, i64 %960
  %962 = load i16* %961, align 2
  %963 = zext i16 %962 to i64
  %964 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %963, i64 0
  %965 = load i32* %964, align 4
  %966 = add i32 %952, %965
  %967 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %963, i64 1
  %968 = load i32* %967, align 4
  %969 = add i32 %955, %968
  %970 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %963, i64 2
  %971 = load i32* %970, align 4
  %972 = add i32 %958, %971
  %973 = add nsw i32 %gs.1225.i, 22
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds i16* %480, i64 %974
  %976 = load i16* %975, align 2
  %977 = zext i16 %976 to i64
  %978 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %977, i64 0
  %979 = load i32* %978, align 4
  %980 = add i32 %966, %979
  %981 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %977, i64 1
  %982 = load i32* %981, align 4
  %983 = add i32 %969, %982
  %984 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %977, i64 2
  %985 = load i32* %984, align 4
  %986 = add i32 %972, %985
  %987 = add nsw i32 %gs.1225.i, 23
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds i16* %480, i64 %988
  %990 = load i16* %989, align 2
  %991 = zext i16 %990 to i64
  %992 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %991, i64 0
  %993 = load i32* %992, align 4
  %994 = add i32 %980, %993
  %995 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %991, i64 1
  %996 = load i32* %995, align 4
  %997 = add i32 %983, %996
  %998 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %991, i64 2
  %999 = load i32* %998, align 4
  %1000 = add i32 %986, %999
  %1001 = add nsw i32 %gs.1225.i, 24
  %1002 = sext i32 %1001 to i64
  %1003 = getelementptr inbounds i16* %480, i64 %1002
  %1004 = load i16* %1003, align 2
  %1005 = zext i16 %1004 to i64
  %1006 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1005, i64 0
  %1007 = load i32* %1006, align 4
  %1008 = add i32 %994, %1007
  %1009 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1005, i64 1
  %1010 = load i32* %1009, align 4
  %1011 = add i32 %997, %1010
  %1012 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1005, i64 2
  %1013 = load i32* %1012, align 4
  %1014 = add i32 %1000, %1013
  %1015 = add nsw i32 %gs.1225.i, 25
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds i16* %480, i64 %1016
  %1018 = load i16* %1017, align 2
  %1019 = zext i16 %1018 to i64
  %1020 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1019, i64 0
  %1021 = load i32* %1020, align 4
  %1022 = add i32 %1008, %1021
  %1023 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1019, i64 1
  %1024 = load i32* %1023, align 4
  %1025 = add i32 %1011, %1024
  %1026 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1019, i64 2
  %1027 = load i32* %1026, align 4
  %1028 = add i32 %1014, %1027
  %1029 = add nsw i32 %gs.1225.i, 26
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds i16* %480, i64 %1030
  %1032 = load i16* %1031, align 2
  %1033 = zext i16 %1032 to i64
  %1034 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1033, i64 0
  %1035 = load i32* %1034, align 4
  %1036 = add i32 %1022, %1035
  %1037 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1033, i64 1
  %1038 = load i32* %1037, align 4
  %1039 = add i32 %1025, %1038
  %1040 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1033, i64 2
  %1041 = load i32* %1040, align 4
  %1042 = add i32 %1028, %1041
  %1043 = add nsw i32 %gs.1225.i, 27
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds i16* %480, i64 %1044
  %1046 = load i16* %1045, align 2
  %1047 = zext i16 %1046 to i64
  %1048 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1047, i64 0
  %1049 = load i32* %1048, align 4
  %1050 = add i32 %1036, %1049
  %1051 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1047, i64 1
  %1052 = load i32* %1051, align 4
  %1053 = add i32 %1039, %1052
  %1054 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1047, i64 2
  %1055 = load i32* %1054, align 4
  %1056 = add i32 %1042, %1055
  %1057 = add nsw i32 %gs.1225.i, 28
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds i16* %480, i64 %1058
  %1060 = load i16* %1059, align 2
  %1061 = zext i16 %1060 to i64
  %1062 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1061, i64 0
  %1063 = load i32* %1062, align 4
  %1064 = add i32 %1050, %1063
  %1065 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1061, i64 1
  %1066 = load i32* %1065, align 4
  %1067 = add i32 %1053, %1066
  %1068 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1061, i64 2
  %1069 = load i32* %1068, align 4
  %1070 = add i32 %1056, %1069
  %1071 = add nsw i32 %gs.1225.i, 29
  %1072 = sext i32 %1071 to i64
  %1073 = getelementptr inbounds i16* %480, i64 %1072
  %1074 = load i16* %1073, align 2
  %1075 = zext i16 %1074 to i64
  %1076 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1075, i64 0
  %1077 = load i32* %1076, align 4
  %1078 = add i32 %1064, %1077
  %1079 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1075, i64 1
  %1080 = load i32* %1079, align 4
  %1081 = add i32 %1067, %1080
  %1082 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1075, i64 2
  %1083 = load i32* %1082, align 4
  %1084 = add i32 %1070, %1083
  %1085 = add nsw i32 %gs.1225.i, 30
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i16* %480, i64 %1086
  %1088 = load i16* %1087, align 2
  %1089 = zext i16 %1088 to i64
  %1090 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1089, i64 0
  %1091 = load i32* %1090, align 4
  %1092 = add i32 %1078, %1091
  %1093 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1089, i64 1
  %1094 = load i32* %1093, align 4
  %1095 = add i32 %1081, %1094
  %1096 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1089, i64 2
  %1097 = load i32* %1096, align 4
  %1098 = add i32 %1084, %1097
  %1099 = add nsw i32 %gs.1225.i, 31
  %1100 = sext i32 %1099 to i64
  %1101 = getelementptr inbounds i16* %480, i64 %1100
  %1102 = load i16* %1101, align 2
  %1103 = zext i16 %1102 to i64
  %1104 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1103, i64 0
  %1105 = load i32* %1104, align 4
  %1106 = add i32 %1092, %1105
  %1107 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1103, i64 1
  %1108 = load i32* %1107, align 4
  %1109 = add i32 %1095, %1108
  %1110 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1103, i64 2
  %1111 = load i32* %1110, align 4
  %1112 = add i32 %1098, %1111
  %1113 = add nsw i32 %gs.1225.i, 32
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds i16* %480, i64 %1114
  %1116 = load i16* %1115, align 2
  %1117 = zext i16 %1116 to i64
  %1118 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1117, i64 0
  %1119 = load i32* %1118, align 4
  %1120 = add i32 %1106, %1119
  %1121 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1117, i64 1
  %1122 = load i32* %1121, align 4
  %1123 = add i32 %1109, %1122
  %1124 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1117, i64 2
  %1125 = load i32* %1124, align 4
  %1126 = add i32 %1112, %1125
  %1127 = add nsw i32 %gs.1225.i, 33
  %1128 = sext i32 %1127 to i64
  %1129 = getelementptr inbounds i16* %480, i64 %1128
  %1130 = load i16* %1129, align 2
  %1131 = zext i16 %1130 to i64
  %1132 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1131, i64 0
  %1133 = load i32* %1132, align 4
  %1134 = add i32 %1120, %1133
  %1135 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1131, i64 1
  %1136 = load i32* %1135, align 4
  %1137 = add i32 %1123, %1136
  %1138 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1131, i64 2
  %1139 = load i32* %1138, align 4
  %1140 = add i32 %1126, %1139
  %1141 = add nsw i32 %gs.1225.i, 34
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds i16* %480, i64 %1142
  %1144 = load i16* %1143, align 2
  %1145 = zext i16 %1144 to i64
  %1146 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1145, i64 0
  %1147 = load i32* %1146, align 4
  %1148 = add i32 %1134, %1147
  %1149 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1145, i64 1
  %1150 = load i32* %1149, align 4
  %1151 = add i32 %1137, %1150
  %1152 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1145, i64 2
  %1153 = load i32* %1152, align 4
  %1154 = add i32 %1140, %1153
  %1155 = add nsw i32 %gs.1225.i, 35
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i16* %480, i64 %1156
  %1158 = load i16* %1157, align 2
  %1159 = zext i16 %1158 to i64
  %1160 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1159, i64 0
  %1161 = load i32* %1160, align 4
  %1162 = add i32 %1148, %1161
  %1163 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1159, i64 1
  %1164 = load i32* %1163, align 4
  %1165 = add i32 %1151, %1164
  %1166 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1159, i64 2
  %1167 = load i32* %1166, align 4
  %1168 = add i32 %1154, %1167
  %1169 = add nsw i32 %gs.1225.i, 36
  %1170 = sext i32 %1169 to i64
  %1171 = getelementptr inbounds i16* %480, i64 %1170
  %1172 = load i16* %1171, align 2
  %1173 = zext i16 %1172 to i64
  %1174 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1173, i64 0
  %1175 = load i32* %1174, align 4
  %1176 = add i32 %1162, %1175
  %1177 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1173, i64 1
  %1178 = load i32* %1177, align 4
  %1179 = add i32 %1165, %1178
  %1180 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1173, i64 2
  %1181 = load i32* %1180, align 4
  %1182 = add i32 %1168, %1181
  %1183 = add nsw i32 %gs.1225.i, 37
  %1184 = sext i32 %1183 to i64
  %1185 = getelementptr inbounds i16* %480, i64 %1184
  %1186 = load i16* %1185, align 2
  %1187 = zext i16 %1186 to i64
  %1188 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1187, i64 0
  %1189 = load i32* %1188, align 4
  %1190 = add i32 %1176, %1189
  %1191 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1187, i64 1
  %1192 = load i32* %1191, align 4
  %1193 = add i32 %1179, %1192
  %1194 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1187, i64 2
  %1195 = load i32* %1194, align 4
  %1196 = add i32 %1182, %1195
  %1197 = add nsw i32 %gs.1225.i, 38
  %1198 = sext i32 %1197 to i64
  %1199 = getelementptr inbounds i16* %480, i64 %1198
  %1200 = load i16* %1199, align 2
  %1201 = zext i16 %1200 to i64
  %1202 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1201, i64 0
  %1203 = load i32* %1202, align 4
  %1204 = add i32 %1190, %1203
  %1205 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1201, i64 1
  %1206 = load i32* %1205, align 4
  %1207 = add i32 %1193, %1206
  %1208 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1201, i64 2
  %1209 = load i32* %1208, align 4
  %1210 = add i32 %1196, %1209
  %1211 = add nsw i32 %gs.1225.i, 39
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i16* %480, i64 %1212
  %1214 = load i16* %1213, align 2
  %1215 = zext i16 %1214 to i64
  %1216 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1215, i64 0
  %1217 = load i32* %1216, align 4
  %1218 = add i32 %1204, %1217
  %1219 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1215, i64 1
  %1220 = load i32* %1219, align 4
  %1221 = add i32 %1207, %1220
  %1222 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1215, i64 2
  %1223 = load i32* %1222, align 4
  %1224 = add i32 %1210, %1223
  %1225 = add nsw i32 %gs.1225.i, 40
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i16* %480, i64 %1226
  %1228 = load i16* %1227, align 2
  %1229 = zext i16 %1228 to i64
  %1230 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1229, i64 0
  %1231 = load i32* %1230, align 4
  %1232 = add i32 %1218, %1231
  %1233 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1229, i64 1
  %1234 = load i32* %1233, align 4
  %1235 = add i32 %1221, %1234
  %1236 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1229, i64 2
  %1237 = load i32* %1236, align 4
  %1238 = add i32 %1224, %1237
  %1239 = add nsw i32 %gs.1225.i, 41
  %1240 = sext i32 %1239 to i64
  %1241 = getelementptr inbounds i16* %480, i64 %1240
  %1242 = load i16* %1241, align 2
  %1243 = zext i16 %1242 to i64
  %1244 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1243, i64 0
  %1245 = load i32* %1244, align 4
  %1246 = add i32 %1232, %1245
  %1247 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1243, i64 1
  %1248 = load i32* %1247, align 4
  %1249 = add i32 %1235, %1248
  %1250 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1243, i64 2
  %1251 = load i32* %1250, align 4
  %1252 = add i32 %1238, %1251
  %1253 = add nsw i32 %gs.1225.i, 42
  %1254 = sext i32 %1253 to i64
  %1255 = getelementptr inbounds i16* %480, i64 %1254
  %1256 = load i16* %1255, align 2
  %1257 = zext i16 %1256 to i64
  %1258 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1257, i64 0
  %1259 = load i32* %1258, align 4
  %1260 = add i32 %1246, %1259
  %1261 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1257, i64 1
  %1262 = load i32* %1261, align 4
  %1263 = add i32 %1249, %1262
  %1264 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1257, i64 2
  %1265 = load i32* %1264, align 4
  %1266 = add i32 %1252, %1265
  %1267 = add nsw i32 %gs.1225.i, 43
  %1268 = sext i32 %1267 to i64
  %1269 = getelementptr inbounds i16* %480, i64 %1268
  %1270 = load i16* %1269, align 2
  %1271 = zext i16 %1270 to i64
  %1272 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1271, i64 0
  %1273 = load i32* %1272, align 4
  %1274 = add i32 %1260, %1273
  %1275 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1271, i64 1
  %1276 = load i32* %1275, align 4
  %1277 = add i32 %1263, %1276
  %1278 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1271, i64 2
  %1279 = load i32* %1278, align 4
  %1280 = add i32 %1266, %1279
  %1281 = add nsw i32 %gs.1225.i, 44
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds i16* %480, i64 %1282
  %1284 = load i16* %1283, align 2
  %1285 = zext i16 %1284 to i64
  %1286 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1285, i64 0
  %1287 = load i32* %1286, align 4
  %1288 = add i32 %1274, %1287
  %1289 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1285, i64 1
  %1290 = load i32* %1289, align 4
  %1291 = add i32 %1277, %1290
  %1292 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1285, i64 2
  %1293 = load i32* %1292, align 4
  %1294 = add i32 %1280, %1293
  %1295 = add nsw i32 %gs.1225.i, 45
  %1296 = sext i32 %1295 to i64
  %1297 = getelementptr inbounds i16* %480, i64 %1296
  %1298 = load i16* %1297, align 2
  %1299 = zext i16 %1298 to i64
  %1300 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1299, i64 0
  %1301 = load i32* %1300, align 4
  %1302 = add i32 %1288, %1301
  %1303 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1299, i64 1
  %1304 = load i32* %1303, align 4
  %1305 = add i32 %1291, %1304
  %1306 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1299, i64 2
  %1307 = load i32* %1306, align 4
  %1308 = add i32 %1294, %1307
  %1309 = add nsw i32 %gs.1225.i, 46
  %1310 = sext i32 %1309 to i64
  %1311 = getelementptr inbounds i16* %480, i64 %1310
  %1312 = load i16* %1311, align 2
  %1313 = zext i16 %1312 to i64
  %1314 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1313, i64 0
  %1315 = load i32* %1314, align 4
  %1316 = add i32 %1302, %1315
  %1317 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1313, i64 1
  %1318 = load i32* %1317, align 4
  %1319 = add i32 %1305, %1318
  %1320 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1313, i64 2
  %1321 = load i32* %1320, align 4
  %1322 = add i32 %1308, %1321
  %1323 = add nsw i32 %gs.1225.i, 47
  %1324 = sext i32 %1323 to i64
  %1325 = getelementptr inbounds i16* %480, i64 %1324
  %1326 = load i16* %1325, align 2
  %1327 = zext i16 %1326 to i64
  %1328 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1327, i64 0
  %1329 = load i32* %1328, align 4
  %1330 = add i32 %1316, %1329
  %1331 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1327, i64 1
  %1332 = load i32* %1331, align 4
  %1333 = add i32 %1319, %1332
  %1334 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1327, i64 2
  %1335 = load i32* %1334, align 4
  %1336 = add i32 %1322, %1335
  %1337 = add nsw i32 %gs.1225.i, 48
  %1338 = sext i32 %1337 to i64
  %1339 = getelementptr inbounds i16* %480, i64 %1338
  %1340 = load i16* %1339, align 2
  %1341 = zext i16 %1340 to i64
  %1342 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1341, i64 0
  %1343 = load i32* %1342, align 4
  %1344 = add i32 %1330, %1343
  %1345 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1341, i64 1
  %1346 = load i32* %1345, align 4
  %1347 = add i32 %1333, %1346
  %1348 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1341, i64 2
  %1349 = load i32* %1348, align 4
  %1350 = add i32 %1336, %1349
  %1351 = sext i32 %661 to i64
  %1352 = getelementptr inbounds i16* %480, i64 %1351
  %1353 = load i16* %1352, align 2
  %1354 = zext i16 %1353 to i64
  %1355 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1354, i64 0
  %1356 = load i32* %1355, align 4
  %1357 = add i32 %1344, %1356
  %1358 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1354, i64 1
  %1359 = load i32* %1358, align 4
  %1360 = add i32 %1347, %1359
  %1361 = getelementptr inbounds %struct.EState* %s, i64 0, i32 38, i64 %1354, i64 2
  %1362 = load i32* %1361, align 4
  %1363 = add i32 %1350, %1362
  %1364 = trunc i32 %1357 to i16
  store i16 %1364, i16* %519, align 2
  %1365 = lshr i32 %1357, 16
  %1366 = trunc i32 %1365 to i16
  store i16 %1366, i16* %520, align 2
  %1367 = trunc i32 %1360 to i16
  store i16 %1367, i16* %521, align 2
  %1368 = lshr i32 %1360, 16
  %1369 = trunc i32 %1368 to i16
  store i16 %1369, i16* %522, align 2
  %1370 = trunc i32 %1363 to i16
  store i16 %1370, i16* %523, align 2
  %1371 = lshr i32 %1363, 16
  %1372 = trunc i32 %1371 to i16
  store i16 %1372, i16* %524, align 2
  br label %.preheader125.i.preheader

overflow.checked1249:                             ; preds = %1418, %.lr.ph217.i
  %indvars.iv336.i = phi i64 [ %indvars.iv.next337.i, %1418 ], [ %667, %.lr.ph217.i ]
  %1373 = getelementptr inbounds i16* %480, i64 %indvars.iv336.i
  %1374 = load i16* %1373, align 2
  %1375 = zext i16 %1374 to i64
  %end.idx1244 = add nuw nsw i64 %534, 1
  %n.vec1246 = and i64 %535, 8589934590
  %cmp.zero1248 = icmp eq i64 %n.vec1246, 0
  br i1 %cmp.zero1248, label %middle.block1241, label %vector.body1240.preheader

vector.body1240.preheader:                        ; preds = %overflow.checked1249
  br label %vector.body1240

vector.body1240:                                  ; preds = %vector.body1240, %vector.body1240.preheader
  %index1243 = phi i64 [ %index.next1255, %vector.body1240 ], [ 0, %vector.body1240.preheader ]
  %induction12571338 = or i64 %index1243, 1
  %1376 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %index1243, i64 %1375
  %1377 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %induction12571338, i64 %1375
  %1378 = load i8* %1376, align 1
  %1379 = load i8* %1377, align 1
  %1380 = zext i8 %1378 to i16
  %1381 = zext i8 %1379 to i16
  %1382 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %index1243
  %1383 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %induction12571338
  %1384 = load i16* %1382, align 2
  %1385 = load i16* %1383, align 2
  %1386 = add i16 %1384, %1380
  %1387 = add i16 %1385, %1381
  store i16 %1386, i16* %1382, align 2
  store i16 %1387, i16* %1383, align 2
  %index.next1255 = add i64 %index1243, 2
  %1388 = icmp eq i64 %index.next1255, %n.vec1246
  br i1 %1388, label %middle.block1241.loopexit, label %vector.body1240, !llvm.loop !22

middle.block1241.loopexit:                        ; preds = %vector.body1240
  br label %middle.block1241

middle.block1241:                                 ; preds = %middle.block1241.loopexit, %overflow.checked1249
  %resume.val1250 = phi i64 [ 0, %overflow.checked1249 ], [ %n.vec1246, %middle.block1241.loopexit ]
  %cmp.n1254 = icmp eq i64 %end.idx1244, %resume.val1250
  br i1 %cmp.n1254, label %1418, label %scalar.ph1242.preheader

scalar.ph1242.preheader:                          ; preds = %middle.block1241
  %1389 = add i64 %resume.val1250, 1
  %1390 = trunc i64 %1389 to i32
  %1391 = icmp sgt i32 %nGroups.0.i, %1390
  %smax1584 = select i1 %1391, i32 %nGroups.0.i, i32 %1390
  %1392 = add i32 %smax1584, 1
  %1393 = sub i32 %1392, %1390
  %xtraiter1585 = and i32 %1393, 1
  %lcmp.mod1586 = icmp ne i32 %xtraiter1585, 0
  %lcmp.overflow1587 = icmp eq i32 %1393, 0
  %lcmp.or1588 = or i1 %lcmp.overflow1587, %lcmp.mod1586
  br i1 %lcmp.or1588, label %scalar.ph1242.unr, label %scalar.ph1242.preheader.split

scalar.ph1242.unr:                                ; preds = %scalar.ph1242.preheader
  %1394 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %resume.val1250, i64 %1375
  %1395 = load i8* %1394, align 1
  %1396 = zext i8 %1395 to i16
  %1397 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %resume.val1250
  %1398 = load i16* %1397, align 2
  %1399 = add i16 %1398, %1396
  store i16 %1399, i16* %1397, align 2
  %indvars.iv.next335.i.unr = add nuw nsw i64 %resume.val1250, 1
  %1400 = trunc i64 %indvars.iv.next335.i.unr to i32
  %1401 = icmp slt i32 %1400, %nGroups.0.i
  br label %scalar.ph1242.preheader.split

scalar.ph1242.preheader.split:                    ; preds = %scalar.ph1242.unr, %scalar.ph1242.preheader
  %indvars.iv334.i.unr = phi i64 [ %resume.val1250, %scalar.ph1242.preheader ], [ %indvars.iv.next335.i.unr, %scalar.ph1242.unr ]
  %1402 = icmp ult i32 %1393, 2
  br i1 %1402, label %.loopexit1342, label %scalar.ph1242.preheader.split.split

scalar.ph1242.preheader.split.split:              ; preds = %scalar.ph1242.preheader.split
  br label %scalar.ph1242

scalar.ph1242:                                    ; preds = %scalar.ph1242, %scalar.ph1242.preheader.split.split
  %indvars.iv334.i = phi i64 [ %indvars.iv334.i.unr, %scalar.ph1242.preheader.split.split ], [ %indvars.iv.next335.i.1, %scalar.ph1242 ]
  %1403 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv334.i, i64 %1375
  %1404 = load i8* %1403, align 1
  %1405 = zext i8 %1404 to i16
  %1406 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %indvars.iv334.i
  %1407 = load i16* %1406, align 2
  %1408 = add i16 %1407, %1405
  store i16 %1408, i16* %1406, align 2
  %indvars.iv.next335.i = add nuw nsw i64 %indvars.iv334.i, 1
  %1409 = trunc i64 %indvars.iv.next335.i to i32
  %1410 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv.next335.i, i64 %1375
  %1411 = load i8* %1410, align 1
  %1412 = zext i8 %1411 to i16
  %1413 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %indvars.iv.next335.i
  %1414 = load i16* %1413, align 2
  %1415 = add i16 %1414, %1412
  store i16 %1415, i16* %1413, align 2
  %indvars.iv.next335.i.1 = add nuw nsw i64 %indvars.iv.next335.i, 1
  %1416 = trunc i64 %indvars.iv.next335.i.1 to i32
  %1417 = icmp slt i32 %1416, %nGroups.0.i
  br i1 %1417, label %scalar.ph1242, label %.loopexit1342.unr-lcssa, !llvm.loop !23

.loopexit1342.unr-lcssa:                          ; preds = %scalar.ph1242
  br label %.loopexit1342

.loopexit1342:                                    ; preds = %.loopexit1342.unr-lcssa, %scalar.ph1242.preheader.split
  br label %1418

; <label>:1418                                    ; preds = %.loopexit1342, %middle.block1241
  %indvars.iv.next337.i = add nsw i64 %indvars.iv336.i, 1
  %1419 = trunc i64 %indvars.iv336.i to i32
  %1420 = icmp slt i32 %1419, %.6.i
  br i1 %1420, label %overflow.checked1249, label %.preheader125.i.preheader.loopexit

.preheader125.i.preheader.loopexit:               ; preds = %1418
  br label %.preheader125.i.preheader

.preheader125.i.preheader:                        ; preds = %.preheader125.i.preheader.loopexit, %668, %.preheader126.i
  %xtraiter1590 = and i32 %smax1589, 1
  %lcmp.mod1591 = icmp ne i32 %xtraiter1590, 0
  %lcmp.overflow1592 = icmp eq i32 %smax1589, 0
  %lcmp.or1593 = or i1 %lcmp.overflow1592, %lcmp.mod1591
  br i1 %lcmp.or1593, label %.preheader125.i.unr, label %.preheader125.i.preheader.split

.preheader125.i.unr:                              ; preds = %.preheader125.i.preheader
  %1421 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 0
  %1422 = load i16* %1421, align 2
  %1423 = zext i16 %1422 to i32
  %1424 = icmp slt i32 %1423, 999999999
  %.bc.0.i.unr = select i1 %1424, i32 %1423, i32 999999999
  %1425 = trunc i64 0 to i32
  %t.5.bt.0.i.unr = select i1 %1424, i32 %1425, i32 -1
  %indvars.iv.next339.i.unr = add nuw nsw i64 0, 1
  %1426 = trunc i64 %indvars.iv.next339.i.unr to i32
  %1427 = icmp slt i32 %1426, %nGroups.0.i
  br label %.preheader125.i.preheader.split

.preheader125.i.preheader.split:                  ; preds = %.preheader125.i.unr, %.preheader125.i.preheader
  %indvars.iv338.i.unr = phi i64 [ 0, %.preheader125.i.preheader ], [ %indvars.iv.next339.i.unr, %.preheader125.i.unr ]
  %bt.0219.i.unr = phi i32 [ -1, %.preheader125.i.preheader ], [ %t.5.bt.0.i.unr, %.preheader125.i.unr ]
  %bc.0218.i.unr = phi i32 [ 999999999, %.preheader125.i.preheader ], [ %.bc.0.i.unr, %.preheader125.i.unr ]
  %t.5.bt.0.i.lcssa.unr = phi i32 [ 0, %.preheader125.i.preheader ], [ %t.5.bt.0.i.unr, %.preheader125.i.unr ]
  %.bc.0.i.lcssa.unr = phi i32 [ 0, %.preheader125.i.preheader ], [ %.bc.0.i.unr, %.preheader125.i.unr ]
  %1428 = icmp ult i32 %smax1589, 2
  br i1 %1428, label %1442, label %.preheader125.i.preheader.split.split

.preheader125.i.preheader.split.split:            ; preds = %.preheader125.i.preheader.split
  br label %.preheader125.i

.preheader125.i:                                  ; preds = %.preheader125.i, %.preheader125.i.preheader.split.split
  %indvars.iv338.i = phi i64 [ %indvars.iv338.i.unr, %.preheader125.i.preheader.split.split ], [ %indvars.iv.next339.i.1, %.preheader125.i ]
  %bt.0219.i = phi i32 [ %bt.0219.i.unr, %.preheader125.i.preheader.split.split ], [ %t.5.bt.0.i.1, %.preheader125.i ]
  %bc.0218.i = phi i32 [ %bc.0218.i.unr, %.preheader125.i.preheader.split.split ], [ %.bc.0.i.1, %.preheader125.i ]
  %1429 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %indvars.iv338.i
  %1430 = load i16* %1429, align 2
  %1431 = zext i16 %1430 to i32
  %1432 = icmp slt i32 %1431, %bc.0218.i
  %.bc.0.i = select i1 %1432, i32 %1431, i32 %bc.0218.i
  %1433 = trunc i64 %indvars.iv338.i to i32
  %t.5.bt.0.i = select i1 %1432, i32 %1433, i32 %bt.0219.i
  %indvars.iv.next339.i = add nuw nsw i64 %indvars.iv338.i, 1
  %1434 = trunc i64 %indvars.iv.next339.i to i32
  %1435 = getelementptr inbounds [6 x i16]* %cost.i, i64 0, i64 %indvars.iv.next339.i
  %1436 = load i16* %1435, align 2
  %1437 = zext i16 %1436 to i32
  %1438 = icmp slt i32 %1437, %.bc.0.i
  %.bc.0.i.1 = select i1 %1438, i32 %1437, i32 %.bc.0.i
  %1439 = trunc i64 %indvars.iv.next339.i to i32
  %t.5.bt.0.i.1 = select i1 %1438, i32 %1439, i32 %t.5.bt.0.i
  %indvars.iv.next339.i.1 = add nuw nsw i64 %indvars.iv.next339.i, 1
  %1440 = trunc i64 %indvars.iv.next339.i.1 to i32
  %1441 = icmp slt i32 %1440, %nGroups.0.i
  br i1 %1441, label %.preheader125.i, label %.unr-lcssa

.unr-lcssa:                                       ; preds = %.preheader125.i
  %t.5.bt.0.i.lcssa.ph = phi i32 [ %t.5.bt.0.i.1, %.preheader125.i ]
  %.bc.0.i.lcssa.ph = phi i32 [ %.bc.0.i.1, %.preheader125.i ]
  br label %1442

; <label>:1442                                    ; preds = %.unr-lcssa, %.preheader125.i.preheader.split
  %t.5.bt.0.i.lcssa = phi i32 [ %t.5.bt.0.i.lcssa.unr, %.preheader125.i.preheader.split ], [ %t.5.bt.0.i.lcssa.ph, %.unr-lcssa ]
  %.bc.0.i.lcssa = phi i32 [ %.bc.0.i.lcssa.unr, %.preheader125.i.preheader.split ], [ %.bc.0.i.lcssa.ph, %.unr-lcssa ]
  %1443 = add nsw i32 %.bc.0.i.lcssa, %totc.0224.i
  %1444 = sext i32 %t.5.bt.0.i.lcssa to i64
  %1445 = getelementptr inbounds [6 x i32]* %fave.i, i64 0, i64 %1444
  %1446 = load i32* %1445, align 4
  %1447 = add nsw i32 %1446, 1
  store i32 %1447, i32* %1445, align 4
  %1448 = trunc i32 %t.5.bt.0.i.lcssa to i8
  %1449 = getelementptr inbounds %struct.EState* %s, i64 0, i32 33, i64 %indvars.iv342.i
  store i8 %1448, i8* %1449, align 1
  %indvars.iv.next343.i = add nuw nsw i64 %indvars.iv342.i, 1
  br i1 %or.cond8.i, label %1465, label %.preheader123.i

.preheader123.i:                                  ; preds = %1442
  %1450 = icmp slt i32 %.6.i, %gs.1225.i
  br i1 %1450, label %.loopexit124.i, label %.lr.ph222.i

.lr.ph222.i:                                      ; preds = %.preheader123.i
  %1451 = sext i32 %gs.1225.i to i64
  %1452 = icmp sgt i32 %.6.i, %gs.1225.i
  %smax1594 = select i1 %1452, i32 %.6.i, i32 %gs.1225.i
  %1453 = add i32 %smax1594, 1
  %1454 = sub i32 %1453, %gs.1225.i
  %xtraiter1595 = and i32 %1454, 1
  %lcmp.mod1596 = icmp ne i32 %xtraiter1595, 0
  %lcmp.overflow1597 = icmp eq i32 %1454, 0
  %lcmp.or1598 = or i1 %lcmp.overflow1597, %lcmp.mod1596
  br i1 %lcmp.or1598, label %1455, label %.lr.ph222.i.split

; <label>:1455                                    ; preds = %.lr.ph222.i
  %1456 = getelementptr inbounds i16* %480, i64 %1451
  %1457 = load i16* %1456, align 2
  %1458 = zext i16 %1457 to i64
  %1459 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1458
  %1460 = load i32* %1459, align 4
  %1461 = add nsw i32 %1460, 1
  store i32 %1461, i32* %1459, align 4
  %indvars.iv.next341.i.unr = add nsw i64 %1451, 1
  %1462 = trunc i64 %1451 to i32
  %1463 = icmp slt i32 %1462, %.6.i
  br label %.lr.ph222.i.split

.lr.ph222.i.split:                                ; preds = %1455, %.lr.ph222.i
  %indvars.iv340.i.unr = phi i64 [ %1451, %.lr.ph222.i ], [ %indvars.iv.next341.i.unr, %1455 ]
  %1464 = icmp ult i32 %1454, 2
  br i1 %1464, label %.loopexit124.i.loopexit, label %.lr.ph222.i.split.split

.lr.ph222.i.split.split:                          ; preds = %.lr.ph222.i.split
  br label %1864

; <label>:1465                                    ; preds = %1442
  %1466 = sext i32 %gs.1225.i to i64
  %1467 = getelementptr inbounds i16* %480, i64 %1466
  %1468 = load i16* %1467, align 2
  %1469 = zext i16 %1468 to i64
  %1470 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1469
  %1471 = load i32* %1470, align 4
  %1472 = add nsw i32 %1471, 1
  store i32 %1472, i32* %1470, align 4
  %1473 = add nsw i32 %gs.1225.i, 1
  %1474 = sext i32 %1473 to i64
  %1475 = getelementptr inbounds i16* %480, i64 %1474
  %1476 = load i16* %1475, align 2
  %1477 = zext i16 %1476 to i64
  %1478 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1477
  %1479 = load i32* %1478, align 4
  %1480 = add nsw i32 %1479, 1
  store i32 %1480, i32* %1478, align 4
  %1481 = add nsw i32 %gs.1225.i, 2
  %1482 = sext i32 %1481 to i64
  %1483 = getelementptr inbounds i16* %480, i64 %1482
  %1484 = load i16* %1483, align 2
  %1485 = zext i16 %1484 to i64
  %1486 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1485
  %1487 = load i32* %1486, align 4
  %1488 = add nsw i32 %1487, 1
  store i32 %1488, i32* %1486, align 4
  %1489 = add nsw i32 %gs.1225.i, 3
  %1490 = sext i32 %1489 to i64
  %1491 = getelementptr inbounds i16* %480, i64 %1490
  %1492 = load i16* %1491, align 2
  %1493 = zext i16 %1492 to i64
  %1494 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1493
  %1495 = load i32* %1494, align 4
  %1496 = add nsw i32 %1495, 1
  store i32 %1496, i32* %1494, align 4
  %1497 = add nsw i32 %gs.1225.i, 4
  %1498 = sext i32 %1497 to i64
  %1499 = getelementptr inbounds i16* %480, i64 %1498
  %1500 = load i16* %1499, align 2
  %1501 = zext i16 %1500 to i64
  %1502 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1501
  %1503 = load i32* %1502, align 4
  %1504 = add nsw i32 %1503, 1
  store i32 %1504, i32* %1502, align 4
  %1505 = add nsw i32 %gs.1225.i, 5
  %1506 = sext i32 %1505 to i64
  %1507 = getelementptr inbounds i16* %480, i64 %1506
  %1508 = load i16* %1507, align 2
  %1509 = zext i16 %1508 to i64
  %1510 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1509
  %1511 = load i32* %1510, align 4
  %1512 = add nsw i32 %1511, 1
  store i32 %1512, i32* %1510, align 4
  %1513 = add nsw i32 %gs.1225.i, 6
  %1514 = sext i32 %1513 to i64
  %1515 = getelementptr inbounds i16* %480, i64 %1514
  %1516 = load i16* %1515, align 2
  %1517 = zext i16 %1516 to i64
  %1518 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1517
  %1519 = load i32* %1518, align 4
  %1520 = add nsw i32 %1519, 1
  store i32 %1520, i32* %1518, align 4
  %1521 = add nsw i32 %gs.1225.i, 7
  %1522 = sext i32 %1521 to i64
  %1523 = getelementptr inbounds i16* %480, i64 %1522
  %1524 = load i16* %1523, align 2
  %1525 = zext i16 %1524 to i64
  %1526 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1525
  %1527 = load i32* %1526, align 4
  %1528 = add nsw i32 %1527, 1
  store i32 %1528, i32* %1526, align 4
  %1529 = add nsw i32 %gs.1225.i, 8
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds i16* %480, i64 %1530
  %1532 = load i16* %1531, align 2
  %1533 = zext i16 %1532 to i64
  %1534 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1533
  %1535 = load i32* %1534, align 4
  %1536 = add nsw i32 %1535, 1
  store i32 %1536, i32* %1534, align 4
  %1537 = add nsw i32 %gs.1225.i, 9
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr inbounds i16* %480, i64 %1538
  %1540 = load i16* %1539, align 2
  %1541 = zext i16 %1540 to i64
  %1542 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1541
  %1543 = load i32* %1542, align 4
  %1544 = add nsw i32 %1543, 1
  store i32 %1544, i32* %1542, align 4
  %1545 = add nsw i32 %gs.1225.i, 10
  %1546 = sext i32 %1545 to i64
  %1547 = getelementptr inbounds i16* %480, i64 %1546
  %1548 = load i16* %1547, align 2
  %1549 = zext i16 %1548 to i64
  %1550 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1549
  %1551 = load i32* %1550, align 4
  %1552 = add nsw i32 %1551, 1
  store i32 %1552, i32* %1550, align 4
  %1553 = add nsw i32 %gs.1225.i, 11
  %1554 = sext i32 %1553 to i64
  %1555 = getelementptr inbounds i16* %480, i64 %1554
  %1556 = load i16* %1555, align 2
  %1557 = zext i16 %1556 to i64
  %1558 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1557
  %1559 = load i32* %1558, align 4
  %1560 = add nsw i32 %1559, 1
  store i32 %1560, i32* %1558, align 4
  %1561 = add nsw i32 %gs.1225.i, 12
  %1562 = sext i32 %1561 to i64
  %1563 = getelementptr inbounds i16* %480, i64 %1562
  %1564 = load i16* %1563, align 2
  %1565 = zext i16 %1564 to i64
  %1566 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1565
  %1567 = load i32* %1566, align 4
  %1568 = add nsw i32 %1567, 1
  store i32 %1568, i32* %1566, align 4
  %1569 = add nsw i32 %gs.1225.i, 13
  %1570 = sext i32 %1569 to i64
  %1571 = getelementptr inbounds i16* %480, i64 %1570
  %1572 = load i16* %1571, align 2
  %1573 = zext i16 %1572 to i64
  %1574 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1573
  %1575 = load i32* %1574, align 4
  %1576 = add nsw i32 %1575, 1
  store i32 %1576, i32* %1574, align 4
  %1577 = add nsw i32 %gs.1225.i, 14
  %1578 = sext i32 %1577 to i64
  %1579 = getelementptr inbounds i16* %480, i64 %1578
  %1580 = load i16* %1579, align 2
  %1581 = zext i16 %1580 to i64
  %1582 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1581
  %1583 = load i32* %1582, align 4
  %1584 = add nsw i32 %1583, 1
  store i32 %1584, i32* %1582, align 4
  %1585 = add nsw i32 %gs.1225.i, 15
  %1586 = sext i32 %1585 to i64
  %1587 = getelementptr inbounds i16* %480, i64 %1586
  %1588 = load i16* %1587, align 2
  %1589 = zext i16 %1588 to i64
  %1590 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1589
  %1591 = load i32* %1590, align 4
  %1592 = add nsw i32 %1591, 1
  store i32 %1592, i32* %1590, align 4
  %1593 = add nsw i32 %gs.1225.i, 16
  %1594 = sext i32 %1593 to i64
  %1595 = getelementptr inbounds i16* %480, i64 %1594
  %1596 = load i16* %1595, align 2
  %1597 = zext i16 %1596 to i64
  %1598 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1597
  %1599 = load i32* %1598, align 4
  %1600 = add nsw i32 %1599, 1
  store i32 %1600, i32* %1598, align 4
  %1601 = add nsw i32 %gs.1225.i, 17
  %1602 = sext i32 %1601 to i64
  %1603 = getelementptr inbounds i16* %480, i64 %1602
  %1604 = load i16* %1603, align 2
  %1605 = zext i16 %1604 to i64
  %1606 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1605
  %1607 = load i32* %1606, align 4
  %1608 = add nsw i32 %1607, 1
  store i32 %1608, i32* %1606, align 4
  %1609 = add nsw i32 %gs.1225.i, 18
  %1610 = sext i32 %1609 to i64
  %1611 = getelementptr inbounds i16* %480, i64 %1610
  %1612 = load i16* %1611, align 2
  %1613 = zext i16 %1612 to i64
  %1614 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1613
  %1615 = load i32* %1614, align 4
  %1616 = add nsw i32 %1615, 1
  store i32 %1616, i32* %1614, align 4
  %1617 = add nsw i32 %gs.1225.i, 19
  %1618 = sext i32 %1617 to i64
  %1619 = getelementptr inbounds i16* %480, i64 %1618
  %1620 = load i16* %1619, align 2
  %1621 = zext i16 %1620 to i64
  %1622 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1621
  %1623 = load i32* %1622, align 4
  %1624 = add nsw i32 %1623, 1
  store i32 %1624, i32* %1622, align 4
  %1625 = add nsw i32 %gs.1225.i, 20
  %1626 = sext i32 %1625 to i64
  %1627 = getelementptr inbounds i16* %480, i64 %1626
  %1628 = load i16* %1627, align 2
  %1629 = zext i16 %1628 to i64
  %1630 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1629
  %1631 = load i32* %1630, align 4
  %1632 = add nsw i32 %1631, 1
  store i32 %1632, i32* %1630, align 4
  %1633 = add nsw i32 %gs.1225.i, 21
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i16* %480, i64 %1634
  %1636 = load i16* %1635, align 2
  %1637 = zext i16 %1636 to i64
  %1638 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1637
  %1639 = load i32* %1638, align 4
  %1640 = add nsw i32 %1639, 1
  store i32 %1640, i32* %1638, align 4
  %1641 = add nsw i32 %gs.1225.i, 22
  %1642 = sext i32 %1641 to i64
  %1643 = getelementptr inbounds i16* %480, i64 %1642
  %1644 = load i16* %1643, align 2
  %1645 = zext i16 %1644 to i64
  %1646 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1645
  %1647 = load i32* %1646, align 4
  %1648 = add nsw i32 %1647, 1
  store i32 %1648, i32* %1646, align 4
  %1649 = add nsw i32 %gs.1225.i, 23
  %1650 = sext i32 %1649 to i64
  %1651 = getelementptr inbounds i16* %480, i64 %1650
  %1652 = load i16* %1651, align 2
  %1653 = zext i16 %1652 to i64
  %1654 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1653
  %1655 = load i32* %1654, align 4
  %1656 = add nsw i32 %1655, 1
  store i32 %1656, i32* %1654, align 4
  %1657 = add nsw i32 %gs.1225.i, 24
  %1658 = sext i32 %1657 to i64
  %1659 = getelementptr inbounds i16* %480, i64 %1658
  %1660 = load i16* %1659, align 2
  %1661 = zext i16 %1660 to i64
  %1662 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1661
  %1663 = load i32* %1662, align 4
  %1664 = add nsw i32 %1663, 1
  store i32 %1664, i32* %1662, align 4
  %1665 = add nsw i32 %gs.1225.i, 25
  %1666 = sext i32 %1665 to i64
  %1667 = getelementptr inbounds i16* %480, i64 %1666
  %1668 = load i16* %1667, align 2
  %1669 = zext i16 %1668 to i64
  %1670 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1669
  %1671 = load i32* %1670, align 4
  %1672 = add nsw i32 %1671, 1
  store i32 %1672, i32* %1670, align 4
  %1673 = add nsw i32 %gs.1225.i, 26
  %1674 = sext i32 %1673 to i64
  %1675 = getelementptr inbounds i16* %480, i64 %1674
  %1676 = load i16* %1675, align 2
  %1677 = zext i16 %1676 to i64
  %1678 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1677
  %1679 = load i32* %1678, align 4
  %1680 = add nsw i32 %1679, 1
  store i32 %1680, i32* %1678, align 4
  %1681 = add nsw i32 %gs.1225.i, 27
  %1682 = sext i32 %1681 to i64
  %1683 = getelementptr inbounds i16* %480, i64 %1682
  %1684 = load i16* %1683, align 2
  %1685 = zext i16 %1684 to i64
  %1686 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1685
  %1687 = load i32* %1686, align 4
  %1688 = add nsw i32 %1687, 1
  store i32 %1688, i32* %1686, align 4
  %1689 = add nsw i32 %gs.1225.i, 28
  %1690 = sext i32 %1689 to i64
  %1691 = getelementptr inbounds i16* %480, i64 %1690
  %1692 = load i16* %1691, align 2
  %1693 = zext i16 %1692 to i64
  %1694 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1693
  %1695 = load i32* %1694, align 4
  %1696 = add nsw i32 %1695, 1
  store i32 %1696, i32* %1694, align 4
  %1697 = add nsw i32 %gs.1225.i, 29
  %1698 = sext i32 %1697 to i64
  %1699 = getelementptr inbounds i16* %480, i64 %1698
  %1700 = load i16* %1699, align 2
  %1701 = zext i16 %1700 to i64
  %1702 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1701
  %1703 = load i32* %1702, align 4
  %1704 = add nsw i32 %1703, 1
  store i32 %1704, i32* %1702, align 4
  %1705 = add nsw i32 %gs.1225.i, 30
  %1706 = sext i32 %1705 to i64
  %1707 = getelementptr inbounds i16* %480, i64 %1706
  %1708 = load i16* %1707, align 2
  %1709 = zext i16 %1708 to i64
  %1710 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1709
  %1711 = load i32* %1710, align 4
  %1712 = add nsw i32 %1711, 1
  store i32 %1712, i32* %1710, align 4
  %1713 = add nsw i32 %gs.1225.i, 31
  %1714 = sext i32 %1713 to i64
  %1715 = getelementptr inbounds i16* %480, i64 %1714
  %1716 = load i16* %1715, align 2
  %1717 = zext i16 %1716 to i64
  %1718 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1717
  %1719 = load i32* %1718, align 4
  %1720 = add nsw i32 %1719, 1
  store i32 %1720, i32* %1718, align 4
  %1721 = add nsw i32 %gs.1225.i, 32
  %1722 = sext i32 %1721 to i64
  %1723 = getelementptr inbounds i16* %480, i64 %1722
  %1724 = load i16* %1723, align 2
  %1725 = zext i16 %1724 to i64
  %1726 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1725
  %1727 = load i32* %1726, align 4
  %1728 = add nsw i32 %1727, 1
  store i32 %1728, i32* %1726, align 4
  %1729 = add nsw i32 %gs.1225.i, 33
  %1730 = sext i32 %1729 to i64
  %1731 = getelementptr inbounds i16* %480, i64 %1730
  %1732 = load i16* %1731, align 2
  %1733 = zext i16 %1732 to i64
  %1734 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1733
  %1735 = load i32* %1734, align 4
  %1736 = add nsw i32 %1735, 1
  store i32 %1736, i32* %1734, align 4
  %1737 = add nsw i32 %gs.1225.i, 34
  %1738 = sext i32 %1737 to i64
  %1739 = getelementptr inbounds i16* %480, i64 %1738
  %1740 = load i16* %1739, align 2
  %1741 = zext i16 %1740 to i64
  %1742 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1741
  %1743 = load i32* %1742, align 4
  %1744 = add nsw i32 %1743, 1
  store i32 %1744, i32* %1742, align 4
  %1745 = add nsw i32 %gs.1225.i, 35
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr inbounds i16* %480, i64 %1746
  %1748 = load i16* %1747, align 2
  %1749 = zext i16 %1748 to i64
  %1750 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1749
  %1751 = load i32* %1750, align 4
  %1752 = add nsw i32 %1751, 1
  store i32 %1752, i32* %1750, align 4
  %1753 = add nsw i32 %gs.1225.i, 36
  %1754 = sext i32 %1753 to i64
  %1755 = getelementptr inbounds i16* %480, i64 %1754
  %1756 = load i16* %1755, align 2
  %1757 = zext i16 %1756 to i64
  %1758 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1757
  %1759 = load i32* %1758, align 4
  %1760 = add nsw i32 %1759, 1
  store i32 %1760, i32* %1758, align 4
  %1761 = add nsw i32 %gs.1225.i, 37
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i16* %480, i64 %1762
  %1764 = load i16* %1763, align 2
  %1765 = zext i16 %1764 to i64
  %1766 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1765
  %1767 = load i32* %1766, align 4
  %1768 = add nsw i32 %1767, 1
  store i32 %1768, i32* %1766, align 4
  %1769 = add nsw i32 %gs.1225.i, 38
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds i16* %480, i64 %1770
  %1772 = load i16* %1771, align 2
  %1773 = zext i16 %1772 to i64
  %1774 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1773
  %1775 = load i32* %1774, align 4
  %1776 = add nsw i32 %1775, 1
  store i32 %1776, i32* %1774, align 4
  %1777 = add nsw i32 %gs.1225.i, 39
  %1778 = sext i32 %1777 to i64
  %1779 = getelementptr inbounds i16* %480, i64 %1778
  %1780 = load i16* %1779, align 2
  %1781 = zext i16 %1780 to i64
  %1782 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1781
  %1783 = load i32* %1782, align 4
  %1784 = add nsw i32 %1783, 1
  store i32 %1784, i32* %1782, align 4
  %1785 = add nsw i32 %gs.1225.i, 40
  %1786 = sext i32 %1785 to i64
  %1787 = getelementptr inbounds i16* %480, i64 %1786
  %1788 = load i16* %1787, align 2
  %1789 = zext i16 %1788 to i64
  %1790 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1789
  %1791 = load i32* %1790, align 4
  %1792 = add nsw i32 %1791, 1
  store i32 %1792, i32* %1790, align 4
  %1793 = add nsw i32 %gs.1225.i, 41
  %1794 = sext i32 %1793 to i64
  %1795 = getelementptr inbounds i16* %480, i64 %1794
  %1796 = load i16* %1795, align 2
  %1797 = zext i16 %1796 to i64
  %1798 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1797
  %1799 = load i32* %1798, align 4
  %1800 = add nsw i32 %1799, 1
  store i32 %1800, i32* %1798, align 4
  %1801 = add nsw i32 %gs.1225.i, 42
  %1802 = sext i32 %1801 to i64
  %1803 = getelementptr inbounds i16* %480, i64 %1802
  %1804 = load i16* %1803, align 2
  %1805 = zext i16 %1804 to i64
  %1806 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1805
  %1807 = load i32* %1806, align 4
  %1808 = add nsw i32 %1807, 1
  store i32 %1808, i32* %1806, align 4
  %1809 = add nsw i32 %gs.1225.i, 43
  %1810 = sext i32 %1809 to i64
  %1811 = getelementptr inbounds i16* %480, i64 %1810
  %1812 = load i16* %1811, align 2
  %1813 = zext i16 %1812 to i64
  %1814 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1813
  %1815 = load i32* %1814, align 4
  %1816 = add nsw i32 %1815, 1
  store i32 %1816, i32* %1814, align 4
  %1817 = add nsw i32 %gs.1225.i, 44
  %1818 = sext i32 %1817 to i64
  %1819 = getelementptr inbounds i16* %480, i64 %1818
  %1820 = load i16* %1819, align 2
  %1821 = zext i16 %1820 to i64
  %1822 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1821
  %1823 = load i32* %1822, align 4
  %1824 = add nsw i32 %1823, 1
  store i32 %1824, i32* %1822, align 4
  %1825 = add nsw i32 %gs.1225.i, 45
  %1826 = sext i32 %1825 to i64
  %1827 = getelementptr inbounds i16* %480, i64 %1826
  %1828 = load i16* %1827, align 2
  %1829 = zext i16 %1828 to i64
  %1830 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1829
  %1831 = load i32* %1830, align 4
  %1832 = add nsw i32 %1831, 1
  store i32 %1832, i32* %1830, align 4
  %1833 = add nsw i32 %gs.1225.i, 46
  %1834 = sext i32 %1833 to i64
  %1835 = getelementptr inbounds i16* %480, i64 %1834
  %1836 = load i16* %1835, align 2
  %1837 = zext i16 %1836 to i64
  %1838 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1837
  %1839 = load i32* %1838, align 4
  %1840 = add nsw i32 %1839, 1
  store i32 %1840, i32* %1838, align 4
  %1841 = add nsw i32 %gs.1225.i, 47
  %1842 = sext i32 %1841 to i64
  %1843 = getelementptr inbounds i16* %480, i64 %1842
  %1844 = load i16* %1843, align 2
  %1845 = zext i16 %1844 to i64
  %1846 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1845
  %1847 = load i32* %1846, align 4
  %1848 = add nsw i32 %1847, 1
  store i32 %1848, i32* %1846, align 4
  %1849 = add nsw i32 %gs.1225.i, 48
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds i16* %480, i64 %1850
  %1852 = load i16* %1851, align 2
  %1853 = zext i16 %1852 to i64
  %1854 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1853
  %1855 = load i32* %1854, align 4
  %1856 = add nsw i32 %1855, 1
  store i32 %1856, i32* %1854, align 4
  %1857 = sext i32 %661 to i64
  %1858 = getelementptr inbounds i16* %480, i64 %1857
  %1859 = load i16* %1858, align 2
  %1860 = zext i16 %1859 to i64
  %1861 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1860
  %1862 = load i32* %1861, align 4
  %1863 = add nsw i32 %1862, 1
  store i32 %1863, i32* %1861, align 4
  br label %.loopexit124.i

; <label>:1864                                    ; preds = %1864, %.lr.ph222.i.split.split
  %indvars.iv340.i = phi i64 [ %indvars.iv340.i.unr, %.lr.ph222.i.split.split ], [ %indvars.iv.next341.i.1, %1864 ]
  %1865 = getelementptr inbounds i16* %480, i64 %indvars.iv340.i
  %1866 = load i16* %1865, align 2
  %1867 = zext i16 %1866 to i64
  %1868 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1867
  %1869 = load i32* %1868, align 4
  %1870 = add nsw i32 %1869, 1
  store i32 %1870, i32* %1868, align 4
  %indvars.iv.next341.i = add nsw i64 %indvars.iv340.i, 1
  %1871 = trunc i64 %indvars.iv340.i to i32
  %1872 = getelementptr inbounds i16* %480, i64 %indvars.iv.next341.i
  %1873 = load i16* %1872, align 2
  %1874 = zext i16 %1873 to i64
  %1875 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %1444, i64 %1874
  %1876 = load i32* %1875, align 4
  %1877 = add nsw i32 %1876, 1
  store i32 %1877, i32* %1875, align 4
  %indvars.iv.next341.i.1 = add nsw i64 %indvars.iv.next341.i, 1
  %1878 = trunc i64 %indvars.iv.next341.i to i32
  %1879 = icmp slt i32 %1878, %.6.i
  br i1 %1879, label %1864, label %.loopexit124.i.loopexit.unr-lcssa

.loopexit124.i.loopexit.unr-lcssa:                ; preds = %1864
  br label %.loopexit124.i.loopexit

.loopexit124.i.loopexit:                          ; preds = %.loopexit124.i.loopexit.unr-lcssa, %.lr.ph222.i.split
  br label %.loopexit124.i

.loopexit124.i:                                   ; preds = %.loopexit124.i.loopexit, %1465, %.preheader123.i
  %1880 = add nsw i32 %.6.i, 1
  %1881 = load i32* %475, align 4
  %1882 = icmp slt i32 %1880, %1881
  br i1 %1882, label %.lr.ph226.i, label %._crit_edge227.i

._crit_edge227.i:                                 ; preds = %.loopexit124.i
  %indvars.iv.next343.i.lcssa = phi i64 [ %indvars.iv.next343.i, %.loopexit124.i ]
  %.lcssa1517 = phi i32 [ %1443, %.loopexit124.i ]
  %1883 = trunc i64 %indvars.iv.next343.i.lcssa to i32
  %phitmp250.i = sdiv i32 %.lcssa1517, 8
  br label %1884

; <label>:1884                                    ; preds = %._crit_edge227.i, %.preheader129.i
  %totc.0.lcssa.i = phi i32 [ %phitmp250.i, %._crit_edge227.i ], [ 0, %.preheader129.i ]
  %nSelectors.1.lcssa.i = phi i32 [ %1883, %._crit_edge227.i ], [ 0, %.preheader129.i ]
  %1885 = load i32* %481, align 4
  %1886 = icmp sgt i32 %1885, 2
  br i1 %1886, label %1887, label %.preheader128.i.preheader

; <label>:1887                                    ; preds = %1884
  %1888 = load %struct._IO_FILE** @stderr, align 8
  %1889 = add nsw i32 %iter.0232.i, 1
  %1890 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1888, i8* getelementptr inbounds ([41 x i8]* @.str470, i64 0, i64 0), i32 %1889, i32 %totc.0.lcssa.i) #12
  %1891 = load %struct._IO_FILE** @stderr, align 8
  br label %1892

; <label>:1892                                    ; preds = %1892, %1887
  %indvars.iv344.i = phi i64 [ 0, %1887 ], [ %indvars.iv.next345.i, %1892 ]
  %1893 = phi %struct._IO_FILE* [ %1891, %1887 ], [ %1899, %1892 ]
  %1894 = getelementptr inbounds [6 x i32]* %fave.i, i64 0, i64 %indvars.iv344.i
  %1895 = load i32* %1894, align 4
  %1896 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1893, i8* getelementptr inbounds ([4 x i8]* @.str571, i64 0, i64 0), i32 %1895) #12
  %indvars.iv.next345.i = add nuw nsw i64 %indvars.iv344.i, 1
  %1897 = trunc i64 %indvars.iv.next345.i to i32
  %1898 = icmp slt i32 %1897, %nGroups.0.i
  %1899 = load %struct._IO_FILE** @stderr, align 8
  br i1 %1898, label %1892, label %1900

; <label>:1900                                    ; preds = %1892
  %.lcssa1518 = phi %struct._IO_FILE* [ %1899, %1892 ]
  %fputc.i = call i32 @fputc(i32 10, %struct._IO_FILE* %.lcssa1518) #12
  br label %.preheader128.i.preheader

.preheader128.i.preheader:                        ; preds = %1900, %1884
  br label %.preheader128.i

.preheader128.i:                                  ; preds = %.preheader128.i, %.preheader128.i.preheader
  %indvars.iv346.i = phi i64 [ %indvars.iv.next347.i, %.preheader128.i ], [ 0, %.preheader128.i.preheader ]
  %1901 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv346.i, i64 0
  %1902 = getelementptr inbounds %struct.EState* %s, i64 0, i32 37, i64 %indvars.iv346.i, i64 0
  call void @BZ2_hbMakeCodeLengths(i8* %1901, i32* %1902, i32 %490, i32 17) #2
  %indvars.iv.next347.i = add nuw nsw i64 %indvars.iv346.i, 1
  %1903 = trunc i64 %indvars.iv.next347.i to i32
  %1904 = icmp slt i32 %1903, %nGroups.0.i
  br i1 %1904, label %.preheader128.i, label %1905

; <label>:1905                                    ; preds = %.preheader128.i
  %1906 = add nsw i32 %iter.0232.i, 1
  %exitcond348.i = icmp eq i32 %1906, 4
  br i1 %exitcond348.i, label %1907, label %.preheader132.i

; <label>:1907                                    ; preds = %1905
  %nSelectors.1.lcssa.i.lcssa = phi i32 [ %nSelectors.1.lcssa.i, %1905 ]
  %1908 = icmp slt i32 %nSelectors.1.lcssa.i.lcssa, 18003
  br i1 %1908, label %overflow.checked1271, label %1909

; <label>:1909                                    ; preds = %1907
  call void @BZ2_bz__AssertH__fail(i32 3003) #2
  br label %overflow.checked1271

overflow.checked1271:                             ; preds = %1909, %1907
  %1910 = add nsw i32 %nGroups.0.i, -1
  %1911 = zext i32 %1910 to i64
  %1912 = add nuw nsw i64 %1911, 1
  %end.idx1266 = add nuw nsw i64 %1911, 1
  %n.vec1268 = and i64 %1912, 8589934560
  %cmp.zero1270 = icmp eq i64 %n.vec1268, 0
  %cast.crd = trunc i64 %n.vec1268 to i32
  br i1 %cmp.zero1270, label %middle.block1263, label %vector.body1262.preheader

vector.body1262.preheader:                        ; preds = %overflow.checked1271
  %1913 = add i32 %nGroups.0.i, -1
  %1914 = zext i32 %1913 to i64
  %1915 = add i64 %1914, 1
  %1916 = lshr i64 %1915, 5
  %1917 = mul i64 %1916, 32
  %1918 = add i64 %1917, -32
  %1919 = lshr i64 %1918, 5
  %1920 = add i64 %1919, 1
  %xtraiter1559 = and i64 %1920, 1
  %lcmp.mod1560 = icmp ne i64 %xtraiter1559, 0
  %lcmp.overflow1561 = icmp eq i64 %1920, 0
  %lcmp.or1562 = or i1 %lcmp.overflow1561, %lcmp.mod1560
  br i1 %lcmp.or1562, label %vector.body1262.unr, label %vector.body1262.preheader.split

vector.body1262.unr:                              ; preds = %vector.body1262.preheader
  %1921 = trunc i64 0 to i32
  %broadcast.splatinsert1284.unr = insertelement <16 x i32> undef, i32 %1921, i32 0
  %broadcast.splat1285.unr = shufflevector <16 x i32> %broadcast.splatinsert1284.unr, <16 x i32> undef, <16 x i32> zeroinitializer
  %induction1286.unr = add <16 x i32> %broadcast.splat1285.unr, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %induction1287.unr = add <16 x i32> %broadcast.splat1285.unr, <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1922 = trunc <16 x i32> %induction1286.unr to <16 x i8>
  %1923 = trunc <16 x i32> %induction1287.unr to <16 x i8>
  %1924 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 0
  %1925 = bitcast i8* %1924 to <16 x i8>*
  store <16 x i8> %1922, <16 x i8>* %1925, align 1
  %.sum1336.unr = or i64 0, 16
  %1926 = getelementptr [6 x i8]* %pos.i, i64 0, i64 %.sum1336.unr
  %1927 = bitcast i8* %1926 to <16 x i8>*
  store <16 x i8> %1923, <16 x i8>* %1927, align 1
  %index.next1279.unr = add i64 0, 32
  %1928 = icmp eq i64 %index.next1279.unr, %n.vec1268
  br label %vector.body1262.preheader.split

vector.body1262.preheader.split:                  ; preds = %vector.body1262.unr, %vector.body1262.preheader
  %index1265.unr = phi i64 [ 0, %vector.body1262.preheader ], [ %index.next1279.unr, %vector.body1262.unr ]
  %1929 = icmp ult i64 %1920, 2
  br i1 %1929, label %middle.block1263.loopexit, label %vector.body1262.preheader.split.split

vector.body1262.preheader.split.split:            ; preds = %vector.body1262.preheader.split
  br label %vector.body1262

vector.body1262:                                  ; preds = %vector.body1262, %vector.body1262.preheader.split.split
  %index1265 = phi i64 [ %index1265.unr, %vector.body1262.preheader.split.split ], [ %index.next1279.1, %vector.body1262 ]
  %1930 = trunc i64 %index1265 to i32
  %broadcast.splatinsert1284 = insertelement <16 x i32> undef, i32 %1930, i32 0
  %broadcast.splat1285 = shufflevector <16 x i32> %broadcast.splatinsert1284, <16 x i32> undef, <16 x i32> zeroinitializer
  %induction1286 = add <16 x i32> %broadcast.splat1285, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %induction1287 = add <16 x i32> %broadcast.splat1285, <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1931 = trunc <16 x i32> %induction1286 to <16 x i8>
  %1932 = trunc <16 x i32> %induction1287 to <16 x i8>
  %1933 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %index1265
  %1934 = bitcast i8* %1933 to <16 x i8>*
  store <16 x i8> %1931, <16 x i8>* %1934, align 1
  %.sum1336 = or i64 %index1265, 16
  %1935 = getelementptr [6 x i8]* %pos.i, i64 0, i64 %.sum1336
  %1936 = bitcast i8* %1935 to <16 x i8>*
  store <16 x i8> %1932, <16 x i8>* %1936, align 1
  %index.next1279 = add i64 %index1265, 32
  %1937 = trunc i64 %index.next1279 to i32
  %broadcast.splatinsert1284.1 = insertelement <16 x i32> undef, i32 %1937, i32 0
  %broadcast.splat1285.1 = shufflevector <16 x i32> %broadcast.splatinsert1284.1, <16 x i32> undef, <16 x i32> zeroinitializer
  %induction1286.1 = add <16 x i32> %broadcast.splat1285.1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %induction1287.1 = add <16 x i32> %broadcast.splat1285.1, <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1938 = trunc <16 x i32> %induction1286.1 to <16 x i8>
  %1939 = trunc <16 x i32> %induction1287.1 to <16 x i8>
  %1940 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %index.next1279
  %1941 = bitcast i8* %1940 to <16 x i8>*
  store <16 x i8> %1938, <16 x i8>* %1941, align 1
  %.sum1336.1 = or i64 %index.next1279, 16
  %1942 = getelementptr [6 x i8]* %pos.i, i64 0, i64 %.sum1336.1
  %1943 = bitcast i8* %1942 to <16 x i8>*
  store <16 x i8> %1939, <16 x i8>* %1943, align 1
  %index.next1279.1 = add i64 %index.next1279, 32
  %1944 = icmp eq i64 %index.next1279.1, %n.vec1268
  br i1 %1944, label %middle.block1263.loopexit.unr-lcssa, label %vector.body1262, !llvm.loop !24

middle.block1263.loopexit.unr-lcssa:              ; preds = %vector.body1262
  br label %middle.block1263.loopexit

middle.block1263.loopexit:                        ; preds = %middle.block1263.loopexit.unr-lcssa, %vector.body1262.preheader.split
  br label %middle.block1263

middle.block1263:                                 ; preds = %middle.block1263.loopexit, %overflow.checked1271
  %resume.val1272 = phi i64 [ 0, %overflow.checked1271 ], [ %n.vec1268, %middle.block1263.loopexit ]
  %resume.val1276 = phi i32 [ 0, %overflow.checked1271 ], [ %cast.crd, %middle.block1263.loopexit ]
  %cmp.n1278 = icmp eq i64 %end.idx1266, %resume.val1272
  br i1 %cmp.n1278, label %.preheader121.i, label %.preheader122.i.preheader

.preheader122.i.preheader:                        ; preds = %middle.block1263
  %1945 = add i64 %resume.val1272, 1
  %1946 = trunc i64 %1945 to i32
  %1947 = icmp sgt i32 %nGroups.0.i, %1946
  %smax = select i1 %1947, i32 %nGroups.0.i, i32 %1946
  %1948 = add i32 %smax, 1
  %1949 = sub i32 %1948, %1946
  %xtraiter1545 = and i32 %1949, 3
  %lcmp.mod1546 = icmp ne i32 %xtraiter1545, 0
  %lcmp.overflow1547 = icmp eq i32 %1949, 0
  %lcmp.or1548 = or i1 %lcmp.overflow1547, %lcmp.mod1546
  br i1 %lcmp.or1548, label %unr.cmp1555, label %.preheader122.i.preheader.split

unr.cmp1555:                                      ; preds = %.preheader122.i.preheader
  %un.tmp1556 = icmp eq i32 %xtraiter1545, 1
  br i1 %un.tmp1556, label %.preheader122.i.unr1551, label %unr.cmp

unr.cmp:                                          ; preds = %unr.cmp1555
  %un.tmp = icmp eq i32 %xtraiter1545, 2
  br i1 %un.tmp, label %.preheader122.i.unr1549, label %.preheader122.i.unr

.preheader122.i.unr:                              ; preds = %unr.cmp
  %1950 = trunc i32 %resume.val1276 to i8
  %1951 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %resume.val1272
  store i8 %1950, i8* %1951, align 1
  %indvars.iv.next317.i.unr = add nuw nsw i64 %resume.val1272, 1
  %1952 = add nsw i32 %resume.val1276, 1
  %1953 = trunc i64 %indvars.iv.next317.i.unr to i32
  %1954 = icmp slt i32 %1953, %nGroups.0.i
  br label %.preheader122.i.unr1549

.preheader122.i.unr1549:                          ; preds = %.preheader122.i.unr, %unr.cmp
  %indvars.iv316.i.unr = phi i64 [ %indvars.iv.next317.i.unr, %.preheader122.i.unr ], [ %resume.val1272, %unr.cmp ]
  %i.2206.i.unr = phi i32 [ %1952, %.preheader122.i.unr ], [ %resume.val1276, %unr.cmp ]
  %1955 = trunc i32 %i.2206.i.unr to i8
  %1956 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv316.i.unr
  store i8 %1955, i8* %1956, align 1
  %indvars.iv.next317.i.unr1550 = add nuw nsw i64 %indvars.iv316.i.unr, 1
  %1957 = add nsw i32 %i.2206.i.unr, 1
  %1958 = trunc i64 %indvars.iv.next317.i.unr1550 to i32
  %1959 = icmp slt i32 %1958, %nGroups.0.i
  br label %.preheader122.i.unr1551

.preheader122.i.unr1551:                          ; preds = %.preheader122.i.unr1549, %unr.cmp1555
  %indvars.iv316.i.unr1552 = phi i64 [ %indvars.iv.next317.i.unr1550, %.preheader122.i.unr1549 ], [ %resume.val1272, %unr.cmp1555 ]
  %i.2206.i.unr1553 = phi i32 [ %1957, %.preheader122.i.unr1549 ], [ %resume.val1276, %unr.cmp1555 ]
  %1960 = trunc i32 %i.2206.i.unr1553 to i8
  %1961 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv316.i.unr1552
  store i8 %1960, i8* %1961, align 1
  %indvars.iv.next317.i.unr1554 = add nuw nsw i64 %indvars.iv316.i.unr1552, 1
  %1962 = add nsw i32 %i.2206.i.unr1553, 1
  %1963 = trunc i64 %indvars.iv.next317.i.unr1554 to i32
  %1964 = icmp slt i32 %1963, %nGroups.0.i
  br label %.preheader122.i.preheader.split

.preheader122.i.preheader.split:                  ; preds = %.preheader122.i.unr1551, %.preheader122.i.preheader
  %indvars.iv316.i.unr1557 = phi i64 [ %resume.val1272, %.preheader122.i.preheader ], [ %indvars.iv.next317.i.unr1554, %.preheader122.i.unr1551 ]
  %i.2206.i.unr1558 = phi i32 [ %resume.val1276, %.preheader122.i.preheader ], [ %1962, %.preheader122.i.unr1551 ]
  %1965 = icmp ult i32 %1949, 4
  br i1 %1965, label %.preheader121.i.loopexit, label %.preheader122.i.preheader.split.split

.preheader122.i.preheader.split.split:            ; preds = %.preheader122.i.preheader.split
  br label %.preheader122.i

.preheader121.i.loopexit.unr-lcssa:               ; preds = %.preheader122.i
  br label %.preheader121.i.loopexit

.preheader121.i.loopexit:                         ; preds = %.preheader121.i.loopexit.unr-lcssa, %.preheader122.i.preheader.split
  br label %.preheader121.i

.preheader121.i:                                  ; preds = %.preheader121.i.loopexit, %middle.block1263
  %1966 = icmp sgt i32 %nSelectors.1.lcssa.i.lcssa, 0
  br i1 %1966, label %.lr.ph205.i, label %.preheader120.i

.lr.ph205.i:                                      ; preds = %.preheader121.i
  %.pre.i37 = load i8* %478, align 1
  br label %2035

.preheader122.i:                                  ; preds = %.preheader122.i, %.preheader122.i.preheader.split.split
  %indvars.iv316.i = phi i64 [ %indvars.iv316.i.unr1557, %.preheader122.i.preheader.split.split ], [ %indvars.iv.next317.i.3, %.preheader122.i ]
  %i.2206.i = phi i32 [ %i.2206.i.unr1558, %.preheader122.i.preheader.split.split ], [ %1981, %.preheader122.i ]
  %1967 = trunc i32 %i.2206.i to i8
  %1968 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv316.i
  store i8 %1967, i8* %1968, align 1
  %indvars.iv.next317.i = add nuw nsw i64 %indvars.iv316.i, 1
  %1969 = add nsw i32 %i.2206.i, 1
  %1970 = trunc i64 %indvars.iv.next317.i to i32
  %1971 = trunc i32 %1969 to i8
  %1972 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv.next317.i
  store i8 %1971, i8* %1972, align 1
  %indvars.iv.next317.i.1 = add nuw nsw i64 %indvars.iv.next317.i, 1
  %1973 = add nsw i32 %1969, 1
  %1974 = trunc i64 %indvars.iv.next317.i.1 to i32
  %1975 = trunc i32 %1973 to i8
  %1976 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv.next317.i.1
  store i8 %1975, i8* %1976, align 1
  %indvars.iv.next317.i.2 = add nuw nsw i64 %indvars.iv.next317.i.1, 1
  %1977 = add nsw i32 %1973, 1
  %1978 = trunc i64 %indvars.iv.next317.i.2 to i32
  %1979 = trunc i32 %1977 to i8
  %1980 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv.next317.i.2
  store i8 %1979, i8* %1980, align 1
  %indvars.iv.next317.i.3 = add nuw nsw i64 %indvars.iv.next317.i.2, 1
  %1981 = add nsw i32 %1977, 1
  %1982 = trunc i64 %indvars.iv.next317.i.3 to i32
  %1983 = icmp slt i32 %1982, %nGroups.0.i
  br i1 %1983, label %.preheader122.i, label %.preheader121.i.loopexit.unr-lcssa, !llvm.loop !25

.preheader120.i.loopexit:                         ; preds = %2043
  br label %.preheader120.i

.preheader120.i:                                  ; preds = %.preheader120.i.loopexit, %.preheader121.i
  br i1 %491, label %.lr.ph192.us.i.preheader, label %.preheader119.i.preheader

.preheader119.i.preheader:                        ; preds = %.preheader120.i
  br label %.preheader119.i

.lr.ph192.us.i.preheader:                         ; preds = %.preheader120.i
  %1984 = add i32 %489, 1
  %1985 = zext i32 %1984 to i64
  %1986 = add nuw nsw i64 %1985, 1
  %1987 = add i32 %489, 3
  br label %overflow.checked1302

.loopexit.unr-lcssa:                              ; preds = %scalar.ph1295
  %minLen.1.us.i.lcssa1516.ph = phi i32 [ %minLen.1.us.i.1, %scalar.ph1295 ]
  %.maxLen.0.us.i.lcssa1515.ph = phi i32 [ %.maxLen.0.us.i.1, %scalar.ph1295 ]
  br label %.loopexit

.loopexit:                                        ; preds = %scalar.ph1295.preheader.split, %.loopexit.unr-lcssa
  %minLen.1.us.i.lcssa1516 = phi i32 [ %minLen.1.us.i.lcssa1516.unr, %scalar.ph1295.preheader.split ], [ %minLen.1.us.i.lcssa1516.ph, %.loopexit.unr-lcssa ]
  %.maxLen.0.us.i.lcssa1515 = phi i32 [ %.maxLen.0.us.i.lcssa1515.unr, %scalar.ph1295.preheader.split ], [ %.maxLen.0.us.i.lcssa1515.ph, %.loopexit.unr-lcssa ]
  br label %1988

; <label>:1988                                    ; preds = %middle.block1294, %.loopexit
  %minLen.1.us.i.lcssa = phi i32 [ %2025, %middle.block1294 ], [ %minLen.1.us.i.lcssa1516, %.loopexit ]
  %.maxLen.0.us.i.lcssa = phi i32 [ %2024, %middle.block1294 ], [ %.maxLen.0.us.i.lcssa1515, %.loopexit ]
  %1989 = icmp sgt i32 %.maxLen.0.us.i.lcssa, 17
  br i1 %1989, label %1990, label %1991

; <label>:1990                                    ; preds = %1988
  call void @BZ2_bz__AssertH__fail(i32 3004) #2
  br label %1991

; <label>:1991                                    ; preds = %1990, %1988
  %1992 = icmp slt i32 %minLen.1.us.i.lcssa, 1
  br i1 %1992, label %1993, label %1994

; <label>:1993                                    ; preds = %1991
  call void @BZ2_bz__AssertH__fail(i32 3005) #2
  br label %1994

; <label>:1994                                    ; preds = %1993, %1991
  %1995 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %indvars.iv380.i, i64 0
  %1996 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv380.i, i64 0
  call void @BZ2_hbAssignCodes(i32* %1995, i8* %1996, i32 %minLen.1.us.i.lcssa, i32 %.maxLen.0.us.i.lcssa, i32 %490) #2
  %indvars.iv.next381.i = add nuw nsw i64 %indvars.iv380.i, 1
  %1997 = trunc i64 %indvars.iv.next381.i to i32
  %1998 = icmp slt i32 %1997, %nGroups.0.i
  br i1 %1998, label %overflow.checked1302, label %.preheader118.i.preheader.loopexit

scalar.ph1295:                                    ; preds = %scalar.ph1295.preheader.split.split, %scalar.ph1295
  %indvars.iv376.i = phi i64 [ %indvars.iv376.i.unr, %scalar.ph1295.preheader.split.split ], [ %indvars.iv.next377.i.1, %scalar.ph1295 ]
  %minLen.0190.us.i = phi i32 [ %minLen.0190.us.i.unr, %scalar.ph1295.preheader.split.split ], [ %minLen.1.us.i.1, %scalar.ph1295 ]
  %maxLen.0189.us.i = phi i32 [ %maxLen.0189.us.i.unr, %scalar.ph1295.preheader.split.split ], [ %.maxLen.0.us.i.1, %scalar.ph1295 ]
  %1999 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv380.i, i64 %indvars.iv376.i
  %2000 = load i8* %1999, align 1
  %2001 = zext i8 %2000 to i32
  %2002 = icmp sgt i32 %2001, %maxLen.0189.us.i
  %.maxLen.0.us.i = select i1 %2002, i32 %2001, i32 %maxLen.0189.us.i
  %2003 = icmp slt i32 %2001, %minLen.0190.us.i
  %minLen.1.us.i = select i1 %2003, i32 %2001, i32 %minLen.0190.us.i
  %indvars.iv.next377.i = add nuw nsw i64 %indvars.iv376.i, 1
  %lftr.wideiv945 = trunc i64 %indvars.iv.next377.i to i32
  %2004 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv380.i, i64 %indvars.iv.next377.i
  %2005 = load i8* %2004, align 1
  %2006 = zext i8 %2005 to i32
  %2007 = icmp sgt i32 %2006, %.maxLen.0.us.i
  %.maxLen.0.us.i.1 = select i1 %2007, i32 %2006, i32 %.maxLen.0.us.i
  %2008 = icmp slt i32 %2006, %minLen.1.us.i
  %minLen.1.us.i.1 = select i1 %2008, i32 %2006, i32 %minLen.1.us.i
  %indvars.iv.next377.i.1 = add nuw nsw i64 %indvars.iv.next377.i, 1
  %lftr.wideiv945.1 = trunc i64 %indvars.iv.next377.i.1 to i32
  %exitcond946.1 = icmp eq i32 %lftr.wideiv945.1, %490
  br i1 %exitcond946.1, label %.loopexit.unr-lcssa, label %scalar.ph1295, !llvm.loop !26

overflow.checked1302:                             ; preds = %1994, %.lr.ph192.us.i.preheader
  %indvars.iv380.i = phi i64 [ %indvars.iv.next381.i, %1994 ], [ 0, %.lr.ph192.us.i.preheader ]
  %end.idx1297 = add nuw nsw i64 %1985, 1
  %n.vec1299 = and i64 %1986, 8589934584
  %cmp.zero1301 = icmp eq i64 %n.vec1299, 0
  br i1 %cmp.zero1301, label %middle.block1294, label %vector.body1293.preheader

vector.body1293.preheader:                        ; preds = %overflow.checked1302
  br label %vector.body1293

vector.body1293:                                  ; preds = %vector.body1293, %vector.body1293.preheader
  %index1296 = phi i64 [ %index.next1308, %vector.body1293 ], [ 0, %vector.body1293.preheader ]
  %vec.phi = phi <4 x i32> [ %2021, %vector.body1293 ], [ <i32 32, i32 32, i32 32, i32 32>, %vector.body1293.preheader ]
  %vec.phi1313 = phi <4 x i32> [ %2022, %vector.body1293 ], [ <i32 32, i32 32, i32 32, i32 32>, %vector.body1293.preheader ]
  %vec.phi1314 = phi <4 x i32> [ %2017, %vector.body1293 ], [ zeroinitializer, %vector.body1293.preheader ]
  %vec.phi1315 = phi <4 x i32> [ %2018, %vector.body1293 ], [ zeroinitializer, %vector.body1293.preheader ]
  %2009 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv380.i, i64 %index1296
  %2010 = bitcast i8* %2009 to <4 x i8>*
  %wide.load = load <4 x i8>* %2010, align 1
  %.sum1337 = or i64 %index1296, 4
  %2011 = getelementptr %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv380.i, i64 %.sum1337
  %2012 = bitcast i8* %2011 to <4 x i8>*
  %wide.load1316 = load <4 x i8>* %2012, align 1
  %2013 = zext <4 x i8> %wide.load to <4 x i32>
  %2014 = zext <4 x i8> %wide.load1316 to <4 x i32>
  %2015 = icmp sgt <4 x i32> %2013, %vec.phi1314
  %2016 = icmp sgt <4 x i32> %2014, %vec.phi1315
  %2017 = select <4 x i1> %2015, <4 x i32> %2013, <4 x i32> %vec.phi1314
  %2018 = select <4 x i1> %2016, <4 x i32> %2014, <4 x i32> %vec.phi1315
  %2019 = icmp slt <4 x i32> %2013, %vec.phi
  %2020 = icmp slt <4 x i32> %2014, %vec.phi1313
  %2021 = select <4 x i1> %2019, <4 x i32> %2013, <4 x i32> %vec.phi
  %2022 = select <4 x i1> %2020, <4 x i32> %2014, <4 x i32> %vec.phi1313
  %index.next1308 = add i64 %index1296, 8
  %2023 = icmp eq i64 %index.next1308, %n.vec1299
  br i1 %2023, label %middle.block1294.loopexit, label %vector.body1293, !llvm.loop !27

middle.block1294.loopexit:                        ; preds = %vector.body1293
  %.lcssa1514 = phi <4 x i32> [ %2022, %vector.body1293 ]
  %.lcssa1513 = phi <4 x i32> [ %2021, %vector.body1293 ]
  %.lcssa1512 = phi <4 x i32> [ %2018, %vector.body1293 ]
  %.lcssa1511 = phi <4 x i32> [ %2017, %vector.body1293 ]
  br label %middle.block1294

middle.block1294:                                 ; preds = %middle.block1294.loopexit, %overflow.checked1302
  %resume.val1303 = phi i64 [ 0, %overflow.checked1302 ], [ %n.vec1299, %middle.block1294.loopexit ]
  %rdx.vec.exit.phi = phi <4 x i32> [ <i32 32, i32 32, i32 32, i32 32>, %overflow.checked1302 ], [ %.lcssa1513, %middle.block1294.loopexit ]
  %rdx.vec.exit.phi1319 = phi <4 x i32> [ <i32 32, i32 32, i32 32, i32 32>, %overflow.checked1302 ], [ %.lcssa1514, %middle.block1294.loopexit ]
  %rdx.vec.exit.phi1325 = phi <4 x i32> [ zeroinitializer, %overflow.checked1302 ], [ %.lcssa1511, %middle.block1294.loopexit ]
  %rdx.vec.exit.phi1326 = phi <4 x i32> [ zeroinitializer, %overflow.checked1302 ], [ %.lcssa1512, %middle.block1294.loopexit ]
  %rdx.minmax.cmp1327 = icmp sgt <4 x i32> %rdx.vec.exit.phi1325, %rdx.vec.exit.phi1326
  %rdx.minmax.select1328 = select <4 x i1> %rdx.minmax.cmp1327, <4 x i32> %rdx.vec.exit.phi1325, <4 x i32> %rdx.vec.exit.phi1326
  %rdx.shuf1329 = shufflevector <4 x i32> %rdx.minmax.select1328, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp1330 = icmp sgt <4 x i32> %rdx.minmax.select1328, %rdx.shuf1329
  %rdx.minmax.select1331 = select <4 x i1> %rdx.minmax.cmp1330, <4 x i32> %rdx.minmax.select1328, <4 x i32> %rdx.shuf1329
  %rdx.shuf1332 = shufflevector <4 x i32> %rdx.minmax.select1331, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp1333 = icmp sgt <4 x i32> %rdx.minmax.select1331, %rdx.shuf1332
  %rdx.minmax.cmp1333.elt = extractelement <4 x i1> %rdx.minmax.cmp1333, i32 0
  %rdx.minmax.select1331.elt = extractelement <4 x i32> %rdx.minmax.select1331, i32 0
  %rdx.shuf1332.elt = extractelement <4 x i32> %rdx.minmax.select1331, i32 1
  %2024 = select i1 %rdx.minmax.cmp1333.elt, i32 %rdx.minmax.select1331.elt, i32 %rdx.shuf1332.elt
  %rdx.minmax.cmp = icmp slt <4 x i32> %rdx.vec.exit.phi, %rdx.vec.exit.phi1319
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i32> %rdx.vec.exit.phi, <4 x i32> %rdx.vec.exit.phi1319
  %rdx.shuf = shufflevector <4 x i32> %rdx.minmax.select, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp1320 = icmp slt <4 x i32> %rdx.minmax.select, %rdx.shuf
  %rdx.minmax.select1321 = select <4 x i1> %rdx.minmax.cmp1320, <4 x i32> %rdx.minmax.select, <4 x i32> %rdx.shuf
  %rdx.shuf1322 = shufflevector <4 x i32> %rdx.minmax.select1321, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp1323 = icmp slt <4 x i32> %rdx.minmax.select1321, %rdx.shuf1322
  %rdx.minmax.cmp1323.elt = extractelement <4 x i1> %rdx.minmax.cmp1323, i32 0
  %rdx.minmax.select1321.elt = extractelement <4 x i32> %rdx.minmax.select1321, i32 0
  %rdx.shuf1322.elt = extractelement <4 x i32> %rdx.minmax.select1321, i32 1
  %2025 = select i1 %rdx.minmax.cmp1323.elt, i32 %rdx.minmax.select1321.elt, i32 %rdx.shuf1322.elt
  %cmp.n1307 = icmp eq i64 %end.idx1297, %resume.val1303
  br i1 %cmp.n1307, label %1988, label %scalar.ph1295.preheader

scalar.ph1295.preheader:                          ; preds = %middle.block1294
  %2026 = add i64 %resume.val1303, 1
  %2027 = trunc i64 %2026 to i32
  %2028 = sub i32 %1987, %2027
  %xtraiter = and i32 %2028, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %2028, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %scalar.ph1295.unr, label %scalar.ph1295.preheader.split

scalar.ph1295.unr:                                ; preds = %scalar.ph1295.preheader
  %2029 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv380.i, i64 %resume.val1303
  %2030 = load i8* %2029, align 1
  %2031 = zext i8 %2030 to i32
  %2032 = icmp sgt i32 %2031, %2024
  %.maxLen.0.us.i.unr = select i1 %2032, i32 %2031, i32 %2024
  %2033 = icmp slt i32 %2031, %2025
  %minLen.1.us.i.unr = select i1 %2033, i32 %2031, i32 %2025
  %indvars.iv.next377.i.unr = add nuw nsw i64 %resume.val1303, 1
  %lftr.wideiv945.unr = trunc i64 %indvars.iv.next377.i.unr to i32
  %exitcond946.unr = icmp eq i32 %lftr.wideiv945.unr, %490
  br label %scalar.ph1295.preheader.split

scalar.ph1295.preheader.split:                    ; preds = %scalar.ph1295.unr, %scalar.ph1295.preheader
  %minLen.1.us.i.lcssa1516.unr = phi i32 [ 0, %scalar.ph1295.preheader ], [ %minLen.1.us.i.unr, %scalar.ph1295.unr ]
  %.maxLen.0.us.i.lcssa1515.unr = phi i32 [ 0, %scalar.ph1295.preheader ], [ %.maxLen.0.us.i.unr, %scalar.ph1295.unr ]
  %indvars.iv376.i.unr = phi i64 [ %resume.val1303, %scalar.ph1295.preheader ], [ %indvars.iv.next377.i.unr, %scalar.ph1295.unr ]
  %minLen.0190.us.i.unr = phi i32 [ %2025, %scalar.ph1295.preheader ], [ %minLen.1.us.i.unr, %scalar.ph1295.unr ]
  %maxLen.0189.us.i.unr = phi i32 [ %2024, %scalar.ph1295.preheader ], [ %.maxLen.0.us.i.unr, %scalar.ph1295.unr ]
  %2034 = icmp ult i32 %2028, 2
  br i1 %2034, label %.loopexit, label %scalar.ph1295.preheader.split.split

scalar.ph1295.preheader.split.split:              ; preds = %scalar.ph1295.preheader.split
  br label %scalar.ph1295

; <label>:2035                                    ; preds = %2043, %.lr.ph205.i
  %2036 = phi i8 [ %.pre.i37, %.lr.ph205.i ], [ %tmp.0.lcssa.i, %2043 ]
  %indvars.iv312.i = phi i64 [ 0, %.lr.ph205.i ], [ %indvars.iv.next313.i, %2043 ]
  %2037 = getelementptr inbounds %struct.EState* %s, i64 0, i32 33, i64 %indvars.iv312.i
  %2038 = load i8* %2037, align 1
  %2039 = icmp eq i8 %2038, %2036
  br i1 %2039, label %2043, label %.lr.ph200.i.preheader

.lr.ph200.i.preheader:                            ; preds = %2035
  br label %.lr.ph200.i

.lr.ph200.i:                                      ; preds = %.lr.ph200.i, %.lr.ph200.i.preheader
  %indvars.iv310.i = phi i64 [ %indvars.iv.next311.i, %.lr.ph200.i ], [ 0, %.lr.ph200.i.preheader ]
  %tmp.0198.i = phi i8 [ %2041, %.lr.ph200.i ], [ %2036, %.lr.ph200.i.preheader ]
  %indvars.iv.next311.i = add nuw nsw i64 %indvars.iv310.i, 1
  %2040 = getelementptr inbounds [6 x i8]* %pos.i, i64 0, i64 %indvars.iv.next311.i
  %2041 = load i8* %2040, align 1
  store i8 %tmp.0198.i, i8* %2040, align 1
  %2042 = icmp eq i8 %2038, %2041
  br i1 %2042, label %._crit_edge201.i, label %.lr.ph200.i

._crit_edge201.i:                                 ; preds = %.lr.ph200.i
  %indvars.iv.next311.i.lcssa = phi i64 [ %indvars.iv.next311.i, %.lr.ph200.i ]
  %phitmp.i = trunc i64 %indvars.iv.next311.i.lcssa to i8
  br label %2043

; <label>:2043                                    ; preds = %._crit_edge201.i, %2035
  %tmp.0.lcssa.i = phi i8 [ %2038, %._crit_edge201.i ], [ %2036, %2035 ]
  %j.0.lcssa.i = phi i8 [ %phitmp.i, %._crit_edge201.i ], [ 0, %2035 ]
  store i8 %tmp.0.lcssa.i, i8* %478, align 1
  %2044 = getelementptr inbounds %struct.EState* %s, i64 0, i32 34, i64 %indvars.iv312.i
  store i8 %j.0.lcssa.i, i8* %2044, align 1
  %indvars.iv.next313.i = add nuw nsw i64 %indvars.iv312.i, 1
  %lftr.wideiv947 = trunc i64 %indvars.iv.next313.i to i32
  %exitcond948 = icmp eq i32 %lftr.wideiv947, %nSelectors.1.lcssa.i.lcssa
  br i1 %exitcond948, label %.preheader120.i.loopexit, label %2035

.preheader119.i:                                  ; preds = %.preheader119.i, %.preheader119.i.preheader
  %indvars.iv308.i = phi i64 [ %indvars.iv.next309.i, %.preheader119.i ], [ 0, %.preheader119.i.preheader ]
  %2045 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %indvars.iv308.i, i64 0
  %2046 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv308.i, i64 0
  call void @BZ2_hbAssignCodes(i32* %2045, i8* %2046, i32 32, i32 0, i32 %490) #2
  %indvars.iv.next309.i = add nuw nsw i64 %indvars.iv308.i, 1
  %2047 = trunc i64 %indvars.iv.next309.i to i32
  %2048 = icmp slt i32 %2047, %nGroups.0.i
  br i1 %2048, label %.preheader119.i, label %.preheader118.i.preheader.loopexit1341

.preheader118.i.preheader.loopexit:               ; preds = %1994
  br label %.preheader118.i.preheader

.preheader118.i.preheader.loopexit1341:           ; preds = %.preheader119.i
  br label %.preheader118.i.preheader

.preheader118.i.preheader:                        ; preds = %.preheader118.i.preheader.loopexit1341, %.preheader118.i.preheader.loopexit
  br label %.preheader118.i

.preheader118.i:                                  ; preds = %2062, %.preheader118.i.preheader
  %indvars.iv304.i = phi i64 [ %indvars.iv.next305.i, %2062 ], [ 0, %.preheader118.i.preheader ]
  %2049 = getelementptr inbounds [16 x i8]* %inUse16.i, i64 0, i64 %indvars.iv304.i
  store i8 0, i8* %2049, align 1
  %2050 = shl i64 %indvars.iv304.i, 4
  br label %2051

; <label>:2051                                    ; preds = %4308, %.preheader118.i
  %indvars.iv301.i = phi i64 [ 0, %.preheader118.i ], [ %indvars.iv.next302.i.1, %4308 ]
  %2052 = add nsw i64 %indvars.iv301.i, %2050
  %2053 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %2052
  %2054 = load i8* %2053, align 1
  %2055 = icmp eq i8 %2054, 0
  br i1 %2055, label %2057, label %2056

; <label>:2056                                    ; preds = %2051
  store i8 1, i8* %2049, align 1
  br label %2057

; <label>:2057                                    ; preds = %2056, %2051
  %indvars.iv.next302.i = add nuw nsw i64 %indvars.iv301.i, 1
  %2058 = add nsw i64 %indvars.iv.next302.i, %2050
  %2059 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %2058
  %2060 = load i8* %2059, align 1
  %2061 = icmp eq i8 %2060, 0
  br i1 %2061, label %4308, label %4307

; <label>:2062                                    ; preds = %4308
  %indvars.iv.next305.i = add nuw nsw i64 %indvars.iv304.i, 1
  %exitcond306.i = icmp eq i64 %indvars.iv.next305.i, 16
  br i1 %exitcond306.i, label %2063, label %.preheader118.i

; <label>:2063                                    ; preds = %2062
  %2064 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %2065 = load i32* %2064, align 4
  %.pre382.i = load i32* %111, align 4
  %.pre.i84.i.pre = load i32* %114, align 4
  br label %2066

; <label>:2066                                    ; preds = %bsW.exit87.i, %2063
  %2067 = phi i32 [ %2065, %2063 ], [ %2109, %bsW.exit87.i ]
  %.pre.i84.i = phi i32 [ %.pre.i84.i.pre, %2063 ], [ %storemerge89.i, %bsW.exit87.i ]
  %.pre3.i.i38 = phi i32 [ %2065, %2063 ], [ %.pre3.i85383.i, %bsW.exit87.i ]
  %2068 = phi i32 [ %.pre382.i, %2063 ], [ %storemerge.i, %bsW.exit87.i ]
  %indvars.iv298.i = phi i64 [ 0, %2063 ], [ %indvars.iv.next299.i, %bsW.exit87.i ]
  %2069 = getelementptr inbounds [16 x i8]* %inUse16.i, i64 0, i64 %indvars.iv298.i
  %2070 = load i8* %2069, align 1
  %2071 = icmp eq i8 %2070, 0
  %2072 = icmp sgt i32 %2068, 7
  br i1 %2071, label %2094, label %2073

; <label>:2073                                    ; preds = %2066
  br i1 %2072, label %.lr.ph.i.i39.preheader, label %bsW.exit.i

.lr.ph.i.i39.preheader:                           ; preds = %2073
  br label %.lr.ph.i.i39

.lr.ph.i.i39:                                     ; preds = %.lr.ph.i.i39, %.lr.ph.i.i39.preheader
  %2074 = phi i32 [ %2082, %.lr.ph.i.i39 ], [ %.pre3.i.i38, %.lr.ph.i.i39.preheader ]
  %2075 = phi i32 [ %2084, %.lr.ph.i.i39 ], [ %.pre.i84.i, %.lr.ph.i.i39.preheader ]
  %2076 = lshr i32 %2075, 24
  %2077 = trunc i32 %2076 to i8
  %2078 = sext i32 %2074 to i64
  %2079 = load i8** %34, align 8
  %2080 = getelementptr inbounds i8* %2079, i64 %2078
  store i8 %2077, i8* %2080, align 1
  %2081 = load i32* %2064, align 4
  %2082 = add nsw i32 %2081, 1
  store i32 %2082, i32* %2064, align 4
  %2083 = load i32* %114, align 4
  %2084 = shl i32 %2083, 8
  store i32 %2084, i32* %114, align 4
  %2085 = load i32* %111, align 4
  %2086 = add nsw i32 %2085, -8
  store i32 %2086, i32* %111, align 4
  %2087 = icmp sgt i32 %2086, 7
  br i1 %2087, label %.lr.ph.i.i39, label %bsW.exit.i.loopexit

bsW.exit.i.loopexit:                              ; preds = %.lr.ph.i.i39
  %.lcssa1506 = phi i32 [ %2086, %.lr.ph.i.i39 ]
  %.lcssa1505 = phi i32 [ %2084, %.lr.ph.i.i39 ]
  %.lcssa1504 = phi i32 [ %2082, %.lr.ph.i.i39 ]
  br label %bsW.exit.i

bsW.exit.i:                                       ; preds = %bsW.exit.i.loopexit, %2073
  %2088 = phi i32 [ %2067, %2073 ], [ %.lcssa1504, %bsW.exit.i.loopexit ]
  %.pre3.i85384.i = phi i32 [ %.pre3.i.i38, %2073 ], [ %.lcssa1504, %bsW.exit.i.loopexit ]
  %2089 = phi i32 [ %.pre.i84.i, %2073 ], [ %.lcssa1505, %bsW.exit.i.loopexit ]
  %2090 = phi i32 [ %2068, %2073 ], [ %.lcssa1506, %bsW.exit.i.loopexit ]
  %2091 = sub i32 31, %2090
  %2092 = shl i32 1, %2091
  %2093 = or i32 %2092, %2089
  br label %bsW.exit87.i

; <label>:2094                                    ; preds = %2066
  br i1 %2072, label %.lr.ph.i86.i.preheader, label %bsW.exit87.i

.lr.ph.i86.i.preheader:                           ; preds = %2094
  br label %.lr.ph.i86.i

.lr.ph.i86.i:                                     ; preds = %.lr.ph.i86.i, %.lr.ph.i86.i.preheader
  %2095 = phi i32 [ %2103, %.lr.ph.i86.i ], [ %.pre3.i.i38, %.lr.ph.i86.i.preheader ]
  %2096 = phi i32 [ %2105, %.lr.ph.i86.i ], [ %.pre.i84.i, %.lr.ph.i86.i.preheader ]
  %2097 = lshr i32 %2096, 24
  %2098 = trunc i32 %2097 to i8
  %2099 = sext i32 %2095 to i64
  %2100 = load i8** %34, align 8
  %2101 = getelementptr inbounds i8* %2100, i64 %2099
  store i8 %2098, i8* %2101, align 1
  %2102 = load i32* %2064, align 4
  %2103 = add nsw i32 %2102, 1
  store i32 %2103, i32* %2064, align 4
  %2104 = load i32* %114, align 4
  %2105 = shl i32 %2104, 8
  store i32 %2105, i32* %114, align 4
  %2106 = load i32* %111, align 4
  %2107 = add nsw i32 %2106, -8
  store i32 %2107, i32* %111, align 4
  %2108 = icmp sgt i32 %2107, 7
  br i1 %2108, label %.lr.ph.i86.i, label %bsW.exit87.i.loopexit

bsW.exit87.i.loopexit:                            ; preds = %.lr.ph.i86.i
  %.lcssa1509 = phi i32 [ %2107, %.lr.ph.i86.i ]
  %.lcssa1508 = phi i32 [ %2105, %.lr.ph.i86.i ]
  %.lcssa1507 = phi i32 [ %2103, %.lr.ph.i86.i ]
  br label %bsW.exit87.i

bsW.exit87.i:                                     ; preds = %bsW.exit87.i.loopexit, %2094, %bsW.exit.i
  %2109 = phi i32 [ %2088, %bsW.exit.i ], [ %2067, %2094 ], [ %.lcssa1507, %bsW.exit87.i.loopexit ]
  %.pre3.i85383.i = phi i32 [ %.pre3.i85384.i, %bsW.exit.i ], [ %.pre3.i.i38, %2094 ], [ %.lcssa1507, %bsW.exit87.i.loopexit ]
  %storemerge89.i = phi i32 [ %2093, %bsW.exit.i ], [ %.pre.i84.i, %2094 ], [ %.lcssa1508, %bsW.exit87.i.loopexit ]
  %storemerge.in.i = phi i32 [ %2090, %bsW.exit.i ], [ %2068, %2094 ], [ %.lcssa1509, %bsW.exit87.i.loopexit ]
  store i32 %storemerge89.i, i32* %114, align 4
  %storemerge.i = add nsw i32 %storemerge.in.i, 1
  store i32 %storemerge.i, i32* %111, align 4
  %indvars.iv.next299.i = add nuw nsw i64 %indvars.iv298.i, 1
  %exitcond300.i = icmp eq i64 %indvars.iv.next299.i, 16
  br i1 %exitcond300.i, label %.preheader117.i.preheader, label %2066

.preheader117.i.preheader:                        ; preds = %bsW.exit87.i
  %storemerge.i.lcssa = phi i32 [ %storemerge.i, %bsW.exit87.i ]
  %storemerge89.i.lcssa = phi i32 [ %storemerge89.i, %bsW.exit87.i ]
  %.lcssa1510 = phi i32 [ %2109, %bsW.exit87.i ]
  br label %.preheader117.i

.preheader117.i:                                  ; preds = %.loopexit116.i, %.preheader117.i.preheader
  %.pre.i403962 = phi i32 [ %.pre.i403961, %.loopexit116.i ], [ %storemerge89.i.lcssa, %.preheader117.i.preheader ]
  %2110 = phi i32 [ %2160, %.loopexit116.i ], [ %storemerge.i.lcssa, %.preheader117.i.preheader ]
  %2111 = phi i32 [ %2161, %.loopexit116.i ], [ %.lcssa1510, %.preheader117.i.preheader ]
  %indvars.iv295.i = phi i64 [ %indvars.iv.next296.i, %.loopexit116.i ], [ 0, %.preheader117.i.preheader ]
  %2112 = getelementptr inbounds [16 x i8]* %inUse16.i, i64 0, i64 %indvars.iv295.i
  %2113 = load i8* %2112, align 1
  %2114 = icmp eq i8 %2113, 0
  br i1 %2114, label %.loopexit116.i, label %.preheader115.i

.preheader115.i:                                  ; preds = %.preheader117.i
  %2115 = shl i64 %indvars.iv295.i, 4
  br label %2116

; <label>:2116                                    ; preds = %bsW.exit421, %.preheader115.i
  %.pre.i417 = phi i32 [ %.pre.i403962, %.preheader115.i ], [ %storemerge485, %bsW.exit421 ]
  %2117 = phi i32 [ %2110, %.preheader115.i ], [ %storemerge, %bsW.exit421 ]
  %.pre3.i425 = phi i32 [ %2111, %.preheader115.i ], [ %2159, %bsW.exit421 ]
  %indvars.iv292.i = phi i64 [ 0, %.preheader115.i ], [ %indvars.iv.next293.i, %bsW.exit421 ]
  %2118 = add nsw i64 %indvars.iv292.i, %2115
  %2119 = getelementptr inbounds %struct.EState* %s, i64 0, i32 22, i64 %2118
  %2120 = load i8* %2119, align 1
  %2121 = icmp eq i8 %2120, 0
  %2122 = icmp sgt i32 %2117, 7
  br i1 %2121, label %2144, label %2123

; <label>:2123                                    ; preds = %2116
  br i1 %2122, label %.lr.ph.i426.preheader, label %bsW.exit428

.lr.ph.i426.preheader:                            ; preds = %2123
  br label %.lr.ph.i426

.lr.ph.i426:                                      ; preds = %.lr.ph.i426, %.lr.ph.i426.preheader
  %2124 = phi i32 [ %2132, %.lr.ph.i426 ], [ %.pre3.i425, %.lr.ph.i426.preheader ]
  %2125 = phi i32 [ %2134, %.lr.ph.i426 ], [ %.pre.i417, %.lr.ph.i426.preheader ]
  %2126 = lshr i32 %2125, 24
  %2127 = trunc i32 %2126 to i8
  %2128 = sext i32 %2124 to i64
  %2129 = load i8** %34, align 8
  %2130 = getelementptr inbounds i8* %2129, i64 %2128
  store i8 %2127, i8* %2130, align 1
  %2131 = load i32* %2064, align 4
  %2132 = add nsw i32 %2131, 1
  store i32 %2132, i32* %2064, align 4
  %2133 = load i32* %114, align 4
  %2134 = shl i32 %2133, 8
  store i32 %2134, i32* %114, align 4
  %2135 = load i32* %111, align 4
  %2136 = add nsw i32 %2135, -8
  store i32 %2136, i32* %111, align 4
  %2137 = icmp sgt i32 %2136, 7
  br i1 %2137, label %.lr.ph.i426, label %bsW.exit428.loopexit

bsW.exit428.loopexit:                             ; preds = %.lr.ph.i426
  %.lcssa1497 = phi i32 [ %2136, %.lr.ph.i426 ]
  %.lcssa1496 = phi i32 [ %2134, %.lr.ph.i426 ]
  %.lcssa1495 = phi i32 [ %2132, %.lr.ph.i426 ]
  br label %bsW.exit428

bsW.exit428:                                      ; preds = %bsW.exit428.loopexit, %2123
  %2138 = phi i32 [ %.pre3.i425, %2123 ], [ %.lcssa1495, %bsW.exit428.loopexit ]
  %2139 = phi i32 [ %.pre.i417, %2123 ], [ %.lcssa1496, %bsW.exit428.loopexit ]
  %2140 = phi i32 [ %2117, %2123 ], [ %.lcssa1497, %bsW.exit428.loopexit ]
  %2141 = sub i32 31, %2140
  %2142 = shl i32 1, %2141
  %2143 = or i32 %2142, %2139
  br label %bsW.exit421

; <label>:2144                                    ; preds = %2116
  br i1 %2122, label %.lr.ph.i419.preheader, label %bsW.exit421

.lr.ph.i419.preheader:                            ; preds = %2144
  br label %.lr.ph.i419

.lr.ph.i419:                                      ; preds = %.lr.ph.i419, %.lr.ph.i419.preheader
  %2145 = phi i32 [ %2153, %.lr.ph.i419 ], [ %.pre3.i425, %.lr.ph.i419.preheader ]
  %2146 = phi i32 [ %2155, %.lr.ph.i419 ], [ %.pre.i417, %.lr.ph.i419.preheader ]
  %2147 = lshr i32 %2146, 24
  %2148 = trunc i32 %2147 to i8
  %2149 = sext i32 %2145 to i64
  %2150 = load i8** %34, align 8
  %2151 = getelementptr inbounds i8* %2150, i64 %2149
  store i8 %2148, i8* %2151, align 1
  %2152 = load i32* %2064, align 4
  %2153 = add nsw i32 %2152, 1
  store i32 %2153, i32* %2064, align 4
  %2154 = load i32* %114, align 4
  %2155 = shl i32 %2154, 8
  store i32 %2155, i32* %114, align 4
  %2156 = load i32* %111, align 4
  %2157 = add nsw i32 %2156, -8
  store i32 %2157, i32* %111, align 4
  %2158 = icmp sgt i32 %2157, 7
  br i1 %2158, label %.lr.ph.i419, label %bsW.exit421.loopexit

bsW.exit421.loopexit:                             ; preds = %.lr.ph.i419
  %.lcssa1500 = phi i32 [ %2157, %.lr.ph.i419 ]
  %.lcssa1499 = phi i32 [ %2155, %.lr.ph.i419 ]
  %.lcssa1498 = phi i32 [ %2153, %.lr.ph.i419 ]
  br label %bsW.exit421

bsW.exit421:                                      ; preds = %bsW.exit421.loopexit, %2144, %bsW.exit428
  %2159 = phi i32 [ %2138, %bsW.exit428 ], [ %.pre3.i425, %2144 ], [ %.lcssa1498, %bsW.exit421.loopexit ]
  %storemerge485 = phi i32 [ %2143, %bsW.exit428 ], [ %.pre.i417, %2144 ], [ %.lcssa1499, %bsW.exit421.loopexit ]
  %storemerge.in = phi i32 [ %2140, %bsW.exit428 ], [ %2117, %2144 ], [ %.lcssa1500, %bsW.exit421.loopexit ]
  store i32 %storemerge485, i32* %114, align 4
  %storemerge = add nsw i32 %storemerge.in, 1
  store i32 %storemerge, i32* %111, align 4
  %indvars.iv.next293.i = add nuw nsw i64 %indvars.iv292.i, 1
  %exitcond294.i = icmp eq i64 %indvars.iv.next293.i, 16
  br i1 %exitcond294.i, label %.loopexit116.i.loopexit, label %2116

.loopexit116.i.loopexit:                          ; preds = %bsW.exit421
  %storemerge.lcssa = phi i32 [ %storemerge, %bsW.exit421 ]
  %storemerge485.lcssa = phi i32 [ %storemerge485, %bsW.exit421 ]
  %.lcssa1501 = phi i32 [ %2159, %bsW.exit421 ]
  br label %.loopexit116.i

.loopexit116.i:                                   ; preds = %.loopexit116.i.loopexit, %.preheader117.i
  %.pre.i403961 = phi i32 [ %.pre.i403962, %.preheader117.i ], [ %storemerge485.lcssa, %.loopexit116.i.loopexit ]
  %2160 = phi i32 [ %2110, %.preheader117.i ], [ %storemerge.lcssa, %.loopexit116.i.loopexit ]
  %2161 = phi i32 [ %2111, %.preheader117.i ], [ %.lcssa1501, %.loopexit116.i.loopexit ]
  %indvars.iv.next296.i = add nuw nsw i64 %indvars.iv295.i, 1
  %exitcond297.i = icmp eq i64 %indvars.iv.next296.i, 16
  br i1 %exitcond297.i, label %2162, label %.preheader117.i

; <label>:2162                                    ; preds = %.loopexit116.i
  %.lcssa1503 = phi i32 [ %2161, %.loopexit116.i ]
  %.lcssa1502 = phi i32 [ %2160, %.loopexit116.i ]
  %.pre.i403961.lcssa = phi i32 [ %.pre.i403961, %.loopexit116.i ]
  %2163 = load i32* %481, align 4
  %2164 = icmp sgt i32 %2163, 2
  br i1 %2164, label %2165, label %2169

; <label>:2165                                    ; preds = %2162
  %2166 = load %struct._IO_FILE** @stderr, align 8
  %2167 = sub nsw i32 %.lcssa1503, %2065
  %2168 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2166, i8* getelementptr inbounds ([26 x i8]* @.str772, i64 0, i64 0), i32 %2167) #12
  %.pre958 = load i32* %2064, align 4
  %.pre959 = load i32* %111, align 4
  %.pre.i403.pre = load i32* %114, align 4
  br label %2169

; <label>:2169                                    ; preds = %2165, %2162
  %.pre.i403 = phi i32 [ %.pre.i403.pre, %2165 ], [ %.pre.i403961.lcssa, %2162 ]
  %2170 = phi i32 [ %.pre959, %2165 ], [ %.lcssa1502, %2162 ]
  %2171 = phi i32 [ %.pre958, %2165 ], [ %.lcssa1503, %2162 ]
  %2172 = icmp sgt i32 %2170, 7
  br i1 %2172, label %.lr.ph.i405.preheader, label %bsW.exit407

.lr.ph.i405.preheader:                            ; preds = %2169
  br label %.lr.ph.i405

.lr.ph.i405:                                      ; preds = %.lr.ph.i405, %.lr.ph.i405.preheader
  %2173 = phi i32 [ %2181, %.lr.ph.i405 ], [ %2171, %.lr.ph.i405.preheader ]
  %2174 = phi i32 [ %2183, %.lr.ph.i405 ], [ %.pre.i403, %.lr.ph.i405.preheader ]
  %2175 = lshr i32 %2174, 24
  %2176 = trunc i32 %2175 to i8
  %2177 = sext i32 %2173 to i64
  %2178 = load i8** %34, align 8
  %2179 = getelementptr inbounds i8* %2178, i64 %2177
  store i8 %2176, i8* %2179, align 1
  %2180 = load i32* %2064, align 4
  %2181 = add nsw i32 %2180, 1
  store i32 %2181, i32* %2064, align 4
  %2182 = load i32* %114, align 4
  %2183 = shl i32 %2182, 8
  store i32 %2183, i32* %114, align 4
  %2184 = load i32* %111, align 4
  %2185 = add nsw i32 %2184, -8
  store i32 %2185, i32* %111, align 4
  %2186 = icmp sgt i32 %2185, 7
  br i1 %2186, label %.lr.ph.i405, label %bsW.exit407.loopexit

bsW.exit407.loopexit:                             ; preds = %.lr.ph.i405
  %.lcssa1494 = phi i32 [ %2185, %.lr.ph.i405 ]
  %.lcssa1493 = phi i32 [ %2183, %.lr.ph.i405 ]
  %.lcssa1492 = phi i32 [ %2181, %.lr.ph.i405 ]
  br label %bsW.exit407

bsW.exit407:                                      ; preds = %bsW.exit407.loopexit, %2169
  %.pre3.i397 = phi i32 [ %2171, %2169 ], [ %.lcssa1492, %bsW.exit407.loopexit ]
  %2187 = phi i32 [ %.pre.i403, %2169 ], [ %.lcssa1493, %bsW.exit407.loopexit ]
  %2188 = phi i32 [ %2170, %2169 ], [ %.lcssa1494, %bsW.exit407.loopexit ]
  %2189 = sub i32 29, %2188
  %2190 = shl i32 %nGroups.0.i, %2189
  %2191 = or i32 %2190, %2187
  store i32 %2191, i32* %114, align 4
  %2192 = add nsw i32 %2188, 3
  store i32 %2192, i32* %111, align 4
  %2193 = icmp sgt i32 %2192, 7
  br i1 %2193, label %.lr.ph.i398.preheader, label %bsW.exit400

.lr.ph.i398.preheader:                            ; preds = %bsW.exit407
  br label %.lr.ph.i398

.lr.ph.i398:                                      ; preds = %.lr.ph.i398, %.lr.ph.i398.preheader
  %2194 = phi i32 [ %2202, %.lr.ph.i398 ], [ %.pre3.i397, %.lr.ph.i398.preheader ]
  %2195 = phi i32 [ %2204, %.lr.ph.i398 ], [ %2191, %.lr.ph.i398.preheader ]
  %2196 = lshr i32 %2195, 24
  %2197 = trunc i32 %2196 to i8
  %2198 = sext i32 %2194 to i64
  %2199 = load i8** %34, align 8
  %2200 = getelementptr inbounds i8* %2199, i64 %2198
  store i8 %2197, i8* %2200, align 1
  %2201 = load i32* %2064, align 4
  %2202 = add nsw i32 %2201, 1
  store i32 %2202, i32* %2064, align 4
  %2203 = load i32* %114, align 4
  %2204 = shl i32 %2203, 8
  store i32 %2204, i32* %114, align 4
  %2205 = load i32* %111, align 4
  %2206 = add nsw i32 %2205, -8
  store i32 %2206, i32* %111, align 4
  %2207 = icmp sgt i32 %2206, 7
  br i1 %2207, label %.lr.ph.i398, label %bsW.exit400.loopexit

bsW.exit400.loopexit:                             ; preds = %.lr.ph.i398
  %.lcssa1491 = phi i32 [ %2206, %.lr.ph.i398 ]
  %.lcssa1490 = phi i32 [ %2204, %.lr.ph.i398 ]
  %.lcssa1489 = phi i32 [ %2202, %.lr.ph.i398 ]
  br label %bsW.exit400

bsW.exit400:                                      ; preds = %bsW.exit400.loopexit, %bsW.exit407
  %.pre3.i383972 = phi i32 [ %.pre3.i397, %bsW.exit407 ], [ %.lcssa1489, %bsW.exit400.loopexit ]
  %2208 = phi i32 [ %2191, %bsW.exit407 ], [ %.lcssa1490, %bsW.exit400.loopexit ]
  %2209 = phi i32 [ %2192, %bsW.exit407 ], [ %.lcssa1491, %bsW.exit400.loopexit ]
  %2210 = sub i32 17, %2209
  %2211 = shl i32 %nSelectors.1.lcssa.i.lcssa, %2210
  %2212 = or i32 %2211, %2208
  store i32 %2212, i32* %114, align 4
  %2213 = add nsw i32 %2209, 15
  store i32 %2213, i32* %111, align 4
  br i1 %1966, label %.preheader114.i.preheader, label %._crit_edge183.i

.preheader114.i.preheader:                        ; preds = %bsW.exit400
  br label %.preheader114.i

.preheader114.i:                                  ; preds = %bsW.exit386, %.preheader114.i.preheader
  %.pre3.i383967 = phi i32 [ %.pre3.i383968, %bsW.exit386 ], [ %.pre3.i383972, %.preheader114.i.preheader ]
  %.pre.i382966 = phi i32 [ %2259, %bsW.exit386 ], [ %2212, %.preheader114.i.preheader ]
  %.pr480 = phi i32 [ %2261, %bsW.exit386 ], [ %2213, %.preheader114.i.preheader ]
  %indvars.iv290.i = phi i64 [ %indvars.iv.next291.i, %bsW.exit386 ], [ 0, %.preheader114.i.preheader ]
  %2214 = getelementptr inbounds %struct.EState* %s, i64 0, i32 34, i64 %indvars.iv290.i
  %2215 = load i8* %2214, align 1
  %2216 = icmp eq i8 %2215, 0
  br i1 %2216, label %._crit_edge181.i, label %.lr.ph180.i.preheader

.lr.ph180.i.preheader:                            ; preds = %.preheader114.i
  br label %.lr.ph180.i

.lr.ph180.i:                                      ; preds = %bsW.exit393, %.lr.ph180.i.preheader
  %.pre.i389 = phi i32 [ %2237, %bsW.exit393 ], [ %.pre.i382966, %.lr.ph180.i.preheader ]
  %.pre3.i390 = phi i32 [ %.pre3.i383971, %bsW.exit393 ], [ %.pre3.i383967, %.lr.ph180.i.preheader ]
  %2217 = phi i32 [ %2238, %bsW.exit393 ], [ %.pr480, %.lr.ph180.i.preheader ]
  %j.3179.i = phi i32 [ %2239, %bsW.exit393 ], [ 0, %.lr.ph180.i.preheader ]
  %2218 = icmp sgt i32 %2217, 7
  br i1 %2218, label %.lr.ph.i391.preheader, label %bsW.exit393

.lr.ph.i391.preheader:                            ; preds = %.lr.ph180.i
  br label %.lr.ph.i391

.lr.ph.i391:                                      ; preds = %.lr.ph.i391, %.lr.ph.i391.preheader
  %2219 = phi i32 [ %2227, %.lr.ph.i391 ], [ %.pre3.i390, %.lr.ph.i391.preheader ]
  %2220 = phi i32 [ %2229, %.lr.ph.i391 ], [ %.pre.i389, %.lr.ph.i391.preheader ]
  %2221 = lshr i32 %2220, 24
  %2222 = trunc i32 %2221 to i8
  %2223 = sext i32 %2219 to i64
  %2224 = load i8** %34, align 8
  %2225 = getelementptr inbounds i8* %2224, i64 %2223
  store i8 %2222, i8* %2225, align 1
  %2226 = load i32* %2064, align 4
  %2227 = add nsw i32 %2226, 1
  store i32 %2227, i32* %2064, align 4
  %2228 = load i32* %114, align 4
  %2229 = shl i32 %2228, 8
  store i32 %2229, i32* %114, align 4
  %2230 = load i32* %111, align 4
  %2231 = add nsw i32 %2230, -8
  store i32 %2231, i32* %111, align 4
  %2232 = icmp sgt i32 %2231, 7
  br i1 %2232, label %.lr.ph.i391, label %bsW.exit393.loopexit

bsW.exit393.loopexit:                             ; preds = %.lr.ph.i391
  %.lcssa1483 = phi i32 [ %2231, %.lr.ph.i391 ]
  %.lcssa1482 = phi i32 [ %2229, %.lr.ph.i391 ]
  %.lcssa1481 = phi i32 [ %2227, %.lr.ph.i391 ]
  br label %bsW.exit393

bsW.exit393:                                      ; preds = %bsW.exit393.loopexit, %.lr.ph180.i
  %.pre3.i383971 = phi i32 [ %.pre3.i390, %.lr.ph180.i ], [ %.lcssa1481, %bsW.exit393.loopexit ]
  %2233 = phi i32 [ %.pre.i389, %.lr.ph180.i ], [ %.lcssa1482, %bsW.exit393.loopexit ]
  %2234 = phi i32 [ %2217, %.lr.ph180.i ], [ %.lcssa1483, %bsW.exit393.loopexit ]
  %2235 = sub i32 31, %2234
  %2236 = shl i32 1, %2235
  %2237 = or i32 %2236, %2233
  store i32 %2237, i32* %114, align 4
  %2238 = add nsw i32 %2234, 1
  store i32 %2238, i32* %111, align 4
  %2239 = add nsw i32 %j.3179.i, 1
  %2240 = load i8* %2214, align 1
  %2241 = zext i8 %2240 to i32
  %2242 = icmp slt i32 %2239, %2241
  br i1 %2242, label %.lr.ph180.i, label %._crit_edge181.i.loopexit

._crit_edge181.i.loopexit:                        ; preds = %bsW.exit393
  %.lcssa1485 = phi i32 [ %2238, %bsW.exit393 ]
  %.lcssa1484 = phi i32 [ %2237, %bsW.exit393 ]
  %.pre3.i383971.lcssa = phi i32 [ %.pre3.i383971, %bsW.exit393 ]
  br label %._crit_edge181.i

._crit_edge181.i:                                 ; preds = %._crit_edge181.i.loopexit, %.preheader114.i
  %.pre3.i383 = phi i32 [ %.pre3.i383967, %.preheader114.i ], [ %.pre3.i383971.lcssa, %._crit_edge181.i.loopexit ]
  %.pre.i382 = phi i32 [ %.pre.i382966, %.preheader114.i ], [ %.lcssa1484, %._crit_edge181.i.loopexit ]
  %2243 = phi i32 [ %.pr480, %.preheader114.i ], [ %.lcssa1485, %._crit_edge181.i.loopexit ]
  %2244 = icmp sgt i32 %2243, 7
  br i1 %2244, label %.lr.ph.i384.preheader, label %bsW.exit386

.lr.ph.i384.preheader:                            ; preds = %._crit_edge181.i
  br label %.lr.ph.i384

.lr.ph.i384:                                      ; preds = %.lr.ph.i384, %.lr.ph.i384.preheader
  %2245 = phi i32 [ %2253, %.lr.ph.i384 ], [ %.pre3.i383, %.lr.ph.i384.preheader ]
  %2246 = phi i32 [ %2255, %.lr.ph.i384 ], [ %.pre.i382, %.lr.ph.i384.preheader ]
  %2247 = lshr i32 %2246, 24
  %2248 = trunc i32 %2247 to i8
  %2249 = sext i32 %2245 to i64
  %2250 = load i8** %34, align 8
  %2251 = getelementptr inbounds i8* %2250, i64 %2249
  store i8 %2248, i8* %2251, align 1
  %2252 = load i32* %2064, align 4
  %2253 = add nsw i32 %2252, 1
  store i32 %2253, i32* %2064, align 4
  %2254 = load i32* %114, align 4
  %2255 = shl i32 %2254, 8
  store i32 %2255, i32* %114, align 4
  %2256 = load i32* %111, align 4
  %2257 = add nsw i32 %2256, -8
  store i32 %2257, i32* %111, align 4
  %2258 = icmp sgt i32 %2257, 7
  br i1 %2258, label %.lr.ph.i384, label %bsW.exit386.loopexit

bsW.exit386.loopexit:                             ; preds = %.lr.ph.i384
  %.lcssa1488 = phi i32 [ %2257, %.lr.ph.i384 ]
  %.lcssa1487 = phi i32 [ %2255, %.lr.ph.i384 ]
  %.lcssa1486 = phi i32 [ %2253, %.lr.ph.i384 ]
  br label %bsW.exit386

bsW.exit386:                                      ; preds = %bsW.exit386.loopexit, %._crit_edge181.i
  %.pre3.i383968 = phi i32 [ %.pre3.i383, %._crit_edge181.i ], [ %.lcssa1486, %bsW.exit386.loopexit ]
  %2259 = phi i32 [ %.pre.i382, %._crit_edge181.i ], [ %.lcssa1487, %bsW.exit386.loopexit ]
  %2260 = phi i32 [ %2243, %._crit_edge181.i ], [ %.lcssa1488, %bsW.exit386.loopexit ]
  store i32 %2259, i32* %114, align 4
  %2261 = add nsw i32 %2260, 1
  store i32 %2261, i32* %111, align 4
  %indvars.iv.next291.i = add nuw nsw i64 %indvars.iv290.i, 1
  %lftr.wideiv942 = trunc i64 %indvars.iv.next291.i to i32
  %exitcond943 = icmp eq i32 %lftr.wideiv942, %nSelectors.1.lcssa.i.lcssa
  br i1 %exitcond943, label %._crit_edge183.i.loopexit, label %.preheader114.i

._crit_edge183.i.loopexit:                        ; preds = %bsW.exit386
  %.pre3.i383968.lcssa = phi i32 [ %.pre3.i383968, %bsW.exit386 ]
  br label %._crit_edge183.i

._crit_edge183.i:                                 ; preds = %._crit_edge183.i.loopexit, %bsW.exit400
  %2262 = phi i32 [ %.pre3.i383972, %bsW.exit400 ], [ %.pre3.i383968.lcssa, %._crit_edge183.i.loopexit ]
  %2263 = load i32* %481, align 4
  %2264 = icmp sgt i32 %2263, 2
  br i1 %2264, label %2265, label %2269

; <label>:2265                                    ; preds = %._crit_edge183.i
  %2266 = load %struct._IO_FILE** @stderr, align 8
  %2267 = sub nsw i32 %2262, %2171
  %2268 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2266, i8* getelementptr inbounds ([15 x i8]* @.str873, i64 0, i64 0), i32 %2267) #12
  %.pre974 = load i32* %2064, align 4
  br label %2269

; <label>:2269                                    ; preds = %2265, %._crit_edge183.i
  %2270 = phi i32 [ %.pre974, %2265 ], [ %2262, %._crit_edge183.i ]
  %.pre975 = load i32* %111, align 4
  %.pre.i41.pre = load i32* %114, align 4
  br i1 %491, label %.preheader113.lr.ph.us.i.preheader, label %thread-pre-split.preheader

thread-pre-split.preheader:                       ; preds = %2269
  br label %thread-pre-split

.preheader113.lr.ph.us.i.preheader:               ; preds = %2269
  br label %.preheader113.lr.ph.us.i

; <label>:2271                                    ; preds = %bsW.exit64
  %.lcssa1476 = phi i32 [ %2292, %bsW.exit64 ]
  %.lcssa1475 = phi i32 [ %2290, %bsW.exit64 ]
  %.pre3.i977.lcssa = phi i32 [ %.pre3.i977, %bsW.exit64 ]
  %indvars.iv.next375.i = add nuw nsw i64 %indvars.iv374.i, 1
  %2272 = trunc i64 %indvars.iv.next375.i to i32
  %2273 = icmp slt i32 %2272, %nGroups.0.i
  br i1 %2273, label %.preheader113.lr.ph.us.i, label %.us-lcssa.us.i.loopexit

._crit_edge173.us.i.loopexit:                     ; preds = %bsW.exit57
  %.lcssa1471 = phi i32 [ %2315, %bsW.exit57 ]
  %.lcssa1470 = phi i32 [ %2314, %bsW.exit57 ]
  %.lcssa1469 = phi i32 [ %2313, %bsW.exit57 ]
  %.pre3.i979.lcssa = phi i32 [ %.pre3.i979, %bsW.exit57 ]
  br label %._crit_edge173.us.i

._crit_edge173.us.i:                              ; preds = %.preheader112.us.i, %._crit_edge173.us.i.loopexit
  %.pre.i60 = phi i32 [ %.pre.i53992, %.preheader112.us.i ], [ %.lcssa1469, %._crit_edge173.us.i.loopexit ]
  %.pre3.i61 = phi i32 [ %.pre3.i981, %.preheader112.us.i ], [ %.pre3.i979.lcssa, %._crit_edge173.us.i.loopexit ]
  %2274 = phi i32 [ %.pr482, %.preheader112.us.i ], [ %.lcssa1470, %._crit_edge173.us.i.loopexit ]
  %curr.2.lcssa.us.i = phi i32 [ %curr.1.lcssa.us.i, %.preheader112.us.i ], [ %.lcssa1471, %._crit_edge173.us.i.loopexit ]
  %2275 = icmp sgt i32 %2274, 7
  br i1 %2275, label %.lr.ph.i62.preheader, label %bsW.exit64

.lr.ph.i62.preheader:                             ; preds = %._crit_edge173.us.i
  br label %.lr.ph.i62

.lr.ph.i62:                                       ; preds = %.lr.ph.i62, %.lr.ph.i62.preheader
  %2276 = phi i32 [ %2284, %.lr.ph.i62 ], [ %.pre3.i61, %.lr.ph.i62.preheader ]
  %2277 = phi i32 [ %2286, %.lr.ph.i62 ], [ %.pre.i60, %.lr.ph.i62.preheader ]
  %2278 = lshr i32 %2277, 24
  %2279 = trunc i32 %2278 to i8
  %2280 = sext i32 %2276 to i64
  %2281 = load i8** %34, align 8
  %2282 = getelementptr inbounds i8* %2281, i64 %2280
  store i8 %2279, i8* %2282, align 1
  %2283 = load i32* %2064, align 4
  %2284 = add nsw i32 %2283, 1
  store i32 %2284, i32* %2064, align 4
  %2285 = load i32* %114, align 4
  %2286 = shl i32 %2285, 8
  store i32 %2286, i32* %114, align 4
  %2287 = load i32* %111, align 4
  %2288 = add nsw i32 %2287, -8
  store i32 %2288, i32* %111, align 4
  %2289 = icmp sgt i32 %2288, 7
  br i1 %2289, label %.lr.ph.i62, label %bsW.exit64.loopexit

bsW.exit64.loopexit:                              ; preds = %.lr.ph.i62
  %.lcssa1474 = phi i32 [ %2288, %.lr.ph.i62 ]
  %.lcssa1473 = phi i32 [ %2286, %.lr.ph.i62 ]
  %.lcssa1472 = phi i32 [ %2284, %.lr.ph.i62 ]
  br label %bsW.exit64

bsW.exit64:                                       ; preds = %bsW.exit64.loopexit, %._crit_edge173.us.i
  %.pre3.i977 = phi i32 [ %.pre3.i61, %._crit_edge173.us.i ], [ %.lcssa1472, %bsW.exit64.loopexit ]
  %2290 = phi i32 [ %.pre.i60, %._crit_edge173.us.i ], [ %.lcssa1473, %bsW.exit64.loopexit ]
  %2291 = phi i32 [ %2274, %._crit_edge173.us.i ], [ %.lcssa1474, %bsW.exit64.loopexit ]
  store i32 %2290, i32* %114, align 4
  %2292 = add nsw i32 %2291, 1
  store i32 %2292, i32* %111, align 4
  %indvars.iv.next371.i = add nuw nsw i64 %indvars.iv370.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next371.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %490
  br i1 %exitcond, label %2271, label %.preheader113.us.i

.lr.ph172.us.i:                                   ; preds = %.lr.ph172.us.i.preheader, %bsW.exit57
  %.pre.i53 = phi i32 [ %2313, %bsW.exit57 ], [ %.pre.i53992, %.lr.ph172.us.i.preheader ]
  %.pre3.i54 = phi i32 [ %.pre3.i979, %bsW.exit57 ], [ %.pre3.i981, %.lr.ph172.us.i.preheader ]
  %2293 = phi i32 [ %2314, %bsW.exit57 ], [ %.pr482, %.lr.ph172.us.i.preheader ]
  %curr.2171.us.i = phi i32 [ %2315, %bsW.exit57 ], [ %curr.1.lcssa.us.i, %.lr.ph172.us.i.preheader ]
  %2294 = icmp sgt i32 %2293, 7
  br i1 %2294, label %.lr.ph.i55.preheader, label %bsW.exit57

.lr.ph.i55.preheader:                             ; preds = %.lr.ph172.us.i
  br label %.lr.ph.i55

.lr.ph.i55:                                       ; preds = %.lr.ph.i55, %.lr.ph.i55.preheader
  %2295 = phi i32 [ %2303, %.lr.ph.i55 ], [ %.pre3.i54, %.lr.ph.i55.preheader ]
  %2296 = phi i32 [ %2305, %.lr.ph.i55 ], [ %.pre.i53, %.lr.ph.i55.preheader ]
  %2297 = lshr i32 %2296, 24
  %2298 = trunc i32 %2297 to i8
  %2299 = sext i32 %2295 to i64
  %2300 = load i8** %34, align 8
  %2301 = getelementptr inbounds i8* %2300, i64 %2299
  store i8 %2298, i8* %2301, align 1
  %2302 = load i32* %2064, align 4
  %2303 = add nsw i32 %2302, 1
  store i32 %2303, i32* %2064, align 4
  %2304 = load i32* %114, align 4
  %2305 = shl i32 %2304, 8
  store i32 %2305, i32* %114, align 4
  %2306 = load i32* %111, align 4
  %2307 = add nsw i32 %2306, -8
  store i32 %2307, i32* %111, align 4
  %2308 = icmp sgt i32 %2307, 7
  br i1 %2308, label %.lr.ph.i55, label %bsW.exit57.loopexit

bsW.exit57.loopexit:                              ; preds = %.lr.ph.i55
  %.lcssa1468 = phi i32 [ %2307, %.lr.ph.i55 ]
  %.lcssa1467 = phi i32 [ %2305, %.lr.ph.i55 ]
  %.lcssa1466 = phi i32 [ %2303, %.lr.ph.i55 ]
  br label %bsW.exit57

bsW.exit57:                                       ; preds = %bsW.exit57.loopexit, %.lr.ph172.us.i
  %.pre3.i979 = phi i32 [ %.pre3.i54, %.lr.ph172.us.i ], [ %.lcssa1466, %bsW.exit57.loopexit ]
  %2309 = phi i32 [ %.pre.i53, %.lr.ph172.us.i ], [ %.lcssa1467, %bsW.exit57.loopexit ]
  %2310 = phi i32 [ %2293, %.lr.ph172.us.i ], [ %.lcssa1468, %bsW.exit57.loopexit ]
  %2311 = sub i32 30, %2310
  %2312 = shl i32 3, %2311
  %2313 = or i32 %2312, %2309
  store i32 %2313, i32* %114, align 4
  %2314 = add nsw i32 %2310, 2
  store i32 %2314, i32* %111, align 4
  %2315 = add nsw i32 %curr.2171.us.i, -1
  %2316 = load i8* %2348, align 1
  %2317 = zext i8 %2316 to i32
  %2318 = icmp sgt i32 %2315, %2317
  br i1 %2318, label %.lr.ph172.us.i, label %._crit_edge173.us.i.loopexit

.lr.ph168.us.i:                                   ; preds = %.lr.ph168.us.i.preheader, %bsW.exit50
  %.pre.i46 = phi i32 [ %2339, %bsW.exit50 ], [ %.pre.i46989, %.lr.ph168.us.i.preheader ]
  %.pre3.i47 = phi i32 [ %.pre3.i982, %bsW.exit50 ], [ %.pre3.i984, %.lr.ph168.us.i.preheader ]
  %2319 = phi i32 [ %2340, %bsW.exit50 ], [ %.pr483, %.lr.ph168.us.i.preheader ]
  %curr.1167.us.i = phi i32 [ %2341, %bsW.exit50 ], [ %curr.0175.us.i, %.lr.ph168.us.i.preheader ]
  %2320 = icmp sgt i32 %2319, 7
  br i1 %2320, label %.lr.ph.i48.preheader, label %bsW.exit50

.lr.ph.i48.preheader:                             ; preds = %.lr.ph168.us.i
  br label %.lr.ph.i48

.lr.ph.i48:                                       ; preds = %.lr.ph.i48, %.lr.ph.i48.preheader
  %2321 = phi i32 [ %2329, %.lr.ph.i48 ], [ %.pre3.i47, %.lr.ph.i48.preheader ]
  %2322 = phi i32 [ %2331, %.lr.ph.i48 ], [ %.pre.i46, %.lr.ph.i48.preheader ]
  %2323 = lshr i32 %2322, 24
  %2324 = trunc i32 %2323 to i8
  %2325 = sext i32 %2321 to i64
  %2326 = load i8** %34, align 8
  %2327 = getelementptr inbounds i8* %2326, i64 %2325
  store i8 %2324, i8* %2327, align 1
  %2328 = load i32* %2064, align 4
  %2329 = add nsw i32 %2328, 1
  store i32 %2329, i32* %2064, align 4
  %2330 = load i32* %114, align 4
  %2331 = shl i32 %2330, 8
  store i32 %2331, i32* %114, align 4
  %2332 = load i32* %111, align 4
  %2333 = add nsw i32 %2332, -8
  store i32 %2333, i32* %111, align 4
  %2334 = icmp sgt i32 %2333, 7
  br i1 %2334, label %.lr.ph.i48, label %bsW.exit50.loopexit

bsW.exit50.loopexit:                              ; preds = %.lr.ph.i48
  %.lcssa1461 = phi i32 [ %2333, %.lr.ph.i48 ]
  %.lcssa1460 = phi i32 [ %2331, %.lr.ph.i48 ]
  %.lcssa1459 = phi i32 [ %2329, %.lr.ph.i48 ]
  br label %bsW.exit50

bsW.exit50:                                       ; preds = %bsW.exit50.loopexit, %.lr.ph168.us.i
  %.pre3.i982 = phi i32 [ %.pre3.i47, %.lr.ph168.us.i ], [ %.lcssa1459, %bsW.exit50.loopexit ]
  %2335 = phi i32 [ %.pre.i46, %.lr.ph168.us.i ], [ %.lcssa1460, %bsW.exit50.loopexit ]
  %2336 = phi i32 [ %2319, %.lr.ph168.us.i ], [ %.lcssa1461, %bsW.exit50.loopexit ]
  %2337 = sub i32 30, %2336
  %2338 = shl i32 2, %2337
  %2339 = or i32 %2338, %2335
  store i32 %2339, i32* %114, align 4
  %2340 = add nsw i32 %2336, 2
  store i32 %2340, i32* %111, align 4
  %2341 = add nsw i32 %curr.1167.us.i, 1
  %2342 = load i8* %2348, align 1
  %2343 = zext i8 %2342 to i32
  %2344 = icmp slt i32 %2341, %2343
  br i1 %2344, label %.lr.ph168.us.i, label %.preheader112.us.i.loopexit

.preheader112.us.i.loopexit:                      ; preds = %bsW.exit50
  %.lcssa1465 = phi i8 [ %2342, %bsW.exit50 ]
  %.lcssa1464 = phi i32 [ %2341, %bsW.exit50 ]
  %.lcssa1463 = phi i32 [ %2340, %bsW.exit50 ]
  %.lcssa1462 = phi i32 [ %2339, %bsW.exit50 ]
  %.pre3.i982.lcssa = phi i32 [ %.pre3.i982, %bsW.exit50 ]
  br label %.preheader112.us.i

.preheader112.us.i:                               ; preds = %.preheader113.us.i, %.preheader112.us.i.loopexit
  %.pre.i53992 = phi i32 [ %.pre.i46989, %.preheader113.us.i ], [ %.lcssa1462, %.preheader112.us.i.loopexit ]
  %.pr482 = phi i32 [ %.pr483, %.preheader113.us.i ], [ %.lcssa1463, %.preheader112.us.i.loopexit ]
  %.pre3.i981 = phi i32 [ %.pre3.i984, %.preheader113.us.i ], [ %.pre3.i982.lcssa, %.preheader112.us.i.loopexit ]
  %2345 = phi i8 [ %2349, %.preheader113.us.i ], [ %.lcssa1465, %.preheader112.us.i.loopexit ]
  %curr.1.lcssa.us.i = phi i32 [ %curr.0175.us.i, %.preheader113.us.i ], [ %.lcssa1464, %.preheader112.us.i.loopexit ]
  %2346 = zext i8 %2345 to i32
  %2347 = icmp sgt i32 %curr.1.lcssa.us.i, %2346
  br i1 %2347, label %.lr.ph172.us.i.preheader, label %._crit_edge173.us.i

.lr.ph172.us.i.preheader:                         ; preds = %.preheader112.us.i
  br label %.lr.ph172.us.i

.preheader113.us.i:                               ; preds = %bsW.exit, %bsW.exit64
  %.pre.i46989 = phi i32 [ %2375, %bsW.exit ], [ %2290, %bsW.exit64 ]
  %.pr483 = phi i32 [ %2376, %bsW.exit ], [ %2292, %bsW.exit64 ]
  %.pre3.i984 = phi i32 [ %.pre3.i985, %bsW.exit ], [ %.pre3.i977, %bsW.exit64 ]
  %indvars.iv370.i = phi i64 [ 0, %bsW.exit ], [ %indvars.iv.next371.i, %bsW.exit64 ]
  %curr.0175.us.i = phi i32 [ %2355, %bsW.exit ], [ %curr.2.lcssa.us.i, %bsW.exit64 ]
  %2348 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv374.i, i64 %indvars.iv370.i
  %2349 = load i8* %2348, align 1
  %2350 = zext i8 %2349 to i32
  %2351 = icmp slt i32 %curr.0175.us.i, %2350
  br i1 %2351, label %.lr.ph168.us.i.preheader, label %.preheader112.us.i

.lr.ph168.us.i.preheader:                         ; preds = %.preheader113.us.i
  br label %.lr.ph168.us.i

.preheader113.lr.ph.us.i:                         ; preds = %2271, %.preheader113.lr.ph.us.i.preheader
  %.pre3.i = phi i32 [ %.pre3.i977.lcssa, %2271 ], [ %2270, %.preheader113.lr.ph.us.i.preheader ]
  %.pre.i41 = phi i32 [ %.lcssa1475, %2271 ], [ %.pre.i41.pre, %.preheader113.lr.ph.us.i.preheader ]
  %2352 = phi i32 [ %.lcssa1476, %2271 ], [ %.pre975, %.preheader113.lr.ph.us.i.preheader ]
  %indvars.iv374.i = phi i64 [ %indvars.iv.next375.i, %2271 ], [ 0, %.preheader113.lr.ph.us.i.preheader ]
  %2353 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv374.i, i64 0
  %2354 = load i8* %2353, align 1
  %2355 = zext i8 %2354 to i32
  %2356 = icmp sgt i32 %2352, 7
  br i1 %2356, label %.lr.ph.i42.preheader, label %bsW.exit

.lr.ph.i42.preheader:                             ; preds = %.preheader113.lr.ph.us.i
  br label %.lr.ph.i42

.lr.ph.i42:                                       ; preds = %.lr.ph.i42, %.lr.ph.i42.preheader
  %2357 = phi i32 [ %2365, %.lr.ph.i42 ], [ %.pre3.i, %.lr.ph.i42.preheader ]
  %2358 = phi i32 [ %2367, %.lr.ph.i42 ], [ %.pre.i41, %.lr.ph.i42.preheader ]
  %2359 = lshr i32 %2358, 24
  %2360 = trunc i32 %2359 to i8
  %2361 = sext i32 %2357 to i64
  %2362 = load i8** %34, align 8
  %2363 = getelementptr inbounds i8* %2362, i64 %2361
  store i8 %2360, i8* %2363, align 1
  %2364 = load i32* %2064, align 4
  %2365 = add nsw i32 %2364, 1
  store i32 %2365, i32* %2064, align 4
  %2366 = load i32* %114, align 4
  %2367 = shl i32 %2366, 8
  store i32 %2367, i32* %114, align 4
  %2368 = load i32* %111, align 4
  %2369 = add nsw i32 %2368, -8
  store i32 %2369, i32* %111, align 4
  %2370 = icmp sgt i32 %2369, 7
  br i1 %2370, label %.lr.ph.i42, label %bsW.exit.loopexit

bsW.exit.loopexit:                                ; preds = %.lr.ph.i42
  %.lcssa1458 = phi i32 [ %2369, %.lr.ph.i42 ]
  %.lcssa1457 = phi i32 [ %2367, %.lr.ph.i42 ]
  %.lcssa1456 = phi i32 [ %2365, %.lr.ph.i42 ]
  br label %bsW.exit

bsW.exit:                                         ; preds = %bsW.exit.loopexit, %.preheader113.lr.ph.us.i
  %.pre3.i985 = phi i32 [ %.pre3.i, %.preheader113.lr.ph.us.i ], [ %.lcssa1456, %bsW.exit.loopexit ]
  %2371 = phi i32 [ %.pre.i41, %.preheader113.lr.ph.us.i ], [ %.lcssa1457, %bsW.exit.loopexit ]
  %2372 = phi i32 [ %2352, %.preheader113.lr.ph.us.i ], [ %.lcssa1458, %bsW.exit.loopexit ]
  %2373 = sub i32 27, %2372
  %2374 = shl i32 %2355, %2373
  %2375 = or i32 %2374, %2371
  store i32 %2375, i32* %114, align 4
  %2376 = add nsw i32 %2372, 5
  store i32 %2376, i32* %111, align 4
  br label %.preheader113.us.i

thread-pre-split:                                 ; preds = %bsW.exit372, %thread-pre-split.preheader
  %.pre.i368 = phi i32 [ %2401, %bsW.exit372 ], [ %.pre.i41.pre, %thread-pre-split.preheader ]
  %.pre3.i369 = phi i32 [ %2396, %bsW.exit372 ], [ %2270, %thread-pre-split.preheader ]
  %2377 = phi i32 [ %2402, %bsW.exit372 ], [ %.pre975, %thread-pre-split.preheader ]
  %indvars.iv288.i = phi i64 [ %indvars.iv.next289.i, %bsW.exit372 ], [ 0, %thread-pre-split.preheader ]
  %2378 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %indvars.iv288.i, i64 0
  %2379 = load i8* %2378, align 1
  %2380 = zext i8 %2379 to i32
  %2381 = icmp sgt i32 %2377, 7
  br i1 %2381, label %.lr.ph.i370.preheader, label %bsW.exit372

.lr.ph.i370.preheader:                            ; preds = %thread-pre-split
  br label %.lr.ph.i370

.lr.ph.i370:                                      ; preds = %.lr.ph.i370, %.lr.ph.i370.preheader
  %2382 = phi i32 [ %2390, %.lr.ph.i370 ], [ %.pre3.i369, %.lr.ph.i370.preheader ]
  %2383 = phi i32 [ %2392, %.lr.ph.i370 ], [ %.pre.i368, %.lr.ph.i370.preheader ]
  %2384 = lshr i32 %2383, 24
  %2385 = trunc i32 %2384 to i8
  %2386 = sext i32 %2382 to i64
  %2387 = load i8** %34, align 8
  %2388 = getelementptr inbounds i8* %2387, i64 %2386
  store i8 %2385, i8* %2388, align 1
  %2389 = load i32* %2064, align 4
  %2390 = add nsw i32 %2389, 1
  store i32 %2390, i32* %2064, align 4
  %2391 = load i32* %114, align 4
  %2392 = shl i32 %2391, 8
  store i32 %2392, i32* %114, align 4
  %2393 = load i32* %111, align 4
  %2394 = add nsw i32 %2393, -8
  store i32 %2394, i32* %111, align 4
  %2395 = icmp sgt i32 %2394, 7
  br i1 %2395, label %.lr.ph.i370, label %bsW.exit372.loopexit

bsW.exit372.loopexit:                             ; preds = %.lr.ph.i370
  %.lcssa1479 = phi i32 [ %2394, %.lr.ph.i370 ]
  %.lcssa1478 = phi i32 [ %2392, %.lr.ph.i370 ]
  %.lcssa1477 = phi i32 [ %2390, %.lr.ph.i370 ]
  br label %bsW.exit372

bsW.exit372:                                      ; preds = %bsW.exit372.loopexit, %thread-pre-split
  %2396 = phi i32 [ %.pre3.i369, %thread-pre-split ], [ %.lcssa1477, %bsW.exit372.loopexit ]
  %2397 = phi i32 [ %.pre.i368, %thread-pre-split ], [ %.lcssa1478, %bsW.exit372.loopexit ]
  %2398 = phi i32 [ %2377, %thread-pre-split ], [ %.lcssa1479, %bsW.exit372.loopexit ]
  %2399 = sub i32 27, %2398
  %2400 = shl i32 %2380, %2399
  %2401 = or i32 %2400, %2397
  store i32 %2401, i32* %114, align 4
  %2402 = add nsw i32 %2398, 5
  store i32 %2402, i32* %111, align 4
  %indvars.iv.next289.i = add nuw nsw i64 %indvars.iv288.i, 1
  %2403 = trunc i64 %indvars.iv.next289.i to i32
  %2404 = icmp slt i32 %2403, %nGroups.0.i
  br i1 %2404, label %thread-pre-split, label %.us-lcssa.us.i.loopexit1340

.us-lcssa.us.i.loopexit:                          ; preds = %2271
  %.pre3.i977.lcssa.lcssa = phi i32 [ %.pre3.i977.lcssa, %2271 ]
  br label %.us-lcssa.us.i

.us-lcssa.us.i.loopexit1340:                      ; preds = %bsW.exit372
  %.lcssa1480 = phi i32 [ %2396, %bsW.exit372 ]
  br label %.us-lcssa.us.i

.us-lcssa.us.i:                                   ; preds = %.us-lcssa.us.i.loopexit1340, %.us-lcssa.us.i.loopexit
  %2405 = phi i32 [ %.pre3.i977.lcssa.lcssa, %.us-lcssa.us.i.loopexit ], [ %.lcssa1480, %.us-lcssa.us.i.loopexit1340 ]
  %2406 = load i32* %481, align 4
  %2407 = icmp sgt i32 %2406, 2
  br i1 %2407, label %2408, label %2412

; <label>:2408                                    ; preds = %.us-lcssa.us.i
  %2409 = load %struct._IO_FILE** @stderr, align 8
  %2410 = sub nsw i32 %2405, %2270
  %2411 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2409, i8* getelementptr inbounds ([18 x i8]* @.str974, i64 0, i64 0), i32 %2410) #12
  %.pre994 = load i32* %2064, align 4
  br label %2412

; <label>:2412                                    ; preds = %2408, %.us-lcssa.us.i
  %2413 = phi i32 [ %.pre994, %2408 ], [ %2405, %.us-lcssa.us.i ]
  %2414 = load i32* %475, align 4
  %2415 = icmp sgt i32 %2414, 0
  br i1 %2415, label %.lr.ph166.i.preheader, label %4123

.lr.ph166.i.preheader:                            ; preds = %2412
  br label %.lr.ph166.i

.lr.ph166.i:                                      ; preds = %.loopexit.i, %.lr.ph166.i.preheader
  %indvars.iv286.i = phi i64 [ %indvars.iv.next287.i, %.loopexit.i ], [ 0, %.lr.ph166.i.preheader ]
  %2416 = phi i32 [ %4120, %.loopexit.i ], [ %2414, %.lr.ph166.i.preheader ]
  %gs.2165.i = phi i32 [ %4119, %.loopexit.i ], [ 0, %.lr.ph166.i.preheader ]
  %2417 = add nsw i32 %gs.2165.i, 49
  %2418 = icmp slt i32 %2417, %2416
  %2419 = add nsw i32 %2416, -1
  %.11.i = select i1 %2418, i32 %2417, i32 %2419
  %2420 = getelementptr inbounds %struct.EState* %s, i64 0, i32 33, i64 %indvars.iv286.i
  %2421 = load i8* %2420, align 1
  %2422 = zext i8 %2421 to i32
  %2423 = icmp ult i32 %2422, %nGroups.0.i
  br i1 %2423, label %2425, label %2424

; <label>:2424                                    ; preds = %.lr.ph166.i
  call void @BZ2_bz__AssertH__fail(i32 3006) #2
  br label %2425

; <label>:2425                                    ; preds = %2424, %.lr.ph166.i
  %2426 = sub nsw i32 %.11.i, %gs.2165.i
  %2427 = icmp eq i32 %2426, 49
  %or.cond13.i = and i1 %518, %2427
  br i1 %or.cond13.i, label %2430, label %.preheader.i

.preheader.i:                                     ; preds = %2425
  %2428 = icmp slt i32 %.11.i, %gs.2165.i
  br i1 %2428, label %.loopexit.i, label %.lr.ph.i40

.lr.ph.i40:                                       ; preds = %.preheader.i
  %2429 = sext i32 %gs.2165.i to i64
  %.pre387.i = load i32* %111, align 4
  %.pre.i18.i.pre = load i32* %114, align 4
  br label %4082

; <label>:2430                                    ; preds = %2425
  %2431 = load i8* %2420, align 1
  %2432 = zext i8 %2431 to i64
  %2433 = sext i32 %gs.2165.i to i64
  %2434 = getelementptr inbounds i16* %480, i64 %2433
  %2435 = load i16* %2434, align 2
  %2436 = zext i16 %2435 to i64
  %2437 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2436
  %2438 = load i8* %2437, align 1
  %2439 = zext i8 %2438 to i32
  %2440 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2436
  %2441 = load i32* %2440, align 4
  %2442 = load i32* %111, align 4
  %2443 = icmp sgt i32 %2442, 7
  %.pre.i326 = load i32* %114, align 4
  br i1 %2443, label %.lr.ph.i328, label %bsW.exit330

.lr.ph.i328:                                      ; preds = %2430
  %.pre3.i327 = load i32* %2064, align 4
  br label %2444

; <label>:2444                                    ; preds = %2444, %.lr.ph.i328
  %2445 = phi i32 [ %.pre3.i327, %.lr.ph.i328 ], [ %2453, %2444 ]
  %2446 = phi i32 [ %.pre.i326, %.lr.ph.i328 ], [ %2455, %2444 ]
  %2447 = lshr i32 %2446, 24
  %2448 = trunc i32 %2447 to i8
  %2449 = sext i32 %2445 to i64
  %2450 = load i8** %34, align 8
  %2451 = getelementptr inbounds i8* %2450, i64 %2449
  store i8 %2448, i8* %2451, align 1
  %2452 = load i32* %2064, align 4
  %2453 = add nsw i32 %2452, 1
  store i32 %2453, i32* %2064, align 4
  %2454 = load i32* %114, align 4
  %2455 = shl i32 %2454, 8
  store i32 %2455, i32* %114, align 4
  %2456 = load i32* %111, align 4
  %2457 = add nsw i32 %2456, -8
  store i32 %2457, i32* %111, align 4
  %2458 = icmp sgt i32 %2457, 7
  br i1 %2458, label %2444, label %bsW.exit330.loopexit

bsW.exit330.loopexit:                             ; preds = %2444
  %.lcssa1357 = phi i32 [ %2457, %2444 ]
  %.lcssa1356 = phi i32 [ %2455, %2444 ]
  br label %bsW.exit330

bsW.exit330:                                      ; preds = %bsW.exit330.loopexit, %2430
  %2459 = phi i32 [ %.pre.i326, %2430 ], [ %.lcssa1356, %bsW.exit330.loopexit ]
  %2460 = phi i32 [ %2442, %2430 ], [ %.lcssa1357, %bsW.exit330.loopexit ]
  %2461 = sub i32 32, %2439
  %2462 = sub i32 %2461, %2460
  %2463 = shl i32 %2441, %2462
  %2464 = or i32 %2463, %2459
  store i32 %2464, i32* %114, align 4
  %2465 = add nsw i32 %2460, %2439
  store i32 %2465, i32* %111, align 4
  %2466 = add nsw i32 %gs.2165.i, 1
  %2467 = sext i32 %2466 to i64
  %2468 = getelementptr inbounds i16* %480, i64 %2467
  %2469 = load i16* %2468, align 2
  %2470 = zext i16 %2469 to i64
  %2471 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2470
  %2472 = load i8* %2471, align 1
  %2473 = zext i8 %2472 to i32
  %2474 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2470
  %2475 = load i32* %2474, align 4
  %2476 = icmp sgt i32 %2465, 7
  br i1 %2476, label %.lr.ph.i321, label %bsW.exit323

.lr.ph.i321:                                      ; preds = %bsW.exit330
  %.pre3.i320 = load i32* %2064, align 4
  br label %2477

; <label>:2477                                    ; preds = %2477, %.lr.ph.i321
  %2478 = phi i32 [ %.pre3.i320, %.lr.ph.i321 ], [ %2486, %2477 ]
  %2479 = phi i32 [ %2464, %.lr.ph.i321 ], [ %2488, %2477 ]
  %2480 = lshr i32 %2479, 24
  %2481 = trunc i32 %2480 to i8
  %2482 = sext i32 %2478 to i64
  %2483 = load i8** %34, align 8
  %2484 = getelementptr inbounds i8* %2483, i64 %2482
  store i8 %2481, i8* %2484, align 1
  %2485 = load i32* %2064, align 4
  %2486 = add nsw i32 %2485, 1
  store i32 %2486, i32* %2064, align 4
  %2487 = load i32* %114, align 4
  %2488 = shl i32 %2487, 8
  store i32 %2488, i32* %114, align 4
  %2489 = load i32* %111, align 4
  %2490 = add nsw i32 %2489, -8
  store i32 %2490, i32* %111, align 4
  %2491 = icmp sgt i32 %2490, 7
  br i1 %2491, label %2477, label %bsW.exit323.loopexit

bsW.exit323.loopexit:                             ; preds = %2477
  %.lcssa1359 = phi i32 [ %2490, %2477 ]
  %.lcssa1358 = phi i32 [ %2488, %2477 ]
  br label %bsW.exit323

bsW.exit323:                                      ; preds = %bsW.exit323.loopexit, %bsW.exit330
  %2492 = phi i32 [ %2464, %bsW.exit330 ], [ %.lcssa1358, %bsW.exit323.loopexit ]
  %2493 = phi i32 [ %2465, %bsW.exit330 ], [ %.lcssa1359, %bsW.exit323.loopexit ]
  %2494 = sub i32 32, %2473
  %2495 = sub i32 %2494, %2493
  %2496 = shl i32 %2475, %2495
  %2497 = or i32 %2496, %2492
  store i32 %2497, i32* %114, align 4
  %2498 = add nsw i32 %2493, %2473
  store i32 %2498, i32* %111, align 4
  %2499 = add nsw i32 %gs.2165.i, 2
  %2500 = sext i32 %2499 to i64
  %2501 = getelementptr inbounds i16* %480, i64 %2500
  %2502 = load i16* %2501, align 2
  %2503 = zext i16 %2502 to i64
  %2504 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2503
  %2505 = load i8* %2504, align 1
  %2506 = zext i8 %2505 to i32
  %2507 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2503
  %2508 = load i32* %2507, align 4
  %2509 = icmp sgt i32 %2498, 7
  br i1 %2509, label %.lr.ph.i314, label %bsW.exit316

.lr.ph.i314:                                      ; preds = %bsW.exit323
  %.pre3.i313 = load i32* %2064, align 4
  br label %2510

; <label>:2510                                    ; preds = %2510, %.lr.ph.i314
  %2511 = phi i32 [ %.pre3.i313, %.lr.ph.i314 ], [ %2519, %2510 ]
  %2512 = phi i32 [ %2497, %.lr.ph.i314 ], [ %2521, %2510 ]
  %2513 = lshr i32 %2512, 24
  %2514 = trunc i32 %2513 to i8
  %2515 = sext i32 %2511 to i64
  %2516 = load i8** %34, align 8
  %2517 = getelementptr inbounds i8* %2516, i64 %2515
  store i8 %2514, i8* %2517, align 1
  %2518 = load i32* %2064, align 4
  %2519 = add nsw i32 %2518, 1
  store i32 %2519, i32* %2064, align 4
  %2520 = load i32* %114, align 4
  %2521 = shl i32 %2520, 8
  store i32 %2521, i32* %114, align 4
  %2522 = load i32* %111, align 4
  %2523 = add nsw i32 %2522, -8
  store i32 %2523, i32* %111, align 4
  %2524 = icmp sgt i32 %2523, 7
  br i1 %2524, label %2510, label %bsW.exit316.loopexit

bsW.exit316.loopexit:                             ; preds = %2510
  %.lcssa1361 = phi i32 [ %2523, %2510 ]
  %.lcssa1360 = phi i32 [ %2521, %2510 ]
  br label %bsW.exit316

bsW.exit316:                                      ; preds = %bsW.exit316.loopexit, %bsW.exit323
  %2525 = phi i32 [ %2497, %bsW.exit323 ], [ %.lcssa1360, %bsW.exit316.loopexit ]
  %2526 = phi i32 [ %2498, %bsW.exit323 ], [ %.lcssa1361, %bsW.exit316.loopexit ]
  %2527 = sub i32 32, %2506
  %2528 = sub i32 %2527, %2526
  %2529 = shl i32 %2508, %2528
  %2530 = or i32 %2529, %2525
  store i32 %2530, i32* %114, align 4
  %2531 = add nsw i32 %2526, %2506
  store i32 %2531, i32* %111, align 4
  %2532 = add nsw i32 %gs.2165.i, 3
  %2533 = sext i32 %2532 to i64
  %2534 = getelementptr inbounds i16* %480, i64 %2533
  %2535 = load i16* %2534, align 2
  %2536 = zext i16 %2535 to i64
  %2537 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2536
  %2538 = load i8* %2537, align 1
  %2539 = zext i8 %2538 to i32
  %2540 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2536
  %2541 = load i32* %2540, align 4
  %2542 = icmp sgt i32 %2531, 7
  br i1 %2542, label %.lr.ph.i307, label %bsW.exit309

.lr.ph.i307:                                      ; preds = %bsW.exit316
  %.pre3.i306 = load i32* %2064, align 4
  br label %2543

; <label>:2543                                    ; preds = %2543, %.lr.ph.i307
  %2544 = phi i32 [ %.pre3.i306, %.lr.ph.i307 ], [ %2552, %2543 ]
  %2545 = phi i32 [ %2530, %.lr.ph.i307 ], [ %2554, %2543 ]
  %2546 = lshr i32 %2545, 24
  %2547 = trunc i32 %2546 to i8
  %2548 = sext i32 %2544 to i64
  %2549 = load i8** %34, align 8
  %2550 = getelementptr inbounds i8* %2549, i64 %2548
  store i8 %2547, i8* %2550, align 1
  %2551 = load i32* %2064, align 4
  %2552 = add nsw i32 %2551, 1
  store i32 %2552, i32* %2064, align 4
  %2553 = load i32* %114, align 4
  %2554 = shl i32 %2553, 8
  store i32 %2554, i32* %114, align 4
  %2555 = load i32* %111, align 4
  %2556 = add nsw i32 %2555, -8
  store i32 %2556, i32* %111, align 4
  %2557 = icmp sgt i32 %2556, 7
  br i1 %2557, label %2543, label %bsW.exit309.loopexit

bsW.exit309.loopexit:                             ; preds = %2543
  %.lcssa1363 = phi i32 [ %2556, %2543 ]
  %.lcssa1362 = phi i32 [ %2554, %2543 ]
  br label %bsW.exit309

bsW.exit309:                                      ; preds = %bsW.exit309.loopexit, %bsW.exit316
  %2558 = phi i32 [ %2530, %bsW.exit316 ], [ %.lcssa1362, %bsW.exit309.loopexit ]
  %2559 = phi i32 [ %2531, %bsW.exit316 ], [ %.lcssa1363, %bsW.exit309.loopexit ]
  %2560 = sub i32 32, %2539
  %2561 = sub i32 %2560, %2559
  %2562 = shl i32 %2541, %2561
  %2563 = or i32 %2562, %2558
  store i32 %2563, i32* %114, align 4
  %2564 = add nsw i32 %2559, %2539
  store i32 %2564, i32* %111, align 4
  %2565 = add nsw i32 %gs.2165.i, 4
  %2566 = sext i32 %2565 to i64
  %2567 = getelementptr inbounds i16* %480, i64 %2566
  %2568 = load i16* %2567, align 2
  %2569 = zext i16 %2568 to i64
  %2570 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2569
  %2571 = load i8* %2570, align 1
  %2572 = zext i8 %2571 to i32
  %2573 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2569
  %2574 = load i32* %2573, align 4
  %2575 = icmp sgt i32 %2564, 7
  br i1 %2575, label %.lr.ph.i300, label %bsW.exit302

.lr.ph.i300:                                      ; preds = %bsW.exit309
  %.pre3.i299 = load i32* %2064, align 4
  br label %2576

; <label>:2576                                    ; preds = %2576, %.lr.ph.i300
  %2577 = phi i32 [ %.pre3.i299, %.lr.ph.i300 ], [ %2585, %2576 ]
  %2578 = phi i32 [ %2563, %.lr.ph.i300 ], [ %2587, %2576 ]
  %2579 = lshr i32 %2578, 24
  %2580 = trunc i32 %2579 to i8
  %2581 = sext i32 %2577 to i64
  %2582 = load i8** %34, align 8
  %2583 = getelementptr inbounds i8* %2582, i64 %2581
  store i8 %2580, i8* %2583, align 1
  %2584 = load i32* %2064, align 4
  %2585 = add nsw i32 %2584, 1
  store i32 %2585, i32* %2064, align 4
  %2586 = load i32* %114, align 4
  %2587 = shl i32 %2586, 8
  store i32 %2587, i32* %114, align 4
  %2588 = load i32* %111, align 4
  %2589 = add nsw i32 %2588, -8
  store i32 %2589, i32* %111, align 4
  %2590 = icmp sgt i32 %2589, 7
  br i1 %2590, label %2576, label %bsW.exit302.loopexit

bsW.exit302.loopexit:                             ; preds = %2576
  %.lcssa1365 = phi i32 [ %2589, %2576 ]
  %.lcssa1364 = phi i32 [ %2587, %2576 ]
  br label %bsW.exit302

bsW.exit302:                                      ; preds = %bsW.exit302.loopexit, %bsW.exit309
  %2591 = phi i32 [ %2563, %bsW.exit309 ], [ %.lcssa1364, %bsW.exit302.loopexit ]
  %2592 = phi i32 [ %2564, %bsW.exit309 ], [ %.lcssa1365, %bsW.exit302.loopexit ]
  %2593 = sub i32 32, %2572
  %2594 = sub i32 %2593, %2592
  %2595 = shl i32 %2574, %2594
  %2596 = or i32 %2595, %2591
  store i32 %2596, i32* %114, align 4
  %2597 = add nsw i32 %2592, %2572
  store i32 %2597, i32* %111, align 4
  %2598 = add nsw i32 %gs.2165.i, 5
  %2599 = sext i32 %2598 to i64
  %2600 = getelementptr inbounds i16* %480, i64 %2599
  %2601 = load i16* %2600, align 2
  %2602 = zext i16 %2601 to i64
  %2603 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2602
  %2604 = load i8* %2603, align 1
  %2605 = zext i8 %2604 to i32
  %2606 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2602
  %2607 = load i32* %2606, align 4
  %2608 = icmp sgt i32 %2597, 7
  br i1 %2608, label %.lr.ph.i293, label %bsW.exit295

.lr.ph.i293:                                      ; preds = %bsW.exit302
  %.pre3.i292 = load i32* %2064, align 4
  br label %2609

; <label>:2609                                    ; preds = %2609, %.lr.ph.i293
  %2610 = phi i32 [ %.pre3.i292, %.lr.ph.i293 ], [ %2618, %2609 ]
  %2611 = phi i32 [ %2596, %.lr.ph.i293 ], [ %2620, %2609 ]
  %2612 = lshr i32 %2611, 24
  %2613 = trunc i32 %2612 to i8
  %2614 = sext i32 %2610 to i64
  %2615 = load i8** %34, align 8
  %2616 = getelementptr inbounds i8* %2615, i64 %2614
  store i8 %2613, i8* %2616, align 1
  %2617 = load i32* %2064, align 4
  %2618 = add nsw i32 %2617, 1
  store i32 %2618, i32* %2064, align 4
  %2619 = load i32* %114, align 4
  %2620 = shl i32 %2619, 8
  store i32 %2620, i32* %114, align 4
  %2621 = load i32* %111, align 4
  %2622 = add nsw i32 %2621, -8
  store i32 %2622, i32* %111, align 4
  %2623 = icmp sgt i32 %2622, 7
  br i1 %2623, label %2609, label %bsW.exit295.loopexit

bsW.exit295.loopexit:                             ; preds = %2609
  %.lcssa1367 = phi i32 [ %2622, %2609 ]
  %.lcssa1366 = phi i32 [ %2620, %2609 ]
  br label %bsW.exit295

bsW.exit295:                                      ; preds = %bsW.exit295.loopexit, %bsW.exit302
  %2624 = phi i32 [ %2596, %bsW.exit302 ], [ %.lcssa1366, %bsW.exit295.loopexit ]
  %2625 = phi i32 [ %2597, %bsW.exit302 ], [ %.lcssa1367, %bsW.exit295.loopexit ]
  %2626 = sub i32 32, %2605
  %2627 = sub i32 %2626, %2625
  %2628 = shl i32 %2607, %2627
  %2629 = or i32 %2628, %2624
  store i32 %2629, i32* %114, align 4
  %2630 = add nsw i32 %2625, %2605
  store i32 %2630, i32* %111, align 4
  %2631 = add nsw i32 %gs.2165.i, 6
  %2632 = sext i32 %2631 to i64
  %2633 = getelementptr inbounds i16* %480, i64 %2632
  %2634 = load i16* %2633, align 2
  %2635 = zext i16 %2634 to i64
  %2636 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2635
  %2637 = load i8* %2636, align 1
  %2638 = zext i8 %2637 to i32
  %2639 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2635
  %2640 = load i32* %2639, align 4
  %2641 = icmp sgt i32 %2630, 7
  br i1 %2641, label %.lr.ph.i286, label %bsW.exit288

.lr.ph.i286:                                      ; preds = %bsW.exit295
  %.pre3.i285 = load i32* %2064, align 4
  br label %2642

; <label>:2642                                    ; preds = %2642, %.lr.ph.i286
  %2643 = phi i32 [ %.pre3.i285, %.lr.ph.i286 ], [ %2651, %2642 ]
  %2644 = phi i32 [ %2629, %.lr.ph.i286 ], [ %2653, %2642 ]
  %2645 = lshr i32 %2644, 24
  %2646 = trunc i32 %2645 to i8
  %2647 = sext i32 %2643 to i64
  %2648 = load i8** %34, align 8
  %2649 = getelementptr inbounds i8* %2648, i64 %2647
  store i8 %2646, i8* %2649, align 1
  %2650 = load i32* %2064, align 4
  %2651 = add nsw i32 %2650, 1
  store i32 %2651, i32* %2064, align 4
  %2652 = load i32* %114, align 4
  %2653 = shl i32 %2652, 8
  store i32 %2653, i32* %114, align 4
  %2654 = load i32* %111, align 4
  %2655 = add nsw i32 %2654, -8
  store i32 %2655, i32* %111, align 4
  %2656 = icmp sgt i32 %2655, 7
  br i1 %2656, label %2642, label %bsW.exit288.loopexit

bsW.exit288.loopexit:                             ; preds = %2642
  %.lcssa1369 = phi i32 [ %2655, %2642 ]
  %.lcssa1368 = phi i32 [ %2653, %2642 ]
  br label %bsW.exit288

bsW.exit288:                                      ; preds = %bsW.exit288.loopexit, %bsW.exit295
  %2657 = phi i32 [ %2629, %bsW.exit295 ], [ %.lcssa1368, %bsW.exit288.loopexit ]
  %2658 = phi i32 [ %2630, %bsW.exit295 ], [ %.lcssa1369, %bsW.exit288.loopexit ]
  %2659 = sub i32 32, %2638
  %2660 = sub i32 %2659, %2658
  %2661 = shl i32 %2640, %2660
  %2662 = or i32 %2661, %2657
  store i32 %2662, i32* %114, align 4
  %2663 = add nsw i32 %2658, %2638
  store i32 %2663, i32* %111, align 4
  %2664 = add nsw i32 %gs.2165.i, 7
  %2665 = sext i32 %2664 to i64
  %2666 = getelementptr inbounds i16* %480, i64 %2665
  %2667 = load i16* %2666, align 2
  %2668 = zext i16 %2667 to i64
  %2669 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2668
  %2670 = load i8* %2669, align 1
  %2671 = zext i8 %2670 to i32
  %2672 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2668
  %2673 = load i32* %2672, align 4
  %2674 = icmp sgt i32 %2663, 7
  br i1 %2674, label %.lr.ph.i279, label %bsW.exit281

.lr.ph.i279:                                      ; preds = %bsW.exit288
  %.pre3.i278 = load i32* %2064, align 4
  br label %2675

; <label>:2675                                    ; preds = %2675, %.lr.ph.i279
  %2676 = phi i32 [ %.pre3.i278, %.lr.ph.i279 ], [ %2684, %2675 ]
  %2677 = phi i32 [ %2662, %.lr.ph.i279 ], [ %2686, %2675 ]
  %2678 = lshr i32 %2677, 24
  %2679 = trunc i32 %2678 to i8
  %2680 = sext i32 %2676 to i64
  %2681 = load i8** %34, align 8
  %2682 = getelementptr inbounds i8* %2681, i64 %2680
  store i8 %2679, i8* %2682, align 1
  %2683 = load i32* %2064, align 4
  %2684 = add nsw i32 %2683, 1
  store i32 %2684, i32* %2064, align 4
  %2685 = load i32* %114, align 4
  %2686 = shl i32 %2685, 8
  store i32 %2686, i32* %114, align 4
  %2687 = load i32* %111, align 4
  %2688 = add nsw i32 %2687, -8
  store i32 %2688, i32* %111, align 4
  %2689 = icmp sgt i32 %2688, 7
  br i1 %2689, label %2675, label %bsW.exit281.loopexit

bsW.exit281.loopexit:                             ; preds = %2675
  %.lcssa1371 = phi i32 [ %2688, %2675 ]
  %.lcssa1370 = phi i32 [ %2686, %2675 ]
  br label %bsW.exit281

bsW.exit281:                                      ; preds = %bsW.exit281.loopexit, %bsW.exit288
  %2690 = phi i32 [ %2662, %bsW.exit288 ], [ %.lcssa1370, %bsW.exit281.loopexit ]
  %2691 = phi i32 [ %2663, %bsW.exit288 ], [ %.lcssa1371, %bsW.exit281.loopexit ]
  %2692 = sub i32 32, %2671
  %2693 = sub i32 %2692, %2691
  %2694 = shl i32 %2673, %2693
  %2695 = or i32 %2694, %2690
  store i32 %2695, i32* %114, align 4
  %2696 = add nsw i32 %2691, %2671
  store i32 %2696, i32* %111, align 4
  %2697 = add nsw i32 %gs.2165.i, 8
  %2698 = sext i32 %2697 to i64
  %2699 = getelementptr inbounds i16* %480, i64 %2698
  %2700 = load i16* %2699, align 2
  %2701 = zext i16 %2700 to i64
  %2702 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2701
  %2703 = load i8* %2702, align 1
  %2704 = zext i8 %2703 to i32
  %2705 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2701
  %2706 = load i32* %2705, align 4
  %2707 = icmp sgt i32 %2696, 7
  br i1 %2707, label %.lr.ph.i272, label %bsW.exit274

.lr.ph.i272:                                      ; preds = %bsW.exit281
  %.pre3.i271 = load i32* %2064, align 4
  br label %2708

; <label>:2708                                    ; preds = %2708, %.lr.ph.i272
  %2709 = phi i32 [ %.pre3.i271, %.lr.ph.i272 ], [ %2717, %2708 ]
  %2710 = phi i32 [ %2695, %.lr.ph.i272 ], [ %2719, %2708 ]
  %2711 = lshr i32 %2710, 24
  %2712 = trunc i32 %2711 to i8
  %2713 = sext i32 %2709 to i64
  %2714 = load i8** %34, align 8
  %2715 = getelementptr inbounds i8* %2714, i64 %2713
  store i8 %2712, i8* %2715, align 1
  %2716 = load i32* %2064, align 4
  %2717 = add nsw i32 %2716, 1
  store i32 %2717, i32* %2064, align 4
  %2718 = load i32* %114, align 4
  %2719 = shl i32 %2718, 8
  store i32 %2719, i32* %114, align 4
  %2720 = load i32* %111, align 4
  %2721 = add nsw i32 %2720, -8
  store i32 %2721, i32* %111, align 4
  %2722 = icmp sgt i32 %2721, 7
  br i1 %2722, label %2708, label %bsW.exit274.loopexit

bsW.exit274.loopexit:                             ; preds = %2708
  %.lcssa1373 = phi i32 [ %2721, %2708 ]
  %.lcssa1372 = phi i32 [ %2719, %2708 ]
  br label %bsW.exit274

bsW.exit274:                                      ; preds = %bsW.exit274.loopexit, %bsW.exit281
  %2723 = phi i32 [ %2695, %bsW.exit281 ], [ %.lcssa1372, %bsW.exit274.loopexit ]
  %2724 = phi i32 [ %2696, %bsW.exit281 ], [ %.lcssa1373, %bsW.exit274.loopexit ]
  %2725 = sub i32 32, %2704
  %2726 = sub i32 %2725, %2724
  %2727 = shl i32 %2706, %2726
  %2728 = or i32 %2727, %2723
  store i32 %2728, i32* %114, align 4
  %2729 = add nsw i32 %2724, %2704
  store i32 %2729, i32* %111, align 4
  %2730 = add nsw i32 %gs.2165.i, 9
  %2731 = sext i32 %2730 to i64
  %2732 = getelementptr inbounds i16* %480, i64 %2731
  %2733 = load i16* %2732, align 2
  %2734 = zext i16 %2733 to i64
  %2735 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2734
  %2736 = load i8* %2735, align 1
  %2737 = zext i8 %2736 to i32
  %2738 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2734
  %2739 = load i32* %2738, align 4
  %2740 = icmp sgt i32 %2729, 7
  br i1 %2740, label %.lr.ph.i265, label %bsW.exit267

.lr.ph.i265:                                      ; preds = %bsW.exit274
  %.pre3.i264 = load i32* %2064, align 4
  br label %2741

; <label>:2741                                    ; preds = %2741, %.lr.ph.i265
  %2742 = phi i32 [ %.pre3.i264, %.lr.ph.i265 ], [ %2750, %2741 ]
  %2743 = phi i32 [ %2728, %.lr.ph.i265 ], [ %2752, %2741 ]
  %2744 = lshr i32 %2743, 24
  %2745 = trunc i32 %2744 to i8
  %2746 = sext i32 %2742 to i64
  %2747 = load i8** %34, align 8
  %2748 = getelementptr inbounds i8* %2747, i64 %2746
  store i8 %2745, i8* %2748, align 1
  %2749 = load i32* %2064, align 4
  %2750 = add nsw i32 %2749, 1
  store i32 %2750, i32* %2064, align 4
  %2751 = load i32* %114, align 4
  %2752 = shl i32 %2751, 8
  store i32 %2752, i32* %114, align 4
  %2753 = load i32* %111, align 4
  %2754 = add nsw i32 %2753, -8
  store i32 %2754, i32* %111, align 4
  %2755 = icmp sgt i32 %2754, 7
  br i1 %2755, label %2741, label %bsW.exit267.loopexit

bsW.exit267.loopexit:                             ; preds = %2741
  %.lcssa1375 = phi i32 [ %2754, %2741 ]
  %.lcssa1374 = phi i32 [ %2752, %2741 ]
  br label %bsW.exit267

bsW.exit267:                                      ; preds = %bsW.exit267.loopexit, %bsW.exit274
  %2756 = phi i32 [ %2728, %bsW.exit274 ], [ %.lcssa1374, %bsW.exit267.loopexit ]
  %2757 = phi i32 [ %2729, %bsW.exit274 ], [ %.lcssa1375, %bsW.exit267.loopexit ]
  %2758 = sub i32 32, %2737
  %2759 = sub i32 %2758, %2757
  %2760 = shl i32 %2739, %2759
  %2761 = or i32 %2760, %2756
  store i32 %2761, i32* %114, align 4
  %2762 = add nsw i32 %2757, %2737
  store i32 %2762, i32* %111, align 4
  %2763 = add nsw i32 %gs.2165.i, 10
  %2764 = sext i32 %2763 to i64
  %2765 = getelementptr inbounds i16* %480, i64 %2764
  %2766 = load i16* %2765, align 2
  %2767 = zext i16 %2766 to i64
  %2768 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2767
  %2769 = load i8* %2768, align 1
  %2770 = zext i8 %2769 to i32
  %2771 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2767
  %2772 = load i32* %2771, align 4
  %2773 = icmp sgt i32 %2762, 7
  br i1 %2773, label %.lr.ph.i258, label %bsW.exit260

.lr.ph.i258:                                      ; preds = %bsW.exit267
  %.pre3.i257 = load i32* %2064, align 4
  br label %2774

; <label>:2774                                    ; preds = %2774, %.lr.ph.i258
  %2775 = phi i32 [ %.pre3.i257, %.lr.ph.i258 ], [ %2783, %2774 ]
  %2776 = phi i32 [ %2761, %.lr.ph.i258 ], [ %2785, %2774 ]
  %2777 = lshr i32 %2776, 24
  %2778 = trunc i32 %2777 to i8
  %2779 = sext i32 %2775 to i64
  %2780 = load i8** %34, align 8
  %2781 = getelementptr inbounds i8* %2780, i64 %2779
  store i8 %2778, i8* %2781, align 1
  %2782 = load i32* %2064, align 4
  %2783 = add nsw i32 %2782, 1
  store i32 %2783, i32* %2064, align 4
  %2784 = load i32* %114, align 4
  %2785 = shl i32 %2784, 8
  store i32 %2785, i32* %114, align 4
  %2786 = load i32* %111, align 4
  %2787 = add nsw i32 %2786, -8
  store i32 %2787, i32* %111, align 4
  %2788 = icmp sgt i32 %2787, 7
  br i1 %2788, label %2774, label %bsW.exit260.loopexit

bsW.exit260.loopexit:                             ; preds = %2774
  %.lcssa1377 = phi i32 [ %2787, %2774 ]
  %.lcssa1376 = phi i32 [ %2785, %2774 ]
  br label %bsW.exit260

bsW.exit260:                                      ; preds = %bsW.exit260.loopexit, %bsW.exit267
  %2789 = phi i32 [ %2761, %bsW.exit267 ], [ %.lcssa1376, %bsW.exit260.loopexit ]
  %2790 = phi i32 [ %2762, %bsW.exit267 ], [ %.lcssa1377, %bsW.exit260.loopexit ]
  %2791 = sub i32 32, %2770
  %2792 = sub i32 %2791, %2790
  %2793 = shl i32 %2772, %2792
  %2794 = or i32 %2793, %2789
  store i32 %2794, i32* %114, align 4
  %2795 = add nsw i32 %2790, %2770
  store i32 %2795, i32* %111, align 4
  %2796 = add nsw i32 %gs.2165.i, 11
  %2797 = sext i32 %2796 to i64
  %2798 = getelementptr inbounds i16* %480, i64 %2797
  %2799 = load i16* %2798, align 2
  %2800 = zext i16 %2799 to i64
  %2801 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2800
  %2802 = load i8* %2801, align 1
  %2803 = zext i8 %2802 to i32
  %2804 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2800
  %2805 = load i32* %2804, align 4
  %2806 = icmp sgt i32 %2795, 7
  br i1 %2806, label %.lr.ph.i251, label %bsW.exit253

.lr.ph.i251:                                      ; preds = %bsW.exit260
  %.pre3.i250 = load i32* %2064, align 4
  br label %2807

; <label>:2807                                    ; preds = %2807, %.lr.ph.i251
  %2808 = phi i32 [ %.pre3.i250, %.lr.ph.i251 ], [ %2816, %2807 ]
  %2809 = phi i32 [ %2794, %.lr.ph.i251 ], [ %2818, %2807 ]
  %2810 = lshr i32 %2809, 24
  %2811 = trunc i32 %2810 to i8
  %2812 = sext i32 %2808 to i64
  %2813 = load i8** %34, align 8
  %2814 = getelementptr inbounds i8* %2813, i64 %2812
  store i8 %2811, i8* %2814, align 1
  %2815 = load i32* %2064, align 4
  %2816 = add nsw i32 %2815, 1
  store i32 %2816, i32* %2064, align 4
  %2817 = load i32* %114, align 4
  %2818 = shl i32 %2817, 8
  store i32 %2818, i32* %114, align 4
  %2819 = load i32* %111, align 4
  %2820 = add nsw i32 %2819, -8
  store i32 %2820, i32* %111, align 4
  %2821 = icmp sgt i32 %2820, 7
  br i1 %2821, label %2807, label %bsW.exit253.loopexit

bsW.exit253.loopexit:                             ; preds = %2807
  %.lcssa1379 = phi i32 [ %2820, %2807 ]
  %.lcssa1378 = phi i32 [ %2818, %2807 ]
  br label %bsW.exit253

bsW.exit253:                                      ; preds = %bsW.exit253.loopexit, %bsW.exit260
  %2822 = phi i32 [ %2794, %bsW.exit260 ], [ %.lcssa1378, %bsW.exit253.loopexit ]
  %2823 = phi i32 [ %2795, %bsW.exit260 ], [ %.lcssa1379, %bsW.exit253.loopexit ]
  %2824 = sub i32 32, %2803
  %2825 = sub i32 %2824, %2823
  %2826 = shl i32 %2805, %2825
  %2827 = or i32 %2826, %2822
  store i32 %2827, i32* %114, align 4
  %2828 = add nsw i32 %2823, %2803
  store i32 %2828, i32* %111, align 4
  %2829 = add nsw i32 %gs.2165.i, 12
  %2830 = sext i32 %2829 to i64
  %2831 = getelementptr inbounds i16* %480, i64 %2830
  %2832 = load i16* %2831, align 2
  %2833 = zext i16 %2832 to i64
  %2834 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2833
  %2835 = load i8* %2834, align 1
  %2836 = zext i8 %2835 to i32
  %2837 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2833
  %2838 = load i32* %2837, align 4
  %2839 = icmp sgt i32 %2828, 7
  br i1 %2839, label %.lr.ph.i244, label %bsW.exit246

.lr.ph.i244:                                      ; preds = %bsW.exit253
  %.pre3.i243 = load i32* %2064, align 4
  br label %2840

; <label>:2840                                    ; preds = %2840, %.lr.ph.i244
  %2841 = phi i32 [ %.pre3.i243, %.lr.ph.i244 ], [ %2849, %2840 ]
  %2842 = phi i32 [ %2827, %.lr.ph.i244 ], [ %2851, %2840 ]
  %2843 = lshr i32 %2842, 24
  %2844 = trunc i32 %2843 to i8
  %2845 = sext i32 %2841 to i64
  %2846 = load i8** %34, align 8
  %2847 = getelementptr inbounds i8* %2846, i64 %2845
  store i8 %2844, i8* %2847, align 1
  %2848 = load i32* %2064, align 4
  %2849 = add nsw i32 %2848, 1
  store i32 %2849, i32* %2064, align 4
  %2850 = load i32* %114, align 4
  %2851 = shl i32 %2850, 8
  store i32 %2851, i32* %114, align 4
  %2852 = load i32* %111, align 4
  %2853 = add nsw i32 %2852, -8
  store i32 %2853, i32* %111, align 4
  %2854 = icmp sgt i32 %2853, 7
  br i1 %2854, label %2840, label %bsW.exit246.loopexit

bsW.exit246.loopexit:                             ; preds = %2840
  %.lcssa1381 = phi i32 [ %2853, %2840 ]
  %.lcssa1380 = phi i32 [ %2851, %2840 ]
  br label %bsW.exit246

bsW.exit246:                                      ; preds = %bsW.exit246.loopexit, %bsW.exit253
  %2855 = phi i32 [ %2827, %bsW.exit253 ], [ %.lcssa1380, %bsW.exit246.loopexit ]
  %2856 = phi i32 [ %2828, %bsW.exit253 ], [ %.lcssa1381, %bsW.exit246.loopexit ]
  %2857 = sub i32 32, %2836
  %2858 = sub i32 %2857, %2856
  %2859 = shl i32 %2838, %2858
  %2860 = or i32 %2859, %2855
  store i32 %2860, i32* %114, align 4
  %2861 = add nsw i32 %2856, %2836
  store i32 %2861, i32* %111, align 4
  %2862 = add nsw i32 %gs.2165.i, 13
  %2863 = sext i32 %2862 to i64
  %2864 = getelementptr inbounds i16* %480, i64 %2863
  %2865 = load i16* %2864, align 2
  %2866 = zext i16 %2865 to i64
  %2867 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2866
  %2868 = load i8* %2867, align 1
  %2869 = zext i8 %2868 to i32
  %2870 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2866
  %2871 = load i32* %2870, align 4
  %2872 = icmp sgt i32 %2861, 7
  br i1 %2872, label %.lr.ph.i237, label %bsW.exit239

.lr.ph.i237:                                      ; preds = %bsW.exit246
  %.pre3.i236 = load i32* %2064, align 4
  br label %2873

; <label>:2873                                    ; preds = %2873, %.lr.ph.i237
  %2874 = phi i32 [ %.pre3.i236, %.lr.ph.i237 ], [ %2882, %2873 ]
  %2875 = phi i32 [ %2860, %.lr.ph.i237 ], [ %2884, %2873 ]
  %2876 = lshr i32 %2875, 24
  %2877 = trunc i32 %2876 to i8
  %2878 = sext i32 %2874 to i64
  %2879 = load i8** %34, align 8
  %2880 = getelementptr inbounds i8* %2879, i64 %2878
  store i8 %2877, i8* %2880, align 1
  %2881 = load i32* %2064, align 4
  %2882 = add nsw i32 %2881, 1
  store i32 %2882, i32* %2064, align 4
  %2883 = load i32* %114, align 4
  %2884 = shl i32 %2883, 8
  store i32 %2884, i32* %114, align 4
  %2885 = load i32* %111, align 4
  %2886 = add nsw i32 %2885, -8
  store i32 %2886, i32* %111, align 4
  %2887 = icmp sgt i32 %2886, 7
  br i1 %2887, label %2873, label %bsW.exit239.loopexit

bsW.exit239.loopexit:                             ; preds = %2873
  %.lcssa1383 = phi i32 [ %2886, %2873 ]
  %.lcssa1382 = phi i32 [ %2884, %2873 ]
  br label %bsW.exit239

bsW.exit239:                                      ; preds = %bsW.exit239.loopexit, %bsW.exit246
  %2888 = phi i32 [ %2860, %bsW.exit246 ], [ %.lcssa1382, %bsW.exit239.loopexit ]
  %2889 = phi i32 [ %2861, %bsW.exit246 ], [ %.lcssa1383, %bsW.exit239.loopexit ]
  %2890 = sub i32 32, %2869
  %2891 = sub i32 %2890, %2889
  %2892 = shl i32 %2871, %2891
  %2893 = or i32 %2892, %2888
  store i32 %2893, i32* %114, align 4
  %2894 = add nsw i32 %2889, %2869
  store i32 %2894, i32* %111, align 4
  %2895 = add nsw i32 %gs.2165.i, 14
  %2896 = sext i32 %2895 to i64
  %2897 = getelementptr inbounds i16* %480, i64 %2896
  %2898 = load i16* %2897, align 2
  %2899 = zext i16 %2898 to i64
  %2900 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2899
  %2901 = load i8* %2900, align 1
  %2902 = zext i8 %2901 to i32
  %2903 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2899
  %2904 = load i32* %2903, align 4
  %2905 = icmp sgt i32 %2894, 7
  br i1 %2905, label %.lr.ph.i230, label %bsW.exit232

.lr.ph.i230:                                      ; preds = %bsW.exit239
  %.pre3.i229 = load i32* %2064, align 4
  br label %2906

; <label>:2906                                    ; preds = %2906, %.lr.ph.i230
  %2907 = phi i32 [ %.pre3.i229, %.lr.ph.i230 ], [ %2915, %2906 ]
  %2908 = phi i32 [ %2893, %.lr.ph.i230 ], [ %2917, %2906 ]
  %2909 = lshr i32 %2908, 24
  %2910 = trunc i32 %2909 to i8
  %2911 = sext i32 %2907 to i64
  %2912 = load i8** %34, align 8
  %2913 = getelementptr inbounds i8* %2912, i64 %2911
  store i8 %2910, i8* %2913, align 1
  %2914 = load i32* %2064, align 4
  %2915 = add nsw i32 %2914, 1
  store i32 %2915, i32* %2064, align 4
  %2916 = load i32* %114, align 4
  %2917 = shl i32 %2916, 8
  store i32 %2917, i32* %114, align 4
  %2918 = load i32* %111, align 4
  %2919 = add nsw i32 %2918, -8
  store i32 %2919, i32* %111, align 4
  %2920 = icmp sgt i32 %2919, 7
  br i1 %2920, label %2906, label %bsW.exit232.loopexit

bsW.exit232.loopexit:                             ; preds = %2906
  %.lcssa1385 = phi i32 [ %2919, %2906 ]
  %.lcssa1384 = phi i32 [ %2917, %2906 ]
  br label %bsW.exit232

bsW.exit232:                                      ; preds = %bsW.exit232.loopexit, %bsW.exit239
  %2921 = phi i32 [ %2893, %bsW.exit239 ], [ %.lcssa1384, %bsW.exit232.loopexit ]
  %2922 = phi i32 [ %2894, %bsW.exit239 ], [ %.lcssa1385, %bsW.exit232.loopexit ]
  %2923 = sub i32 32, %2902
  %2924 = sub i32 %2923, %2922
  %2925 = shl i32 %2904, %2924
  %2926 = or i32 %2925, %2921
  store i32 %2926, i32* %114, align 4
  %2927 = add nsw i32 %2922, %2902
  store i32 %2927, i32* %111, align 4
  %2928 = add nsw i32 %gs.2165.i, 15
  %2929 = sext i32 %2928 to i64
  %2930 = getelementptr inbounds i16* %480, i64 %2929
  %2931 = load i16* %2930, align 2
  %2932 = zext i16 %2931 to i64
  %2933 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2932
  %2934 = load i8* %2933, align 1
  %2935 = zext i8 %2934 to i32
  %2936 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2932
  %2937 = load i32* %2936, align 4
  %2938 = icmp sgt i32 %2927, 7
  br i1 %2938, label %.lr.ph.i223, label %bsW.exit225

.lr.ph.i223:                                      ; preds = %bsW.exit232
  %.pre3.i222 = load i32* %2064, align 4
  br label %2939

; <label>:2939                                    ; preds = %2939, %.lr.ph.i223
  %2940 = phi i32 [ %.pre3.i222, %.lr.ph.i223 ], [ %2948, %2939 ]
  %2941 = phi i32 [ %2926, %.lr.ph.i223 ], [ %2950, %2939 ]
  %2942 = lshr i32 %2941, 24
  %2943 = trunc i32 %2942 to i8
  %2944 = sext i32 %2940 to i64
  %2945 = load i8** %34, align 8
  %2946 = getelementptr inbounds i8* %2945, i64 %2944
  store i8 %2943, i8* %2946, align 1
  %2947 = load i32* %2064, align 4
  %2948 = add nsw i32 %2947, 1
  store i32 %2948, i32* %2064, align 4
  %2949 = load i32* %114, align 4
  %2950 = shl i32 %2949, 8
  store i32 %2950, i32* %114, align 4
  %2951 = load i32* %111, align 4
  %2952 = add nsw i32 %2951, -8
  store i32 %2952, i32* %111, align 4
  %2953 = icmp sgt i32 %2952, 7
  br i1 %2953, label %2939, label %bsW.exit225.loopexit

bsW.exit225.loopexit:                             ; preds = %2939
  %.lcssa1387 = phi i32 [ %2952, %2939 ]
  %.lcssa1386 = phi i32 [ %2950, %2939 ]
  br label %bsW.exit225

bsW.exit225:                                      ; preds = %bsW.exit225.loopexit, %bsW.exit232
  %2954 = phi i32 [ %2926, %bsW.exit232 ], [ %.lcssa1386, %bsW.exit225.loopexit ]
  %2955 = phi i32 [ %2927, %bsW.exit232 ], [ %.lcssa1387, %bsW.exit225.loopexit ]
  %2956 = sub i32 32, %2935
  %2957 = sub i32 %2956, %2955
  %2958 = shl i32 %2937, %2957
  %2959 = or i32 %2958, %2954
  store i32 %2959, i32* %114, align 4
  %2960 = add nsw i32 %2955, %2935
  store i32 %2960, i32* %111, align 4
  %2961 = add nsw i32 %gs.2165.i, 16
  %2962 = sext i32 %2961 to i64
  %2963 = getelementptr inbounds i16* %480, i64 %2962
  %2964 = load i16* %2963, align 2
  %2965 = zext i16 %2964 to i64
  %2966 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2965
  %2967 = load i8* %2966, align 1
  %2968 = zext i8 %2967 to i32
  %2969 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2965
  %2970 = load i32* %2969, align 4
  %2971 = icmp sgt i32 %2960, 7
  br i1 %2971, label %.lr.ph.i216, label %bsW.exit218

.lr.ph.i216:                                      ; preds = %bsW.exit225
  %.pre3.i215 = load i32* %2064, align 4
  br label %2972

; <label>:2972                                    ; preds = %2972, %.lr.ph.i216
  %2973 = phi i32 [ %.pre3.i215, %.lr.ph.i216 ], [ %2981, %2972 ]
  %2974 = phi i32 [ %2959, %.lr.ph.i216 ], [ %2983, %2972 ]
  %2975 = lshr i32 %2974, 24
  %2976 = trunc i32 %2975 to i8
  %2977 = sext i32 %2973 to i64
  %2978 = load i8** %34, align 8
  %2979 = getelementptr inbounds i8* %2978, i64 %2977
  store i8 %2976, i8* %2979, align 1
  %2980 = load i32* %2064, align 4
  %2981 = add nsw i32 %2980, 1
  store i32 %2981, i32* %2064, align 4
  %2982 = load i32* %114, align 4
  %2983 = shl i32 %2982, 8
  store i32 %2983, i32* %114, align 4
  %2984 = load i32* %111, align 4
  %2985 = add nsw i32 %2984, -8
  store i32 %2985, i32* %111, align 4
  %2986 = icmp sgt i32 %2985, 7
  br i1 %2986, label %2972, label %bsW.exit218.loopexit

bsW.exit218.loopexit:                             ; preds = %2972
  %.lcssa1389 = phi i32 [ %2985, %2972 ]
  %.lcssa1388 = phi i32 [ %2983, %2972 ]
  br label %bsW.exit218

bsW.exit218:                                      ; preds = %bsW.exit218.loopexit, %bsW.exit225
  %2987 = phi i32 [ %2959, %bsW.exit225 ], [ %.lcssa1388, %bsW.exit218.loopexit ]
  %2988 = phi i32 [ %2960, %bsW.exit225 ], [ %.lcssa1389, %bsW.exit218.loopexit ]
  %2989 = sub i32 32, %2968
  %2990 = sub i32 %2989, %2988
  %2991 = shl i32 %2970, %2990
  %2992 = or i32 %2991, %2987
  store i32 %2992, i32* %114, align 4
  %2993 = add nsw i32 %2988, %2968
  store i32 %2993, i32* %111, align 4
  %2994 = add nsw i32 %gs.2165.i, 17
  %2995 = sext i32 %2994 to i64
  %2996 = getelementptr inbounds i16* %480, i64 %2995
  %2997 = load i16* %2996, align 2
  %2998 = zext i16 %2997 to i64
  %2999 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %2998
  %3000 = load i8* %2999, align 1
  %3001 = zext i8 %3000 to i32
  %3002 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %2998
  %3003 = load i32* %3002, align 4
  %3004 = icmp sgt i32 %2993, 7
  br i1 %3004, label %.lr.ph.i209, label %bsW.exit211

.lr.ph.i209:                                      ; preds = %bsW.exit218
  %.pre3.i208 = load i32* %2064, align 4
  br label %3005

; <label>:3005                                    ; preds = %3005, %.lr.ph.i209
  %3006 = phi i32 [ %.pre3.i208, %.lr.ph.i209 ], [ %3014, %3005 ]
  %3007 = phi i32 [ %2992, %.lr.ph.i209 ], [ %3016, %3005 ]
  %3008 = lshr i32 %3007, 24
  %3009 = trunc i32 %3008 to i8
  %3010 = sext i32 %3006 to i64
  %3011 = load i8** %34, align 8
  %3012 = getelementptr inbounds i8* %3011, i64 %3010
  store i8 %3009, i8* %3012, align 1
  %3013 = load i32* %2064, align 4
  %3014 = add nsw i32 %3013, 1
  store i32 %3014, i32* %2064, align 4
  %3015 = load i32* %114, align 4
  %3016 = shl i32 %3015, 8
  store i32 %3016, i32* %114, align 4
  %3017 = load i32* %111, align 4
  %3018 = add nsw i32 %3017, -8
  store i32 %3018, i32* %111, align 4
  %3019 = icmp sgt i32 %3018, 7
  br i1 %3019, label %3005, label %bsW.exit211.loopexit

bsW.exit211.loopexit:                             ; preds = %3005
  %.lcssa1391 = phi i32 [ %3018, %3005 ]
  %.lcssa1390 = phi i32 [ %3016, %3005 ]
  br label %bsW.exit211

bsW.exit211:                                      ; preds = %bsW.exit211.loopexit, %bsW.exit218
  %3020 = phi i32 [ %2992, %bsW.exit218 ], [ %.lcssa1390, %bsW.exit211.loopexit ]
  %3021 = phi i32 [ %2993, %bsW.exit218 ], [ %.lcssa1391, %bsW.exit211.loopexit ]
  %3022 = sub i32 32, %3001
  %3023 = sub i32 %3022, %3021
  %3024 = shl i32 %3003, %3023
  %3025 = or i32 %3024, %3020
  store i32 %3025, i32* %114, align 4
  %3026 = add nsw i32 %3021, %3001
  store i32 %3026, i32* %111, align 4
  %3027 = add nsw i32 %gs.2165.i, 18
  %3028 = sext i32 %3027 to i64
  %3029 = getelementptr inbounds i16* %480, i64 %3028
  %3030 = load i16* %3029, align 2
  %3031 = zext i16 %3030 to i64
  %3032 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3031
  %3033 = load i8* %3032, align 1
  %3034 = zext i8 %3033 to i32
  %3035 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3031
  %3036 = load i32* %3035, align 4
  %3037 = icmp sgt i32 %3026, 7
  br i1 %3037, label %.lr.ph.i202, label %bsW.exit204

.lr.ph.i202:                                      ; preds = %bsW.exit211
  %.pre3.i201 = load i32* %2064, align 4
  br label %3038

; <label>:3038                                    ; preds = %3038, %.lr.ph.i202
  %3039 = phi i32 [ %.pre3.i201, %.lr.ph.i202 ], [ %3047, %3038 ]
  %3040 = phi i32 [ %3025, %.lr.ph.i202 ], [ %3049, %3038 ]
  %3041 = lshr i32 %3040, 24
  %3042 = trunc i32 %3041 to i8
  %3043 = sext i32 %3039 to i64
  %3044 = load i8** %34, align 8
  %3045 = getelementptr inbounds i8* %3044, i64 %3043
  store i8 %3042, i8* %3045, align 1
  %3046 = load i32* %2064, align 4
  %3047 = add nsw i32 %3046, 1
  store i32 %3047, i32* %2064, align 4
  %3048 = load i32* %114, align 4
  %3049 = shl i32 %3048, 8
  store i32 %3049, i32* %114, align 4
  %3050 = load i32* %111, align 4
  %3051 = add nsw i32 %3050, -8
  store i32 %3051, i32* %111, align 4
  %3052 = icmp sgt i32 %3051, 7
  br i1 %3052, label %3038, label %bsW.exit204.loopexit

bsW.exit204.loopexit:                             ; preds = %3038
  %.lcssa1393 = phi i32 [ %3051, %3038 ]
  %.lcssa1392 = phi i32 [ %3049, %3038 ]
  br label %bsW.exit204

bsW.exit204:                                      ; preds = %bsW.exit204.loopexit, %bsW.exit211
  %3053 = phi i32 [ %3025, %bsW.exit211 ], [ %.lcssa1392, %bsW.exit204.loopexit ]
  %3054 = phi i32 [ %3026, %bsW.exit211 ], [ %.lcssa1393, %bsW.exit204.loopexit ]
  %3055 = sub i32 32, %3034
  %3056 = sub i32 %3055, %3054
  %3057 = shl i32 %3036, %3056
  %3058 = or i32 %3057, %3053
  store i32 %3058, i32* %114, align 4
  %3059 = add nsw i32 %3054, %3034
  store i32 %3059, i32* %111, align 4
  %3060 = add nsw i32 %gs.2165.i, 19
  %3061 = sext i32 %3060 to i64
  %3062 = getelementptr inbounds i16* %480, i64 %3061
  %3063 = load i16* %3062, align 2
  %3064 = zext i16 %3063 to i64
  %3065 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3064
  %3066 = load i8* %3065, align 1
  %3067 = zext i8 %3066 to i32
  %3068 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3064
  %3069 = load i32* %3068, align 4
  %3070 = icmp sgt i32 %3059, 7
  br i1 %3070, label %.lr.ph.i195, label %bsW.exit197

.lr.ph.i195:                                      ; preds = %bsW.exit204
  %.pre3.i194 = load i32* %2064, align 4
  br label %3071

; <label>:3071                                    ; preds = %3071, %.lr.ph.i195
  %3072 = phi i32 [ %.pre3.i194, %.lr.ph.i195 ], [ %3080, %3071 ]
  %3073 = phi i32 [ %3058, %.lr.ph.i195 ], [ %3082, %3071 ]
  %3074 = lshr i32 %3073, 24
  %3075 = trunc i32 %3074 to i8
  %3076 = sext i32 %3072 to i64
  %3077 = load i8** %34, align 8
  %3078 = getelementptr inbounds i8* %3077, i64 %3076
  store i8 %3075, i8* %3078, align 1
  %3079 = load i32* %2064, align 4
  %3080 = add nsw i32 %3079, 1
  store i32 %3080, i32* %2064, align 4
  %3081 = load i32* %114, align 4
  %3082 = shl i32 %3081, 8
  store i32 %3082, i32* %114, align 4
  %3083 = load i32* %111, align 4
  %3084 = add nsw i32 %3083, -8
  store i32 %3084, i32* %111, align 4
  %3085 = icmp sgt i32 %3084, 7
  br i1 %3085, label %3071, label %bsW.exit197.loopexit

bsW.exit197.loopexit:                             ; preds = %3071
  %.lcssa1395 = phi i32 [ %3084, %3071 ]
  %.lcssa1394 = phi i32 [ %3082, %3071 ]
  br label %bsW.exit197

bsW.exit197:                                      ; preds = %bsW.exit197.loopexit, %bsW.exit204
  %3086 = phi i32 [ %3058, %bsW.exit204 ], [ %.lcssa1394, %bsW.exit197.loopexit ]
  %3087 = phi i32 [ %3059, %bsW.exit204 ], [ %.lcssa1395, %bsW.exit197.loopexit ]
  %3088 = sub i32 32, %3067
  %3089 = sub i32 %3088, %3087
  %3090 = shl i32 %3069, %3089
  %3091 = or i32 %3090, %3086
  store i32 %3091, i32* %114, align 4
  %3092 = add nsw i32 %3087, %3067
  store i32 %3092, i32* %111, align 4
  %3093 = add nsw i32 %gs.2165.i, 20
  %3094 = sext i32 %3093 to i64
  %3095 = getelementptr inbounds i16* %480, i64 %3094
  %3096 = load i16* %3095, align 2
  %3097 = zext i16 %3096 to i64
  %3098 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3097
  %3099 = load i8* %3098, align 1
  %3100 = zext i8 %3099 to i32
  %3101 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3097
  %3102 = load i32* %3101, align 4
  %3103 = icmp sgt i32 %3092, 7
  br i1 %3103, label %.lr.ph.i188, label %bsW.exit190

.lr.ph.i188:                                      ; preds = %bsW.exit197
  %.pre3.i187 = load i32* %2064, align 4
  br label %3104

; <label>:3104                                    ; preds = %3104, %.lr.ph.i188
  %3105 = phi i32 [ %.pre3.i187, %.lr.ph.i188 ], [ %3113, %3104 ]
  %3106 = phi i32 [ %3091, %.lr.ph.i188 ], [ %3115, %3104 ]
  %3107 = lshr i32 %3106, 24
  %3108 = trunc i32 %3107 to i8
  %3109 = sext i32 %3105 to i64
  %3110 = load i8** %34, align 8
  %3111 = getelementptr inbounds i8* %3110, i64 %3109
  store i8 %3108, i8* %3111, align 1
  %3112 = load i32* %2064, align 4
  %3113 = add nsw i32 %3112, 1
  store i32 %3113, i32* %2064, align 4
  %3114 = load i32* %114, align 4
  %3115 = shl i32 %3114, 8
  store i32 %3115, i32* %114, align 4
  %3116 = load i32* %111, align 4
  %3117 = add nsw i32 %3116, -8
  store i32 %3117, i32* %111, align 4
  %3118 = icmp sgt i32 %3117, 7
  br i1 %3118, label %3104, label %bsW.exit190.loopexit

bsW.exit190.loopexit:                             ; preds = %3104
  %.lcssa1397 = phi i32 [ %3117, %3104 ]
  %.lcssa1396 = phi i32 [ %3115, %3104 ]
  br label %bsW.exit190

bsW.exit190:                                      ; preds = %bsW.exit190.loopexit, %bsW.exit197
  %3119 = phi i32 [ %3091, %bsW.exit197 ], [ %.lcssa1396, %bsW.exit190.loopexit ]
  %3120 = phi i32 [ %3092, %bsW.exit197 ], [ %.lcssa1397, %bsW.exit190.loopexit ]
  %3121 = sub i32 32, %3100
  %3122 = sub i32 %3121, %3120
  %3123 = shl i32 %3102, %3122
  %3124 = or i32 %3123, %3119
  store i32 %3124, i32* %114, align 4
  %3125 = add nsw i32 %3120, %3100
  store i32 %3125, i32* %111, align 4
  %3126 = add nsw i32 %gs.2165.i, 21
  %3127 = sext i32 %3126 to i64
  %3128 = getelementptr inbounds i16* %480, i64 %3127
  %3129 = load i16* %3128, align 2
  %3130 = zext i16 %3129 to i64
  %3131 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3130
  %3132 = load i8* %3131, align 1
  %3133 = zext i8 %3132 to i32
  %3134 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3130
  %3135 = load i32* %3134, align 4
  %3136 = icmp sgt i32 %3125, 7
  br i1 %3136, label %.lr.ph.i181, label %bsW.exit183

.lr.ph.i181:                                      ; preds = %bsW.exit190
  %.pre3.i180 = load i32* %2064, align 4
  br label %3137

; <label>:3137                                    ; preds = %3137, %.lr.ph.i181
  %3138 = phi i32 [ %.pre3.i180, %.lr.ph.i181 ], [ %3146, %3137 ]
  %3139 = phi i32 [ %3124, %.lr.ph.i181 ], [ %3148, %3137 ]
  %3140 = lshr i32 %3139, 24
  %3141 = trunc i32 %3140 to i8
  %3142 = sext i32 %3138 to i64
  %3143 = load i8** %34, align 8
  %3144 = getelementptr inbounds i8* %3143, i64 %3142
  store i8 %3141, i8* %3144, align 1
  %3145 = load i32* %2064, align 4
  %3146 = add nsw i32 %3145, 1
  store i32 %3146, i32* %2064, align 4
  %3147 = load i32* %114, align 4
  %3148 = shl i32 %3147, 8
  store i32 %3148, i32* %114, align 4
  %3149 = load i32* %111, align 4
  %3150 = add nsw i32 %3149, -8
  store i32 %3150, i32* %111, align 4
  %3151 = icmp sgt i32 %3150, 7
  br i1 %3151, label %3137, label %bsW.exit183.loopexit

bsW.exit183.loopexit:                             ; preds = %3137
  %.lcssa1399 = phi i32 [ %3150, %3137 ]
  %.lcssa1398 = phi i32 [ %3148, %3137 ]
  br label %bsW.exit183

bsW.exit183:                                      ; preds = %bsW.exit183.loopexit, %bsW.exit190
  %3152 = phi i32 [ %3124, %bsW.exit190 ], [ %.lcssa1398, %bsW.exit183.loopexit ]
  %3153 = phi i32 [ %3125, %bsW.exit190 ], [ %.lcssa1399, %bsW.exit183.loopexit ]
  %3154 = sub i32 32, %3133
  %3155 = sub i32 %3154, %3153
  %3156 = shl i32 %3135, %3155
  %3157 = or i32 %3156, %3152
  store i32 %3157, i32* %114, align 4
  %3158 = add nsw i32 %3153, %3133
  store i32 %3158, i32* %111, align 4
  %3159 = add nsw i32 %gs.2165.i, 22
  %3160 = sext i32 %3159 to i64
  %3161 = getelementptr inbounds i16* %480, i64 %3160
  %3162 = load i16* %3161, align 2
  %3163 = zext i16 %3162 to i64
  %3164 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3163
  %3165 = load i8* %3164, align 1
  %3166 = zext i8 %3165 to i32
  %3167 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3163
  %3168 = load i32* %3167, align 4
  %3169 = icmp sgt i32 %3158, 7
  br i1 %3169, label %.lr.ph.i174, label %bsW.exit176

.lr.ph.i174:                                      ; preds = %bsW.exit183
  %.pre3.i173 = load i32* %2064, align 4
  br label %3170

; <label>:3170                                    ; preds = %3170, %.lr.ph.i174
  %3171 = phi i32 [ %.pre3.i173, %.lr.ph.i174 ], [ %3179, %3170 ]
  %3172 = phi i32 [ %3157, %.lr.ph.i174 ], [ %3181, %3170 ]
  %3173 = lshr i32 %3172, 24
  %3174 = trunc i32 %3173 to i8
  %3175 = sext i32 %3171 to i64
  %3176 = load i8** %34, align 8
  %3177 = getelementptr inbounds i8* %3176, i64 %3175
  store i8 %3174, i8* %3177, align 1
  %3178 = load i32* %2064, align 4
  %3179 = add nsw i32 %3178, 1
  store i32 %3179, i32* %2064, align 4
  %3180 = load i32* %114, align 4
  %3181 = shl i32 %3180, 8
  store i32 %3181, i32* %114, align 4
  %3182 = load i32* %111, align 4
  %3183 = add nsw i32 %3182, -8
  store i32 %3183, i32* %111, align 4
  %3184 = icmp sgt i32 %3183, 7
  br i1 %3184, label %3170, label %bsW.exit176.loopexit

bsW.exit176.loopexit:                             ; preds = %3170
  %.lcssa1401 = phi i32 [ %3183, %3170 ]
  %.lcssa1400 = phi i32 [ %3181, %3170 ]
  br label %bsW.exit176

bsW.exit176:                                      ; preds = %bsW.exit176.loopexit, %bsW.exit183
  %3185 = phi i32 [ %3157, %bsW.exit183 ], [ %.lcssa1400, %bsW.exit176.loopexit ]
  %3186 = phi i32 [ %3158, %bsW.exit183 ], [ %.lcssa1401, %bsW.exit176.loopexit ]
  %3187 = sub i32 32, %3166
  %3188 = sub i32 %3187, %3186
  %3189 = shl i32 %3168, %3188
  %3190 = or i32 %3189, %3185
  store i32 %3190, i32* %114, align 4
  %3191 = add nsw i32 %3186, %3166
  store i32 %3191, i32* %111, align 4
  %3192 = add nsw i32 %gs.2165.i, 23
  %3193 = sext i32 %3192 to i64
  %3194 = getelementptr inbounds i16* %480, i64 %3193
  %3195 = load i16* %3194, align 2
  %3196 = zext i16 %3195 to i64
  %3197 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3196
  %3198 = load i8* %3197, align 1
  %3199 = zext i8 %3198 to i32
  %3200 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3196
  %3201 = load i32* %3200, align 4
  %3202 = icmp sgt i32 %3191, 7
  br i1 %3202, label %.lr.ph.i167, label %bsW.exit169

.lr.ph.i167:                                      ; preds = %bsW.exit176
  %.pre3.i166 = load i32* %2064, align 4
  br label %3203

; <label>:3203                                    ; preds = %3203, %.lr.ph.i167
  %3204 = phi i32 [ %.pre3.i166, %.lr.ph.i167 ], [ %3212, %3203 ]
  %3205 = phi i32 [ %3190, %.lr.ph.i167 ], [ %3214, %3203 ]
  %3206 = lshr i32 %3205, 24
  %3207 = trunc i32 %3206 to i8
  %3208 = sext i32 %3204 to i64
  %3209 = load i8** %34, align 8
  %3210 = getelementptr inbounds i8* %3209, i64 %3208
  store i8 %3207, i8* %3210, align 1
  %3211 = load i32* %2064, align 4
  %3212 = add nsw i32 %3211, 1
  store i32 %3212, i32* %2064, align 4
  %3213 = load i32* %114, align 4
  %3214 = shl i32 %3213, 8
  store i32 %3214, i32* %114, align 4
  %3215 = load i32* %111, align 4
  %3216 = add nsw i32 %3215, -8
  store i32 %3216, i32* %111, align 4
  %3217 = icmp sgt i32 %3216, 7
  br i1 %3217, label %3203, label %bsW.exit169.loopexit

bsW.exit169.loopexit:                             ; preds = %3203
  %.lcssa1403 = phi i32 [ %3216, %3203 ]
  %.lcssa1402 = phi i32 [ %3214, %3203 ]
  br label %bsW.exit169

bsW.exit169:                                      ; preds = %bsW.exit169.loopexit, %bsW.exit176
  %3218 = phi i32 [ %3190, %bsW.exit176 ], [ %.lcssa1402, %bsW.exit169.loopexit ]
  %3219 = phi i32 [ %3191, %bsW.exit176 ], [ %.lcssa1403, %bsW.exit169.loopexit ]
  %3220 = sub i32 32, %3199
  %3221 = sub i32 %3220, %3219
  %3222 = shl i32 %3201, %3221
  %3223 = or i32 %3222, %3218
  store i32 %3223, i32* %114, align 4
  %3224 = add nsw i32 %3219, %3199
  store i32 %3224, i32* %111, align 4
  %3225 = add nsw i32 %gs.2165.i, 24
  %3226 = sext i32 %3225 to i64
  %3227 = getelementptr inbounds i16* %480, i64 %3226
  %3228 = load i16* %3227, align 2
  %3229 = zext i16 %3228 to i64
  %3230 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3229
  %3231 = load i8* %3230, align 1
  %3232 = zext i8 %3231 to i32
  %3233 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3229
  %3234 = load i32* %3233, align 4
  %3235 = icmp sgt i32 %3224, 7
  br i1 %3235, label %.lr.ph.i160, label %bsW.exit162

.lr.ph.i160:                                      ; preds = %bsW.exit169
  %.pre3.i159 = load i32* %2064, align 4
  br label %3236

; <label>:3236                                    ; preds = %3236, %.lr.ph.i160
  %3237 = phi i32 [ %.pre3.i159, %.lr.ph.i160 ], [ %3245, %3236 ]
  %3238 = phi i32 [ %3223, %.lr.ph.i160 ], [ %3247, %3236 ]
  %3239 = lshr i32 %3238, 24
  %3240 = trunc i32 %3239 to i8
  %3241 = sext i32 %3237 to i64
  %3242 = load i8** %34, align 8
  %3243 = getelementptr inbounds i8* %3242, i64 %3241
  store i8 %3240, i8* %3243, align 1
  %3244 = load i32* %2064, align 4
  %3245 = add nsw i32 %3244, 1
  store i32 %3245, i32* %2064, align 4
  %3246 = load i32* %114, align 4
  %3247 = shl i32 %3246, 8
  store i32 %3247, i32* %114, align 4
  %3248 = load i32* %111, align 4
  %3249 = add nsw i32 %3248, -8
  store i32 %3249, i32* %111, align 4
  %3250 = icmp sgt i32 %3249, 7
  br i1 %3250, label %3236, label %bsW.exit162.loopexit

bsW.exit162.loopexit:                             ; preds = %3236
  %.lcssa1405 = phi i32 [ %3249, %3236 ]
  %.lcssa1404 = phi i32 [ %3247, %3236 ]
  br label %bsW.exit162

bsW.exit162:                                      ; preds = %bsW.exit162.loopexit, %bsW.exit169
  %3251 = phi i32 [ %3223, %bsW.exit169 ], [ %.lcssa1404, %bsW.exit162.loopexit ]
  %3252 = phi i32 [ %3224, %bsW.exit169 ], [ %.lcssa1405, %bsW.exit162.loopexit ]
  %3253 = sub i32 32, %3232
  %3254 = sub i32 %3253, %3252
  %3255 = shl i32 %3234, %3254
  %3256 = or i32 %3255, %3251
  store i32 %3256, i32* %114, align 4
  %3257 = add nsw i32 %3252, %3232
  store i32 %3257, i32* %111, align 4
  %3258 = add nsw i32 %gs.2165.i, 25
  %3259 = sext i32 %3258 to i64
  %3260 = getelementptr inbounds i16* %480, i64 %3259
  %3261 = load i16* %3260, align 2
  %3262 = zext i16 %3261 to i64
  %3263 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3262
  %3264 = load i8* %3263, align 1
  %3265 = zext i8 %3264 to i32
  %3266 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3262
  %3267 = load i32* %3266, align 4
  %3268 = icmp sgt i32 %3257, 7
  br i1 %3268, label %.lr.ph.i153, label %bsW.exit155

.lr.ph.i153:                                      ; preds = %bsW.exit162
  %.pre3.i152 = load i32* %2064, align 4
  br label %3269

; <label>:3269                                    ; preds = %3269, %.lr.ph.i153
  %3270 = phi i32 [ %.pre3.i152, %.lr.ph.i153 ], [ %3278, %3269 ]
  %3271 = phi i32 [ %3256, %.lr.ph.i153 ], [ %3280, %3269 ]
  %3272 = lshr i32 %3271, 24
  %3273 = trunc i32 %3272 to i8
  %3274 = sext i32 %3270 to i64
  %3275 = load i8** %34, align 8
  %3276 = getelementptr inbounds i8* %3275, i64 %3274
  store i8 %3273, i8* %3276, align 1
  %3277 = load i32* %2064, align 4
  %3278 = add nsw i32 %3277, 1
  store i32 %3278, i32* %2064, align 4
  %3279 = load i32* %114, align 4
  %3280 = shl i32 %3279, 8
  store i32 %3280, i32* %114, align 4
  %3281 = load i32* %111, align 4
  %3282 = add nsw i32 %3281, -8
  store i32 %3282, i32* %111, align 4
  %3283 = icmp sgt i32 %3282, 7
  br i1 %3283, label %3269, label %bsW.exit155.loopexit

bsW.exit155.loopexit:                             ; preds = %3269
  %.lcssa1407 = phi i32 [ %3282, %3269 ]
  %.lcssa1406 = phi i32 [ %3280, %3269 ]
  br label %bsW.exit155

bsW.exit155:                                      ; preds = %bsW.exit155.loopexit, %bsW.exit162
  %3284 = phi i32 [ %3256, %bsW.exit162 ], [ %.lcssa1406, %bsW.exit155.loopexit ]
  %3285 = phi i32 [ %3257, %bsW.exit162 ], [ %.lcssa1407, %bsW.exit155.loopexit ]
  %3286 = sub i32 32, %3265
  %3287 = sub i32 %3286, %3285
  %3288 = shl i32 %3267, %3287
  %3289 = or i32 %3288, %3284
  store i32 %3289, i32* %114, align 4
  %3290 = add nsw i32 %3285, %3265
  store i32 %3290, i32* %111, align 4
  %3291 = add nsw i32 %gs.2165.i, 26
  %3292 = sext i32 %3291 to i64
  %3293 = getelementptr inbounds i16* %480, i64 %3292
  %3294 = load i16* %3293, align 2
  %3295 = zext i16 %3294 to i64
  %3296 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3295
  %3297 = load i8* %3296, align 1
  %3298 = zext i8 %3297 to i32
  %3299 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3295
  %3300 = load i32* %3299, align 4
  %3301 = icmp sgt i32 %3290, 7
  br i1 %3301, label %.lr.ph.i146, label %bsW.exit148

.lr.ph.i146:                                      ; preds = %bsW.exit155
  %.pre3.i145 = load i32* %2064, align 4
  br label %3302

; <label>:3302                                    ; preds = %3302, %.lr.ph.i146
  %3303 = phi i32 [ %.pre3.i145, %.lr.ph.i146 ], [ %3311, %3302 ]
  %3304 = phi i32 [ %3289, %.lr.ph.i146 ], [ %3313, %3302 ]
  %3305 = lshr i32 %3304, 24
  %3306 = trunc i32 %3305 to i8
  %3307 = sext i32 %3303 to i64
  %3308 = load i8** %34, align 8
  %3309 = getelementptr inbounds i8* %3308, i64 %3307
  store i8 %3306, i8* %3309, align 1
  %3310 = load i32* %2064, align 4
  %3311 = add nsw i32 %3310, 1
  store i32 %3311, i32* %2064, align 4
  %3312 = load i32* %114, align 4
  %3313 = shl i32 %3312, 8
  store i32 %3313, i32* %114, align 4
  %3314 = load i32* %111, align 4
  %3315 = add nsw i32 %3314, -8
  store i32 %3315, i32* %111, align 4
  %3316 = icmp sgt i32 %3315, 7
  br i1 %3316, label %3302, label %bsW.exit148.loopexit

bsW.exit148.loopexit:                             ; preds = %3302
  %.lcssa1409 = phi i32 [ %3315, %3302 ]
  %.lcssa1408 = phi i32 [ %3313, %3302 ]
  br label %bsW.exit148

bsW.exit148:                                      ; preds = %bsW.exit148.loopexit, %bsW.exit155
  %3317 = phi i32 [ %3289, %bsW.exit155 ], [ %.lcssa1408, %bsW.exit148.loopexit ]
  %3318 = phi i32 [ %3290, %bsW.exit155 ], [ %.lcssa1409, %bsW.exit148.loopexit ]
  %3319 = sub i32 32, %3298
  %3320 = sub i32 %3319, %3318
  %3321 = shl i32 %3300, %3320
  %3322 = or i32 %3321, %3317
  store i32 %3322, i32* %114, align 4
  %3323 = add nsw i32 %3318, %3298
  store i32 %3323, i32* %111, align 4
  %3324 = add nsw i32 %gs.2165.i, 27
  %3325 = sext i32 %3324 to i64
  %3326 = getelementptr inbounds i16* %480, i64 %3325
  %3327 = load i16* %3326, align 2
  %3328 = zext i16 %3327 to i64
  %3329 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3328
  %3330 = load i8* %3329, align 1
  %3331 = zext i8 %3330 to i32
  %3332 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3328
  %3333 = load i32* %3332, align 4
  %3334 = icmp sgt i32 %3323, 7
  br i1 %3334, label %.lr.ph.i139, label %bsW.exit141

.lr.ph.i139:                                      ; preds = %bsW.exit148
  %.pre3.i138 = load i32* %2064, align 4
  br label %3335

; <label>:3335                                    ; preds = %3335, %.lr.ph.i139
  %3336 = phi i32 [ %.pre3.i138, %.lr.ph.i139 ], [ %3344, %3335 ]
  %3337 = phi i32 [ %3322, %.lr.ph.i139 ], [ %3346, %3335 ]
  %3338 = lshr i32 %3337, 24
  %3339 = trunc i32 %3338 to i8
  %3340 = sext i32 %3336 to i64
  %3341 = load i8** %34, align 8
  %3342 = getelementptr inbounds i8* %3341, i64 %3340
  store i8 %3339, i8* %3342, align 1
  %3343 = load i32* %2064, align 4
  %3344 = add nsw i32 %3343, 1
  store i32 %3344, i32* %2064, align 4
  %3345 = load i32* %114, align 4
  %3346 = shl i32 %3345, 8
  store i32 %3346, i32* %114, align 4
  %3347 = load i32* %111, align 4
  %3348 = add nsw i32 %3347, -8
  store i32 %3348, i32* %111, align 4
  %3349 = icmp sgt i32 %3348, 7
  br i1 %3349, label %3335, label %bsW.exit141.loopexit

bsW.exit141.loopexit:                             ; preds = %3335
  %.lcssa1411 = phi i32 [ %3348, %3335 ]
  %.lcssa1410 = phi i32 [ %3346, %3335 ]
  br label %bsW.exit141

bsW.exit141:                                      ; preds = %bsW.exit141.loopexit, %bsW.exit148
  %3350 = phi i32 [ %3322, %bsW.exit148 ], [ %.lcssa1410, %bsW.exit141.loopexit ]
  %3351 = phi i32 [ %3323, %bsW.exit148 ], [ %.lcssa1411, %bsW.exit141.loopexit ]
  %3352 = sub i32 32, %3331
  %3353 = sub i32 %3352, %3351
  %3354 = shl i32 %3333, %3353
  %3355 = or i32 %3354, %3350
  store i32 %3355, i32* %114, align 4
  %3356 = add nsw i32 %3351, %3331
  store i32 %3356, i32* %111, align 4
  %3357 = add nsw i32 %gs.2165.i, 28
  %3358 = sext i32 %3357 to i64
  %3359 = getelementptr inbounds i16* %480, i64 %3358
  %3360 = load i16* %3359, align 2
  %3361 = zext i16 %3360 to i64
  %3362 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3361
  %3363 = load i8* %3362, align 1
  %3364 = zext i8 %3363 to i32
  %3365 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3361
  %3366 = load i32* %3365, align 4
  %3367 = icmp sgt i32 %3356, 7
  br i1 %3367, label %.lr.ph.i132, label %bsW.exit134

.lr.ph.i132:                                      ; preds = %bsW.exit141
  %.pre3.i131 = load i32* %2064, align 4
  br label %3368

; <label>:3368                                    ; preds = %3368, %.lr.ph.i132
  %3369 = phi i32 [ %.pre3.i131, %.lr.ph.i132 ], [ %3377, %3368 ]
  %3370 = phi i32 [ %3355, %.lr.ph.i132 ], [ %3379, %3368 ]
  %3371 = lshr i32 %3370, 24
  %3372 = trunc i32 %3371 to i8
  %3373 = sext i32 %3369 to i64
  %3374 = load i8** %34, align 8
  %3375 = getelementptr inbounds i8* %3374, i64 %3373
  store i8 %3372, i8* %3375, align 1
  %3376 = load i32* %2064, align 4
  %3377 = add nsw i32 %3376, 1
  store i32 %3377, i32* %2064, align 4
  %3378 = load i32* %114, align 4
  %3379 = shl i32 %3378, 8
  store i32 %3379, i32* %114, align 4
  %3380 = load i32* %111, align 4
  %3381 = add nsw i32 %3380, -8
  store i32 %3381, i32* %111, align 4
  %3382 = icmp sgt i32 %3381, 7
  br i1 %3382, label %3368, label %bsW.exit134.loopexit

bsW.exit134.loopexit:                             ; preds = %3368
  %.lcssa1413 = phi i32 [ %3381, %3368 ]
  %.lcssa1412 = phi i32 [ %3379, %3368 ]
  br label %bsW.exit134

bsW.exit134:                                      ; preds = %bsW.exit134.loopexit, %bsW.exit141
  %3383 = phi i32 [ %3355, %bsW.exit141 ], [ %.lcssa1412, %bsW.exit134.loopexit ]
  %3384 = phi i32 [ %3356, %bsW.exit141 ], [ %.lcssa1413, %bsW.exit134.loopexit ]
  %3385 = sub i32 32, %3364
  %3386 = sub i32 %3385, %3384
  %3387 = shl i32 %3366, %3386
  %3388 = or i32 %3387, %3383
  store i32 %3388, i32* %114, align 4
  %3389 = add nsw i32 %3384, %3364
  store i32 %3389, i32* %111, align 4
  %3390 = add nsw i32 %gs.2165.i, 29
  %3391 = sext i32 %3390 to i64
  %3392 = getelementptr inbounds i16* %480, i64 %3391
  %3393 = load i16* %3392, align 2
  %3394 = zext i16 %3393 to i64
  %3395 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3394
  %3396 = load i8* %3395, align 1
  %3397 = zext i8 %3396 to i32
  %3398 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3394
  %3399 = load i32* %3398, align 4
  %3400 = icmp sgt i32 %3389, 7
  br i1 %3400, label %.lr.ph.i125, label %bsW.exit127

.lr.ph.i125:                                      ; preds = %bsW.exit134
  %.pre3.i124 = load i32* %2064, align 4
  br label %3401

; <label>:3401                                    ; preds = %3401, %.lr.ph.i125
  %3402 = phi i32 [ %.pre3.i124, %.lr.ph.i125 ], [ %3410, %3401 ]
  %3403 = phi i32 [ %3388, %.lr.ph.i125 ], [ %3412, %3401 ]
  %3404 = lshr i32 %3403, 24
  %3405 = trunc i32 %3404 to i8
  %3406 = sext i32 %3402 to i64
  %3407 = load i8** %34, align 8
  %3408 = getelementptr inbounds i8* %3407, i64 %3406
  store i8 %3405, i8* %3408, align 1
  %3409 = load i32* %2064, align 4
  %3410 = add nsw i32 %3409, 1
  store i32 %3410, i32* %2064, align 4
  %3411 = load i32* %114, align 4
  %3412 = shl i32 %3411, 8
  store i32 %3412, i32* %114, align 4
  %3413 = load i32* %111, align 4
  %3414 = add nsw i32 %3413, -8
  store i32 %3414, i32* %111, align 4
  %3415 = icmp sgt i32 %3414, 7
  br i1 %3415, label %3401, label %bsW.exit127.loopexit

bsW.exit127.loopexit:                             ; preds = %3401
  %.lcssa1415 = phi i32 [ %3414, %3401 ]
  %.lcssa1414 = phi i32 [ %3412, %3401 ]
  br label %bsW.exit127

bsW.exit127:                                      ; preds = %bsW.exit127.loopexit, %bsW.exit134
  %3416 = phi i32 [ %3388, %bsW.exit134 ], [ %.lcssa1414, %bsW.exit127.loopexit ]
  %3417 = phi i32 [ %3389, %bsW.exit134 ], [ %.lcssa1415, %bsW.exit127.loopexit ]
  %3418 = sub i32 32, %3397
  %3419 = sub i32 %3418, %3417
  %3420 = shl i32 %3399, %3419
  %3421 = or i32 %3420, %3416
  store i32 %3421, i32* %114, align 4
  %3422 = add nsw i32 %3417, %3397
  store i32 %3422, i32* %111, align 4
  %3423 = add nsw i32 %gs.2165.i, 30
  %3424 = sext i32 %3423 to i64
  %3425 = getelementptr inbounds i16* %480, i64 %3424
  %3426 = load i16* %3425, align 2
  %3427 = zext i16 %3426 to i64
  %3428 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3427
  %3429 = load i8* %3428, align 1
  %3430 = zext i8 %3429 to i32
  %3431 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3427
  %3432 = load i32* %3431, align 4
  %3433 = icmp sgt i32 %3422, 7
  br i1 %3433, label %.lr.ph.i118, label %bsW.exit120

.lr.ph.i118:                                      ; preds = %bsW.exit127
  %.pre3.i117 = load i32* %2064, align 4
  br label %3434

; <label>:3434                                    ; preds = %3434, %.lr.ph.i118
  %3435 = phi i32 [ %.pre3.i117, %.lr.ph.i118 ], [ %3443, %3434 ]
  %3436 = phi i32 [ %3421, %.lr.ph.i118 ], [ %3445, %3434 ]
  %3437 = lshr i32 %3436, 24
  %3438 = trunc i32 %3437 to i8
  %3439 = sext i32 %3435 to i64
  %3440 = load i8** %34, align 8
  %3441 = getelementptr inbounds i8* %3440, i64 %3439
  store i8 %3438, i8* %3441, align 1
  %3442 = load i32* %2064, align 4
  %3443 = add nsw i32 %3442, 1
  store i32 %3443, i32* %2064, align 4
  %3444 = load i32* %114, align 4
  %3445 = shl i32 %3444, 8
  store i32 %3445, i32* %114, align 4
  %3446 = load i32* %111, align 4
  %3447 = add nsw i32 %3446, -8
  store i32 %3447, i32* %111, align 4
  %3448 = icmp sgt i32 %3447, 7
  br i1 %3448, label %3434, label %bsW.exit120.loopexit

bsW.exit120.loopexit:                             ; preds = %3434
  %.lcssa1417 = phi i32 [ %3447, %3434 ]
  %.lcssa1416 = phi i32 [ %3445, %3434 ]
  br label %bsW.exit120

bsW.exit120:                                      ; preds = %bsW.exit120.loopexit, %bsW.exit127
  %3449 = phi i32 [ %3421, %bsW.exit127 ], [ %.lcssa1416, %bsW.exit120.loopexit ]
  %3450 = phi i32 [ %3422, %bsW.exit127 ], [ %.lcssa1417, %bsW.exit120.loopexit ]
  %3451 = sub i32 32, %3430
  %3452 = sub i32 %3451, %3450
  %3453 = shl i32 %3432, %3452
  %3454 = or i32 %3453, %3449
  store i32 %3454, i32* %114, align 4
  %3455 = add nsw i32 %3450, %3430
  store i32 %3455, i32* %111, align 4
  %3456 = add nsw i32 %gs.2165.i, 31
  %3457 = sext i32 %3456 to i64
  %3458 = getelementptr inbounds i16* %480, i64 %3457
  %3459 = load i16* %3458, align 2
  %3460 = zext i16 %3459 to i64
  %3461 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3460
  %3462 = load i8* %3461, align 1
  %3463 = zext i8 %3462 to i32
  %3464 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3460
  %3465 = load i32* %3464, align 4
  %3466 = icmp sgt i32 %3455, 7
  br i1 %3466, label %.lr.ph.i111, label %bsW.exit113

.lr.ph.i111:                                      ; preds = %bsW.exit120
  %.pre3.i110 = load i32* %2064, align 4
  br label %3467

; <label>:3467                                    ; preds = %3467, %.lr.ph.i111
  %3468 = phi i32 [ %.pre3.i110, %.lr.ph.i111 ], [ %3476, %3467 ]
  %3469 = phi i32 [ %3454, %.lr.ph.i111 ], [ %3478, %3467 ]
  %3470 = lshr i32 %3469, 24
  %3471 = trunc i32 %3470 to i8
  %3472 = sext i32 %3468 to i64
  %3473 = load i8** %34, align 8
  %3474 = getelementptr inbounds i8* %3473, i64 %3472
  store i8 %3471, i8* %3474, align 1
  %3475 = load i32* %2064, align 4
  %3476 = add nsw i32 %3475, 1
  store i32 %3476, i32* %2064, align 4
  %3477 = load i32* %114, align 4
  %3478 = shl i32 %3477, 8
  store i32 %3478, i32* %114, align 4
  %3479 = load i32* %111, align 4
  %3480 = add nsw i32 %3479, -8
  store i32 %3480, i32* %111, align 4
  %3481 = icmp sgt i32 %3480, 7
  br i1 %3481, label %3467, label %bsW.exit113.loopexit

bsW.exit113.loopexit:                             ; preds = %3467
  %.lcssa1419 = phi i32 [ %3480, %3467 ]
  %.lcssa1418 = phi i32 [ %3478, %3467 ]
  br label %bsW.exit113

bsW.exit113:                                      ; preds = %bsW.exit113.loopexit, %bsW.exit120
  %3482 = phi i32 [ %3454, %bsW.exit120 ], [ %.lcssa1418, %bsW.exit113.loopexit ]
  %3483 = phi i32 [ %3455, %bsW.exit120 ], [ %.lcssa1419, %bsW.exit113.loopexit ]
  %3484 = sub i32 32, %3463
  %3485 = sub i32 %3484, %3483
  %3486 = shl i32 %3465, %3485
  %3487 = or i32 %3486, %3482
  store i32 %3487, i32* %114, align 4
  %3488 = add nsw i32 %3483, %3463
  store i32 %3488, i32* %111, align 4
  %3489 = add nsw i32 %gs.2165.i, 32
  %3490 = sext i32 %3489 to i64
  %3491 = getelementptr inbounds i16* %480, i64 %3490
  %3492 = load i16* %3491, align 2
  %3493 = zext i16 %3492 to i64
  %3494 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3493
  %3495 = load i8* %3494, align 1
  %3496 = zext i8 %3495 to i32
  %3497 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3493
  %3498 = load i32* %3497, align 4
  %3499 = icmp sgt i32 %3488, 7
  br i1 %3499, label %.lr.ph.i104, label %bsW.exit106

.lr.ph.i104:                                      ; preds = %bsW.exit113
  %.pre3.i103 = load i32* %2064, align 4
  br label %3500

; <label>:3500                                    ; preds = %3500, %.lr.ph.i104
  %3501 = phi i32 [ %.pre3.i103, %.lr.ph.i104 ], [ %3509, %3500 ]
  %3502 = phi i32 [ %3487, %.lr.ph.i104 ], [ %3511, %3500 ]
  %3503 = lshr i32 %3502, 24
  %3504 = trunc i32 %3503 to i8
  %3505 = sext i32 %3501 to i64
  %3506 = load i8** %34, align 8
  %3507 = getelementptr inbounds i8* %3506, i64 %3505
  store i8 %3504, i8* %3507, align 1
  %3508 = load i32* %2064, align 4
  %3509 = add nsw i32 %3508, 1
  store i32 %3509, i32* %2064, align 4
  %3510 = load i32* %114, align 4
  %3511 = shl i32 %3510, 8
  store i32 %3511, i32* %114, align 4
  %3512 = load i32* %111, align 4
  %3513 = add nsw i32 %3512, -8
  store i32 %3513, i32* %111, align 4
  %3514 = icmp sgt i32 %3513, 7
  br i1 %3514, label %3500, label %bsW.exit106.loopexit

bsW.exit106.loopexit:                             ; preds = %3500
  %.lcssa1421 = phi i32 [ %3513, %3500 ]
  %.lcssa1420 = phi i32 [ %3511, %3500 ]
  br label %bsW.exit106

bsW.exit106:                                      ; preds = %bsW.exit106.loopexit, %bsW.exit113
  %3515 = phi i32 [ %3487, %bsW.exit113 ], [ %.lcssa1420, %bsW.exit106.loopexit ]
  %3516 = phi i32 [ %3488, %bsW.exit113 ], [ %.lcssa1421, %bsW.exit106.loopexit ]
  %3517 = sub i32 32, %3496
  %3518 = sub i32 %3517, %3516
  %3519 = shl i32 %3498, %3518
  %3520 = or i32 %3519, %3515
  store i32 %3520, i32* %114, align 4
  %3521 = add nsw i32 %3516, %3496
  store i32 %3521, i32* %111, align 4
  %3522 = add nsw i32 %gs.2165.i, 33
  %3523 = sext i32 %3522 to i64
  %3524 = getelementptr inbounds i16* %480, i64 %3523
  %3525 = load i16* %3524, align 2
  %3526 = zext i16 %3525 to i64
  %3527 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3526
  %3528 = load i8* %3527, align 1
  %3529 = zext i8 %3528 to i32
  %3530 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3526
  %3531 = load i32* %3530, align 4
  %3532 = icmp sgt i32 %3521, 7
  br i1 %3532, label %.lr.ph.i97, label %bsW.exit99

.lr.ph.i97:                                       ; preds = %bsW.exit106
  %.pre3.i96 = load i32* %2064, align 4
  br label %3533

; <label>:3533                                    ; preds = %3533, %.lr.ph.i97
  %3534 = phi i32 [ %.pre3.i96, %.lr.ph.i97 ], [ %3542, %3533 ]
  %3535 = phi i32 [ %3520, %.lr.ph.i97 ], [ %3544, %3533 ]
  %3536 = lshr i32 %3535, 24
  %3537 = trunc i32 %3536 to i8
  %3538 = sext i32 %3534 to i64
  %3539 = load i8** %34, align 8
  %3540 = getelementptr inbounds i8* %3539, i64 %3538
  store i8 %3537, i8* %3540, align 1
  %3541 = load i32* %2064, align 4
  %3542 = add nsw i32 %3541, 1
  store i32 %3542, i32* %2064, align 4
  %3543 = load i32* %114, align 4
  %3544 = shl i32 %3543, 8
  store i32 %3544, i32* %114, align 4
  %3545 = load i32* %111, align 4
  %3546 = add nsw i32 %3545, -8
  store i32 %3546, i32* %111, align 4
  %3547 = icmp sgt i32 %3546, 7
  br i1 %3547, label %3533, label %bsW.exit99.loopexit

bsW.exit99.loopexit:                              ; preds = %3533
  %.lcssa1423 = phi i32 [ %3546, %3533 ]
  %.lcssa1422 = phi i32 [ %3544, %3533 ]
  br label %bsW.exit99

bsW.exit99:                                       ; preds = %bsW.exit99.loopexit, %bsW.exit106
  %3548 = phi i32 [ %3520, %bsW.exit106 ], [ %.lcssa1422, %bsW.exit99.loopexit ]
  %3549 = phi i32 [ %3521, %bsW.exit106 ], [ %.lcssa1423, %bsW.exit99.loopexit ]
  %3550 = sub i32 32, %3529
  %3551 = sub i32 %3550, %3549
  %3552 = shl i32 %3531, %3551
  %3553 = or i32 %3552, %3548
  store i32 %3553, i32* %114, align 4
  %3554 = add nsw i32 %3549, %3529
  store i32 %3554, i32* %111, align 4
  %3555 = add nsw i32 %gs.2165.i, 34
  %3556 = sext i32 %3555 to i64
  %3557 = getelementptr inbounds i16* %480, i64 %3556
  %3558 = load i16* %3557, align 2
  %3559 = zext i16 %3558 to i64
  %3560 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3559
  %3561 = load i8* %3560, align 1
  %3562 = zext i8 %3561 to i32
  %3563 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3559
  %3564 = load i32* %3563, align 4
  %3565 = icmp sgt i32 %3554, 7
  br i1 %3565, label %.lr.ph.i90, label %bsW.exit92

.lr.ph.i90:                                       ; preds = %bsW.exit99
  %.pre3.i89 = load i32* %2064, align 4
  br label %3566

; <label>:3566                                    ; preds = %3566, %.lr.ph.i90
  %3567 = phi i32 [ %.pre3.i89, %.lr.ph.i90 ], [ %3575, %3566 ]
  %3568 = phi i32 [ %3553, %.lr.ph.i90 ], [ %3577, %3566 ]
  %3569 = lshr i32 %3568, 24
  %3570 = trunc i32 %3569 to i8
  %3571 = sext i32 %3567 to i64
  %3572 = load i8** %34, align 8
  %3573 = getelementptr inbounds i8* %3572, i64 %3571
  store i8 %3570, i8* %3573, align 1
  %3574 = load i32* %2064, align 4
  %3575 = add nsw i32 %3574, 1
  store i32 %3575, i32* %2064, align 4
  %3576 = load i32* %114, align 4
  %3577 = shl i32 %3576, 8
  store i32 %3577, i32* %114, align 4
  %3578 = load i32* %111, align 4
  %3579 = add nsw i32 %3578, -8
  store i32 %3579, i32* %111, align 4
  %3580 = icmp sgt i32 %3579, 7
  br i1 %3580, label %3566, label %bsW.exit92.loopexit

bsW.exit92.loopexit:                              ; preds = %3566
  %.lcssa1425 = phi i32 [ %3579, %3566 ]
  %.lcssa1424 = phi i32 [ %3577, %3566 ]
  br label %bsW.exit92

bsW.exit92:                                       ; preds = %bsW.exit92.loopexit, %bsW.exit99
  %3581 = phi i32 [ %3553, %bsW.exit99 ], [ %.lcssa1424, %bsW.exit92.loopexit ]
  %3582 = phi i32 [ %3554, %bsW.exit99 ], [ %.lcssa1425, %bsW.exit92.loopexit ]
  %3583 = sub i32 32, %3562
  %3584 = sub i32 %3583, %3582
  %3585 = shl i32 %3564, %3584
  %3586 = or i32 %3585, %3581
  store i32 %3586, i32* %114, align 4
  %3587 = add nsw i32 %3582, %3562
  store i32 %3587, i32* %111, align 4
  %3588 = add nsw i32 %gs.2165.i, 35
  %3589 = sext i32 %3588 to i64
  %3590 = getelementptr inbounds i16* %480, i64 %3589
  %3591 = load i16* %3590, align 2
  %3592 = zext i16 %3591 to i64
  %3593 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3592
  %3594 = load i8* %3593, align 1
  %3595 = zext i8 %3594 to i32
  %3596 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3592
  %3597 = load i32* %3596, align 4
  %3598 = icmp sgt i32 %3587, 7
  br i1 %3598, label %.lr.ph.i349, label %bsW.exit351

.lr.ph.i349:                                      ; preds = %bsW.exit92
  %.pre3.i348 = load i32* %2064, align 4
  br label %3599

; <label>:3599                                    ; preds = %3599, %.lr.ph.i349
  %3600 = phi i32 [ %.pre3.i348, %.lr.ph.i349 ], [ %3608, %3599 ]
  %3601 = phi i32 [ %3586, %.lr.ph.i349 ], [ %3610, %3599 ]
  %3602 = lshr i32 %3601, 24
  %3603 = trunc i32 %3602 to i8
  %3604 = sext i32 %3600 to i64
  %3605 = load i8** %34, align 8
  %3606 = getelementptr inbounds i8* %3605, i64 %3604
  store i8 %3603, i8* %3606, align 1
  %3607 = load i32* %2064, align 4
  %3608 = add nsw i32 %3607, 1
  store i32 %3608, i32* %2064, align 4
  %3609 = load i32* %114, align 4
  %3610 = shl i32 %3609, 8
  store i32 %3610, i32* %114, align 4
  %3611 = load i32* %111, align 4
  %3612 = add nsw i32 %3611, -8
  store i32 %3612, i32* %111, align 4
  %3613 = icmp sgt i32 %3612, 7
  br i1 %3613, label %3599, label %bsW.exit351.loopexit

bsW.exit351.loopexit:                             ; preds = %3599
  %.lcssa1427 = phi i32 [ %3612, %3599 ]
  %.lcssa1426 = phi i32 [ %3610, %3599 ]
  br label %bsW.exit351

bsW.exit351:                                      ; preds = %bsW.exit351.loopexit, %bsW.exit92
  %3614 = phi i32 [ %3586, %bsW.exit92 ], [ %.lcssa1426, %bsW.exit351.loopexit ]
  %3615 = phi i32 [ %3587, %bsW.exit92 ], [ %.lcssa1427, %bsW.exit351.loopexit ]
  %3616 = sub i32 32, %3595
  %3617 = sub i32 %3616, %3615
  %3618 = shl i32 %3597, %3617
  %3619 = or i32 %3618, %3614
  store i32 %3619, i32* %114, align 4
  %3620 = add nsw i32 %3615, %3595
  store i32 %3620, i32* %111, align 4
  %3621 = add nsw i32 %gs.2165.i, 36
  %3622 = sext i32 %3621 to i64
  %3623 = getelementptr inbounds i16* %480, i64 %3622
  %3624 = load i16* %3623, align 2
  %3625 = zext i16 %3624 to i64
  %3626 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3625
  %3627 = load i8* %3626, align 1
  %3628 = zext i8 %3627 to i32
  %3629 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3625
  %3630 = load i32* %3629, align 4
  %3631 = icmp sgt i32 %3620, 7
  br i1 %3631, label %.lr.ph.i356, label %bsW.exit358

.lr.ph.i356:                                      ; preds = %bsW.exit351
  %.pre3.i355 = load i32* %2064, align 4
  br label %3632

; <label>:3632                                    ; preds = %3632, %.lr.ph.i356
  %3633 = phi i32 [ %.pre3.i355, %.lr.ph.i356 ], [ %3641, %3632 ]
  %3634 = phi i32 [ %3619, %.lr.ph.i356 ], [ %3643, %3632 ]
  %3635 = lshr i32 %3634, 24
  %3636 = trunc i32 %3635 to i8
  %3637 = sext i32 %3633 to i64
  %3638 = load i8** %34, align 8
  %3639 = getelementptr inbounds i8* %3638, i64 %3637
  store i8 %3636, i8* %3639, align 1
  %3640 = load i32* %2064, align 4
  %3641 = add nsw i32 %3640, 1
  store i32 %3641, i32* %2064, align 4
  %3642 = load i32* %114, align 4
  %3643 = shl i32 %3642, 8
  store i32 %3643, i32* %114, align 4
  %3644 = load i32* %111, align 4
  %3645 = add nsw i32 %3644, -8
  store i32 %3645, i32* %111, align 4
  %3646 = icmp sgt i32 %3645, 7
  br i1 %3646, label %3632, label %bsW.exit358.loopexit

bsW.exit358.loopexit:                             ; preds = %3632
  %.lcssa1429 = phi i32 [ %3645, %3632 ]
  %.lcssa1428 = phi i32 [ %3643, %3632 ]
  br label %bsW.exit358

bsW.exit358:                                      ; preds = %bsW.exit358.loopexit, %bsW.exit351
  %3647 = phi i32 [ %3619, %bsW.exit351 ], [ %.lcssa1428, %bsW.exit358.loopexit ]
  %3648 = phi i32 [ %3620, %bsW.exit351 ], [ %.lcssa1429, %bsW.exit358.loopexit ]
  %3649 = sub i32 32, %3628
  %3650 = sub i32 %3649, %3648
  %3651 = shl i32 %3630, %3650
  %3652 = or i32 %3651, %3647
  store i32 %3652, i32* %114, align 4
  %3653 = add nsw i32 %3648, %3628
  store i32 %3653, i32* %111, align 4
  %3654 = add nsw i32 %gs.2165.i, 37
  %3655 = sext i32 %3654 to i64
  %3656 = getelementptr inbounds i16* %480, i64 %3655
  %3657 = load i16* %3656, align 2
  %3658 = zext i16 %3657 to i64
  %3659 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3658
  %3660 = load i8* %3659, align 1
  %3661 = zext i8 %3660 to i32
  %3662 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3658
  %3663 = load i32* %3662, align 4
  %3664 = icmp sgt i32 %3653, 7
  br i1 %3664, label %.lr.ph.i363, label %bsW.exit365

.lr.ph.i363:                                      ; preds = %bsW.exit358
  %.pre3.i362 = load i32* %2064, align 4
  br label %3665

; <label>:3665                                    ; preds = %3665, %.lr.ph.i363
  %3666 = phi i32 [ %.pre3.i362, %.lr.ph.i363 ], [ %3674, %3665 ]
  %3667 = phi i32 [ %3652, %.lr.ph.i363 ], [ %3676, %3665 ]
  %3668 = lshr i32 %3667, 24
  %3669 = trunc i32 %3668 to i8
  %3670 = sext i32 %3666 to i64
  %3671 = load i8** %34, align 8
  %3672 = getelementptr inbounds i8* %3671, i64 %3670
  store i8 %3669, i8* %3672, align 1
  %3673 = load i32* %2064, align 4
  %3674 = add nsw i32 %3673, 1
  store i32 %3674, i32* %2064, align 4
  %3675 = load i32* %114, align 4
  %3676 = shl i32 %3675, 8
  store i32 %3676, i32* %114, align 4
  %3677 = load i32* %111, align 4
  %3678 = add nsw i32 %3677, -8
  store i32 %3678, i32* %111, align 4
  %3679 = icmp sgt i32 %3678, 7
  br i1 %3679, label %3665, label %bsW.exit365.loopexit

bsW.exit365.loopexit:                             ; preds = %3665
  %.lcssa1431 = phi i32 [ %3678, %3665 ]
  %.lcssa1430 = phi i32 [ %3676, %3665 ]
  br label %bsW.exit365

bsW.exit365:                                      ; preds = %bsW.exit365.loopexit, %bsW.exit358
  %3680 = phi i32 [ %3652, %bsW.exit358 ], [ %.lcssa1430, %bsW.exit365.loopexit ]
  %3681 = phi i32 [ %3653, %bsW.exit358 ], [ %.lcssa1431, %bsW.exit365.loopexit ]
  %3682 = sub i32 32, %3661
  %3683 = sub i32 %3682, %3681
  %3684 = shl i32 %3663, %3683
  %3685 = or i32 %3684, %3680
  store i32 %3685, i32* %114, align 4
  %3686 = add nsw i32 %3681, %3661
  store i32 %3686, i32* %111, align 4
  %3687 = add nsw i32 %gs.2165.i, 38
  %3688 = sext i32 %3687 to i64
  %3689 = getelementptr inbounds i16* %480, i64 %3688
  %3690 = load i16* %3689, align 2
  %3691 = zext i16 %3690 to i64
  %3692 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3691
  %3693 = load i8* %3692, align 1
  %3694 = zext i8 %3693 to i32
  %3695 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3691
  %3696 = load i32* %3695, align 4
  %3697 = icmp sgt i32 %3686, 7
  br i1 %3697, label %.lr.ph.i454, label %bsW.exit456

.lr.ph.i454:                                      ; preds = %bsW.exit365
  %.pre3.i453 = load i32* %2064, align 4
  br label %3698

; <label>:3698                                    ; preds = %3698, %.lr.ph.i454
  %3699 = phi i32 [ %.pre3.i453, %.lr.ph.i454 ], [ %3707, %3698 ]
  %3700 = phi i32 [ %3685, %.lr.ph.i454 ], [ %3709, %3698 ]
  %3701 = lshr i32 %3700, 24
  %3702 = trunc i32 %3701 to i8
  %3703 = sext i32 %3699 to i64
  %3704 = load i8** %34, align 8
  %3705 = getelementptr inbounds i8* %3704, i64 %3703
  store i8 %3702, i8* %3705, align 1
  %3706 = load i32* %2064, align 4
  %3707 = add nsw i32 %3706, 1
  store i32 %3707, i32* %2064, align 4
  %3708 = load i32* %114, align 4
  %3709 = shl i32 %3708, 8
  store i32 %3709, i32* %114, align 4
  %3710 = load i32* %111, align 4
  %3711 = add nsw i32 %3710, -8
  store i32 %3711, i32* %111, align 4
  %3712 = icmp sgt i32 %3711, 7
  br i1 %3712, label %3698, label %bsW.exit456.loopexit

bsW.exit456.loopexit:                             ; preds = %3698
  %.lcssa1433 = phi i32 [ %3711, %3698 ]
  %.lcssa1432 = phi i32 [ %3709, %3698 ]
  br label %bsW.exit456

bsW.exit456:                                      ; preds = %bsW.exit456.loopexit, %bsW.exit365
  %3713 = phi i32 [ %3685, %bsW.exit365 ], [ %.lcssa1432, %bsW.exit456.loopexit ]
  %3714 = phi i32 [ %3686, %bsW.exit365 ], [ %.lcssa1433, %bsW.exit456.loopexit ]
  %3715 = sub i32 32, %3694
  %3716 = sub i32 %3715, %3714
  %3717 = shl i32 %3696, %3716
  %3718 = or i32 %3717, %3713
  store i32 %3718, i32* %114, align 4
  %3719 = add nsw i32 %3714, %3694
  store i32 %3719, i32* %111, align 4
  %3720 = add nsw i32 %gs.2165.i, 39
  %3721 = sext i32 %3720 to i64
  %3722 = getelementptr inbounds i16* %480, i64 %3721
  %3723 = load i16* %3722, align 2
  %3724 = zext i16 %3723 to i64
  %3725 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3724
  %3726 = load i8* %3725, align 1
  %3727 = zext i8 %3726 to i32
  %3728 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3724
  %3729 = load i32* %3728, align 4
  %3730 = icmp sgt i32 %3719, 7
  br i1 %3730, label %.lr.ph.i461, label %bsW.exit463

.lr.ph.i461:                                      ; preds = %bsW.exit456
  %.pre3.i460 = load i32* %2064, align 4
  br label %3731

; <label>:3731                                    ; preds = %3731, %.lr.ph.i461
  %3732 = phi i32 [ %.pre3.i460, %.lr.ph.i461 ], [ %3740, %3731 ]
  %3733 = phi i32 [ %3718, %.lr.ph.i461 ], [ %3742, %3731 ]
  %3734 = lshr i32 %3733, 24
  %3735 = trunc i32 %3734 to i8
  %3736 = sext i32 %3732 to i64
  %3737 = load i8** %34, align 8
  %3738 = getelementptr inbounds i8* %3737, i64 %3736
  store i8 %3735, i8* %3738, align 1
  %3739 = load i32* %2064, align 4
  %3740 = add nsw i32 %3739, 1
  store i32 %3740, i32* %2064, align 4
  %3741 = load i32* %114, align 4
  %3742 = shl i32 %3741, 8
  store i32 %3742, i32* %114, align 4
  %3743 = load i32* %111, align 4
  %3744 = add nsw i32 %3743, -8
  store i32 %3744, i32* %111, align 4
  %3745 = icmp sgt i32 %3744, 7
  br i1 %3745, label %3731, label %bsW.exit463.loopexit

bsW.exit463.loopexit:                             ; preds = %3731
  %.lcssa1435 = phi i32 [ %3744, %3731 ]
  %.lcssa1434 = phi i32 [ %3742, %3731 ]
  br label %bsW.exit463

bsW.exit463:                                      ; preds = %bsW.exit463.loopexit, %bsW.exit456
  %3746 = phi i32 [ %3718, %bsW.exit456 ], [ %.lcssa1434, %bsW.exit463.loopexit ]
  %3747 = phi i32 [ %3719, %bsW.exit456 ], [ %.lcssa1435, %bsW.exit463.loopexit ]
  %3748 = sub i32 32, %3727
  %3749 = sub i32 %3748, %3747
  %3750 = shl i32 %3729, %3749
  %3751 = or i32 %3750, %3746
  store i32 %3751, i32* %114, align 4
  %3752 = add nsw i32 %3747, %3727
  store i32 %3752, i32* %111, align 4
  %3753 = add nsw i32 %gs.2165.i, 40
  %3754 = sext i32 %3753 to i64
  %3755 = getelementptr inbounds i16* %480, i64 %3754
  %3756 = load i16* %3755, align 2
  %3757 = zext i16 %3756 to i64
  %3758 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3757
  %3759 = load i8* %3758, align 1
  %3760 = zext i8 %3759 to i32
  %3761 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3757
  %3762 = load i32* %3761, align 4
  %3763 = icmp sgt i32 %3752, 7
  br i1 %3763, label %.lr.ph.i80.i, label %bsW.exit81.i

.lr.ph.i80.i:                                     ; preds = %bsW.exit463
  %.pre3.i79.i = load i32* %2064, align 4
  br label %3764

; <label>:3764                                    ; preds = %3764, %.lr.ph.i80.i
  %3765 = phi i32 [ %.pre3.i79.i, %.lr.ph.i80.i ], [ %3773, %3764 ]
  %3766 = phi i32 [ %3751, %.lr.ph.i80.i ], [ %3775, %3764 ]
  %3767 = lshr i32 %3766, 24
  %3768 = trunc i32 %3767 to i8
  %3769 = sext i32 %3765 to i64
  %3770 = load i8** %34, align 8
  %3771 = getelementptr inbounds i8* %3770, i64 %3769
  store i8 %3768, i8* %3771, align 1
  %3772 = load i32* %2064, align 4
  %3773 = add nsw i32 %3772, 1
  store i32 %3773, i32* %2064, align 4
  %3774 = load i32* %114, align 4
  %3775 = shl i32 %3774, 8
  store i32 %3775, i32* %114, align 4
  %3776 = load i32* %111, align 4
  %3777 = add nsw i32 %3776, -8
  store i32 %3777, i32* %111, align 4
  %3778 = icmp sgt i32 %3777, 7
  br i1 %3778, label %3764, label %bsW.exit81.i.loopexit

bsW.exit81.i.loopexit:                            ; preds = %3764
  %.lcssa1437 = phi i32 [ %3777, %3764 ]
  %.lcssa1436 = phi i32 [ %3775, %3764 ]
  br label %bsW.exit81.i

bsW.exit81.i:                                     ; preds = %bsW.exit81.i.loopexit, %bsW.exit463
  %3779 = phi i32 [ %3751, %bsW.exit463 ], [ %.lcssa1436, %bsW.exit81.i.loopexit ]
  %3780 = phi i32 [ %3752, %bsW.exit463 ], [ %.lcssa1437, %bsW.exit81.i.loopexit ]
  %3781 = sub i32 32, %3760
  %3782 = sub i32 %3781, %3780
  %3783 = shl i32 %3762, %3782
  %3784 = or i32 %3783, %3779
  store i32 %3784, i32* %114, align 4
  %3785 = add nsw i32 %3780, %3760
  store i32 %3785, i32* %111, align 4
  %3786 = add nsw i32 %gs.2165.i, 41
  %3787 = sext i32 %3786 to i64
  %3788 = getelementptr inbounds i16* %480, i64 %3787
  %3789 = load i16* %3788, align 2
  %3790 = zext i16 %3789 to i64
  %3791 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3790
  %3792 = load i8* %3791, align 1
  %3793 = zext i8 %3792 to i32
  %3794 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3790
  %3795 = load i32* %3794, align 4
  %3796 = icmp sgt i32 %3785, 7
  br i1 %3796, label %.lr.ph.i74.i, label %bsW.exit75.i

.lr.ph.i74.i:                                     ; preds = %bsW.exit81.i
  %.pre3.i73.i = load i32* %2064, align 4
  br label %3797

; <label>:3797                                    ; preds = %3797, %.lr.ph.i74.i
  %3798 = phi i32 [ %.pre3.i73.i, %.lr.ph.i74.i ], [ %3806, %3797 ]
  %3799 = phi i32 [ %3784, %.lr.ph.i74.i ], [ %3808, %3797 ]
  %3800 = lshr i32 %3799, 24
  %3801 = trunc i32 %3800 to i8
  %3802 = sext i32 %3798 to i64
  %3803 = load i8** %34, align 8
  %3804 = getelementptr inbounds i8* %3803, i64 %3802
  store i8 %3801, i8* %3804, align 1
  %3805 = load i32* %2064, align 4
  %3806 = add nsw i32 %3805, 1
  store i32 %3806, i32* %2064, align 4
  %3807 = load i32* %114, align 4
  %3808 = shl i32 %3807, 8
  store i32 %3808, i32* %114, align 4
  %3809 = load i32* %111, align 4
  %3810 = add nsw i32 %3809, -8
  store i32 %3810, i32* %111, align 4
  %3811 = icmp sgt i32 %3810, 7
  br i1 %3811, label %3797, label %bsW.exit75.i.loopexit

bsW.exit75.i.loopexit:                            ; preds = %3797
  %.lcssa1439 = phi i32 [ %3810, %3797 ]
  %.lcssa1438 = phi i32 [ %3808, %3797 ]
  br label %bsW.exit75.i

bsW.exit75.i:                                     ; preds = %bsW.exit75.i.loopexit, %bsW.exit81.i
  %3812 = phi i32 [ %3784, %bsW.exit81.i ], [ %.lcssa1438, %bsW.exit75.i.loopexit ]
  %3813 = phi i32 [ %3785, %bsW.exit81.i ], [ %.lcssa1439, %bsW.exit75.i.loopexit ]
  %3814 = sub i32 32, %3793
  %3815 = sub i32 %3814, %3813
  %3816 = shl i32 %3795, %3815
  %3817 = or i32 %3816, %3812
  store i32 %3817, i32* %114, align 4
  %3818 = add nsw i32 %3813, %3793
  store i32 %3818, i32* %111, align 4
  %3819 = add nsw i32 %gs.2165.i, 42
  %3820 = sext i32 %3819 to i64
  %3821 = getelementptr inbounds i16* %480, i64 %3820
  %3822 = load i16* %3821, align 2
  %3823 = zext i16 %3822 to i64
  %3824 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3823
  %3825 = load i8* %3824, align 1
  %3826 = zext i8 %3825 to i32
  %3827 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3823
  %3828 = load i32* %3827, align 4
  %3829 = icmp sgt i32 %3818, 7
  br i1 %3829, label %.lr.ph.i68.i, label %bsW.exit69.i

.lr.ph.i68.i:                                     ; preds = %bsW.exit75.i
  %.pre3.i67.i = load i32* %2064, align 4
  br label %3830

; <label>:3830                                    ; preds = %3830, %.lr.ph.i68.i
  %3831 = phi i32 [ %.pre3.i67.i, %.lr.ph.i68.i ], [ %3839, %3830 ]
  %3832 = phi i32 [ %3817, %.lr.ph.i68.i ], [ %3841, %3830 ]
  %3833 = lshr i32 %3832, 24
  %3834 = trunc i32 %3833 to i8
  %3835 = sext i32 %3831 to i64
  %3836 = load i8** %34, align 8
  %3837 = getelementptr inbounds i8* %3836, i64 %3835
  store i8 %3834, i8* %3837, align 1
  %3838 = load i32* %2064, align 4
  %3839 = add nsw i32 %3838, 1
  store i32 %3839, i32* %2064, align 4
  %3840 = load i32* %114, align 4
  %3841 = shl i32 %3840, 8
  store i32 %3841, i32* %114, align 4
  %3842 = load i32* %111, align 4
  %3843 = add nsw i32 %3842, -8
  store i32 %3843, i32* %111, align 4
  %3844 = icmp sgt i32 %3843, 7
  br i1 %3844, label %3830, label %bsW.exit69.i.loopexit

bsW.exit69.i.loopexit:                            ; preds = %3830
  %.lcssa1441 = phi i32 [ %3843, %3830 ]
  %.lcssa1440 = phi i32 [ %3841, %3830 ]
  br label %bsW.exit69.i

bsW.exit69.i:                                     ; preds = %bsW.exit69.i.loopexit, %bsW.exit75.i
  %3845 = phi i32 [ %3817, %bsW.exit75.i ], [ %.lcssa1440, %bsW.exit69.i.loopexit ]
  %3846 = phi i32 [ %3818, %bsW.exit75.i ], [ %.lcssa1441, %bsW.exit69.i.loopexit ]
  %3847 = sub i32 32, %3826
  %3848 = sub i32 %3847, %3846
  %3849 = shl i32 %3828, %3848
  %3850 = or i32 %3849, %3845
  store i32 %3850, i32* %114, align 4
  %3851 = add nsw i32 %3846, %3826
  store i32 %3851, i32* %111, align 4
  %3852 = add nsw i32 %gs.2165.i, 43
  %3853 = sext i32 %3852 to i64
  %3854 = getelementptr inbounds i16* %480, i64 %3853
  %3855 = load i16* %3854, align 2
  %3856 = zext i16 %3855 to i64
  %3857 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3856
  %3858 = load i8* %3857, align 1
  %3859 = zext i8 %3858 to i32
  %3860 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3856
  %3861 = load i32* %3860, align 4
  %3862 = icmp sgt i32 %3851, 7
  br i1 %3862, label %.lr.ph.i62.i, label %bsW.exit63.i

.lr.ph.i62.i:                                     ; preds = %bsW.exit69.i
  %.pre3.i61.i = load i32* %2064, align 4
  br label %3863

; <label>:3863                                    ; preds = %3863, %.lr.ph.i62.i
  %3864 = phi i32 [ %.pre3.i61.i, %.lr.ph.i62.i ], [ %3872, %3863 ]
  %3865 = phi i32 [ %3850, %.lr.ph.i62.i ], [ %3874, %3863 ]
  %3866 = lshr i32 %3865, 24
  %3867 = trunc i32 %3866 to i8
  %3868 = sext i32 %3864 to i64
  %3869 = load i8** %34, align 8
  %3870 = getelementptr inbounds i8* %3869, i64 %3868
  store i8 %3867, i8* %3870, align 1
  %3871 = load i32* %2064, align 4
  %3872 = add nsw i32 %3871, 1
  store i32 %3872, i32* %2064, align 4
  %3873 = load i32* %114, align 4
  %3874 = shl i32 %3873, 8
  store i32 %3874, i32* %114, align 4
  %3875 = load i32* %111, align 4
  %3876 = add nsw i32 %3875, -8
  store i32 %3876, i32* %111, align 4
  %3877 = icmp sgt i32 %3876, 7
  br i1 %3877, label %3863, label %bsW.exit63.i.loopexit

bsW.exit63.i.loopexit:                            ; preds = %3863
  %.lcssa1443 = phi i32 [ %3876, %3863 ]
  %.lcssa1442 = phi i32 [ %3874, %3863 ]
  br label %bsW.exit63.i

bsW.exit63.i:                                     ; preds = %bsW.exit63.i.loopexit, %bsW.exit69.i
  %3878 = phi i32 [ %3850, %bsW.exit69.i ], [ %.lcssa1442, %bsW.exit63.i.loopexit ]
  %3879 = phi i32 [ %3851, %bsW.exit69.i ], [ %.lcssa1443, %bsW.exit63.i.loopexit ]
  %3880 = sub i32 32, %3859
  %3881 = sub i32 %3880, %3879
  %3882 = shl i32 %3861, %3881
  %3883 = or i32 %3882, %3878
  store i32 %3883, i32* %114, align 4
  %3884 = add nsw i32 %3879, %3859
  store i32 %3884, i32* %111, align 4
  %3885 = add nsw i32 %gs.2165.i, 44
  %3886 = sext i32 %3885 to i64
  %3887 = getelementptr inbounds i16* %480, i64 %3886
  %3888 = load i16* %3887, align 2
  %3889 = zext i16 %3888 to i64
  %3890 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3889
  %3891 = load i8* %3890, align 1
  %3892 = zext i8 %3891 to i32
  %3893 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3889
  %3894 = load i32* %3893, align 4
  %3895 = icmp sgt i32 %3884, 7
  br i1 %3895, label %.lr.ph.i56.i, label %bsW.exit57.i

.lr.ph.i56.i:                                     ; preds = %bsW.exit63.i
  %.pre3.i55.i = load i32* %2064, align 4
  br label %3896

; <label>:3896                                    ; preds = %3896, %.lr.ph.i56.i
  %3897 = phi i32 [ %.pre3.i55.i, %.lr.ph.i56.i ], [ %3905, %3896 ]
  %3898 = phi i32 [ %3883, %.lr.ph.i56.i ], [ %3907, %3896 ]
  %3899 = lshr i32 %3898, 24
  %3900 = trunc i32 %3899 to i8
  %3901 = sext i32 %3897 to i64
  %3902 = load i8** %34, align 8
  %3903 = getelementptr inbounds i8* %3902, i64 %3901
  store i8 %3900, i8* %3903, align 1
  %3904 = load i32* %2064, align 4
  %3905 = add nsw i32 %3904, 1
  store i32 %3905, i32* %2064, align 4
  %3906 = load i32* %114, align 4
  %3907 = shl i32 %3906, 8
  store i32 %3907, i32* %114, align 4
  %3908 = load i32* %111, align 4
  %3909 = add nsw i32 %3908, -8
  store i32 %3909, i32* %111, align 4
  %3910 = icmp sgt i32 %3909, 7
  br i1 %3910, label %3896, label %bsW.exit57.i.loopexit

bsW.exit57.i.loopexit:                            ; preds = %3896
  %.lcssa1445 = phi i32 [ %3909, %3896 ]
  %.lcssa1444 = phi i32 [ %3907, %3896 ]
  br label %bsW.exit57.i

bsW.exit57.i:                                     ; preds = %bsW.exit57.i.loopexit, %bsW.exit63.i
  %3911 = phi i32 [ %3883, %bsW.exit63.i ], [ %.lcssa1444, %bsW.exit57.i.loopexit ]
  %3912 = phi i32 [ %3884, %bsW.exit63.i ], [ %.lcssa1445, %bsW.exit57.i.loopexit ]
  %3913 = sub i32 32, %3892
  %3914 = sub i32 %3913, %3912
  %3915 = shl i32 %3894, %3914
  %3916 = or i32 %3915, %3911
  store i32 %3916, i32* %114, align 4
  %3917 = add nsw i32 %3912, %3892
  store i32 %3917, i32* %111, align 4
  %3918 = add nsw i32 %gs.2165.i, 45
  %3919 = sext i32 %3918 to i64
  %3920 = getelementptr inbounds i16* %480, i64 %3919
  %3921 = load i16* %3920, align 2
  %3922 = zext i16 %3921 to i64
  %3923 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3922
  %3924 = load i8* %3923, align 1
  %3925 = zext i8 %3924 to i32
  %3926 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3922
  %3927 = load i32* %3926, align 4
  %3928 = icmp sgt i32 %3917, 7
  br i1 %3928, label %.lr.ph.i50.i, label %bsW.exit51.i

.lr.ph.i50.i:                                     ; preds = %bsW.exit57.i
  %.pre3.i49.i = load i32* %2064, align 4
  br label %3929

; <label>:3929                                    ; preds = %3929, %.lr.ph.i50.i
  %3930 = phi i32 [ %.pre3.i49.i, %.lr.ph.i50.i ], [ %3938, %3929 ]
  %3931 = phi i32 [ %3916, %.lr.ph.i50.i ], [ %3940, %3929 ]
  %3932 = lshr i32 %3931, 24
  %3933 = trunc i32 %3932 to i8
  %3934 = sext i32 %3930 to i64
  %3935 = load i8** %34, align 8
  %3936 = getelementptr inbounds i8* %3935, i64 %3934
  store i8 %3933, i8* %3936, align 1
  %3937 = load i32* %2064, align 4
  %3938 = add nsw i32 %3937, 1
  store i32 %3938, i32* %2064, align 4
  %3939 = load i32* %114, align 4
  %3940 = shl i32 %3939, 8
  store i32 %3940, i32* %114, align 4
  %3941 = load i32* %111, align 4
  %3942 = add nsw i32 %3941, -8
  store i32 %3942, i32* %111, align 4
  %3943 = icmp sgt i32 %3942, 7
  br i1 %3943, label %3929, label %bsW.exit51.i.loopexit

bsW.exit51.i.loopexit:                            ; preds = %3929
  %.lcssa1447 = phi i32 [ %3942, %3929 ]
  %.lcssa1446 = phi i32 [ %3940, %3929 ]
  br label %bsW.exit51.i

bsW.exit51.i:                                     ; preds = %bsW.exit51.i.loopexit, %bsW.exit57.i
  %3944 = phi i32 [ %3916, %bsW.exit57.i ], [ %.lcssa1446, %bsW.exit51.i.loopexit ]
  %3945 = phi i32 [ %3917, %bsW.exit57.i ], [ %.lcssa1447, %bsW.exit51.i.loopexit ]
  %3946 = sub i32 32, %3925
  %3947 = sub i32 %3946, %3945
  %3948 = shl i32 %3927, %3947
  %3949 = or i32 %3948, %3944
  store i32 %3949, i32* %114, align 4
  %3950 = add nsw i32 %3945, %3925
  store i32 %3950, i32* %111, align 4
  %3951 = add nsw i32 %gs.2165.i, 46
  %3952 = sext i32 %3951 to i64
  %3953 = getelementptr inbounds i16* %480, i64 %3952
  %3954 = load i16* %3953, align 2
  %3955 = zext i16 %3954 to i64
  %3956 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3955
  %3957 = load i8* %3956, align 1
  %3958 = zext i8 %3957 to i32
  %3959 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3955
  %3960 = load i32* %3959, align 4
  %3961 = icmp sgt i32 %3950, 7
  br i1 %3961, label %.lr.ph.i44.i, label %bsW.exit45.i

.lr.ph.i44.i:                                     ; preds = %bsW.exit51.i
  %.pre3.i43.i = load i32* %2064, align 4
  br label %3962

; <label>:3962                                    ; preds = %3962, %.lr.ph.i44.i
  %3963 = phi i32 [ %.pre3.i43.i, %.lr.ph.i44.i ], [ %3971, %3962 ]
  %3964 = phi i32 [ %3949, %.lr.ph.i44.i ], [ %3973, %3962 ]
  %3965 = lshr i32 %3964, 24
  %3966 = trunc i32 %3965 to i8
  %3967 = sext i32 %3963 to i64
  %3968 = load i8** %34, align 8
  %3969 = getelementptr inbounds i8* %3968, i64 %3967
  store i8 %3966, i8* %3969, align 1
  %3970 = load i32* %2064, align 4
  %3971 = add nsw i32 %3970, 1
  store i32 %3971, i32* %2064, align 4
  %3972 = load i32* %114, align 4
  %3973 = shl i32 %3972, 8
  store i32 %3973, i32* %114, align 4
  %3974 = load i32* %111, align 4
  %3975 = add nsw i32 %3974, -8
  store i32 %3975, i32* %111, align 4
  %3976 = icmp sgt i32 %3975, 7
  br i1 %3976, label %3962, label %bsW.exit45.i.loopexit

bsW.exit45.i.loopexit:                            ; preds = %3962
  %.lcssa1449 = phi i32 [ %3975, %3962 ]
  %.lcssa1448 = phi i32 [ %3973, %3962 ]
  br label %bsW.exit45.i

bsW.exit45.i:                                     ; preds = %bsW.exit45.i.loopexit, %bsW.exit51.i
  %3977 = phi i32 [ %3949, %bsW.exit51.i ], [ %.lcssa1448, %bsW.exit45.i.loopexit ]
  %3978 = phi i32 [ %3950, %bsW.exit51.i ], [ %.lcssa1449, %bsW.exit45.i.loopexit ]
  %3979 = sub i32 32, %3958
  %3980 = sub i32 %3979, %3978
  %3981 = shl i32 %3960, %3980
  %3982 = or i32 %3981, %3977
  store i32 %3982, i32* %114, align 4
  %3983 = add nsw i32 %3978, %3958
  store i32 %3983, i32* %111, align 4
  %3984 = add nsw i32 %gs.2165.i, 47
  %3985 = sext i32 %3984 to i64
  %3986 = getelementptr inbounds i16* %480, i64 %3985
  %3987 = load i16* %3986, align 2
  %3988 = zext i16 %3987 to i64
  %3989 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %3988
  %3990 = load i8* %3989, align 1
  %3991 = zext i8 %3990 to i32
  %3992 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %3988
  %3993 = load i32* %3992, align 4
  %3994 = icmp sgt i32 %3983, 7
  br i1 %3994, label %.lr.ph.i38.i, label %bsW.exit39.i

.lr.ph.i38.i:                                     ; preds = %bsW.exit45.i
  %.pre3.i37.i = load i32* %2064, align 4
  br label %3995

; <label>:3995                                    ; preds = %3995, %.lr.ph.i38.i
  %3996 = phi i32 [ %.pre3.i37.i, %.lr.ph.i38.i ], [ %4004, %3995 ]
  %3997 = phi i32 [ %3982, %.lr.ph.i38.i ], [ %4006, %3995 ]
  %3998 = lshr i32 %3997, 24
  %3999 = trunc i32 %3998 to i8
  %4000 = sext i32 %3996 to i64
  %4001 = load i8** %34, align 8
  %4002 = getelementptr inbounds i8* %4001, i64 %4000
  store i8 %3999, i8* %4002, align 1
  %4003 = load i32* %2064, align 4
  %4004 = add nsw i32 %4003, 1
  store i32 %4004, i32* %2064, align 4
  %4005 = load i32* %114, align 4
  %4006 = shl i32 %4005, 8
  store i32 %4006, i32* %114, align 4
  %4007 = load i32* %111, align 4
  %4008 = add nsw i32 %4007, -8
  store i32 %4008, i32* %111, align 4
  %4009 = icmp sgt i32 %4008, 7
  br i1 %4009, label %3995, label %bsW.exit39.i.loopexit

bsW.exit39.i.loopexit:                            ; preds = %3995
  %.lcssa1451 = phi i32 [ %4008, %3995 ]
  %.lcssa1450 = phi i32 [ %4006, %3995 ]
  br label %bsW.exit39.i

bsW.exit39.i:                                     ; preds = %bsW.exit39.i.loopexit, %bsW.exit45.i
  %4010 = phi i32 [ %3982, %bsW.exit45.i ], [ %.lcssa1450, %bsW.exit39.i.loopexit ]
  %4011 = phi i32 [ %3983, %bsW.exit45.i ], [ %.lcssa1451, %bsW.exit39.i.loopexit ]
  %4012 = sub i32 32, %3991
  %4013 = sub i32 %4012, %4011
  %4014 = shl i32 %3993, %4013
  %4015 = or i32 %4014, %4010
  store i32 %4015, i32* %114, align 4
  %4016 = add nsw i32 %4011, %3991
  store i32 %4016, i32* %111, align 4
  %4017 = add nsw i32 %gs.2165.i, 48
  %4018 = sext i32 %4017 to i64
  %4019 = getelementptr inbounds i16* %480, i64 %4018
  %4020 = load i16* %4019, align 2
  %4021 = zext i16 %4020 to i64
  %4022 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %4021
  %4023 = load i8* %4022, align 1
  %4024 = zext i8 %4023 to i32
  %4025 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %4021
  %4026 = load i32* %4025, align 4
  %4027 = icmp sgt i32 %4016, 7
  br i1 %4027, label %.lr.ph.i32.i, label %bsW.exit33.i

.lr.ph.i32.i:                                     ; preds = %bsW.exit39.i
  %.pre3.i31.i = load i32* %2064, align 4
  br label %4028

; <label>:4028                                    ; preds = %4028, %.lr.ph.i32.i
  %4029 = phi i32 [ %.pre3.i31.i, %.lr.ph.i32.i ], [ %4037, %4028 ]
  %4030 = phi i32 [ %4015, %.lr.ph.i32.i ], [ %4039, %4028 ]
  %4031 = lshr i32 %4030, 24
  %4032 = trunc i32 %4031 to i8
  %4033 = sext i32 %4029 to i64
  %4034 = load i8** %34, align 8
  %4035 = getelementptr inbounds i8* %4034, i64 %4033
  store i8 %4032, i8* %4035, align 1
  %4036 = load i32* %2064, align 4
  %4037 = add nsw i32 %4036, 1
  store i32 %4037, i32* %2064, align 4
  %4038 = load i32* %114, align 4
  %4039 = shl i32 %4038, 8
  store i32 %4039, i32* %114, align 4
  %4040 = load i32* %111, align 4
  %4041 = add nsw i32 %4040, -8
  store i32 %4041, i32* %111, align 4
  %4042 = icmp sgt i32 %4041, 7
  br i1 %4042, label %4028, label %bsW.exit33.i.loopexit

bsW.exit33.i.loopexit:                            ; preds = %4028
  %.lcssa1453 = phi i32 [ %4041, %4028 ]
  %.lcssa1452 = phi i32 [ %4039, %4028 ]
  br label %bsW.exit33.i

bsW.exit33.i:                                     ; preds = %bsW.exit33.i.loopexit, %bsW.exit39.i
  %4043 = phi i32 [ %4015, %bsW.exit39.i ], [ %.lcssa1452, %bsW.exit33.i.loopexit ]
  %4044 = phi i32 [ %4016, %bsW.exit39.i ], [ %.lcssa1453, %bsW.exit33.i.loopexit ]
  %4045 = sub i32 32, %4024
  %4046 = sub i32 %4045, %4044
  %4047 = shl i32 %4026, %4046
  %4048 = or i32 %4047, %4043
  store i32 %4048, i32* %114, align 4
  %4049 = add nsw i32 %4044, %4024
  store i32 %4049, i32* %111, align 4
  %4050 = sext i32 %2417 to i64
  %4051 = getelementptr inbounds i16* %480, i64 %4050
  %4052 = load i16* %4051, align 2
  %4053 = zext i16 %4052 to i64
  %4054 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %2432, i64 %4053
  %4055 = load i8* %4054, align 1
  %4056 = zext i8 %4055 to i32
  %4057 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %2432, i64 %4053
  %4058 = load i32* %4057, align 4
  %4059 = icmp sgt i32 %4049, 7
  br i1 %4059, label %.lr.ph.i26.i, label %bsW.exit27.i

.lr.ph.i26.i:                                     ; preds = %bsW.exit33.i
  %.pre3.i25.i = load i32* %2064, align 4
  br label %4060

; <label>:4060                                    ; preds = %4060, %.lr.ph.i26.i
  %4061 = phi i32 [ %.pre3.i25.i, %.lr.ph.i26.i ], [ %4069, %4060 ]
  %4062 = phi i32 [ %4048, %.lr.ph.i26.i ], [ %4071, %4060 ]
  %4063 = lshr i32 %4062, 24
  %4064 = trunc i32 %4063 to i8
  %4065 = sext i32 %4061 to i64
  %4066 = load i8** %34, align 8
  %4067 = getelementptr inbounds i8* %4066, i64 %4065
  store i8 %4064, i8* %4067, align 1
  %4068 = load i32* %2064, align 4
  %4069 = add nsw i32 %4068, 1
  store i32 %4069, i32* %2064, align 4
  %4070 = load i32* %114, align 4
  %4071 = shl i32 %4070, 8
  store i32 %4071, i32* %114, align 4
  %4072 = load i32* %111, align 4
  %4073 = add nsw i32 %4072, -8
  store i32 %4073, i32* %111, align 4
  %4074 = icmp sgt i32 %4073, 7
  br i1 %4074, label %4060, label %bsW.exit27.i.loopexit

bsW.exit27.i.loopexit:                            ; preds = %4060
  %.lcssa1455 = phi i32 [ %4073, %4060 ]
  %.lcssa1454 = phi i32 [ %4071, %4060 ]
  br label %bsW.exit27.i

bsW.exit27.i:                                     ; preds = %bsW.exit27.i.loopexit, %bsW.exit33.i
  %4075 = phi i32 [ %4048, %bsW.exit33.i ], [ %.lcssa1454, %bsW.exit27.i.loopexit ]
  %4076 = phi i32 [ %4049, %bsW.exit33.i ], [ %.lcssa1455, %bsW.exit27.i.loopexit ]
  %4077 = sub i32 32, %4056
  %4078 = sub i32 %4077, %4076
  %4079 = shl i32 %4058, %4078
  %4080 = or i32 %4079, %4075
  store i32 %4080, i32* %114, align 4
  %4081 = add nsw i32 %4076, %4056
  store i32 %4081, i32* %111, align 4
  br label %.loopexit.i

; <label>:4082                                    ; preds = %bsW.exit21.i, %.lr.ph.i40
  %.pre.i18.i = phi i32 [ %4115, %bsW.exit21.i ], [ %.pre.i18.i.pre, %.lr.ph.i40 ]
  %4083 = phi i32 [ %4116, %bsW.exit21.i ], [ %.pre387.i, %.lr.ph.i40 ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %bsW.exit21.i ], [ %2429, %.lr.ph.i40 ]
  %4084 = getelementptr inbounds i16* %480, i64 %indvars.iv.i
  %4085 = load i16* %4084, align 2
  %4086 = zext i16 %4085 to i64
  %4087 = load i8* %2420, align 1
  %4088 = zext i8 %4087 to i64
  %4089 = getelementptr inbounds %struct.EState* %s, i64 0, i32 35, i64 %4088, i64 %4086
  %4090 = load i8* %4089, align 1
  %4091 = zext i8 %4090 to i32
  %4092 = getelementptr inbounds %struct.EState* %s, i64 0, i32 36, i64 %4088, i64 %4086
  %4093 = load i32* %4092, align 4
  %4094 = icmp sgt i32 %4083, 7
  br i1 %4094, label %.lr.ph.i20.i, label %bsW.exit21.i

.lr.ph.i20.i:                                     ; preds = %4082
  %.pre3.i19.i = load i32* %2064, align 4
  br label %4095

; <label>:4095                                    ; preds = %4095, %.lr.ph.i20.i
  %4096 = phi i32 [ %.pre3.i19.i, %.lr.ph.i20.i ], [ %4104, %4095 ]
  %4097 = phi i32 [ %.pre.i18.i, %.lr.ph.i20.i ], [ %4106, %4095 ]
  %4098 = lshr i32 %4097, 24
  %4099 = trunc i32 %4098 to i8
  %4100 = sext i32 %4096 to i64
  %4101 = load i8** %34, align 8
  %4102 = getelementptr inbounds i8* %4101, i64 %4100
  store i8 %4099, i8* %4102, align 1
  %4103 = load i32* %2064, align 4
  %4104 = add nsw i32 %4103, 1
  store i32 %4104, i32* %2064, align 4
  %4105 = load i32* %114, align 4
  %4106 = shl i32 %4105, 8
  store i32 %4106, i32* %114, align 4
  %4107 = load i32* %111, align 4
  %4108 = add nsw i32 %4107, -8
  store i32 %4108, i32* %111, align 4
  %4109 = icmp sgt i32 %4108, 7
  br i1 %4109, label %4095, label %bsW.exit21.i.loopexit

bsW.exit21.i.loopexit:                            ; preds = %4095
  %.lcssa1355 = phi i32 [ %4108, %4095 ]
  %.lcssa1354 = phi i32 [ %4106, %4095 ]
  br label %bsW.exit21.i

bsW.exit21.i:                                     ; preds = %bsW.exit21.i.loopexit, %4082
  %4110 = phi i32 [ %.pre.i18.i, %4082 ], [ %.lcssa1354, %bsW.exit21.i.loopexit ]
  %4111 = phi i32 [ %4083, %4082 ], [ %.lcssa1355, %bsW.exit21.i.loopexit ]
  %4112 = sub i32 32, %4091
  %4113 = sub i32 %4112, %4111
  %4114 = shl i32 %4093, %4113
  %4115 = or i32 %4114, %4110
  store i32 %4115, i32* %114, align 4
  %4116 = add nsw i32 %4111, %4091
  store i32 %4116, i32* %111, align 4
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %4117 = trunc i64 %indvars.iv.i to i32
  %4118 = icmp slt i32 %4117, %.11.i
  br i1 %4118, label %4082, label %.loopexit.i.loopexit

.loopexit.i.loopexit:                             ; preds = %bsW.exit21.i
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %bsW.exit27.i, %.preheader.i
  %4119 = add nsw i32 %.11.i, 1
  %indvars.iv.next287.i = add nuw nsw i64 %indvars.iv286.i, 1
  %4120 = load i32* %475, align 4
  %4121 = icmp slt i32 %4119, %4120
  br i1 %4121, label %.lr.ph166.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %.loopexit.i
  %indvars.iv.next287.i.lcssa = phi i64 [ %indvars.iv.next287.i, %.loopexit.i ]
  %4122 = trunc i64 %indvars.iv.next287.i.lcssa to i32
  br label %4123

; <label>:4123                                    ; preds = %._crit_edge.i, %2412
  %selCtr.0.lcssa.i = phi i32 [ %4122, %._crit_edge.i ], [ 0, %2412 ]
  %4124 = icmp eq i32 %selCtr.0.lcssa.i, %nSelectors.1.lcssa.i.lcssa
  br i1 %4124, label %4126, label %4125

; <label>:4125                                    ; preds = %4123
  call void @BZ2_bz__AssertH__fail(i32 3007) #2
  br label %4126

; <label>:4126                                    ; preds = %4125, %4123
  %4127 = load i32* %481, align 4
  %4128 = icmp sgt i32 %4127, 2
  br i1 %4128, label %4129, label %sendMTFValues.exit

; <label>:4129                                    ; preds = %4126
  %4130 = load %struct._IO_FILE** @stderr, align 8
  %4131 = load i32* %2064, align 4
  %4132 = sub nsw i32 %4131, %2413
  %4133 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4130, i8* getelementptr inbounds ([10 x i8]* @.str1075, i64 0, i64 0), i32 %4132) #12
  br label %sendMTFValues.exit

.lr.ph247.5.i:                                    ; preds = %.preheader135.i
  %scevgep363.i = getelementptr %struct.EState* %s, i64 0, i32 35, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep363.i, i8 15, i64 %494, i32 1, i1 false) #2
  %scevgep363.1.i = getelementptr %struct.EState* %s, i64 0, i32 35, i64 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep363.1.i, i8 15, i64 %494, i32 1, i1 false) #2
  %scevgep363.2.i = getelementptr %struct.EState* %s, i64 0, i32 35, i64 2, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep363.2.i, i8 15, i64 %494, i32 1, i1 false) #2
  %scevgep363.3.i = getelementptr %struct.EState* %s, i64 0, i32 35, i64 3, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep363.3.i, i8 15, i64 %494, i32 1, i1 false) #2
  %scevgep363.4.i = getelementptr %struct.EState* %s, i64 0, i32 35, i64 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep363.4.i, i8 15, i64 %494, i32 1, i1 false) #2
  %scevgep363.5.i = getelementptr %struct.EState* %s, i64 0, i32 35, i64 5, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep363.5.i, i8 15, i64 %494, i32 1, i1 false) #2
  br label %.preheader135.5369.i

.preheader135.5369.i:                             ; preds = %.lr.ph247.5.i, %.preheader135.i
  %4134 = load i32* %475, align 4
  %4135 = icmp sgt i32 %4134, 0
  br i1 %4135, label %496, label %495

sendMTFValues.exit:                               ; preds = %4129, %4126, %107
  %4136 = icmp eq i8 %is_last_block, 0
  br i1 %4136, label %bsFinishWrite.exit, label %4137

; <label>:4137                                    ; preds = %sendMTFValues.exit
  %4138 = getelementptr inbounds %struct.EState* %s, i64 0, i32 25
  %4139 = load i32* %4138, align 4
  %4140 = icmp sgt i32 %4139, 7
  %4141 = getelementptr inbounds %struct.EState* %s, i64 0, i32 24
  br i1 %4140, label %.lr.ph.i.i35, label %._crit_edge4.i.i32

._crit_edge4.i.i32:                               ; preds = %4137
  %.pre5.i.i31 = load i32* %4141, align 4
  br label %bsPutUChar.exit36

.lr.ph.i.i35:                                     ; preds = %4137
  %4142 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre.i.i33 = load i32* %4141, align 4
  %.pre3.i.i34 = load i32* %4142, align 4
  br label %4143

; <label>:4143                                    ; preds = %4143, %.lr.ph.i.i35
  %4144 = phi i32 [ %.pre3.i.i34, %.lr.ph.i.i35 ], [ %4152, %4143 ]
  %4145 = phi i32 [ %.pre.i.i33, %.lr.ph.i.i35 ], [ %4154, %4143 ]
  %4146 = lshr i32 %4145, 24
  %4147 = trunc i32 %4146 to i8
  %4148 = sext i32 %4144 to i64
  %4149 = load i8** %34, align 8
  %4150 = getelementptr inbounds i8* %4149, i64 %4148
  store i8 %4147, i8* %4150, align 1
  %4151 = load i32* %4142, align 4
  %4152 = add nsw i32 %4151, 1
  store i32 %4152, i32* %4142, align 4
  %4153 = load i32* %4141, align 4
  %4154 = shl i32 %4153, 8
  store i32 %4154, i32* %4141, align 4
  %4155 = load i32* %4138, align 4
  %4156 = add nsw i32 %4155, -8
  store i32 %4156, i32* %4138, align 4
  %4157 = icmp sgt i32 %4156, 7
  br i1 %4157, label %4143, label %bsPutUChar.exit36.loopexit

bsPutUChar.exit36.loopexit:                       ; preds = %4143
  %.lcssa1353 = phi i32 [ %4156, %4143 ]
  %.lcssa1352 = phi i32 [ %4154, %4143 ]
  br label %bsPutUChar.exit36

bsPutUChar.exit36:                                ; preds = %bsPutUChar.exit36.loopexit, %._crit_edge4.i.i32
  %4158 = phi i32 [ %.pre5.i.i31, %._crit_edge4.i.i32 ], [ %.lcssa1352, %bsPutUChar.exit36.loopexit ]
  %4159 = phi i32 [ %4139, %._crit_edge4.i.i32 ], [ %.lcssa1353, %bsPutUChar.exit36.loopexit ]
  %4160 = sub i32 24, %4159
  %4161 = shl i32 23, %4160
  %4162 = or i32 %4161, %4158
  store i32 %4162, i32* %4141, align 4
  %4163 = add nsw i32 %4159, 8
  store i32 %4163, i32* %4138, align 4
  %4164 = icmp sgt i32 %4163, 7
  br i1 %4164, label %.lr.ph.i.i29, label %bsPutUChar.exit30

.lr.ph.i.i29:                                     ; preds = %bsPutUChar.exit36
  %4165 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i28 = load i32* %4165, align 4
  br label %4166

; <label>:4166                                    ; preds = %4166, %.lr.ph.i.i29
  %4167 = phi i32 [ %.pre3.i.i28, %.lr.ph.i.i29 ], [ %4175, %4166 ]
  %4168 = phi i32 [ %4162, %.lr.ph.i.i29 ], [ %4177, %4166 ]
  %4169 = lshr i32 %4168, 24
  %4170 = trunc i32 %4169 to i8
  %4171 = sext i32 %4167 to i64
  %4172 = load i8** %34, align 8
  %4173 = getelementptr inbounds i8* %4172, i64 %4171
  store i8 %4170, i8* %4173, align 1
  %4174 = load i32* %4165, align 4
  %4175 = add nsw i32 %4174, 1
  store i32 %4175, i32* %4165, align 4
  %4176 = load i32* %4141, align 4
  %4177 = shl i32 %4176, 8
  store i32 %4177, i32* %4141, align 4
  %4178 = load i32* %4138, align 4
  %4179 = add nsw i32 %4178, -8
  store i32 %4179, i32* %4138, align 4
  %4180 = icmp sgt i32 %4179, 7
  br i1 %4180, label %4166, label %bsPutUChar.exit30.loopexit

bsPutUChar.exit30.loopexit:                       ; preds = %4166
  %.lcssa1351 = phi i32 [ %4179, %4166 ]
  %.lcssa1350 = phi i32 [ %4177, %4166 ]
  br label %bsPutUChar.exit30

bsPutUChar.exit30:                                ; preds = %bsPutUChar.exit30.loopexit, %bsPutUChar.exit36
  %4181 = phi i32 [ %4162, %bsPutUChar.exit36 ], [ %.lcssa1350, %bsPutUChar.exit30.loopexit ]
  %4182 = phi i32 [ %4163, %bsPutUChar.exit36 ], [ %.lcssa1351, %bsPutUChar.exit30.loopexit ]
  %4183 = sub i32 24, %4182
  %4184 = shl i32 114, %4183
  %4185 = or i32 %4184, %4181
  store i32 %4185, i32* %4141, align 4
  %4186 = add nsw i32 %4182, 8
  store i32 %4186, i32* %4138, align 4
  %4187 = icmp sgt i32 %4186, 7
  br i1 %4187, label %.lr.ph.i.i23, label %bsPutUChar.exit24

.lr.ph.i.i23:                                     ; preds = %bsPutUChar.exit30
  %4188 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i22 = load i32* %4188, align 4
  br label %4189

; <label>:4189                                    ; preds = %4189, %.lr.ph.i.i23
  %4190 = phi i32 [ %.pre3.i.i22, %.lr.ph.i.i23 ], [ %4198, %4189 ]
  %4191 = phi i32 [ %4185, %.lr.ph.i.i23 ], [ %4200, %4189 ]
  %4192 = lshr i32 %4191, 24
  %4193 = trunc i32 %4192 to i8
  %4194 = sext i32 %4190 to i64
  %4195 = load i8** %34, align 8
  %4196 = getelementptr inbounds i8* %4195, i64 %4194
  store i8 %4193, i8* %4196, align 1
  %4197 = load i32* %4188, align 4
  %4198 = add nsw i32 %4197, 1
  store i32 %4198, i32* %4188, align 4
  %4199 = load i32* %4141, align 4
  %4200 = shl i32 %4199, 8
  store i32 %4200, i32* %4141, align 4
  %4201 = load i32* %4138, align 4
  %4202 = add nsw i32 %4201, -8
  store i32 %4202, i32* %4138, align 4
  %4203 = icmp sgt i32 %4202, 7
  br i1 %4203, label %4189, label %bsPutUChar.exit24.loopexit

bsPutUChar.exit24.loopexit:                       ; preds = %4189
  %.lcssa1349 = phi i32 [ %4202, %4189 ]
  %.lcssa1348 = phi i32 [ %4200, %4189 ]
  br label %bsPutUChar.exit24

bsPutUChar.exit24:                                ; preds = %bsPutUChar.exit24.loopexit, %bsPutUChar.exit30
  %4204 = phi i32 [ %4185, %bsPutUChar.exit30 ], [ %.lcssa1348, %bsPutUChar.exit24.loopexit ]
  %4205 = phi i32 [ %4186, %bsPutUChar.exit30 ], [ %.lcssa1349, %bsPutUChar.exit24.loopexit ]
  %4206 = sub i32 24, %4205
  %4207 = shl i32 69, %4206
  %4208 = or i32 %4207, %4204
  store i32 %4208, i32* %4141, align 4
  %4209 = add nsw i32 %4205, 8
  store i32 %4209, i32* %4138, align 4
  %4210 = icmp sgt i32 %4209, 7
  br i1 %4210, label %.lr.ph.i.i17, label %bsPutUChar.exit18

.lr.ph.i.i17:                                     ; preds = %bsPutUChar.exit24
  %4211 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i16 = load i32* %4211, align 4
  br label %4212

; <label>:4212                                    ; preds = %4212, %.lr.ph.i.i17
  %4213 = phi i32 [ %.pre3.i.i16, %.lr.ph.i.i17 ], [ %4221, %4212 ]
  %4214 = phi i32 [ %4208, %.lr.ph.i.i17 ], [ %4223, %4212 ]
  %4215 = lshr i32 %4214, 24
  %4216 = trunc i32 %4215 to i8
  %4217 = sext i32 %4213 to i64
  %4218 = load i8** %34, align 8
  %4219 = getelementptr inbounds i8* %4218, i64 %4217
  store i8 %4216, i8* %4219, align 1
  %4220 = load i32* %4211, align 4
  %4221 = add nsw i32 %4220, 1
  store i32 %4221, i32* %4211, align 4
  %4222 = load i32* %4141, align 4
  %4223 = shl i32 %4222, 8
  store i32 %4223, i32* %4141, align 4
  %4224 = load i32* %4138, align 4
  %4225 = add nsw i32 %4224, -8
  store i32 %4225, i32* %4138, align 4
  %4226 = icmp sgt i32 %4225, 7
  br i1 %4226, label %4212, label %bsPutUChar.exit18.loopexit

bsPutUChar.exit18.loopexit:                       ; preds = %4212
  %.lcssa1347 = phi i32 [ %4225, %4212 ]
  %.lcssa1346 = phi i32 [ %4223, %4212 ]
  br label %bsPutUChar.exit18

bsPutUChar.exit18:                                ; preds = %bsPutUChar.exit18.loopexit, %bsPutUChar.exit24
  %4227 = phi i32 [ %4208, %bsPutUChar.exit24 ], [ %.lcssa1346, %bsPutUChar.exit18.loopexit ]
  %4228 = phi i32 [ %4209, %bsPutUChar.exit24 ], [ %.lcssa1347, %bsPutUChar.exit18.loopexit ]
  %4229 = sub i32 24, %4228
  %4230 = shl i32 56, %4229
  %4231 = or i32 %4230, %4227
  store i32 %4231, i32* %4141, align 4
  %4232 = add nsw i32 %4228, 8
  store i32 %4232, i32* %4138, align 4
  %4233 = icmp sgt i32 %4232, 7
  br i1 %4233, label %.lr.ph.i.i11, label %bsPutUChar.exit12

.lr.ph.i.i11:                                     ; preds = %bsPutUChar.exit18
  %4234 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i10 = load i32* %4234, align 4
  br label %4235

; <label>:4235                                    ; preds = %4235, %.lr.ph.i.i11
  %4236 = phi i32 [ %.pre3.i.i10, %.lr.ph.i.i11 ], [ %4244, %4235 ]
  %4237 = phi i32 [ %4231, %.lr.ph.i.i11 ], [ %4246, %4235 ]
  %4238 = lshr i32 %4237, 24
  %4239 = trunc i32 %4238 to i8
  %4240 = sext i32 %4236 to i64
  %4241 = load i8** %34, align 8
  %4242 = getelementptr inbounds i8* %4241, i64 %4240
  store i8 %4239, i8* %4242, align 1
  %4243 = load i32* %4234, align 4
  %4244 = add nsw i32 %4243, 1
  store i32 %4244, i32* %4234, align 4
  %4245 = load i32* %4141, align 4
  %4246 = shl i32 %4245, 8
  store i32 %4246, i32* %4141, align 4
  %4247 = load i32* %4138, align 4
  %4248 = add nsw i32 %4247, -8
  store i32 %4248, i32* %4138, align 4
  %4249 = icmp sgt i32 %4248, 7
  br i1 %4249, label %4235, label %bsPutUChar.exit12.loopexit

bsPutUChar.exit12.loopexit:                       ; preds = %4235
  %.lcssa1345 = phi i32 [ %4248, %4235 ]
  %.lcssa1344 = phi i32 [ %4246, %4235 ]
  br label %bsPutUChar.exit12

bsPutUChar.exit12:                                ; preds = %bsPutUChar.exit12.loopexit, %bsPutUChar.exit18
  %4250 = phi i32 [ %4231, %bsPutUChar.exit18 ], [ %.lcssa1344, %bsPutUChar.exit12.loopexit ]
  %4251 = phi i32 [ %4232, %bsPutUChar.exit18 ], [ %.lcssa1345, %bsPutUChar.exit12.loopexit ]
  %4252 = sub i32 24, %4251
  %4253 = shl i32 80, %4252
  %4254 = or i32 %4253, %4250
  store i32 %4254, i32* %4141, align 4
  %4255 = add nsw i32 %4251, 8
  store i32 %4255, i32* %4138, align 4
  %4256 = icmp sgt i32 %4255, 7
  br i1 %4256, label %.lr.ph.i.i5, label %bsPutUChar.exit6

.lr.ph.i.i5:                                      ; preds = %bsPutUChar.exit12
  %4257 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre3.i.i4 = load i32* %4257, align 4
  br label %4258

; <label>:4258                                    ; preds = %4258, %.lr.ph.i.i5
  %4259 = phi i32 [ %.pre3.i.i4, %.lr.ph.i.i5 ], [ %4267, %4258 ]
  %4260 = phi i32 [ %4254, %.lr.ph.i.i5 ], [ %4269, %4258 ]
  %4261 = lshr i32 %4260, 24
  %4262 = trunc i32 %4261 to i8
  %4263 = sext i32 %4259 to i64
  %4264 = load i8** %34, align 8
  %4265 = getelementptr inbounds i8* %4264, i64 %4263
  store i8 %4262, i8* %4265, align 1
  %4266 = load i32* %4257, align 4
  %4267 = add nsw i32 %4266, 1
  store i32 %4267, i32* %4257, align 4
  %4268 = load i32* %4141, align 4
  %4269 = shl i32 %4268, 8
  store i32 %4269, i32* %4141, align 4
  %4270 = load i32* %4138, align 4
  %4271 = add nsw i32 %4270, -8
  store i32 %4271, i32* %4138, align 4
  %4272 = icmp sgt i32 %4271, 7
  br i1 %4272, label %4258, label %bsPutUChar.exit6.loopexit

bsPutUChar.exit6.loopexit:                        ; preds = %4258
  %.lcssa1343 = phi i32 [ %4271, %4258 ]
  %.lcssa = phi i32 [ %4269, %4258 ]
  br label %bsPutUChar.exit6

bsPutUChar.exit6:                                 ; preds = %bsPutUChar.exit6.loopexit, %bsPutUChar.exit12
  %4273 = phi i32 [ %4254, %bsPutUChar.exit12 ], [ %.lcssa, %bsPutUChar.exit6.loopexit ]
  %4274 = phi i32 [ %4255, %bsPutUChar.exit12 ], [ %.lcssa1343, %bsPutUChar.exit6.loopexit ]
  %4275 = sub i32 24, %4274
  %4276 = shl i32 144, %4275
  %4277 = or i32 %4276, %4273
  store i32 %4277, i32* %4141, align 4
  %4278 = add nsw i32 %4274, 8
  store i32 %4278, i32* %4138, align 4
  %4279 = getelementptr inbounds %struct.EState* %s, i64 0, i32 27
  %4280 = load i32* %4279, align 4
  call fastcc void @bsPutUInt32(%struct.EState* %s, i32 %4280)
  %4281 = getelementptr inbounds %struct.EState* %s, i64 0, i32 28
  %4282 = load i32* %4281, align 4
  %4283 = icmp sgt i32 %4282, 1
  br i1 %4283, label %4284, label %4288

; <label>:4284                                    ; preds = %bsPutUChar.exit6
  %4285 = load %struct._IO_FILE** @stderr, align 8
  %4286 = load i32* %4279, align 4
  %4287 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4285, i8* getelementptr inbounds ([36 x i8]* @.str167, i64 0, i64 0), i32 %4286) #12
  br label %4288

; <label>:4288                                    ; preds = %4284, %bsPutUChar.exit6
  %4289 = load i32* %4138, align 4
  %4290 = icmp sgt i32 %4289, 0
  br i1 %4290, label %.lr.ph.i, label %bsFinishWrite.exit

.lr.ph.i:                                         ; preds = %4288
  %4291 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %.pre.i = load i32* %4141, align 4
  %.pre1.i = load i32* %4291, align 4
  br label %4292

; <label>:4292                                    ; preds = %4292, %.lr.ph.i
  %4293 = phi i32 [ %.pre1.i, %.lr.ph.i ], [ %4301, %4292 ]
  %4294 = phi i32 [ %.pre.i, %.lr.ph.i ], [ %4303, %4292 ]
  %4295 = lshr i32 %4294, 24
  %4296 = trunc i32 %4295 to i8
  %4297 = sext i32 %4293 to i64
  %4298 = load i8** %34, align 8
  %4299 = getelementptr inbounds i8* %4298, i64 %4297
  store i8 %4296, i8* %4299, align 1
  %4300 = load i32* %4291, align 4
  %4301 = add nsw i32 %4300, 1
  store i32 %4301, i32* %4291, align 4
  %4302 = load i32* %4141, align 4
  %4303 = shl i32 %4302, 8
  store i32 %4303, i32* %4141, align 4
  %4304 = load i32* %4138, align 4
  %4305 = add nsw i32 %4304, -8
  store i32 %4305, i32* %4138, align 4
  %4306 = icmp sgt i32 %4305, 0
  br i1 %4306, label %4292, label %bsFinishWrite.exit.loopexit

bsFinishWrite.exit.loopexit:                      ; preds = %4292
  br label %bsFinishWrite.exit

bsFinishWrite.exit:                               ; preds = %bsFinishWrite.exit.loopexit, %4288, %sendMTFValues.exit
  ret void

; <label>:4307                                    ; preds = %2057
  store i8 1, i8* %2049, align 1
  br label %4308

; <label>:4308                                    ; preds = %4307, %2057
  %indvars.iv.next302.i.1 = add nuw nsw i64 %indvars.iv.next302.i, 1
  %exitcond303.i.1 = icmp eq i64 %indvars.iv.next302.i.1, 16
  br i1 %exitcond303.i.1, label %2062, label %2051

; <label>:4309                                    ; preds = %317
  %4310 = trunc i32 %318 to i8
  %4311 = getelementptr inbounds %struct.EState* %s, i64 0, i32 23, i64 %indvars.iv.next.i.i
  store i8 %4310, i8* %4311, align 1
  %4312 = load i32* %306, align 4
  %4313 = add nsw i32 %4312, 1
  store i32 %4313, i32* %306, align 4
  br label %4314

; <label>:4314                                    ; preds = %4309, %317
  %4315 = phi i32 [ %318, %317 ], [ %4313, %4309 ]
  %indvars.iv.next.i.i.1 = add nuw nsw i64 %indvars.iv.next.i.i, 1
  %exitcond.i.i.1 = icmp eq i64 %indvars.iv.next.i.i.1, 256
  br i1 %exitcond.i.i.1, label %makeMaps_e.exit.i, label %307
}

; Function Attrs: nounwind uwtable
define internal fastcc void @bsPutUInt32(%struct.EState* nocapture %s, i32 %u) #0 {
  %1 = lshr i32 %u, 24
  %2 = getelementptr inbounds %struct.EState* %s, i64 0, i32 25
  %3 = load i32* %2, align 4
  %4 = icmp sgt i32 %3, 7
  %5 = getelementptr inbounds %struct.EState* %s, i64 0, i32 24
  br i1 %4, label %.lr.ph.i, label %._crit_edge4.i

._crit_edge4.i:                                   ; preds = %0
  %.pre5.i = load i32* %5, align 4
  br label %bsW.exit

.lr.ph.i:                                         ; preds = %0
  %6 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %7 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre.i = load i32* %5, align 4
  %.pre3.i = load i32* %6, align 4
  br label %8

; <label>:8                                       ; preds = %8, %.lr.ph.i
  %9 = phi i32 [ %.pre3.i, %.lr.ph.i ], [ %17, %8 ]
  %10 = phi i32 [ %.pre.i, %.lr.ph.i ], [ %19, %8 ]
  %11 = lshr i32 %10, 24
  %12 = trunc i32 %11 to i8
  %13 = sext i32 %9 to i64
  %14 = load i8** %7, align 8
  %15 = getelementptr inbounds i8* %14, i64 %13
  store i8 %12, i8* %15, align 1
  %16 = load i32* %6, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %6, align 4
  %18 = load i32* %5, align 4
  %19 = shl i32 %18, 8
  store i32 %19, i32* %5, align 4
  %20 = load i32* %2, align 4
  %21 = add nsw i32 %20, -8
  store i32 %21, i32* %2, align 4
  %22 = icmp sgt i32 %21, 7
  br i1 %22, label %8, label %bsW.exit.loopexit

bsW.exit.loopexit:                                ; preds = %8
  %.lcssa46 = phi i32 [ %21, %8 ]
  %.lcssa45 = phi i32 [ %19, %8 ]
  br label %bsW.exit

bsW.exit:                                         ; preds = %bsW.exit.loopexit, %._crit_edge4.i
  %23 = phi i32 [ %.pre5.i, %._crit_edge4.i ], [ %.lcssa45, %bsW.exit.loopexit ]
  %24 = phi i32 [ %3, %._crit_edge4.i ], [ %.lcssa46, %bsW.exit.loopexit ]
  %25 = sub i32 24, %24
  %26 = shl i32 %1, %25
  %27 = or i32 %26, %23
  store i32 %27, i32* %5, align 4
  %28 = add nsw i32 %24, 8
  store i32 %28, i32* %2, align 4
  %29 = lshr i32 %u, 16
  %30 = and i32 %29, 255
  %31 = icmp sgt i32 %28, 7
  br i1 %31, label %.lr.ph.i17, label %bsW.exit18

.lr.ph.i17:                                       ; preds = %bsW.exit
  %32 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %33 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre3.i16 = load i32* %32, align 4
  br label %34

; <label>:34                                      ; preds = %34, %.lr.ph.i17
  %35 = phi i32 [ %.pre3.i16, %.lr.ph.i17 ], [ %43, %34 ]
  %36 = phi i32 [ %27, %.lr.ph.i17 ], [ %45, %34 ]
  %37 = lshr i32 %36, 24
  %38 = trunc i32 %37 to i8
  %39 = sext i32 %35 to i64
  %40 = load i8** %33, align 8
  %41 = getelementptr inbounds i8* %40, i64 %39
  store i8 %38, i8* %41, align 1
  %42 = load i32* %32, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %32, align 4
  %44 = load i32* %5, align 4
  %45 = shl i32 %44, 8
  store i32 %45, i32* %5, align 4
  %46 = load i32* %2, align 4
  %47 = add nsw i32 %46, -8
  store i32 %47, i32* %2, align 4
  %48 = icmp sgt i32 %47, 7
  br i1 %48, label %34, label %bsW.exit18.loopexit

bsW.exit18.loopexit:                              ; preds = %34
  %.lcssa44 = phi i32 [ %47, %34 ]
  %.lcssa43 = phi i32 [ %45, %34 ]
  br label %bsW.exit18

bsW.exit18:                                       ; preds = %bsW.exit18.loopexit, %bsW.exit
  %49 = phi i32 [ %27, %bsW.exit ], [ %.lcssa43, %bsW.exit18.loopexit ]
  %50 = phi i32 [ %28, %bsW.exit ], [ %.lcssa44, %bsW.exit18.loopexit ]
  %51 = sub i32 24, %50
  %52 = shl i32 %30, %51
  %53 = or i32 %52, %49
  store i32 %53, i32* %5, align 4
  %54 = add nsw i32 %50, 8
  store i32 %54, i32* %2, align 4
  %55 = lshr i32 %u, 8
  %56 = and i32 %55, 255
  %57 = icmp sgt i32 %54, 7
  br i1 %57, label %.lr.ph.i11, label %bsW.exit12

.lr.ph.i11:                                       ; preds = %bsW.exit18
  %58 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %59 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre3.i10 = load i32* %58, align 4
  br label %60

; <label>:60                                      ; preds = %60, %.lr.ph.i11
  %61 = phi i32 [ %.pre3.i10, %.lr.ph.i11 ], [ %69, %60 ]
  %62 = phi i32 [ %53, %.lr.ph.i11 ], [ %71, %60 ]
  %63 = lshr i32 %62, 24
  %64 = trunc i32 %63 to i8
  %65 = sext i32 %61 to i64
  %66 = load i8** %59, align 8
  %67 = getelementptr inbounds i8* %66, i64 %65
  store i8 %64, i8* %67, align 1
  %68 = load i32* %58, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %58, align 4
  %70 = load i32* %5, align 4
  %71 = shl i32 %70, 8
  store i32 %71, i32* %5, align 4
  %72 = load i32* %2, align 4
  %73 = add nsw i32 %72, -8
  store i32 %73, i32* %2, align 4
  %74 = icmp sgt i32 %73, 7
  br i1 %74, label %60, label %bsW.exit12.loopexit

bsW.exit12.loopexit:                              ; preds = %60
  %.lcssa42 = phi i32 [ %73, %60 ]
  %.lcssa41 = phi i32 [ %71, %60 ]
  br label %bsW.exit12

bsW.exit12:                                       ; preds = %bsW.exit12.loopexit, %bsW.exit18
  %75 = phi i32 [ %53, %bsW.exit18 ], [ %.lcssa41, %bsW.exit12.loopexit ]
  %76 = phi i32 [ %54, %bsW.exit18 ], [ %.lcssa42, %bsW.exit12.loopexit ]
  %77 = sub i32 24, %76
  %78 = shl i32 %56, %77
  %79 = or i32 %78, %75
  store i32 %79, i32* %5, align 4
  %80 = add nsw i32 %76, 8
  store i32 %80, i32* %2, align 4
  %81 = and i32 %u, 255
  %82 = icmp sgt i32 %80, 7
  br i1 %82, label %.lr.ph.i5, label %bsW.exit6

.lr.ph.i5:                                        ; preds = %bsW.exit12
  %83 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %84 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre3.i4 = load i32* %83, align 4
  br label %85

; <label>:85                                      ; preds = %85, %.lr.ph.i5
  %86 = phi i32 [ %.pre3.i4, %.lr.ph.i5 ], [ %94, %85 ]
  %87 = phi i32 [ %79, %.lr.ph.i5 ], [ %96, %85 ]
  %88 = lshr i32 %87, 24
  %89 = trunc i32 %88 to i8
  %90 = sext i32 %86 to i64
  %91 = load i8** %84, align 8
  %92 = getelementptr inbounds i8* %91, i64 %90
  store i8 %89, i8* %92, align 1
  %93 = load i32* %83, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %83, align 4
  %95 = load i32* %5, align 4
  %96 = shl i32 %95, 8
  store i32 %96, i32* %5, align 4
  %97 = load i32* %2, align 4
  %98 = add nsw i32 %97, -8
  store i32 %98, i32* %2, align 4
  %99 = icmp sgt i32 %98, 7
  br i1 %99, label %85, label %bsW.exit6.loopexit

bsW.exit6.loopexit:                               ; preds = %85
  %.lcssa40 = phi i32 [ %98, %85 ]
  %.lcssa = phi i32 [ %96, %85 ]
  br label %bsW.exit6

bsW.exit6:                                        ; preds = %bsW.exit6.loopexit, %bsW.exit12
  %100 = phi i32 [ %79, %bsW.exit12 ], [ %.lcssa, %bsW.exit6.loopexit ]
  %101 = phi i32 [ %80, %bsW.exit12 ], [ %.lcssa40, %bsW.exit6.loopexit ]
  %102 = sub i32 24, %101
  %103 = shl i32 %81, %102
  %104 = or i32 %103, %100
  store i32 %104, i32* %5, align 4
  %105 = add nsw i32 %101, 8
  store i32 %105, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_decompress(%struct.DState* %s) #0 {
  %pos = alloca [6 x i8], align 1
  %1 = getelementptr inbounds %struct.DState* %s, i64 0, i32 0
  %2 = load %struct.bz_stream** %1, align 8
  %3 = getelementptr inbounds %struct.DState* %s, i64 0, i32 1
  %4 = load i32* %3, align 4
  %5 = icmp eq i32 %4, 10
  %6 = getelementptr inbounds %struct.DState* %s, i64 0, i32 40
  br i1 %5, label %7, label %._crit_edge742

._crit_edge742:                                   ; preds = %0
  %.pre = load i32* %6, align 4
  %.phi.trans.insert743 = getelementptr inbounds %struct.DState* %s, i64 0, i32 41
  %.pre744 = load i32* %.phi.trans.insert743, align 4
  %.phi.trans.insert745 = getelementptr inbounds %struct.DState* %s, i64 0, i32 42
  %.pre746 = load i32* %.phi.trans.insert745, align 4
  %.phi.trans.insert747 = getelementptr inbounds %struct.DState* %s, i64 0, i32 43
  %.pre748 = load i32* %.phi.trans.insert747, align 4
  %.phi.trans.insert749 = getelementptr inbounds %struct.DState* %s, i64 0, i32 44
  %.pre750 = load i32* %.phi.trans.insert749, align 4
  %.phi.trans.insert751 = getelementptr inbounds %struct.DState* %s, i64 0, i32 45
  %.pre752 = load i32* %.phi.trans.insert751, align 4
  %.phi.trans.insert753 = getelementptr inbounds %struct.DState* %s, i64 0, i32 46
  %.pre754 = load i32* %.phi.trans.insert753, align 4
  %.phi.trans.insert755 = getelementptr inbounds %struct.DState* %s, i64 0, i32 47
  %.pre756 = load i32* %.phi.trans.insert755, align 4
  %.phi.trans.insert757 = getelementptr inbounds %struct.DState* %s, i64 0, i32 48
  %.pre758 = load i32* %.phi.trans.insert757, align 4
  %.phi.trans.insert759 = getelementptr inbounds %struct.DState* %s, i64 0, i32 49
  %.pre760 = load i32* %.phi.trans.insert759, align 4
  %.phi.trans.insert761 = getelementptr inbounds %struct.DState* %s, i64 0, i32 50
  %.pre762 = load i32* %.phi.trans.insert761, align 4
  %.phi.trans.insert763 = getelementptr inbounds %struct.DState* %s, i64 0, i32 51
  %.pre764 = load i32* %.phi.trans.insert763, align 4
  %.phi.trans.insert765 = getelementptr inbounds %struct.DState* %s, i64 0, i32 52
  %.pre766 = load i32* %.phi.trans.insert765, align 4
  %.phi.trans.insert767 = getelementptr inbounds %struct.DState* %s, i64 0, i32 53
  %.pre768 = load i32* %.phi.trans.insert767, align 4
  %.phi.trans.insert769 = getelementptr inbounds %struct.DState* %s, i64 0, i32 54
  %.pre770 = load i32* %.phi.trans.insert769, align 4
  %.phi.trans.insert771 = getelementptr inbounds %struct.DState* %s, i64 0, i32 55
  %.pre772 = load i32* %.phi.trans.insert771, align 4
  %.phi.trans.insert773 = getelementptr inbounds %struct.DState* %s, i64 0, i32 56
  %.pre774 = load i32* %.phi.trans.insert773, align 4
  %.phi.trans.insert775 = getelementptr inbounds %struct.DState* %s, i64 0, i32 57
  %.pre776 = load i32* %.phi.trans.insert775, align 4
  %.phi.trans.insert777 = getelementptr inbounds %struct.DState* %s, i64 0, i32 58
  %.pre778 = load i32* %.phi.trans.insert777, align 4
  %.phi.trans.insert779 = getelementptr inbounds %struct.DState* %s, i64 0, i32 59
  %.pre780 = load i32* %.phi.trans.insert779, align 4
  %.phi.trans.insert781 = getelementptr inbounds %struct.DState* %s, i64 0, i32 60
  %.pre782 = load i32* %.phi.trans.insert781, align 4
  %.phi.trans.insert783 = getelementptr inbounds %struct.DState* %s, i64 0, i32 61
  %.pre784 = load i32** %.phi.trans.insert783, align 8
  %.phi.trans.insert785 = getelementptr inbounds %struct.DState* %s, i64 0, i32 62
  %.pre786 = load i32** %.phi.trans.insert785, align 8
  %.phi.trans.insert787 = getelementptr inbounds %struct.DState* %s, i64 0, i32 63
  %.pre788 = load i32** %.phi.trans.insert787, align 8
  br label %9

; <label>:7                                       ; preds = %0
  %8 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 108, i32 4, i1 false)
  br label %9

; <label>:9                                       ; preds = %7, %._crit_edge742
  %10 = phi i32* [ %.pre788, %._crit_edge742 ], [ null, %7 ]
  %11 = phi i32* [ %.pre786, %._crit_edge742 ], [ null, %7 ]
  %12 = phi i32* [ %.pre784, %._crit_edge742 ], [ null, %7 ]
  %13 = phi i32 [ %.pre782, %._crit_edge742 ], [ 0, %7 ]
  %14 = phi i32 [ %.pre780, %._crit_edge742 ], [ 0, %7 ]
  %15 = phi i32 [ %.pre778, %._crit_edge742 ], [ 0, %7 ]
  %16 = phi i32 [ %.pre776, %._crit_edge742 ], [ 0, %7 ]
  %17 = phi i32 [ %.pre774, %._crit_edge742 ], [ 0, %7 ]
  %18 = phi i32 [ %.pre772, %._crit_edge742 ], [ 0, %7 ]
  %19 = phi i32 [ %.pre770, %._crit_edge742 ], [ 0, %7 ]
  %20 = phi i32 [ %.pre768, %._crit_edge742 ], [ 0, %7 ]
  %21 = phi i32 [ %.pre766, %._crit_edge742 ], [ 0, %7 ]
  %22 = phi i32 [ %.pre764, %._crit_edge742 ], [ 0, %7 ]
  %23 = phi i32 [ %.pre762, %._crit_edge742 ], [ 0, %7 ]
  %24 = phi i32 [ %.pre760, %._crit_edge742 ], [ 0, %7 ]
  %25 = phi i32 [ %.pre758, %._crit_edge742 ], [ 0, %7 ]
  %26 = phi i32 [ %.pre756, %._crit_edge742 ], [ 0, %7 ]
  %27 = phi i32 [ %.pre754, %._crit_edge742 ], [ 0, %7 ]
  %28 = phi i32 [ %.pre752, %._crit_edge742 ], [ 0, %7 ]
  %29 = phi i32 [ %.pre750, %._crit_edge742 ], [ 0, %7 ]
  %30 = phi i32 [ %.pre748, %._crit_edge742 ], [ 0, %7 ]
  %31 = phi i32 [ %.pre746, %._crit_edge742 ], [ 0, %7 ]
  %32 = phi i32 [ %.pre744, %._crit_edge742 ], [ 0, %7 ]
  %33 = phi i32 [ %.pre, %._crit_edge742 ], [ 0, %7 ]
  %34 = getelementptr inbounds %struct.DState* %s, i64 0, i32 40
  %35 = getelementptr inbounds %struct.DState* %s, i64 0, i32 41
  %36 = getelementptr inbounds %struct.DState* %s, i64 0, i32 42
  %37 = getelementptr inbounds %struct.DState* %s, i64 0, i32 43
  %38 = getelementptr inbounds %struct.DState* %s, i64 0, i32 44
  %39 = getelementptr inbounds %struct.DState* %s, i64 0, i32 45
  %40 = getelementptr inbounds %struct.DState* %s, i64 0, i32 46
  %41 = getelementptr inbounds %struct.DState* %s, i64 0, i32 47
  %42 = getelementptr inbounds %struct.DState* %s, i64 0, i32 48
  %43 = getelementptr inbounds %struct.DState* %s, i64 0, i32 49
  %44 = getelementptr inbounds %struct.DState* %s, i64 0, i32 50
  %45 = getelementptr inbounds %struct.DState* %s, i64 0, i32 51
  %46 = getelementptr inbounds %struct.DState* %s, i64 0, i32 52
  %47 = getelementptr inbounds %struct.DState* %s, i64 0, i32 53
  %48 = getelementptr inbounds %struct.DState* %s, i64 0, i32 54
  %49 = getelementptr inbounds %struct.DState* %s, i64 0, i32 55
  %50 = getelementptr inbounds %struct.DState* %s, i64 0, i32 56
  %51 = getelementptr inbounds %struct.DState* %s, i64 0, i32 57
  %52 = getelementptr inbounds %struct.DState* %s, i64 0, i32 58
  %53 = getelementptr inbounds %struct.DState* %s, i64 0, i32 59
  %54 = getelementptr inbounds %struct.DState* %s, i64 0, i32 60
  %55 = getelementptr inbounds %struct.DState* %s, i64 0, i32 61
  %56 = getelementptr inbounds %struct.DState* %s, i64 0, i32 62
  %57 = getelementptr inbounds %struct.DState* %s, i64 0, i32 63
  switch i32 %4, label %2721 [
    i32 10, label %58
    i32 11, label %._crit_edge790
    i32 12, label %._crit_edge793
    i32 13, label %._crit_edge796
    i32 14, label %._crit_edge927
    i32 15, label %._crit_edge826
    i32 16, label %._crit_edge829
    i32 17, label %._crit_edge832
    i32 18, label %._crit_edge835
    i32 19, label %._crit_edge838
    i32 20, label %._crit_edge911
    i32 21, label %._crit_edge841
    i32 22, label %._crit_edge844
    i32 23, label %._crit_edge847
    i32 24, label %._crit_edge850
    i32 25, label %._crit_edge853
    i32 26, label %._crit_edge856
    i32 27, label %._crit_edge859
    i32 28, label %903
    i32 29, label %957
    i32 30, label %1030
    i32 31, label %._crit_edge862
    i32 32, label %.preheader
    i32 33, label %1252
    i32 34, label %1298
    i32 35, label %._crit_edge866
    i32 36, label %1471
    i32 37, label %._crit_edge869
    i32 38, label %1607
    i32 39, label %._crit_edge879
    i32 40, label %1934
    i32 41, label %._crit_edge882
    i32 42, label %._crit_edge799
    i32 43, label %._crit_edge802
    i32 44, label %._crit_edge805
    i32 45, label %._crit_edge808
    i32 46, label %._crit_edge811
    i32 47, label %._crit_edge814
    i32 48, label %._crit_edge817
    i32 49, label %._crit_edge820
    i32 50, label %._crit_edge823
  ]

._crit_edge927:                                   ; preds = %9
  %.pre940 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  br label %261

._crit_edge911:                                   ; preds = %9
  %.pre972 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  br label %529

._crit_edge882:                                   ; preds = %9
  %.phi.trans.insert883 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre884 = load i32* %.phi.trans.insert883, align 4
  br label %1989

._crit_edge879:                                   ; preds = %9
  %.phi.trans.insert880 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre881 = load i32* %.phi.trans.insert880, align 4
  br label %1662

._crit_edge869:                                   ; preds = %9
  %.phi.trans.insert870 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre871 = load i32* %.phi.trans.insert870, align 4
  br label %1526

._crit_edge866:                                   ; preds = %9
  %.phi.trans.insert867 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre868 = load i32* %.phi.trans.insert867, align 4
  br label %1341

._crit_edge862:                                   ; preds = %9
  %.phi.trans.insert863 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre864 = load i32* %.phi.trans.insert863, align 4
  br label %1072

._crit_edge859:                                   ; preds = %9
  %.phi.trans.insert860 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre861 = load i32* %.phi.trans.insert860, align 4
  br label %848

._crit_edge856:                                   ; preds = %9
  %.phi.trans.insert857 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre858 = load i32* %.phi.trans.insert857, align 4
  br label %802

._crit_edge853:                                   ; preds = %9
  %.phi.trans.insert854 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre855 = load i32* %.phi.trans.insert854, align 4
  br label %756

._crit_edge850:                                   ; preds = %9
  %.phi.trans.insert851 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre852 = load i32* %.phi.trans.insert851, align 4
  br label %712

._crit_edge847:                                   ; preds = %9
  %.phi.trans.insert848 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre849 = load i32* %.phi.trans.insert848, align 4
  br label %666

._crit_edge844:                                   ; preds = %9
  %.phi.trans.insert845 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre846 = load i32* %.phi.trans.insert845, align 4
  br label %620

._crit_edge841:                                   ; preds = %9
  %.phi.trans.insert842 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre843 = load i32* %.phi.trans.insert842, align 4
  br label %574

._crit_edge838:                                   ; preds = %9
  %.phi.trans.insert839 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre840 = load i32* %.phi.trans.insert839, align 4
  br label %474

._crit_edge835:                                   ; preds = %9
  %.phi.trans.insert836 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre837 = load i32* %.phi.trans.insert836, align 4
  br label %431

._crit_edge832:                                   ; preds = %9
  %.phi.trans.insert833 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre834 = load i32* %.phi.trans.insert833, align 4
  br label %388

._crit_edge829:                                   ; preds = %9
  %.phi.trans.insert830 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre831 = load i32* %.phi.trans.insert830, align 4
  br label %345

._crit_edge826:                                   ; preds = %9
  %.phi.trans.insert827 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre828 = load i32* %.phi.trans.insert827, align 4
  br label %302

._crit_edge823:                                   ; preds = %9
  %.phi.trans.insert824 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre825 = load i32* %.phi.trans.insert824, align 4
  br label %2675

._crit_edge820:                                   ; preds = %9
  %.phi.trans.insert821 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre822 = load i32* %.phi.trans.insert821, align 4
  br label %2629

._crit_edge817:                                   ; preds = %9
  %.phi.trans.insert818 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre819 = load i32* %.phi.trans.insert818, align 4
  br label %2583

._crit_edge814:                                   ; preds = %9
  %.phi.trans.insert815 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre816 = load i32* %.phi.trans.insert815, align 4
  br label %2537

._crit_edge811:                                   ; preds = %9
  %.phi.trans.insert812 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre813 = load i32* %.phi.trans.insert812, align 4
  br label %2492

._crit_edge808:                                   ; preds = %9
  %.phi.trans.insert809 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre810 = load i32* %.phi.trans.insert809, align 4
  br label %2449

._crit_edge805:                                   ; preds = %9
  %.phi.trans.insert806 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre807 = load i32* %.phi.trans.insert806, align 4
  br label %2406

._crit_edge802:                                   ; preds = %9
  %.phi.trans.insert803 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre804 = load i32* %.phi.trans.insert803, align 4
  br label %2363

._crit_edge799:                                   ; preds = %9
  %.phi.trans.insert800 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre801 = load i32* %.phi.trans.insert800, align 4
  br label %2320

._crit_edge796:                                   ; preds = %9
  %.phi.trans.insert797 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre798 = load i32* %.phi.trans.insert797, align 4
  br label %187

._crit_edge793:                                   ; preds = %9
  %.phi.trans.insert794 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre795 = load i32* %.phi.trans.insert794, align 4
  br label %144

._crit_edge790:                                   ; preds = %9
  %.phi.trans.insert791 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %.pre792 = load i32* %.phi.trans.insert791, align 4
  br label %101

; <label>:58                                      ; preds = %9
  store i32 10, i32* %3, align 4
  %59 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %60 = load i32* %59, align 4
  %61 = icmp sgt i32 %60, 7
  %.pre932 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %61, label %._crit_edge607, label %.lr.ph606.preheader

.lr.ph606.preheader:                              ; preds = %58
  br label %.lr.ph606

._crit_edge607.loopexit:                          ; preds = %.backedge168
  %.lcssa1289 = phi i32 [ %99, %.backedge168 ]
  br label %._crit_edge607

._crit_edge607:                                   ; preds = %._crit_edge607.loopexit, %58
  %.lcssa341 = phi i32 [ %60, %58 ], [ %.lcssa1289, %._crit_edge607.loopexit ]
  %62 = load i32* %.pre932, align 4
  %63 = add nsw i32 %.lcssa341, -8
  %64 = lshr i32 %62, %63
  store i32 %63, i32* %59, align 4
  %65 = and i32 %64, 255
  %66 = icmp eq i32 %65, 66
  br i1 %66, label %101, label %.loopexit

.lr.ph606:                                        ; preds = %.backedge168._crit_edge, %.lr.ph606.preheader
  %67 = phi i32 [ %99, %.backedge168._crit_edge ], [ %60, %.lr.ph606.preheader ]
  %68 = phi %struct.bz_stream* [ %.pre789, %.backedge168._crit_edge ], [ %2, %.lr.ph606.preheader ]
  %69 = getelementptr inbounds %struct.bz_stream* %68, i64 0, i32 1
  %70 = load i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %.loopexit.loopexit1227, label %72

; <label>:72                                      ; preds = %.lr.ph606
  %73 = load i32* %.pre932, align 4
  %74 = shl i32 %73, 8
  %75 = getelementptr inbounds %struct.bz_stream* %68, i64 0, i32 0
  %76 = load i8** %75, align 8
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = or i32 %78, %74
  store i32 %79, i32* %.pre932, align 4
  %80 = add nsw i32 %67, 8
  store i32 %80, i32* %59, align 4
  %81 = load i8** %75, align 8
  %82 = getelementptr inbounds i8* %81, i64 1
  store i8* %82, i8** %75, align 8
  %83 = load %struct.bz_stream** %1, align 8
  %84 = getelementptr inbounds %struct.bz_stream* %83, i64 0, i32 1
  %85 = load i32* %84, align 4
  %86 = add i32 %85, -1
  store i32 %86, i32* %84, align 4
  %87 = load %struct.bz_stream** %1, align 8
  %88 = getelementptr inbounds %struct.bz_stream* %87, i64 0, i32 2
  %89 = load i32* %88, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %88, align 4
  %91 = load %struct.bz_stream** %1, align 8
  %92 = getelementptr inbounds %struct.bz_stream* %91, i64 0, i32 2
  %93 = load i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %.backedge168

; <label>:95                                      ; preds = %72
  %96 = getelementptr inbounds %struct.bz_stream* %91, i64 0, i32 3
  %97 = load i32* %96, align 4
  %98 = add i32 %97, 1
  store i32 %98, i32* %96, align 4
  br label %.backedge168

.backedge168:                                     ; preds = %95, %72
  %99 = load i32* %59, align 4
  %100 = icmp sgt i32 %99, 7
  br i1 %100, label %._crit_edge607.loopexit, label %.backedge168._crit_edge

.backedge168._crit_edge:                          ; preds = %.backedge168
  %.pre789 = load %struct.bz_stream** %1, align 8
  br label %.lr.ph606

; <label>:101                                     ; preds = %._crit_edge607, %._crit_edge790
  %102 = phi i32 [ %.pre792, %._crit_edge790 ], [ %63, %._crit_edge607 ]
  store i32 11, i32* %3, align 4
  %103 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %104 = icmp sgt i32 %102, 7
  %.pre934 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %104, label %._crit_edge602, label %.lr.ph601.preheader

.lr.ph601.preheader:                              ; preds = %101
  br label %.lr.ph601

._crit_edge602.loopexit:                          ; preds = %.backedge166
  %.lcssa1288 = phi i32 [ %142, %.backedge166 ]
  br label %._crit_edge602

._crit_edge602:                                   ; preds = %._crit_edge602.loopexit, %101
  %.lcssa337 = phi i32 [ %102, %101 ], [ %.lcssa1288, %._crit_edge602.loopexit ]
  %105 = load i32* %.pre934, align 4
  %106 = add nsw i32 %.lcssa337, -8
  %107 = lshr i32 %105, %106
  store i32 %106, i32* %103, align 4
  %108 = and i32 %107, 255
  %109 = icmp eq i32 %108, 90
  br i1 %109, label %144, label %.loopexit

.lr.ph601:                                        ; preds = %.backedge166, %.lr.ph601.preheader
  %110 = phi i32 [ %142, %.backedge166 ], [ %102, %.lr.ph601.preheader ]
  %111 = load %struct.bz_stream** %1, align 8
  %112 = getelementptr inbounds %struct.bz_stream* %111, i64 0, i32 1
  %113 = load i32* %112, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %.loopexit.loopexit1226, label %115

; <label>:115                                     ; preds = %.lr.ph601
  %116 = load i32* %.pre934, align 4
  %117 = shl i32 %116, 8
  %118 = getelementptr inbounds %struct.bz_stream* %111, i64 0, i32 0
  %119 = load i8** %118, align 8
  %120 = load i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = or i32 %121, %117
  store i32 %122, i32* %.pre934, align 4
  %123 = add nsw i32 %110, 8
  store i32 %123, i32* %103, align 4
  %124 = load i8** %118, align 8
  %125 = getelementptr inbounds i8* %124, i64 1
  store i8* %125, i8** %118, align 8
  %126 = load %struct.bz_stream** %1, align 8
  %127 = getelementptr inbounds %struct.bz_stream* %126, i64 0, i32 1
  %128 = load i32* %127, align 4
  %129 = add i32 %128, -1
  store i32 %129, i32* %127, align 4
  %130 = load %struct.bz_stream** %1, align 8
  %131 = getelementptr inbounds %struct.bz_stream* %130, i64 0, i32 2
  %132 = load i32* %131, align 4
  %133 = add i32 %132, 1
  store i32 %133, i32* %131, align 4
  %134 = load %struct.bz_stream** %1, align 8
  %135 = getelementptr inbounds %struct.bz_stream* %134, i64 0, i32 2
  %136 = load i32* %135, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %.backedge166

; <label>:138                                     ; preds = %115
  %139 = getelementptr inbounds %struct.bz_stream* %134, i64 0, i32 3
  %140 = load i32* %139, align 4
  %141 = add i32 %140, 1
  store i32 %141, i32* %139, align 4
  br label %.backedge166

.backedge166:                                     ; preds = %138, %115
  %142 = load i32* %103, align 4
  %143 = icmp sgt i32 %142, 7
  br i1 %143, label %._crit_edge602.loopexit, label %.lr.ph601

; <label>:144                                     ; preds = %._crit_edge602, %._crit_edge793
  %145 = phi i32 [ %.pre795, %._crit_edge793 ], [ %106, %._crit_edge602 ]
  store i32 12, i32* %3, align 4
  %146 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %147 = icmp sgt i32 %145, 7
  %.pre936 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %147, label %._crit_edge597, label %.lr.ph596.preheader

.lr.ph596.preheader:                              ; preds = %144
  br label %.lr.ph596

._crit_edge597.loopexit:                          ; preds = %.backedge164
  %.lcssa1287 = phi i32 [ %185, %.backedge164 ]
  br label %._crit_edge597

._crit_edge597:                                   ; preds = %._crit_edge597.loopexit, %144
  %.lcssa333 = phi i32 [ %145, %144 ], [ %.lcssa1287, %._crit_edge597.loopexit ]
  %148 = load i32* %.pre936, align 4
  %149 = add nsw i32 %.lcssa333, -8
  %150 = lshr i32 %148, %149
  store i32 %149, i32* %146, align 4
  %151 = and i32 %150, 255
  %152 = icmp eq i32 %151, 104
  br i1 %152, label %187, label %.loopexit

.lr.ph596:                                        ; preds = %.backedge164, %.lr.ph596.preheader
  %153 = phi i32 [ %185, %.backedge164 ], [ %145, %.lr.ph596.preheader ]
  %154 = load %struct.bz_stream** %1, align 8
  %155 = getelementptr inbounds %struct.bz_stream* %154, i64 0, i32 1
  %156 = load i32* %155, align 4
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %.loopexit.loopexit1225, label %158

; <label>:158                                     ; preds = %.lr.ph596
  %159 = load i32* %.pre936, align 4
  %160 = shl i32 %159, 8
  %161 = getelementptr inbounds %struct.bz_stream* %154, i64 0, i32 0
  %162 = load i8** %161, align 8
  %163 = load i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = or i32 %164, %160
  store i32 %165, i32* %.pre936, align 4
  %166 = add nsw i32 %153, 8
  store i32 %166, i32* %146, align 4
  %167 = load i8** %161, align 8
  %168 = getelementptr inbounds i8* %167, i64 1
  store i8* %168, i8** %161, align 8
  %169 = load %struct.bz_stream** %1, align 8
  %170 = getelementptr inbounds %struct.bz_stream* %169, i64 0, i32 1
  %171 = load i32* %170, align 4
  %172 = add i32 %171, -1
  store i32 %172, i32* %170, align 4
  %173 = load %struct.bz_stream** %1, align 8
  %174 = getelementptr inbounds %struct.bz_stream* %173, i64 0, i32 2
  %175 = load i32* %174, align 4
  %176 = add i32 %175, 1
  store i32 %176, i32* %174, align 4
  %177 = load %struct.bz_stream** %1, align 8
  %178 = getelementptr inbounds %struct.bz_stream* %177, i64 0, i32 2
  %179 = load i32* %178, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %.backedge164

; <label>:181                                     ; preds = %158
  %182 = getelementptr inbounds %struct.bz_stream* %177, i64 0, i32 3
  %183 = load i32* %182, align 4
  %184 = add i32 %183, 1
  store i32 %184, i32* %182, align 4
  br label %.backedge164

.backedge164:                                     ; preds = %181, %158
  %185 = load i32* %146, align 4
  %186 = icmp sgt i32 %185, 7
  br i1 %186, label %._crit_edge597.loopexit, label %.lr.ph596

; <label>:187                                     ; preds = %._crit_edge597, %._crit_edge796
  %188 = phi i32 [ %.pre798, %._crit_edge796 ], [ %149, %._crit_edge597 ]
  store i32 13, i32* %3, align 4
  %189 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %190 = icmp sgt i32 %188, 7
  %.pre938 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %190, label %._crit_edge592, label %.lr.ph591.preheader

.lr.ph591.preheader:                              ; preds = %187
  br label %.lr.ph591

._crit_edge592.loopexit:                          ; preds = %.backedge162
  %.lcssa1286 = phi i32 [ %229, %.backedge162 ]
  br label %._crit_edge592

._crit_edge592:                                   ; preds = %._crit_edge592.loopexit, %187
  %.lcssa329 = phi i32 [ %188, %187 ], [ %.lcssa1286, %._crit_edge592.loopexit ]
  %191 = load i32* %.pre938, align 4
  %192 = add nsw i32 %.lcssa329, -8
  %193 = lshr i32 %191, %192
  %194 = and i32 %193, 255
  store i32 %192, i32* %189, align 4
  %195 = getelementptr inbounds %struct.DState* %s, i64 0, i32 9
  store i32 %194, i32* %195, align 4
  %.off = add nsw i32 %194, -49
  %196 = icmp ugt i32 %.off, 8
  br i1 %196, label %.loopexit, label %231

.lr.ph591:                                        ; preds = %.backedge162, %.lr.ph591.preheader
  %197 = phi i32 [ %229, %.backedge162 ], [ %188, %.lr.ph591.preheader ]
  %198 = load %struct.bz_stream** %1, align 8
  %199 = getelementptr inbounds %struct.bz_stream* %198, i64 0, i32 1
  %200 = load i32* %199, align 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %.loopexit.loopexit1224, label %202

; <label>:202                                     ; preds = %.lr.ph591
  %203 = load i32* %.pre938, align 4
  %204 = shl i32 %203, 8
  %205 = getelementptr inbounds %struct.bz_stream* %198, i64 0, i32 0
  %206 = load i8** %205, align 8
  %207 = load i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = or i32 %208, %204
  store i32 %209, i32* %.pre938, align 4
  %210 = add nsw i32 %197, 8
  store i32 %210, i32* %189, align 4
  %211 = load i8** %205, align 8
  %212 = getelementptr inbounds i8* %211, i64 1
  store i8* %212, i8** %205, align 8
  %213 = load %struct.bz_stream** %1, align 8
  %214 = getelementptr inbounds %struct.bz_stream* %213, i64 0, i32 1
  %215 = load i32* %214, align 4
  %216 = add i32 %215, -1
  store i32 %216, i32* %214, align 4
  %217 = load %struct.bz_stream** %1, align 8
  %218 = getelementptr inbounds %struct.bz_stream* %217, i64 0, i32 2
  %219 = load i32* %218, align 4
  %220 = add i32 %219, 1
  store i32 %220, i32* %218, align 4
  %221 = load %struct.bz_stream** %1, align 8
  %222 = getelementptr inbounds %struct.bz_stream* %221, i64 0, i32 2
  %223 = load i32* %222, align 4
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %.backedge162

; <label>:225                                     ; preds = %202
  %226 = getelementptr inbounds %struct.bz_stream* %221, i64 0, i32 3
  %227 = load i32* %226, align 4
  %228 = add i32 %227, 1
  store i32 %228, i32* %226, align 4
  br label %.backedge162

.backedge162:                                     ; preds = %225, %202
  %229 = load i32* %189, align 4
  %230 = icmp sgt i32 %229, 7
  br i1 %230, label %._crit_edge592.loopexit, label %.lr.ph591

; <label>:231                                     ; preds = %._crit_edge592
  %232 = add nsw i32 %194, -48
  store i32 %232, i32* %195, align 4
  %233 = getelementptr inbounds %struct.DState* %s, i64 0, i32 10
  %234 = load i8* %233, align 1
  %235 = icmp eq i8 %234, 0
  %236 = getelementptr inbounds %struct.bz_stream* %2, i64 0, i32 9
  %237 = load i8* (i8*, i32, i32)** %236, align 8
  %238 = getelementptr inbounds %struct.bz_stream* %2, i64 0, i32 11
  %239 = load i8** %238, align 8
  br i1 %235, label %255, label %240

; <label>:240                                     ; preds = %231
  %241 = mul i32 %232, 200000
  %242 = tail call i8* %237(i8* %239, i32 %241, i32 1) #2
  %243 = bitcast i8* %242 to i16*
  %244 = getelementptr inbounds %struct.DState* %s, i64 0, i32 21
  store i16* %243, i16** %244, align 8
  %245 = load i8* (i8*, i32, i32)** %236, align 8
  %246 = load i8** %238, align 8
  %247 = load i32* %195, align 4
  %248 = mul nsw i32 %247, 100000
  %249 = ashr exact i32 %248, 1
  %250 = tail call i8* %245(i8* %246, i32 %249, i32 1) #2
  %251 = getelementptr inbounds %struct.DState* %s, i64 0, i32 22
  store i8* %250, i8** %251, align 8
  %252 = load i16** %244, align 8
  %253 = icmp eq i16* %252, null
  %254 = icmp eq i8* %250, null
  %or.cond56 = or i1 %253, %254
  br i1 %or.cond56, label %.loopexit, label %261

; <label>:255                                     ; preds = %231
  %256 = mul i32 %232, 400000
  %257 = tail call i8* %237(i8* %239, i32 %256, i32 1) #2
  %258 = bitcast i8* %257 to i32*
  %259 = getelementptr inbounds %struct.DState* %s, i64 0, i32 20
  store i32* %258, i32** %259, align 8
  %260 = icmp eq i8* %257, null
  br i1 %260, label %.loopexit, label %261

; <label>:261                                     ; preds = %255, %240, %._crit_edge927
  %.pre-phi941 = phi i32* [ %.pre940, %._crit_edge927 ], [ %189, %240 ], [ %189, %255 ]
  store i32 14, i32* %3, align 4
  %262 = load i32* %.pre-phi941, align 4
  %263 = icmp sgt i32 %262, 7
  %.pre942 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %263, label %._crit_edge587, label %.lr.ph586.preheader

.lr.ph586.preheader:                              ; preds = %261
  br label %.lr.ph586

._crit_edge587.loopexit:                          ; preds = %.backedge160
  %.lcssa1285 = phi i32 [ %300, %.backedge160 ]
  br label %._crit_edge587

._crit_edge587:                                   ; preds = %._crit_edge587.loopexit, %261
  %.lcssa325 = phi i32 [ %262, %261 ], [ %.lcssa1285, %._crit_edge587.loopexit ]
  %264 = load i32* %.pre942, align 4
  %265 = add nsw i32 %.lcssa325, -8
  %266 = lshr i32 %264, %265
  store i32 %265, i32* %.pre-phi941, align 4
  %267 = and i32 %266, 255
  switch i32 %267, label %.loopexit [
    i32 23, label %2320
    i32 49, label %302
  ]

.lr.ph586:                                        ; preds = %.backedge160, %.lr.ph586.preheader
  %268 = phi i32 [ %300, %.backedge160 ], [ %262, %.lr.ph586.preheader ]
  %269 = load %struct.bz_stream** %1, align 8
  %270 = getelementptr inbounds %struct.bz_stream* %269, i64 0, i32 1
  %271 = load i32* %270, align 4
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %.loopexit.loopexit1223, label %273

; <label>:273                                     ; preds = %.lr.ph586
  %274 = load i32* %.pre942, align 4
  %275 = shl i32 %274, 8
  %276 = getelementptr inbounds %struct.bz_stream* %269, i64 0, i32 0
  %277 = load i8** %276, align 8
  %278 = load i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = or i32 %279, %275
  store i32 %280, i32* %.pre942, align 4
  %281 = add nsw i32 %268, 8
  store i32 %281, i32* %.pre-phi941, align 4
  %282 = load i8** %276, align 8
  %283 = getelementptr inbounds i8* %282, i64 1
  store i8* %283, i8** %276, align 8
  %284 = load %struct.bz_stream** %1, align 8
  %285 = getelementptr inbounds %struct.bz_stream* %284, i64 0, i32 1
  %286 = load i32* %285, align 4
  %287 = add i32 %286, -1
  store i32 %287, i32* %285, align 4
  %288 = load %struct.bz_stream** %1, align 8
  %289 = getelementptr inbounds %struct.bz_stream* %288, i64 0, i32 2
  %290 = load i32* %289, align 4
  %291 = add i32 %290, 1
  store i32 %291, i32* %289, align 4
  %292 = load %struct.bz_stream** %1, align 8
  %293 = getelementptr inbounds %struct.bz_stream* %292, i64 0, i32 2
  %294 = load i32* %293, align 4
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %.backedge160

; <label>:296                                     ; preds = %273
  %297 = getelementptr inbounds %struct.bz_stream* %292, i64 0, i32 3
  %298 = load i32* %297, align 4
  %299 = add i32 %298, 1
  store i32 %299, i32* %297, align 4
  br label %.backedge160

.backedge160:                                     ; preds = %296, %273
  %300 = load i32* %.pre-phi941, align 4
  %301 = icmp sgt i32 %300, 7
  br i1 %301, label %._crit_edge587.loopexit, label %.lr.ph586

; <label>:302                                     ; preds = %._crit_edge587, %._crit_edge826
  %303 = phi i32 [ %.pre828, %._crit_edge826 ], [ %265, %._crit_edge587 ]
  store i32 15, i32* %3, align 4
  %304 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %305 = icmp sgt i32 %303, 7
  %.pre962 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %305, label %._crit_edge582, label %.lr.ph581.preheader

.lr.ph581.preheader:                              ; preds = %302
  br label %.lr.ph581

._crit_edge582.loopexit:                          ; preds = %.backedge158
  %.lcssa1284 = phi i32 [ %343, %.backedge158 ]
  br label %._crit_edge582

._crit_edge582:                                   ; preds = %._crit_edge582.loopexit, %302
  %.lcssa321 = phi i32 [ %303, %302 ], [ %.lcssa1284, %._crit_edge582.loopexit ]
  %306 = load i32* %.pre962, align 4
  %307 = add nsw i32 %.lcssa321, -8
  %308 = lshr i32 %306, %307
  store i32 %307, i32* %304, align 4
  %309 = and i32 %308, 255
  %310 = icmp eq i32 %309, 65
  br i1 %310, label %345, label %.loopexit

.lr.ph581:                                        ; preds = %.backedge158, %.lr.ph581.preheader
  %311 = phi i32 [ %343, %.backedge158 ], [ %303, %.lr.ph581.preheader ]
  %312 = load %struct.bz_stream** %1, align 8
  %313 = getelementptr inbounds %struct.bz_stream* %312, i64 0, i32 1
  %314 = load i32* %313, align 4
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %.loopexit.loopexit1222, label %316

; <label>:316                                     ; preds = %.lr.ph581
  %317 = load i32* %.pre962, align 4
  %318 = shl i32 %317, 8
  %319 = getelementptr inbounds %struct.bz_stream* %312, i64 0, i32 0
  %320 = load i8** %319, align 8
  %321 = load i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = or i32 %322, %318
  store i32 %323, i32* %.pre962, align 4
  %324 = add nsw i32 %311, 8
  store i32 %324, i32* %304, align 4
  %325 = load i8** %319, align 8
  %326 = getelementptr inbounds i8* %325, i64 1
  store i8* %326, i8** %319, align 8
  %327 = load %struct.bz_stream** %1, align 8
  %328 = getelementptr inbounds %struct.bz_stream* %327, i64 0, i32 1
  %329 = load i32* %328, align 4
  %330 = add i32 %329, -1
  store i32 %330, i32* %328, align 4
  %331 = load %struct.bz_stream** %1, align 8
  %332 = getelementptr inbounds %struct.bz_stream* %331, i64 0, i32 2
  %333 = load i32* %332, align 4
  %334 = add i32 %333, 1
  store i32 %334, i32* %332, align 4
  %335 = load %struct.bz_stream** %1, align 8
  %336 = getelementptr inbounds %struct.bz_stream* %335, i64 0, i32 2
  %337 = load i32* %336, align 4
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %.backedge158

; <label>:339                                     ; preds = %316
  %340 = getelementptr inbounds %struct.bz_stream* %335, i64 0, i32 3
  %341 = load i32* %340, align 4
  %342 = add i32 %341, 1
  store i32 %342, i32* %340, align 4
  br label %.backedge158

.backedge158:                                     ; preds = %339, %316
  %343 = load i32* %304, align 4
  %344 = icmp sgt i32 %343, 7
  br i1 %344, label %._crit_edge582.loopexit, label %.lr.ph581

; <label>:345                                     ; preds = %._crit_edge582, %._crit_edge829
  %346 = phi i32 [ %.pre831, %._crit_edge829 ], [ %307, %._crit_edge582 ]
  store i32 16, i32* %3, align 4
  %347 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %348 = icmp sgt i32 %346, 7
  %.pre964 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %348, label %._crit_edge577, label %.lr.ph576.preheader

.lr.ph576.preheader:                              ; preds = %345
  br label %.lr.ph576

._crit_edge577.loopexit:                          ; preds = %.backedge156
  %.lcssa1283 = phi i32 [ %386, %.backedge156 ]
  br label %._crit_edge577

._crit_edge577:                                   ; preds = %._crit_edge577.loopexit, %345
  %.lcssa317 = phi i32 [ %346, %345 ], [ %.lcssa1283, %._crit_edge577.loopexit ]
  %349 = load i32* %.pre964, align 4
  %350 = add nsw i32 %.lcssa317, -8
  %351 = lshr i32 %349, %350
  store i32 %350, i32* %347, align 4
  %352 = and i32 %351, 255
  %353 = icmp eq i32 %352, 89
  br i1 %353, label %388, label %.loopexit

.lr.ph576:                                        ; preds = %.backedge156, %.lr.ph576.preheader
  %354 = phi i32 [ %386, %.backedge156 ], [ %346, %.lr.ph576.preheader ]
  %355 = load %struct.bz_stream** %1, align 8
  %356 = getelementptr inbounds %struct.bz_stream* %355, i64 0, i32 1
  %357 = load i32* %356, align 4
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %.loopexit.loopexit1221, label %359

; <label>:359                                     ; preds = %.lr.ph576
  %360 = load i32* %.pre964, align 4
  %361 = shl i32 %360, 8
  %362 = getelementptr inbounds %struct.bz_stream* %355, i64 0, i32 0
  %363 = load i8** %362, align 8
  %364 = load i8* %363, align 1
  %365 = zext i8 %364 to i32
  %366 = or i32 %365, %361
  store i32 %366, i32* %.pre964, align 4
  %367 = add nsw i32 %354, 8
  store i32 %367, i32* %347, align 4
  %368 = load i8** %362, align 8
  %369 = getelementptr inbounds i8* %368, i64 1
  store i8* %369, i8** %362, align 8
  %370 = load %struct.bz_stream** %1, align 8
  %371 = getelementptr inbounds %struct.bz_stream* %370, i64 0, i32 1
  %372 = load i32* %371, align 4
  %373 = add i32 %372, -1
  store i32 %373, i32* %371, align 4
  %374 = load %struct.bz_stream** %1, align 8
  %375 = getelementptr inbounds %struct.bz_stream* %374, i64 0, i32 2
  %376 = load i32* %375, align 4
  %377 = add i32 %376, 1
  store i32 %377, i32* %375, align 4
  %378 = load %struct.bz_stream** %1, align 8
  %379 = getelementptr inbounds %struct.bz_stream* %378, i64 0, i32 2
  %380 = load i32* %379, align 4
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %.backedge156

; <label>:382                                     ; preds = %359
  %383 = getelementptr inbounds %struct.bz_stream* %378, i64 0, i32 3
  %384 = load i32* %383, align 4
  %385 = add i32 %384, 1
  store i32 %385, i32* %383, align 4
  br label %.backedge156

.backedge156:                                     ; preds = %382, %359
  %386 = load i32* %347, align 4
  %387 = icmp sgt i32 %386, 7
  br i1 %387, label %._crit_edge577.loopexit, label %.lr.ph576

; <label>:388                                     ; preds = %._crit_edge577, %._crit_edge832
  %389 = phi i32 [ %.pre834, %._crit_edge832 ], [ %350, %._crit_edge577 ]
  store i32 17, i32* %3, align 4
  %390 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %391 = icmp sgt i32 %389, 7
  %.pre966 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %391, label %._crit_edge572, label %.lr.ph571.preheader

.lr.ph571.preheader:                              ; preds = %388
  br label %.lr.ph571

._crit_edge572.loopexit:                          ; preds = %.backedge154
  %.lcssa1282 = phi i32 [ %429, %.backedge154 ]
  br label %._crit_edge572

._crit_edge572:                                   ; preds = %._crit_edge572.loopexit, %388
  %.lcssa313 = phi i32 [ %389, %388 ], [ %.lcssa1282, %._crit_edge572.loopexit ]
  %392 = load i32* %.pre966, align 4
  %393 = add nsw i32 %.lcssa313, -8
  %394 = lshr i32 %392, %393
  store i32 %393, i32* %390, align 4
  %395 = and i32 %394, 255
  %396 = icmp eq i32 %395, 38
  br i1 %396, label %431, label %.loopexit

.lr.ph571:                                        ; preds = %.backedge154, %.lr.ph571.preheader
  %397 = phi i32 [ %429, %.backedge154 ], [ %389, %.lr.ph571.preheader ]
  %398 = load %struct.bz_stream** %1, align 8
  %399 = getelementptr inbounds %struct.bz_stream* %398, i64 0, i32 1
  %400 = load i32* %399, align 4
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %.loopexit.loopexit1220, label %402

; <label>:402                                     ; preds = %.lr.ph571
  %403 = load i32* %.pre966, align 4
  %404 = shl i32 %403, 8
  %405 = getelementptr inbounds %struct.bz_stream* %398, i64 0, i32 0
  %406 = load i8** %405, align 8
  %407 = load i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = or i32 %408, %404
  store i32 %409, i32* %.pre966, align 4
  %410 = add nsw i32 %397, 8
  store i32 %410, i32* %390, align 4
  %411 = load i8** %405, align 8
  %412 = getelementptr inbounds i8* %411, i64 1
  store i8* %412, i8** %405, align 8
  %413 = load %struct.bz_stream** %1, align 8
  %414 = getelementptr inbounds %struct.bz_stream* %413, i64 0, i32 1
  %415 = load i32* %414, align 4
  %416 = add i32 %415, -1
  store i32 %416, i32* %414, align 4
  %417 = load %struct.bz_stream** %1, align 8
  %418 = getelementptr inbounds %struct.bz_stream* %417, i64 0, i32 2
  %419 = load i32* %418, align 4
  %420 = add i32 %419, 1
  store i32 %420, i32* %418, align 4
  %421 = load %struct.bz_stream** %1, align 8
  %422 = getelementptr inbounds %struct.bz_stream* %421, i64 0, i32 2
  %423 = load i32* %422, align 4
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %425, label %.backedge154

; <label>:425                                     ; preds = %402
  %426 = getelementptr inbounds %struct.bz_stream* %421, i64 0, i32 3
  %427 = load i32* %426, align 4
  %428 = add i32 %427, 1
  store i32 %428, i32* %426, align 4
  br label %.backedge154

.backedge154:                                     ; preds = %425, %402
  %429 = load i32* %390, align 4
  %430 = icmp sgt i32 %429, 7
  br i1 %430, label %._crit_edge572.loopexit, label %.lr.ph571

; <label>:431                                     ; preds = %._crit_edge572, %._crit_edge835
  %432 = phi i32 [ %.pre837, %._crit_edge835 ], [ %393, %._crit_edge572 ]
  store i32 18, i32* %3, align 4
  %433 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %434 = icmp sgt i32 %432, 7
  %.pre968 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %434, label %._crit_edge567, label %.lr.ph566.preheader

.lr.ph566.preheader:                              ; preds = %431
  br label %.lr.ph566

._crit_edge567.loopexit:                          ; preds = %.backedge152
  %.lcssa1281 = phi i32 [ %472, %.backedge152 ]
  br label %._crit_edge567

._crit_edge567:                                   ; preds = %._crit_edge567.loopexit, %431
  %.lcssa309 = phi i32 [ %432, %431 ], [ %.lcssa1281, %._crit_edge567.loopexit ]
  %435 = load i32* %.pre968, align 4
  %436 = add nsw i32 %.lcssa309, -8
  %437 = lshr i32 %435, %436
  store i32 %436, i32* %433, align 4
  %438 = and i32 %437, 255
  %439 = icmp eq i32 %438, 83
  br i1 %439, label %474, label %.loopexit

.lr.ph566:                                        ; preds = %.backedge152, %.lr.ph566.preheader
  %440 = phi i32 [ %472, %.backedge152 ], [ %432, %.lr.ph566.preheader ]
  %441 = load %struct.bz_stream** %1, align 8
  %442 = getelementptr inbounds %struct.bz_stream* %441, i64 0, i32 1
  %443 = load i32* %442, align 4
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %.loopexit.loopexit1219, label %445

; <label>:445                                     ; preds = %.lr.ph566
  %446 = load i32* %.pre968, align 4
  %447 = shl i32 %446, 8
  %448 = getelementptr inbounds %struct.bz_stream* %441, i64 0, i32 0
  %449 = load i8** %448, align 8
  %450 = load i8* %449, align 1
  %451 = zext i8 %450 to i32
  %452 = or i32 %451, %447
  store i32 %452, i32* %.pre968, align 4
  %453 = add nsw i32 %440, 8
  store i32 %453, i32* %433, align 4
  %454 = load i8** %448, align 8
  %455 = getelementptr inbounds i8* %454, i64 1
  store i8* %455, i8** %448, align 8
  %456 = load %struct.bz_stream** %1, align 8
  %457 = getelementptr inbounds %struct.bz_stream* %456, i64 0, i32 1
  %458 = load i32* %457, align 4
  %459 = add i32 %458, -1
  store i32 %459, i32* %457, align 4
  %460 = load %struct.bz_stream** %1, align 8
  %461 = getelementptr inbounds %struct.bz_stream* %460, i64 0, i32 2
  %462 = load i32* %461, align 4
  %463 = add i32 %462, 1
  store i32 %463, i32* %461, align 4
  %464 = load %struct.bz_stream** %1, align 8
  %465 = getelementptr inbounds %struct.bz_stream* %464, i64 0, i32 2
  %466 = load i32* %465, align 4
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %.backedge152

; <label>:468                                     ; preds = %445
  %469 = getelementptr inbounds %struct.bz_stream* %464, i64 0, i32 3
  %470 = load i32* %469, align 4
  %471 = add i32 %470, 1
  store i32 %471, i32* %469, align 4
  br label %.backedge152

.backedge152:                                     ; preds = %468, %445
  %472 = load i32* %433, align 4
  %473 = icmp sgt i32 %472, 7
  br i1 %473, label %._crit_edge567.loopexit, label %.lr.ph566

; <label>:474                                     ; preds = %._crit_edge567, %._crit_edge838
  %475 = phi i32 [ %.pre840, %._crit_edge838 ], [ %436, %._crit_edge567 ]
  store i32 19, i32* %3, align 4
  %476 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %477 = icmp sgt i32 %475, 7
  %.pre970 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %477, label %._crit_edge562, label %.lr.ph561.preheader

.lr.ph561.preheader:                              ; preds = %474
  br label %.lr.ph561

._crit_edge562.loopexit:                          ; preds = %.backedge150
  %.lcssa1280 = phi i32 [ %515, %.backedge150 ]
  br label %._crit_edge562

._crit_edge562:                                   ; preds = %._crit_edge562.loopexit, %474
  %.lcssa305 = phi i32 [ %475, %474 ], [ %.lcssa1280, %._crit_edge562.loopexit ]
  %478 = load i32* %.pre970, align 4
  %479 = add nsw i32 %.lcssa305, -8
  %480 = lshr i32 %478, %479
  store i32 %479, i32* %476, align 4
  %481 = and i32 %480, 255
  %482 = icmp eq i32 %481, 89
  br i1 %482, label %517, label %.loopexit

.lr.ph561:                                        ; preds = %.backedge150, %.lr.ph561.preheader
  %483 = phi i32 [ %515, %.backedge150 ], [ %475, %.lr.ph561.preheader ]
  %484 = load %struct.bz_stream** %1, align 8
  %485 = getelementptr inbounds %struct.bz_stream* %484, i64 0, i32 1
  %486 = load i32* %485, align 4
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %.loopexit.loopexit1218, label %488

; <label>:488                                     ; preds = %.lr.ph561
  %489 = load i32* %.pre970, align 4
  %490 = shl i32 %489, 8
  %491 = getelementptr inbounds %struct.bz_stream* %484, i64 0, i32 0
  %492 = load i8** %491, align 8
  %493 = load i8* %492, align 1
  %494 = zext i8 %493 to i32
  %495 = or i32 %494, %490
  store i32 %495, i32* %.pre970, align 4
  %496 = add nsw i32 %483, 8
  store i32 %496, i32* %476, align 4
  %497 = load i8** %491, align 8
  %498 = getelementptr inbounds i8* %497, i64 1
  store i8* %498, i8** %491, align 8
  %499 = load %struct.bz_stream** %1, align 8
  %500 = getelementptr inbounds %struct.bz_stream* %499, i64 0, i32 1
  %501 = load i32* %500, align 4
  %502 = add i32 %501, -1
  store i32 %502, i32* %500, align 4
  %503 = load %struct.bz_stream** %1, align 8
  %504 = getelementptr inbounds %struct.bz_stream* %503, i64 0, i32 2
  %505 = load i32* %504, align 4
  %506 = add i32 %505, 1
  store i32 %506, i32* %504, align 4
  %507 = load %struct.bz_stream** %1, align 8
  %508 = getelementptr inbounds %struct.bz_stream* %507, i64 0, i32 2
  %509 = load i32* %508, align 4
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %.backedge150

; <label>:511                                     ; preds = %488
  %512 = getelementptr inbounds %struct.bz_stream* %507, i64 0, i32 3
  %513 = load i32* %512, align 4
  %514 = add i32 %513, 1
  store i32 %514, i32* %512, align 4
  br label %.backedge150

.backedge150:                                     ; preds = %511, %488
  %515 = load i32* %476, align 4
  %516 = icmp sgt i32 %515, 7
  br i1 %516, label %._crit_edge562.loopexit, label %.lr.ph561

; <label>:517                                     ; preds = %._crit_edge562
  %518 = getelementptr inbounds %struct.DState* %s, i64 0, i32 11
  %519 = load i32* %518, align 4
  %520 = add nsw i32 %519, 1
  store i32 %520, i32* %518, align 4
  %521 = getelementptr inbounds %struct.DState* %s, i64 0, i32 12
  %522 = load i32* %521, align 4
  %523 = icmp sgt i32 %522, 1
  br i1 %523, label %524, label %527

; <label>:524                                     ; preds = %517
  %525 = load %struct._IO_FILE** @stderr, align 8
  %526 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %525, i8* getelementptr inbounds ([20 x i8]* @.str80, i64 0, i64 0), i32 %520) #12
  br label %527

; <label>:527                                     ; preds = %524, %517
  %528 = getelementptr inbounds %struct.DState* %s, i64 0, i32 23
  store i32 0, i32* %528, align 4
  br label %529

; <label>:529                                     ; preds = %527, %._crit_edge911
  %.pre-phi973 = phi i32* [ %.pre972, %._crit_edge911 ], [ %476, %527 ]
  store i32 20, i32* %3, align 4
  %530 = load i32* %.pre-phi973, align 4
  %531 = icmp sgt i32 %530, 7
  %.pre974 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %531, label %._crit_edge557, label %.lr.ph556.preheader

.lr.ph556.preheader:                              ; preds = %529
  br label %.lr.ph556

._crit_edge557.loopexit:                          ; preds = %.backedge148
  %.lcssa1279 = phi i32 [ %572, %.backedge148 ]
  br label %._crit_edge557

._crit_edge557:                                   ; preds = %._crit_edge557.loopexit, %529
  %.lcssa301 = phi i32 [ %530, %529 ], [ %.lcssa1279, %._crit_edge557.loopexit ]
  %532 = load i32* %.pre974, align 4
  %533 = add nsw i32 %.lcssa301, -8
  %534 = lshr i32 %532, %533
  store i32 %533, i32* %.pre-phi973, align 4
  %535 = getelementptr inbounds %struct.DState* %s, i64 0, i32 23
  %536 = load i32* %535, align 4
  %537 = shl i32 %536, 8
  %538 = and i32 %534, 255
  %539 = or i32 %537, %538
  store i32 %539, i32* %535, align 4
  br label %574

.lr.ph556:                                        ; preds = %.backedge148, %.lr.ph556.preheader
  %540 = phi i32 [ %572, %.backedge148 ], [ %530, %.lr.ph556.preheader ]
  %541 = load %struct.bz_stream** %1, align 8
  %542 = getelementptr inbounds %struct.bz_stream* %541, i64 0, i32 1
  %543 = load i32* %542, align 4
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %.loopexit.loopexit1217, label %545

; <label>:545                                     ; preds = %.lr.ph556
  %546 = load i32* %.pre974, align 4
  %547 = shl i32 %546, 8
  %548 = getelementptr inbounds %struct.bz_stream* %541, i64 0, i32 0
  %549 = load i8** %548, align 8
  %550 = load i8* %549, align 1
  %551 = zext i8 %550 to i32
  %552 = or i32 %551, %547
  store i32 %552, i32* %.pre974, align 4
  %553 = add nsw i32 %540, 8
  store i32 %553, i32* %.pre-phi973, align 4
  %554 = load i8** %548, align 8
  %555 = getelementptr inbounds i8* %554, i64 1
  store i8* %555, i8** %548, align 8
  %556 = load %struct.bz_stream** %1, align 8
  %557 = getelementptr inbounds %struct.bz_stream* %556, i64 0, i32 1
  %558 = load i32* %557, align 4
  %559 = add i32 %558, -1
  store i32 %559, i32* %557, align 4
  %560 = load %struct.bz_stream** %1, align 8
  %561 = getelementptr inbounds %struct.bz_stream* %560, i64 0, i32 2
  %562 = load i32* %561, align 4
  %563 = add i32 %562, 1
  store i32 %563, i32* %561, align 4
  %564 = load %struct.bz_stream** %1, align 8
  %565 = getelementptr inbounds %struct.bz_stream* %564, i64 0, i32 2
  %566 = load i32* %565, align 4
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %568, label %.backedge148

; <label>:568                                     ; preds = %545
  %569 = getelementptr inbounds %struct.bz_stream* %564, i64 0, i32 3
  %570 = load i32* %569, align 4
  %571 = add i32 %570, 1
  store i32 %571, i32* %569, align 4
  br label %.backedge148

.backedge148:                                     ; preds = %568, %545
  %572 = load i32* %.pre-phi973, align 4
  %573 = icmp sgt i32 %572, 7
  br i1 %573, label %._crit_edge557.loopexit, label %.lr.ph556

; <label>:574                                     ; preds = %._crit_edge557, %._crit_edge841
  %575 = phi i32 [ %.pre843, %._crit_edge841 ], [ %533, %._crit_edge557 ]
  store i32 21, i32* %3, align 4
  %576 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %577 = icmp sgt i32 %575, 7
  %.pre976 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %577, label %._crit_edge552, label %.lr.ph551.preheader

.lr.ph551.preheader:                              ; preds = %574
  br label %.lr.ph551

._crit_edge552.loopexit:                          ; preds = %.backedge146
  %.lcssa1278 = phi i32 [ %618, %.backedge146 ]
  br label %._crit_edge552

._crit_edge552:                                   ; preds = %._crit_edge552.loopexit, %574
  %.lcssa297 = phi i32 [ %575, %574 ], [ %.lcssa1278, %._crit_edge552.loopexit ]
  %578 = load i32* %.pre976, align 4
  %579 = add nsw i32 %.lcssa297, -8
  %580 = lshr i32 %578, %579
  store i32 %579, i32* %576, align 4
  %581 = getelementptr inbounds %struct.DState* %s, i64 0, i32 23
  %582 = load i32* %581, align 4
  %583 = shl i32 %582, 8
  %584 = and i32 %580, 255
  %585 = or i32 %583, %584
  store i32 %585, i32* %581, align 4
  br label %620

.lr.ph551:                                        ; preds = %.backedge146, %.lr.ph551.preheader
  %586 = phi i32 [ %618, %.backedge146 ], [ %575, %.lr.ph551.preheader ]
  %587 = load %struct.bz_stream** %1, align 8
  %588 = getelementptr inbounds %struct.bz_stream* %587, i64 0, i32 1
  %589 = load i32* %588, align 4
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %.loopexit.loopexit1216, label %591

; <label>:591                                     ; preds = %.lr.ph551
  %592 = load i32* %.pre976, align 4
  %593 = shl i32 %592, 8
  %594 = getelementptr inbounds %struct.bz_stream* %587, i64 0, i32 0
  %595 = load i8** %594, align 8
  %596 = load i8* %595, align 1
  %597 = zext i8 %596 to i32
  %598 = or i32 %597, %593
  store i32 %598, i32* %.pre976, align 4
  %599 = add nsw i32 %586, 8
  store i32 %599, i32* %576, align 4
  %600 = load i8** %594, align 8
  %601 = getelementptr inbounds i8* %600, i64 1
  store i8* %601, i8** %594, align 8
  %602 = load %struct.bz_stream** %1, align 8
  %603 = getelementptr inbounds %struct.bz_stream* %602, i64 0, i32 1
  %604 = load i32* %603, align 4
  %605 = add i32 %604, -1
  store i32 %605, i32* %603, align 4
  %606 = load %struct.bz_stream** %1, align 8
  %607 = getelementptr inbounds %struct.bz_stream* %606, i64 0, i32 2
  %608 = load i32* %607, align 4
  %609 = add i32 %608, 1
  store i32 %609, i32* %607, align 4
  %610 = load %struct.bz_stream** %1, align 8
  %611 = getelementptr inbounds %struct.bz_stream* %610, i64 0, i32 2
  %612 = load i32* %611, align 4
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %614, label %.backedge146

; <label>:614                                     ; preds = %591
  %615 = getelementptr inbounds %struct.bz_stream* %610, i64 0, i32 3
  %616 = load i32* %615, align 4
  %617 = add i32 %616, 1
  store i32 %617, i32* %615, align 4
  br label %.backedge146

.backedge146:                                     ; preds = %614, %591
  %618 = load i32* %576, align 4
  %619 = icmp sgt i32 %618, 7
  br i1 %619, label %._crit_edge552.loopexit, label %.lr.ph551

; <label>:620                                     ; preds = %._crit_edge552, %._crit_edge844
  %621 = phi i32 [ %.pre846, %._crit_edge844 ], [ %579, %._crit_edge552 ]
  store i32 22, i32* %3, align 4
  %622 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %623 = icmp sgt i32 %621, 7
  %.pre978 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %623, label %._crit_edge547, label %.lr.ph546.preheader

.lr.ph546.preheader:                              ; preds = %620
  br label %.lr.ph546

._crit_edge547.loopexit:                          ; preds = %.backedge144
  %.lcssa1277 = phi i32 [ %664, %.backedge144 ]
  br label %._crit_edge547

._crit_edge547:                                   ; preds = %._crit_edge547.loopexit, %620
  %.lcssa293 = phi i32 [ %621, %620 ], [ %.lcssa1277, %._crit_edge547.loopexit ]
  %624 = load i32* %.pre978, align 4
  %625 = add nsw i32 %.lcssa293, -8
  %626 = lshr i32 %624, %625
  store i32 %625, i32* %622, align 4
  %627 = getelementptr inbounds %struct.DState* %s, i64 0, i32 23
  %628 = load i32* %627, align 4
  %629 = shl i32 %628, 8
  %630 = and i32 %626, 255
  %631 = or i32 %629, %630
  store i32 %631, i32* %627, align 4
  br label %666

.lr.ph546:                                        ; preds = %.backedge144, %.lr.ph546.preheader
  %632 = phi i32 [ %664, %.backedge144 ], [ %621, %.lr.ph546.preheader ]
  %633 = load %struct.bz_stream** %1, align 8
  %634 = getelementptr inbounds %struct.bz_stream* %633, i64 0, i32 1
  %635 = load i32* %634, align 4
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %.loopexit.loopexit1215, label %637

; <label>:637                                     ; preds = %.lr.ph546
  %638 = load i32* %.pre978, align 4
  %639 = shl i32 %638, 8
  %640 = getelementptr inbounds %struct.bz_stream* %633, i64 0, i32 0
  %641 = load i8** %640, align 8
  %642 = load i8* %641, align 1
  %643 = zext i8 %642 to i32
  %644 = or i32 %643, %639
  store i32 %644, i32* %.pre978, align 4
  %645 = add nsw i32 %632, 8
  store i32 %645, i32* %622, align 4
  %646 = load i8** %640, align 8
  %647 = getelementptr inbounds i8* %646, i64 1
  store i8* %647, i8** %640, align 8
  %648 = load %struct.bz_stream** %1, align 8
  %649 = getelementptr inbounds %struct.bz_stream* %648, i64 0, i32 1
  %650 = load i32* %649, align 4
  %651 = add i32 %650, -1
  store i32 %651, i32* %649, align 4
  %652 = load %struct.bz_stream** %1, align 8
  %653 = getelementptr inbounds %struct.bz_stream* %652, i64 0, i32 2
  %654 = load i32* %653, align 4
  %655 = add i32 %654, 1
  store i32 %655, i32* %653, align 4
  %656 = load %struct.bz_stream** %1, align 8
  %657 = getelementptr inbounds %struct.bz_stream* %656, i64 0, i32 2
  %658 = load i32* %657, align 4
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %660, label %.backedge144

; <label>:660                                     ; preds = %637
  %661 = getelementptr inbounds %struct.bz_stream* %656, i64 0, i32 3
  %662 = load i32* %661, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %661, align 4
  br label %.backedge144

.backedge144:                                     ; preds = %660, %637
  %664 = load i32* %622, align 4
  %665 = icmp sgt i32 %664, 7
  br i1 %665, label %._crit_edge547.loopexit, label %.lr.ph546

; <label>:666                                     ; preds = %._crit_edge547, %._crit_edge847
  %667 = phi i32 [ %.pre849, %._crit_edge847 ], [ %625, %._crit_edge547 ]
  store i32 23, i32* %3, align 4
  %668 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %669 = icmp sgt i32 %667, 7
  %.pre980 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %669, label %._crit_edge542, label %.lr.ph541.preheader

.lr.ph541.preheader:                              ; preds = %666
  br label %.lr.ph541

._crit_edge542.loopexit:                          ; preds = %.backedge142
  %.lcssa1276 = phi i32 [ %710, %.backedge142 ]
  br label %._crit_edge542

._crit_edge542:                                   ; preds = %._crit_edge542.loopexit, %666
  %.lcssa289 = phi i32 [ %667, %666 ], [ %.lcssa1276, %._crit_edge542.loopexit ]
  %670 = load i32* %.pre980, align 4
  %671 = add nsw i32 %.lcssa289, -8
  %672 = lshr i32 %670, %671
  store i32 %671, i32* %668, align 4
  %673 = getelementptr inbounds %struct.DState* %s, i64 0, i32 23
  %674 = load i32* %673, align 4
  %675 = shl i32 %674, 8
  %676 = and i32 %672, 255
  %677 = or i32 %675, %676
  store i32 %677, i32* %673, align 4
  br label %712

.lr.ph541:                                        ; preds = %.backedge142, %.lr.ph541.preheader
  %678 = phi i32 [ %710, %.backedge142 ], [ %667, %.lr.ph541.preheader ]
  %679 = load %struct.bz_stream** %1, align 8
  %680 = getelementptr inbounds %struct.bz_stream* %679, i64 0, i32 1
  %681 = load i32* %680, align 4
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %.loopexit.loopexit1214, label %683

; <label>:683                                     ; preds = %.lr.ph541
  %684 = load i32* %.pre980, align 4
  %685 = shl i32 %684, 8
  %686 = getelementptr inbounds %struct.bz_stream* %679, i64 0, i32 0
  %687 = load i8** %686, align 8
  %688 = load i8* %687, align 1
  %689 = zext i8 %688 to i32
  %690 = or i32 %689, %685
  store i32 %690, i32* %.pre980, align 4
  %691 = add nsw i32 %678, 8
  store i32 %691, i32* %668, align 4
  %692 = load i8** %686, align 8
  %693 = getelementptr inbounds i8* %692, i64 1
  store i8* %693, i8** %686, align 8
  %694 = load %struct.bz_stream** %1, align 8
  %695 = getelementptr inbounds %struct.bz_stream* %694, i64 0, i32 1
  %696 = load i32* %695, align 4
  %697 = add i32 %696, -1
  store i32 %697, i32* %695, align 4
  %698 = load %struct.bz_stream** %1, align 8
  %699 = getelementptr inbounds %struct.bz_stream* %698, i64 0, i32 2
  %700 = load i32* %699, align 4
  %701 = add i32 %700, 1
  store i32 %701, i32* %699, align 4
  %702 = load %struct.bz_stream** %1, align 8
  %703 = getelementptr inbounds %struct.bz_stream* %702, i64 0, i32 2
  %704 = load i32* %703, align 4
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %.backedge142

; <label>:706                                     ; preds = %683
  %707 = getelementptr inbounds %struct.bz_stream* %702, i64 0, i32 3
  %708 = load i32* %707, align 4
  %709 = add i32 %708, 1
  store i32 %709, i32* %707, align 4
  br label %.backedge142

.backedge142:                                     ; preds = %706, %683
  %710 = load i32* %668, align 4
  %711 = icmp sgt i32 %710, 7
  br i1 %711, label %._crit_edge542.loopexit, label %.lr.ph541

; <label>:712                                     ; preds = %._crit_edge542, %._crit_edge850
  %713 = phi i32 [ %.pre852, %._crit_edge850 ], [ %671, %._crit_edge542 ]
  store i32 24, i32* %3, align 4
  %714 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %715 = icmp sgt i32 %713, 0
  %.pre982 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %715, label %._crit_edge537, label %.lr.ph536.preheader

.lr.ph536.preheader:                              ; preds = %712
  br label %.lr.ph536

._crit_edge537.loopexit:                          ; preds = %.backedge140
  %.lcssa1275 = phi i32 [ %754, %.backedge140 ]
  br label %._crit_edge537

._crit_edge537:                                   ; preds = %._crit_edge537.loopexit, %712
  %.lcssa285 = phi i32 [ %713, %712 ], [ %.lcssa1275, %._crit_edge537.loopexit ]
  %716 = load i32* %.pre982, align 4
  %717 = add nsw i32 %.lcssa285, -1
  %718 = lshr i32 %716, %717
  store i32 %717, i32* %714, align 4
  %.tr = trunc i32 %718 to i8
  %719 = and i8 %.tr, 1
  %720 = getelementptr inbounds %struct.DState* %s, i64 0, i32 4
  store i8 %719, i8* %720, align 1
  %721 = getelementptr inbounds %struct.DState* %s, i64 0, i32 13
  store i32 0, i32* %721, align 4
  br label %756

.lr.ph536:                                        ; preds = %.backedge140, %.lr.ph536.preheader
  %722 = phi i32 [ %754, %.backedge140 ], [ %713, %.lr.ph536.preheader ]
  %723 = load %struct.bz_stream** %1, align 8
  %724 = getelementptr inbounds %struct.bz_stream* %723, i64 0, i32 1
  %725 = load i32* %724, align 4
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %.loopexit.loopexit1213, label %727

; <label>:727                                     ; preds = %.lr.ph536
  %728 = load i32* %.pre982, align 4
  %729 = shl i32 %728, 8
  %730 = getelementptr inbounds %struct.bz_stream* %723, i64 0, i32 0
  %731 = load i8** %730, align 8
  %732 = load i8* %731, align 1
  %733 = zext i8 %732 to i32
  %734 = or i32 %733, %729
  store i32 %734, i32* %.pre982, align 4
  %735 = add nsw i32 %722, 8
  store i32 %735, i32* %714, align 4
  %736 = load i8** %730, align 8
  %737 = getelementptr inbounds i8* %736, i64 1
  store i8* %737, i8** %730, align 8
  %738 = load %struct.bz_stream** %1, align 8
  %739 = getelementptr inbounds %struct.bz_stream* %738, i64 0, i32 1
  %740 = load i32* %739, align 4
  %741 = add i32 %740, -1
  store i32 %741, i32* %739, align 4
  %742 = load %struct.bz_stream** %1, align 8
  %743 = getelementptr inbounds %struct.bz_stream* %742, i64 0, i32 2
  %744 = load i32* %743, align 4
  %745 = add i32 %744, 1
  store i32 %745, i32* %743, align 4
  %746 = load %struct.bz_stream** %1, align 8
  %747 = getelementptr inbounds %struct.bz_stream* %746, i64 0, i32 2
  %748 = load i32* %747, align 4
  %749 = icmp eq i32 %748, 0
  br i1 %749, label %750, label %.backedge140

; <label>:750                                     ; preds = %727
  %751 = getelementptr inbounds %struct.bz_stream* %746, i64 0, i32 3
  %752 = load i32* %751, align 4
  %753 = add i32 %752, 1
  store i32 %753, i32* %751, align 4
  br label %.backedge140

.backedge140:                                     ; preds = %750, %727
  %754 = load i32* %714, align 4
  %755 = icmp sgt i32 %754, 0
  br i1 %755, label %._crit_edge537.loopexit, label %.lr.ph536

; <label>:756                                     ; preds = %._crit_edge537, %._crit_edge853
  %757 = phi i32 [ %.pre855, %._crit_edge853 ], [ %717, %._crit_edge537 ]
  store i32 25, i32* %3, align 4
  %758 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %759 = icmp sgt i32 %757, 7
  %.pre984 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %759, label %._crit_edge532, label %.lr.ph531.preheader

.lr.ph531.preheader:                              ; preds = %756
  br label %.lr.ph531

._crit_edge532.loopexit:                          ; preds = %.backedge138
  %.lcssa1274 = phi i32 [ %800, %.backedge138 ]
  br label %._crit_edge532

._crit_edge532:                                   ; preds = %._crit_edge532.loopexit, %756
  %.lcssa281 = phi i32 [ %757, %756 ], [ %.lcssa1274, %._crit_edge532.loopexit ]
  %760 = load i32* %.pre984, align 4
  %761 = add nsw i32 %.lcssa281, -8
  %762 = lshr i32 %760, %761
  store i32 %761, i32* %758, align 4
  %763 = getelementptr inbounds %struct.DState* %s, i64 0, i32 13
  %764 = load i32* %763, align 4
  %765 = shl i32 %764, 8
  %766 = and i32 %762, 255
  %767 = or i32 %765, %766
  store i32 %767, i32* %763, align 4
  br label %802

.lr.ph531:                                        ; preds = %.backedge138, %.lr.ph531.preheader
  %768 = phi i32 [ %800, %.backedge138 ], [ %757, %.lr.ph531.preheader ]
  %769 = load %struct.bz_stream** %1, align 8
  %770 = getelementptr inbounds %struct.bz_stream* %769, i64 0, i32 1
  %771 = load i32* %770, align 4
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %.loopexit.loopexit1212, label %773

; <label>:773                                     ; preds = %.lr.ph531
  %774 = load i32* %.pre984, align 4
  %775 = shl i32 %774, 8
  %776 = getelementptr inbounds %struct.bz_stream* %769, i64 0, i32 0
  %777 = load i8** %776, align 8
  %778 = load i8* %777, align 1
  %779 = zext i8 %778 to i32
  %780 = or i32 %779, %775
  store i32 %780, i32* %.pre984, align 4
  %781 = add nsw i32 %768, 8
  store i32 %781, i32* %758, align 4
  %782 = load i8** %776, align 8
  %783 = getelementptr inbounds i8* %782, i64 1
  store i8* %783, i8** %776, align 8
  %784 = load %struct.bz_stream** %1, align 8
  %785 = getelementptr inbounds %struct.bz_stream* %784, i64 0, i32 1
  %786 = load i32* %785, align 4
  %787 = add i32 %786, -1
  store i32 %787, i32* %785, align 4
  %788 = load %struct.bz_stream** %1, align 8
  %789 = getelementptr inbounds %struct.bz_stream* %788, i64 0, i32 2
  %790 = load i32* %789, align 4
  %791 = add i32 %790, 1
  store i32 %791, i32* %789, align 4
  %792 = load %struct.bz_stream** %1, align 8
  %793 = getelementptr inbounds %struct.bz_stream* %792, i64 0, i32 2
  %794 = load i32* %793, align 4
  %795 = icmp eq i32 %794, 0
  br i1 %795, label %796, label %.backedge138

; <label>:796                                     ; preds = %773
  %797 = getelementptr inbounds %struct.bz_stream* %792, i64 0, i32 3
  %798 = load i32* %797, align 4
  %799 = add i32 %798, 1
  store i32 %799, i32* %797, align 4
  br label %.backedge138

.backedge138:                                     ; preds = %796, %773
  %800 = load i32* %758, align 4
  %801 = icmp sgt i32 %800, 7
  br i1 %801, label %._crit_edge532.loopexit, label %.lr.ph531

; <label>:802                                     ; preds = %._crit_edge532, %._crit_edge856
  %803 = phi i32 [ %.pre858, %._crit_edge856 ], [ %761, %._crit_edge532 ]
  store i32 26, i32* %3, align 4
  %804 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %805 = icmp sgt i32 %803, 7
  %.pre986 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %805, label %._crit_edge527, label %.lr.ph526.preheader

.lr.ph526.preheader:                              ; preds = %802
  br label %.lr.ph526

._crit_edge527.loopexit:                          ; preds = %.backedge136
  %.lcssa1273 = phi i32 [ %846, %.backedge136 ]
  br label %._crit_edge527

._crit_edge527:                                   ; preds = %._crit_edge527.loopexit, %802
  %.lcssa277 = phi i32 [ %803, %802 ], [ %.lcssa1273, %._crit_edge527.loopexit ]
  %806 = load i32* %.pre986, align 4
  %807 = add nsw i32 %.lcssa277, -8
  %808 = lshr i32 %806, %807
  store i32 %807, i32* %804, align 4
  %809 = getelementptr inbounds %struct.DState* %s, i64 0, i32 13
  %810 = load i32* %809, align 4
  %811 = shl i32 %810, 8
  %812 = and i32 %808, 255
  %813 = or i32 %811, %812
  store i32 %813, i32* %809, align 4
  br label %848

.lr.ph526:                                        ; preds = %.backedge136, %.lr.ph526.preheader
  %814 = phi i32 [ %846, %.backedge136 ], [ %803, %.lr.ph526.preheader ]
  %815 = load %struct.bz_stream** %1, align 8
  %816 = getelementptr inbounds %struct.bz_stream* %815, i64 0, i32 1
  %817 = load i32* %816, align 4
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %.loopexit.loopexit1211, label %819

; <label>:819                                     ; preds = %.lr.ph526
  %820 = load i32* %.pre986, align 4
  %821 = shl i32 %820, 8
  %822 = getelementptr inbounds %struct.bz_stream* %815, i64 0, i32 0
  %823 = load i8** %822, align 8
  %824 = load i8* %823, align 1
  %825 = zext i8 %824 to i32
  %826 = or i32 %825, %821
  store i32 %826, i32* %.pre986, align 4
  %827 = add nsw i32 %814, 8
  store i32 %827, i32* %804, align 4
  %828 = load i8** %822, align 8
  %829 = getelementptr inbounds i8* %828, i64 1
  store i8* %829, i8** %822, align 8
  %830 = load %struct.bz_stream** %1, align 8
  %831 = getelementptr inbounds %struct.bz_stream* %830, i64 0, i32 1
  %832 = load i32* %831, align 4
  %833 = add i32 %832, -1
  store i32 %833, i32* %831, align 4
  %834 = load %struct.bz_stream** %1, align 8
  %835 = getelementptr inbounds %struct.bz_stream* %834, i64 0, i32 2
  %836 = load i32* %835, align 4
  %837 = add i32 %836, 1
  store i32 %837, i32* %835, align 4
  %838 = load %struct.bz_stream** %1, align 8
  %839 = getelementptr inbounds %struct.bz_stream* %838, i64 0, i32 2
  %840 = load i32* %839, align 4
  %841 = icmp eq i32 %840, 0
  br i1 %841, label %842, label %.backedge136

; <label>:842                                     ; preds = %819
  %843 = getelementptr inbounds %struct.bz_stream* %838, i64 0, i32 3
  %844 = load i32* %843, align 4
  %845 = add i32 %844, 1
  store i32 %845, i32* %843, align 4
  br label %.backedge136

.backedge136:                                     ; preds = %842, %819
  %846 = load i32* %804, align 4
  %847 = icmp sgt i32 %846, 7
  br i1 %847, label %._crit_edge527.loopexit, label %.lr.ph526

; <label>:848                                     ; preds = %._crit_edge527, %._crit_edge859
  %849 = phi i32 [ %.pre861, %._crit_edge859 ], [ %807, %._crit_edge527 ]
  store i32 27, i32* %3, align 4
  %850 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %851 = icmp sgt i32 %849, 7
  %.pre988 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %851, label %._crit_edge522, label %.lr.ph521.preheader

.lr.ph521.preheader:                              ; preds = %848
  br label %.lr.ph521

._crit_edge522.loopexit:                          ; preds = %.backedge134
  %.lcssa1272 = phi i32 [ %893, %.backedge134 ]
  br label %._crit_edge522

._crit_edge522:                                   ; preds = %._crit_edge522.loopexit, %848
  %.lcssa273 = phi i32 [ %849, %848 ], [ %.lcssa1272, %._crit_edge522.loopexit ]
  %852 = load i32* %.pre988, align 4
  %853 = add nsw i32 %.lcssa273, -8
  %854 = lshr i32 %852, %853
  store i32 %853, i32* %850, align 4
  %855 = getelementptr inbounds %struct.DState* %s, i64 0, i32 13
  %856 = load i32* %855, align 4
  %857 = shl i32 %856, 8
  %858 = and i32 %854, 255
  %859 = or i32 %857, %858
  store i32 %859, i32* %855, align 4
  %860 = icmp slt i32 %859, 0
  br i1 %860, label %.loopexit, label %895

.lr.ph521:                                        ; preds = %.backedge134, %.lr.ph521.preheader
  %861 = phi i32 [ %893, %.backedge134 ], [ %849, %.lr.ph521.preheader ]
  %862 = load %struct.bz_stream** %1, align 8
  %863 = getelementptr inbounds %struct.bz_stream* %862, i64 0, i32 1
  %864 = load i32* %863, align 4
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %.loopexit.loopexit1210, label %866

; <label>:866                                     ; preds = %.lr.ph521
  %867 = load i32* %.pre988, align 4
  %868 = shl i32 %867, 8
  %869 = getelementptr inbounds %struct.bz_stream* %862, i64 0, i32 0
  %870 = load i8** %869, align 8
  %871 = load i8* %870, align 1
  %872 = zext i8 %871 to i32
  %873 = or i32 %872, %868
  store i32 %873, i32* %.pre988, align 4
  %874 = add nsw i32 %861, 8
  store i32 %874, i32* %850, align 4
  %875 = load i8** %869, align 8
  %876 = getelementptr inbounds i8* %875, i64 1
  store i8* %876, i8** %869, align 8
  %877 = load %struct.bz_stream** %1, align 8
  %878 = getelementptr inbounds %struct.bz_stream* %877, i64 0, i32 1
  %879 = load i32* %878, align 4
  %880 = add i32 %879, -1
  store i32 %880, i32* %878, align 4
  %881 = load %struct.bz_stream** %1, align 8
  %882 = getelementptr inbounds %struct.bz_stream* %881, i64 0, i32 2
  %883 = load i32* %882, align 4
  %884 = add i32 %883, 1
  store i32 %884, i32* %882, align 4
  %885 = load %struct.bz_stream** %1, align 8
  %886 = getelementptr inbounds %struct.bz_stream* %885, i64 0, i32 2
  %887 = load i32* %886, align 4
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %889, label %.backedge134

; <label>:889                                     ; preds = %866
  %890 = getelementptr inbounds %struct.bz_stream* %885, i64 0, i32 3
  %891 = load i32* %890, align 4
  %892 = add i32 %891, 1
  store i32 %892, i32* %890, align 4
  br label %.backedge134

.backedge134:                                     ; preds = %889, %866
  %893 = load i32* %850, align 4
  %894 = icmp sgt i32 %893, 7
  br i1 %894, label %._crit_edge522.loopexit, label %.lr.ph521

; <label>:895                                     ; preds = %._crit_edge522
  %896 = getelementptr inbounds %struct.DState* %s, i64 0, i32 9
  %897 = load i32* %896, align 4
  %898 = mul nsw i32 %897, 100000
  %899 = or i32 %898, 10
  %900 = icmp sgt i32 %859, %899
  br i1 %900, label %.loopexit, label %901

; <label>:901                                     ; preds = %._crit_edge386, %895
  %i.0 = phi i32 [ %913, %._crit_edge386 ], [ 0, %895 ]
  %902 = icmp slt i32 %i.0, 16
  br i1 %902, label %903, label %.preheader131

.preheader131:                                    ; preds = %901
  %scevgep733 = getelementptr %struct.DState* %s, i64 0, i32 28, i64 0
  call void @llvm.memset.p0i8.i64(i8* %scevgep733, i8 0, i64 256, i32 1, i1 false)
  br label %948

; <label>:903                                     ; preds = %901, %9
  %i.1 = phi i32 [ %33, %9 ], [ %i.0, %901 ]
  store i32 28, i32* %3, align 4
  %904 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %905 = load i32* %904, align 4
  %906 = icmp sgt i32 %905, 0
  %.pre990 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %906, label %._crit_edge386, label %.lr.ph385.preheader

.lr.ph385.preheader:                              ; preds = %903
  br label %.lr.ph385

._crit_edge386.loopexit:                          ; preds = %.backedge80
  %.lcssa1236 = phi i32 [ %946, %.backedge80 ]
  br label %._crit_edge386

._crit_edge386:                                   ; preds = %._crit_edge386.loopexit, %903
  %.lcssa206 = phi i32 [ %905, %903 ], [ %.lcssa1236, %._crit_edge386.loopexit ]
  %907 = load i32* %.pre990, align 4
  %908 = add nsw i32 %.lcssa206, -1
  store i32 %908, i32* %904, align 4
  %909 = shl i32 1, %908
  %910 = and i32 %907, %909
  %911 = sext i32 %i.1 to i64
  %912 = getelementptr inbounds %struct.DState* %s, i64 0, i32 29, i64 %911
  %not. = icmp ne i32 %910, 0
  %. = zext i1 %not. to i8
  store i8 %., i8* %912, align 1
  %913 = add nsw i32 %i.1, 1
  br label %901

.lr.ph385:                                        ; preds = %.backedge80, %.lr.ph385.preheader
  %914 = phi i32 [ %946, %.backedge80 ], [ %905, %.lr.ph385.preheader ]
  %915 = load %struct.bz_stream** %1, align 8
  %916 = getelementptr inbounds %struct.bz_stream* %915, i64 0, i32 1
  %917 = load i32* %916, align 4
  %918 = icmp eq i32 %917, 0
  br i1 %918, label %.loopexit.loopexit1191, label %919

; <label>:919                                     ; preds = %.lr.ph385
  %920 = load i32* %.pre990, align 4
  %921 = shl i32 %920, 8
  %922 = getelementptr inbounds %struct.bz_stream* %915, i64 0, i32 0
  %923 = load i8** %922, align 8
  %924 = load i8* %923, align 1
  %925 = zext i8 %924 to i32
  %926 = or i32 %925, %921
  store i32 %926, i32* %.pre990, align 4
  %927 = add nsw i32 %914, 8
  store i32 %927, i32* %904, align 4
  %928 = load i8** %922, align 8
  %929 = getelementptr inbounds i8* %928, i64 1
  store i8* %929, i8** %922, align 8
  %930 = load %struct.bz_stream** %1, align 8
  %931 = getelementptr inbounds %struct.bz_stream* %930, i64 0, i32 1
  %932 = load i32* %931, align 4
  %933 = add i32 %932, -1
  store i32 %933, i32* %931, align 4
  %934 = load %struct.bz_stream** %1, align 8
  %935 = getelementptr inbounds %struct.bz_stream* %934, i64 0, i32 2
  %936 = load i32* %935, align 4
  %937 = add i32 %936, 1
  store i32 %937, i32* %935, align 4
  %938 = load %struct.bz_stream** %1, align 8
  %939 = getelementptr inbounds %struct.bz_stream* %938, i64 0, i32 2
  %940 = load i32* %939, align 4
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %942, label %.backedge80

; <label>:942                                     ; preds = %919
  %943 = getelementptr inbounds %struct.bz_stream* %938, i64 0, i32 3
  %944 = load i32* %943, align 4
  %945 = add i32 %944, 1
  store i32 %945, i32* %943, align 4
  br label %.backedge80

.backedge80:                                      ; preds = %942, %919
  %946 = load i32* %904, align 4
  %947 = icmp sgt i32 %946, 0
  br i1 %947, label %._crit_edge386.loopexit, label %.lr.ph385

; <label>:948                                     ; preds = %1007, %.preheader131
  %j.0 = phi i32 [ %j.3, %1007 ], [ %32, %.preheader131 ]
  %i.3 = phi i32 [ %1008, %1007 ], [ 0, %.preheader131 ]
  %949 = icmp slt i32 %i.3, 16
  br i1 %949, label %950, label %1009

; <label>:950                                     ; preds = %948
  %951 = sext i32 %i.3 to i64
  %952 = getelementptr inbounds %struct.DState* %s, i64 0, i32 29, i64 %951
  %953 = load i8* %952, align 1
  %954 = icmp eq i8 %953, 0
  br i1 %954, label %1007, label %955

; <label>:955                                     ; preds = %1005, %950
  %j.1 = phi i32 [ %1006, %1005 ], [ 0, %950 ]
  %i.4 = phi i32 [ %i.5, %1005 ], [ %i.3, %950 ]
  %956 = icmp slt i32 %j.1, 16
  br i1 %956, label %957, label %1007

; <label>:957                                     ; preds = %955, %9
  %j.2 = phi i32 [ %32, %9 ], [ %j.1, %955 ]
  %i.5 = phi i32 [ %33, %9 ], [ %i.4, %955 ]
  store i32 29, i32* %3, align 4
  %958 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %959 = load i32* %958, align 4
  %960 = icmp sgt i32 %959, 0
  %.pre992 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %960, label %._crit_edge391, label %.lr.ph390.preheader

.lr.ph390.preheader:                              ; preds = %957
  br label %.lr.ph390

._crit_edge391.loopexit:                          ; preds = %.backedge82
  %.lcssa1237 = phi i32 [ %998, %.backedge82 ]
  br label %._crit_edge391

._crit_edge391:                                   ; preds = %._crit_edge391.loopexit, %957
  %.lcssa210 = phi i32 [ %959, %957 ], [ %.lcssa1237, %._crit_edge391.loopexit ]
  %961 = load i32* %.pre992, align 4
  %962 = add nsw i32 %.lcssa210, -1
  store i32 %962, i32* %958, align 4
  %963 = shl i32 1, %962
  %964 = and i32 %961, %963
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %1005, label %1000

.lr.ph390:                                        ; preds = %.backedge82, %.lr.ph390.preheader
  %966 = phi i32 [ %998, %.backedge82 ], [ %959, %.lr.ph390.preheader ]
  %967 = load %struct.bz_stream** %1, align 8
  %968 = getelementptr inbounds %struct.bz_stream* %967, i64 0, i32 1
  %969 = load i32* %968, align 4
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %.loopexit.loopexit1192, label %971

; <label>:971                                     ; preds = %.lr.ph390
  %972 = load i32* %.pre992, align 4
  %973 = shl i32 %972, 8
  %974 = getelementptr inbounds %struct.bz_stream* %967, i64 0, i32 0
  %975 = load i8** %974, align 8
  %976 = load i8* %975, align 1
  %977 = zext i8 %976 to i32
  %978 = or i32 %977, %973
  store i32 %978, i32* %.pre992, align 4
  %979 = add nsw i32 %966, 8
  store i32 %979, i32* %958, align 4
  %980 = load i8** %974, align 8
  %981 = getelementptr inbounds i8* %980, i64 1
  store i8* %981, i8** %974, align 8
  %982 = load %struct.bz_stream** %1, align 8
  %983 = getelementptr inbounds %struct.bz_stream* %982, i64 0, i32 1
  %984 = load i32* %983, align 4
  %985 = add i32 %984, -1
  store i32 %985, i32* %983, align 4
  %986 = load %struct.bz_stream** %1, align 8
  %987 = getelementptr inbounds %struct.bz_stream* %986, i64 0, i32 2
  %988 = load i32* %987, align 4
  %989 = add i32 %988, 1
  store i32 %989, i32* %987, align 4
  %990 = load %struct.bz_stream** %1, align 8
  %991 = getelementptr inbounds %struct.bz_stream* %990, i64 0, i32 2
  %992 = load i32* %991, align 4
  %993 = icmp eq i32 %992, 0
  br i1 %993, label %994, label %.backedge82

; <label>:994                                     ; preds = %971
  %995 = getelementptr inbounds %struct.bz_stream* %990, i64 0, i32 3
  %996 = load i32* %995, align 4
  %997 = add i32 %996, 1
  store i32 %997, i32* %995, align 4
  br label %.backedge82

.backedge82:                                      ; preds = %994, %971
  %998 = load i32* %958, align 4
  %999 = icmp sgt i32 %998, 0
  br i1 %999, label %._crit_edge391.loopexit, label %.lr.ph390

; <label>:1000                                    ; preds = %._crit_edge391
  %1001 = shl i32 %i.5, 4
  %1002 = add nsw i32 %1001, %j.2
  %1003 = sext i32 %1002 to i64
  %1004 = getelementptr inbounds %struct.DState* %s, i64 0, i32 28, i64 %1003
  store i8 1, i8* %1004, align 1
  br label %1005

; <label>:1005                                    ; preds = %1000, %._crit_edge391
  %1006 = add nsw i32 %j.2, 1
  br label %955

; <label>:1007                                    ; preds = %955, %950
  %j.3 = phi i32 [ %j.1, %955 ], [ %j.0, %950 ]
  %i.6 = phi i32 [ %i.4, %955 ], [ %i.3, %950 ]
  %1008 = add nsw i32 %i.6, 1
  br label %948

; <label>:1009                                    ; preds = %948
  %1010 = getelementptr inbounds %struct.DState* %s, i64 0, i32 27
  store i32 0, i32* %1010, align 4
  br label %1011

; <label>:1011                                    ; preds = %2729, %1009
  %1012 = phi i32 [ 0, %1009 ], [ %2730, %2729 ]
  %indvars.iv.i = phi i64 [ 0, %1009 ], [ %indvars.iv.next.i.1, %2729 ]
  %1013 = getelementptr inbounds %struct.DState* %s, i64 0, i32 28, i64 %indvars.iv.i
  %1014 = load i8* %1013, align 1
  %1015 = icmp eq i8 %1014, 0
  br i1 %1015, label %1022, label %1016

; <label>:1016                                    ; preds = %1011
  %1017 = trunc i64 %indvars.iv.i to i8
  %1018 = sext i32 %1012 to i64
  %1019 = getelementptr inbounds %struct.DState* %s, i64 0, i32 30, i64 %1018
  store i8 %1017, i8* %1019, align 1
  %1020 = load i32* %1010, align 4
  %1021 = add nsw i32 %1020, 1
  store i32 %1021, i32* %1010, align 4
  br label %1022

; <label>:1022                                    ; preds = %1016, %1011
  %1023 = phi i32 [ %1012, %1011 ], [ %1021, %1016 ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %1024 = getelementptr inbounds %struct.DState* %s, i64 0, i32 28, i64 %indvars.iv.next.i
  %1025 = load i8* %1024, align 1
  %1026 = icmp eq i8 %1025, 0
  br i1 %1026, label %2729, label %2723

makeMaps_d.exit:                                  ; preds = %2729
  %.lcssa1271 = phi i32 [ %2730, %2729 ]
  %1027 = icmp eq i32 %.lcssa1271, 0
  br i1 %1027, label %.loopexit, label %1028

; <label>:1028                                    ; preds = %makeMaps_d.exit
  %1029 = add nsw i32 %.lcssa1271, 2
  br label %1030

; <label>:1030                                    ; preds = %1028, %9
  %alphaSize.0 = phi i32 [ %30, %9 ], [ %1029, %1028 ]
  %j.4 = phi i32 [ %32, %9 ], [ %j.0, %1028 ]
  %i.7 = phi i32 [ %33, %9 ], [ %i.3, %1028 ]
  store i32 30, i32* %3, align 4
  %1031 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1032 = load i32* %1031, align 4
  %1033 = icmp sgt i32 %1032, 2
  %.pre994 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1033, label %._crit_edge516, label %.lr.ph515.preheader

.lr.ph515.preheader:                              ; preds = %1030
  br label %.lr.ph515

._crit_edge516.loopexit:                          ; preds = %.backedge130
  %.lcssa1270 = phi i32 [ %1070, %.backedge130 ]
  br label %._crit_edge516

._crit_edge516:                                   ; preds = %._crit_edge516.loopexit, %1030
  %.lcssa269 = phi i32 [ %1032, %1030 ], [ %.lcssa1270, %._crit_edge516.loopexit ]
  %1034 = load i32* %.pre994, align 4
  %1035 = add nsw i32 %.lcssa269, -3
  %1036 = lshr i32 %1034, %1035
  %1037 = and i32 %1036, 7
  store i32 %1035, i32* %1031, align 4
  switch i32 %1037, label %1072 [
    i32 7, label %.loopexit
    i32 1, label %.loopexit
    i32 0, label %.loopexit
  ]

.lr.ph515:                                        ; preds = %.backedge130, %.lr.ph515.preheader
  %1038 = phi i32 [ %1070, %.backedge130 ], [ %1032, %.lr.ph515.preheader ]
  %1039 = load %struct.bz_stream** %1, align 8
  %1040 = getelementptr inbounds %struct.bz_stream* %1039, i64 0, i32 1
  %1041 = load i32* %1040, align 4
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %.loopexit.loopexit1209, label %1043

; <label>:1043                                    ; preds = %.lr.ph515
  %1044 = load i32* %.pre994, align 4
  %1045 = shl i32 %1044, 8
  %1046 = getelementptr inbounds %struct.bz_stream* %1039, i64 0, i32 0
  %1047 = load i8** %1046, align 8
  %1048 = load i8* %1047, align 1
  %1049 = zext i8 %1048 to i32
  %1050 = or i32 %1049, %1045
  store i32 %1050, i32* %.pre994, align 4
  %1051 = add nsw i32 %1038, 8
  store i32 %1051, i32* %1031, align 4
  %1052 = load i8** %1046, align 8
  %1053 = getelementptr inbounds i8* %1052, i64 1
  store i8* %1053, i8** %1046, align 8
  %1054 = load %struct.bz_stream** %1, align 8
  %1055 = getelementptr inbounds %struct.bz_stream* %1054, i64 0, i32 1
  %1056 = load i32* %1055, align 4
  %1057 = add i32 %1056, -1
  store i32 %1057, i32* %1055, align 4
  %1058 = load %struct.bz_stream** %1, align 8
  %1059 = getelementptr inbounds %struct.bz_stream* %1058, i64 0, i32 2
  %1060 = load i32* %1059, align 4
  %1061 = add i32 %1060, 1
  store i32 %1061, i32* %1059, align 4
  %1062 = load %struct.bz_stream** %1, align 8
  %1063 = getelementptr inbounds %struct.bz_stream* %1062, i64 0, i32 2
  %1064 = load i32* %1063, align 4
  %1065 = icmp eq i32 %1064, 0
  br i1 %1065, label %1066, label %.backedge130

; <label>:1066                                    ; preds = %1043
  %1067 = getelementptr inbounds %struct.bz_stream* %1062, i64 0, i32 3
  %1068 = load i32* %1067, align 4
  %1069 = add i32 %1068, 1
  store i32 %1069, i32* %1067, align 4
  br label %.backedge130

.backedge130:                                     ; preds = %1066, %1043
  %1070 = load i32* %1031, align 4
  %1071 = icmp sgt i32 %1070, 2
  br i1 %1071, label %._crit_edge516.loopexit, label %.lr.ph515

; <label>:1072                                    ; preds = %._crit_edge516, %._crit_edge862
  %1073 = phi i32 [ %.pre864, %._crit_edge862 ], [ %1035, %._crit_edge516 ]
  %nGroups.0 = phi i32 [ %29, %._crit_edge862 ], [ %1037, %._crit_edge516 ]
  %alphaSize.1 = phi i32 [ %30, %._crit_edge862 ], [ %alphaSize.0, %._crit_edge516 ]
  %j.5 = phi i32 [ %32, %._crit_edge862 ], [ %j.4, %._crit_edge516 ]
  %i.8 = phi i32 [ %33, %._crit_edge862 ], [ %i.7, %._crit_edge516 ]
  store i32 31, i32* %3, align 4
  %1074 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1075 = icmp sgt i32 %1073, 14
  %.pre996 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1075, label %._crit_edge511, label %.lr.ph510.preheader

.lr.ph510.preheader:                              ; preds = %1072
  br label %.lr.ph510

._crit_edge511.loopexit:                          ; preds = %.backedge128
  %.lcssa1269 = phi i32 [ %1113, %.backedge128 ]
  br label %._crit_edge511

._crit_edge511:                                   ; preds = %._crit_edge511.loopexit, %1072
  %.lcssa265 = phi i32 [ %1073, %1072 ], [ %.lcssa1269, %._crit_edge511.loopexit ]
  %1076 = load i32* %.pre996, align 4
  %1077 = add nsw i32 %.lcssa265, -15
  %1078 = lshr i32 %1076, %1077
  %1079 = and i32 %1078, 32767
  store i32 %1077, i32* %1074, align 4
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %.loopexit, label %1115

.lr.ph510:                                        ; preds = %.backedge128, %.lr.ph510.preheader
  %1081 = phi i32 [ %1113, %.backedge128 ], [ %1073, %.lr.ph510.preheader ]
  %1082 = load %struct.bz_stream** %1, align 8
  %1083 = getelementptr inbounds %struct.bz_stream* %1082, i64 0, i32 1
  %1084 = load i32* %1083, align 4
  %1085 = icmp eq i32 %1084, 0
  br i1 %1085, label %.loopexit.loopexit1208, label %1086

; <label>:1086                                    ; preds = %.lr.ph510
  %1087 = load i32* %.pre996, align 4
  %1088 = shl i32 %1087, 8
  %1089 = getelementptr inbounds %struct.bz_stream* %1082, i64 0, i32 0
  %1090 = load i8** %1089, align 8
  %1091 = load i8* %1090, align 1
  %1092 = zext i8 %1091 to i32
  %1093 = or i32 %1092, %1088
  store i32 %1093, i32* %.pre996, align 4
  %1094 = add nsw i32 %1081, 8
  store i32 %1094, i32* %1074, align 4
  %1095 = load i8** %1089, align 8
  %1096 = getelementptr inbounds i8* %1095, i64 1
  store i8* %1096, i8** %1089, align 8
  %1097 = load %struct.bz_stream** %1, align 8
  %1098 = getelementptr inbounds %struct.bz_stream* %1097, i64 0, i32 1
  %1099 = load i32* %1098, align 4
  %1100 = add i32 %1099, -1
  store i32 %1100, i32* %1098, align 4
  %1101 = load %struct.bz_stream** %1, align 8
  %1102 = getelementptr inbounds %struct.bz_stream* %1101, i64 0, i32 2
  %1103 = load i32* %1102, align 4
  %1104 = add i32 %1103, 1
  store i32 %1104, i32* %1102, align 4
  %1105 = load %struct.bz_stream** %1, align 8
  %1106 = getelementptr inbounds %struct.bz_stream* %1105, i64 0, i32 2
  %1107 = load i32* %1106, align 4
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1109, label %.backedge128

; <label>:1109                                    ; preds = %1086
  %1110 = getelementptr inbounds %struct.bz_stream* %1105, i64 0, i32 3
  %1111 = load i32* %1110, align 4
  %1112 = add i32 %1111, 1
  store i32 %1112, i32* %1110, align 4
  br label %.backedge128

.backedge128:                                     ; preds = %1109, %1086
  %1113 = load i32* %1074, align 4
  %1114 = icmp sgt i32 %1113, 14
  br i1 %1114, label %._crit_edge511.loopexit, label %.lr.ph510

; <label>:1115                                    ; preds = %1165, %._crit_edge511
  %nSelectors.0 = phi i32 [ %nSelectors.1.ph, %1165 ], [ %1079, %._crit_edge511 ]
  %nGroups.1 = phi i32 [ %nGroups.2.ph, %1165 ], [ %nGroups.0, %._crit_edge511 ]
  %alphaSize.2 = phi i32 [ %alphaSize.3.ph, %1165 ], [ %alphaSize.1, %._crit_edge511 ]
  %j.6 = phi i32 [ %j.7.lcssa1239, %1165 ], [ %j.5, %._crit_edge511 ]
  %i.9 = phi i32 [ %1169, %1165 ], [ 0, %._crit_edge511 ]
  %1116 = icmp slt i32 %i.9, %nSelectors.0
  br i1 %1116, label %.preheader, label %.preheader126

.preheader126:                                    ; preds = %1115
  %1117 = icmp sgt i32 %nGroups.1, 0
  br i1 %1117, label %.lr.ph508.preheader, label %.preheader124

.lr.ph508.preheader:                              ; preds = %.preheader126
  br label %.lr.ph508

.preheader:                                       ; preds = %1115, %9
  %nSelectors.1.ph = phi i32 [ %nSelectors.0, %1115 ], [ %28, %9 ]
  %nGroups.2.ph = phi i32 [ %nGroups.1, %1115 ], [ %29, %9 ]
  %alphaSize.3.ph = phi i32 [ %alphaSize.2, %1115 ], [ %30, %9 ]
  %j.7.ph = phi i32 [ 0, %1115 ], [ %32, %9 ]
  %i.10.ph = phi i32 [ %i.9, %1115 ], [ %33, %9 ]
  %1118 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1119 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  %.pre865 = load i32* %1118, align 4
  br label %1120

; <label>:1120                                    ; preds = %1162, %.preheader
  %1121 = phi i32 [ %1124, %1162 ], [ %.pre865, %.preheader ]
  %j.7 = phi i32 [ %1163, %1162 ], [ %j.7.ph, %.preheader ]
  store i32 32, i32* %3, align 4
  %1122 = icmp sgt i32 %1121, 0
  br i1 %1122, label %._crit_edge396, label %.lr.ph395.preheader

.lr.ph395.preheader:                              ; preds = %1120
  br label %.lr.ph395

._crit_edge396.loopexit:                          ; preds = %.backedge84
  %.lcssa1238 = phi i32 [ %1160, %.backedge84 ]
  br label %._crit_edge396

._crit_edge396:                                   ; preds = %._crit_edge396.loopexit, %1120
  %.lcssa214 = phi i32 [ %1121, %1120 ], [ %.lcssa1238, %._crit_edge396.loopexit ]
  %1123 = load i32* %1119, align 4
  %1124 = add nsw i32 %.lcssa214, -1
  store i32 %1124, i32* %1118, align 4
  %1125 = shl i32 1, %1124
  %1126 = and i32 %1123, %1125
  %1127 = icmp eq i32 %1126, 0
  br i1 %1127, label %1165, label %1162

.lr.ph395:                                        ; preds = %.backedge84, %.lr.ph395.preheader
  %1128 = phi i32 [ %1160, %.backedge84 ], [ %1121, %.lr.ph395.preheader ]
  %1129 = load %struct.bz_stream** %1, align 8
  %1130 = getelementptr inbounds %struct.bz_stream* %1129, i64 0, i32 1
  %1131 = load i32* %1130, align 4
  %1132 = icmp eq i32 %1131, 0
  br i1 %1132, label %.loopexit.loopexit1193, label %1133

; <label>:1133                                    ; preds = %.lr.ph395
  %1134 = load i32* %1119, align 4
  %1135 = shl i32 %1134, 8
  %1136 = getelementptr inbounds %struct.bz_stream* %1129, i64 0, i32 0
  %1137 = load i8** %1136, align 8
  %1138 = load i8* %1137, align 1
  %1139 = zext i8 %1138 to i32
  %1140 = or i32 %1139, %1135
  store i32 %1140, i32* %1119, align 4
  %1141 = add nsw i32 %1128, 8
  store i32 %1141, i32* %1118, align 4
  %1142 = load i8** %1136, align 8
  %1143 = getelementptr inbounds i8* %1142, i64 1
  store i8* %1143, i8** %1136, align 8
  %1144 = load %struct.bz_stream** %1, align 8
  %1145 = getelementptr inbounds %struct.bz_stream* %1144, i64 0, i32 1
  %1146 = load i32* %1145, align 4
  %1147 = add i32 %1146, -1
  store i32 %1147, i32* %1145, align 4
  %1148 = load %struct.bz_stream** %1, align 8
  %1149 = getelementptr inbounds %struct.bz_stream* %1148, i64 0, i32 2
  %1150 = load i32* %1149, align 4
  %1151 = add i32 %1150, 1
  store i32 %1151, i32* %1149, align 4
  %1152 = load %struct.bz_stream** %1, align 8
  %1153 = getelementptr inbounds %struct.bz_stream* %1152, i64 0, i32 2
  %1154 = load i32* %1153, align 4
  %1155 = icmp eq i32 %1154, 0
  br i1 %1155, label %1156, label %.backedge84

; <label>:1156                                    ; preds = %1133
  %1157 = getelementptr inbounds %struct.bz_stream* %1152, i64 0, i32 3
  %1158 = load i32* %1157, align 4
  %1159 = add i32 %1158, 1
  store i32 %1159, i32* %1157, align 4
  br label %.backedge84

.backedge84:                                      ; preds = %1156, %1133
  %1160 = load i32* %1118, align 4
  %1161 = icmp sgt i32 %1160, 0
  br i1 %1161, label %._crit_edge396.loopexit, label %.lr.ph395

; <label>:1162                                    ; preds = %._crit_edge396
  %1163 = add nsw i32 %j.7, 1
  %1164 = icmp slt i32 %1163, %nGroups.2.ph
  br i1 %1164, label %1120, label %.loopexit.loopexit1194

; <label>:1165                                    ; preds = %._crit_edge396
  %j.7.lcssa1239 = phi i32 [ %j.7, %._crit_edge396 ]
  %1166 = trunc i32 %j.7.lcssa1239 to i8
  %1167 = sext i32 %i.10.ph to i64
  %1168 = getelementptr inbounds %struct.DState* %s, i64 0, i32 34, i64 %1167
  store i8 %1166, i8* %1168, align 1
  %1169 = add nsw i32 %i.10.ph, 1
  br label %1115

.preheader124.loopexit:                           ; preds = %.lr.ph508
  br label %.preheader124

.preheader124:                                    ; preds = %.preheader124.loopexit, %.preheader126
  %1170 = icmp sgt i32 %nSelectors.0, 0
  br i1 %1170, label %.lr.ph505, label %.loopexit125

.lr.ph505:                                        ; preds = %.preheader124
  %1171 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 0
  br label %1177

.lr.ph508:                                        ; preds = %.lr.ph508, %.lr.ph508.preheader
  %v23.0507 = phi i8 [ %1174, %.lr.ph508 ], [ 0, %.lr.ph508.preheader ]
  %1172 = zext i8 %v23.0507 to i64
  %1173 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1172
  store i8 %v23.0507, i8* %1173, align 1
  %1174 = add i8 %v23.0507, 1
  %1175 = zext i8 %1174 to i32
  %1176 = icmp slt i32 %1175, %nGroups.1
  br i1 %1176, label %.lr.ph508, label %.preheader124.loopexit

; <label>:1177                                    ; preds = %._crit_edge503, %.lr.ph505
  %indvars.iv726 = phi i64 [ 0, %.lr.ph505 ], [ %indvars.iv.next727, %._crit_edge503 ]
  %1178 = getelementptr inbounds %struct.DState* %s, i64 0, i32 34, i64 %indvars.iv726
  %1179 = load i8* %1178, align 1
  %1180 = zext i8 %1179 to i64
  %1181 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1180
  %1182 = load i8* %1181, align 1
  %1183 = icmp eq i8 %1179, 0
  br i1 %1183, label %._crit_edge503, label %.lr.ph502.preheader

.lr.ph502.preheader:                              ; preds = %1177
  %xtraiter1294 = and i8 %1179, 1
  %lcmp.mod1295 = icmp ne i8 %xtraiter1294, 0
  %lcmp.overflow1296 = icmp eq i8 %1179, 0
  %lcmp.or1297 = or i1 %lcmp.overflow1296, %lcmp.mod1295
  br i1 %lcmp.or1297, label %.lr.ph502.unr, label %.lr.ph502.preheader.split

.lr.ph502.unr:                                    ; preds = %.lr.ph502.preheader
  %1184 = add i64 %1180, -1
  %1185 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1184
  %1186 = load i8* %1185, align 1
  %1187 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1180
  store i8 %1186, i8* %1187, align 1
  %1188 = add i8 %1179, -1
  %1189 = icmp eq i8 %1188, 0
  br label %.lr.ph502.preheader.split

.lr.ph502.preheader.split:                        ; preds = %.lr.ph502.unr, %.lr.ph502.preheader
  %indvars.iv724.unr = phi i64 [ %1180, %.lr.ph502.preheader ], [ %1184, %.lr.ph502.unr ]
  %v23.1500.unr = phi i8 [ %1179, %.lr.ph502.preheader ], [ %1188, %.lr.ph502.unr ]
  %1190 = icmp ult i8 %1179, 2
  br i1 %1190, label %._crit_edge503.loopexit, label %.lr.ph502.preheader.split.split

.lr.ph502.preheader.split.split:                  ; preds = %.lr.ph502.preheader.split
  br label %.lr.ph502

.lr.ph502:                                        ; preds = %.lr.ph502, %.lr.ph502.preheader.split.split
  %indvars.iv724 = phi i64 [ %indvars.iv724.unr, %.lr.ph502.preheader.split.split ], [ %1196, %.lr.ph502 ]
  %v23.1500 = phi i8 [ %v23.1500.unr, %.lr.ph502.preheader.split.split ], [ %1200, %.lr.ph502 ]
  %1191 = add i64 %indvars.iv724, -1
  %1192 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1191
  %1193 = load i8* %1192, align 1
  %1194 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %indvars.iv724
  store i8 %1193, i8* %1194, align 1
  %1195 = add i8 %v23.1500, -1
  %1196 = add i64 %1191, -1
  %1197 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1196
  %1198 = load i8* %1197, align 1
  %1199 = getelementptr inbounds [6 x i8]* %pos, i64 0, i64 %1191
  store i8 %1198, i8* %1199, align 1
  %1200 = add i8 %1195, -1
  %1201 = icmp eq i8 %1200, 0
  br i1 %1201, label %._crit_edge503.loopexit.unr-lcssa, label %.lr.ph502

._crit_edge503.loopexit.unr-lcssa:                ; preds = %.lr.ph502
  br label %._crit_edge503.loopexit

._crit_edge503.loopexit:                          ; preds = %._crit_edge503.loopexit.unr-lcssa, %.lr.ph502.preheader.split
  br label %._crit_edge503

._crit_edge503:                                   ; preds = %._crit_edge503.loopexit, %1177
  store i8 %1182, i8* %1171, align 1
  %1202 = getelementptr inbounds %struct.DState* %s, i64 0, i32 33, i64 %indvars.iv726
  store i8 %1182, i8* %1202, align 1
  %indvars.iv.next727 = add nuw nsw i64 %indvars.iv726, 1
  %lftr.wideiv728 = trunc i64 %indvars.iv.next727 to i32
  %exitcond729 = icmp eq i32 %lftr.wideiv728, %nSelectors.0
  br i1 %exitcond729, label %.loopexit125.loopexit, label %1177

.loopexit125.loopexit:                            ; preds = %._crit_edge503
  br label %.loopexit125

.loopexit125:                                     ; preds = %1394, %.loopexit125.loopexit, %.preheader124
  %curr.0 = phi i32 [ %curr.2, %1394 ], [ %19, %.preheader124 ], [ %19, %.loopexit125.loopexit ]
  %nSelectors.2 = phi i32 [ %nSelectors.4, %1394 ], [ %nSelectors.0, %.preheader124 ], [ %nSelectors.0, %.loopexit125.loopexit ]
  %nGroups.3 = phi i32 [ %nGroups.5, %1394 ], [ %nGroups.1, %.preheader124 ], [ %nGroups.1, %.loopexit125.loopexit ]
  %alphaSize.4 = phi i32 [ %alphaSize.6, %1394 ], [ %alphaSize.2, %.preheader124 ], [ %alphaSize.2, %.loopexit125.loopexit ]
  %t.0 = phi i32 [ %1395, %1394 ], [ 0, %.preheader124 ], [ 0, %.loopexit125.loopexit ]
  %j.8 = phi i32 [ %j.10, %1394 ], [ %j.6, %.preheader124 ], [ %j.6, %.loopexit125.loopexit ]
  %i.12 = phi i32 [ %i.14, %1394 ], [ 0, %.preheader124 ], [ %nSelectors.0, %.loopexit125.loopexit ]
  %1203 = icmp slt i32 %t.0, %nGroups.3
  br i1 %1203, label %1252, label %.preheader123

.preheader123:                                    ; preds = %.loopexit125
  %1204 = icmp sgt i32 %nGroups.3, 0
  br i1 %1204, label %.preheader122.lr.ph, label %.preheader121

.preheader122.lr.ph:                              ; preds = %.preheader123
  %1205 = icmp sgt i32 %alphaSize.4, 0
  br i1 %1205, label %.lr.ph493.us.preheader, label %.preheader122.preheader

.preheader122.preheader:                          ; preds = %.preheader122.lr.ph
  br label %.preheader122

.lr.ph493.us.preheader:                           ; preds = %.preheader122.lr.ph
  %1206 = add i32 %alphaSize.4, -1
  %1207 = zext i32 %1206 to i64
  %1208 = add nuw nsw i64 %1207, 1
  %1209 = add i32 %alphaSize.4, 1
  br label %overflow.checked

.loopexit1206.unr-lcssa:                          ; preds = %scalar.ph
  %minLen.1.us.lcssa1268.ph = phi i32 [ %minLen.1.us.1, %scalar.ph ]
  %.maxLen.0.us.lcssa1267.ph = phi i32 [ %.maxLen.0.us.1, %scalar.ph ]
  br label %.loopexit1206

.loopexit1206:                                    ; preds = %scalar.ph.preheader.split, %.loopexit1206.unr-lcssa
  %minLen.1.us.lcssa1268 = phi i32 [ %minLen.1.us.lcssa1268.unr, %scalar.ph.preheader.split ], [ %minLen.1.us.lcssa1268.ph, %.loopexit1206.unr-lcssa ]
  %.maxLen.0.us.lcssa1267 = phi i32 [ %.maxLen.0.us.lcssa1267.unr, %scalar.ph.preheader.split ], [ %.maxLen.0.us.lcssa1267.ph, %.loopexit1206.unr-lcssa ]
  br label %1210

; <label>:1210                                    ; preds = %middle.block, %.loopexit1206
  %minLen.1.us.lcssa = phi i32 [ %1242, %middle.block ], [ %minLen.1.us.lcssa1268, %.loopexit1206 ]
  %.maxLen.0.us.lcssa = phi i32 [ %1241, %middle.block ], [ %.maxLen.0.us.lcssa1267, %.loopexit1206 ]
  %1211 = getelementptr inbounds %struct.DState* %s, i64 0, i32 36, i64 %indvars.iv738, i64 0
  %1212 = getelementptr inbounds %struct.DState* %s, i64 0, i32 37, i64 %indvars.iv738, i64 0
  %1213 = getelementptr inbounds %struct.DState* %s, i64 0, i32 38, i64 %indvars.iv738, i64 0
  %1214 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv738, i64 0
  tail call void @BZ2_hbCreateDecodeTables(i32* %1211, i32* %1212, i32* %1213, i8* %1214, i32 %minLen.1.us.lcssa, i32 %.maxLen.0.us.lcssa, i32 %alphaSize.4) #2
  %1215 = getelementptr inbounds %struct.DState* %s, i64 0, i32 39, i64 %indvars.iv738
  store i32 %minLen.1.us.lcssa, i32* %1215, align 4
  %indvars.iv.next739 = add nuw nsw i64 %indvars.iv738, 1
  %lftr.wideiv740 = trunc i64 %indvars.iv.next739 to i32
  %exitcond741 = icmp eq i32 %lftr.wideiv740, %nGroups.3
  br i1 %exitcond741, label %.preheader121.loopexit, label %overflow.checked

scalar.ph:                                        ; preds = %scalar.ph.preheader.split.split, %scalar.ph
  %indvars.iv734 = phi i64 [ %indvars.iv734.unr, %scalar.ph.preheader.split.split ], [ %indvars.iv.next735.1, %scalar.ph ]
  %minLen.0492.us = phi i32 [ %minLen.0492.us.unr, %scalar.ph.preheader.split.split ], [ %minLen.1.us.1, %scalar.ph ]
  %maxLen.0491.us = phi i32 [ %maxLen.0491.us.unr, %scalar.ph.preheader.split.split ], [ %.maxLen.0.us.1, %scalar.ph ]
  %1216 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv738, i64 %indvars.iv734
  %1217 = load i8* %1216, align 1
  %1218 = zext i8 %1217 to i32
  %1219 = icmp sgt i32 %1218, %maxLen.0491.us
  %.maxLen.0.us = select i1 %1219, i32 %1218, i32 %maxLen.0491.us
  %1220 = icmp slt i32 %1218, %minLen.0492.us
  %minLen.1.us = select i1 %1220, i32 %1218, i32 %minLen.0492.us
  %indvars.iv.next735 = add nuw nsw i64 %indvars.iv734, 1
  %lftr.wideiv736 = trunc i64 %indvars.iv.next735 to i32
  %1221 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv738, i64 %indvars.iv.next735
  %1222 = load i8* %1221, align 1
  %1223 = zext i8 %1222 to i32
  %1224 = icmp sgt i32 %1223, %.maxLen.0.us
  %.maxLen.0.us.1 = select i1 %1224, i32 %1223, i32 %.maxLen.0.us
  %1225 = icmp slt i32 %1223, %minLen.1.us
  %minLen.1.us.1 = select i1 %1225, i32 %1223, i32 %minLen.1.us
  %indvars.iv.next735.1 = add nuw nsw i64 %indvars.iv.next735, 1
  %lftr.wideiv736.1 = trunc i64 %indvars.iv.next735.1 to i32
  %exitcond737.1 = icmp eq i32 %lftr.wideiv736.1, %alphaSize.4
  br i1 %exitcond737.1, label %.loopexit1206.unr-lcssa, label %scalar.ph, !llvm.loop !28

overflow.checked:                                 ; preds = %1210, %.lr.ph493.us.preheader
  %indvars.iv738 = phi i64 [ %indvars.iv.next739, %1210 ], [ 0, %.lr.ph493.us.preheader ]
  %end.idx = add nuw nsw i64 %1207, 1
  %n.vec = and i64 %1208, 8589934584
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %vec.phi = phi <4 x i32> [ %1238, %vector.body ], [ <i32 32, i32 32, i32 32, i32 32>, %vector.body.preheader ]
  %vec.phi1123 = phi <4 x i32> [ %1239, %vector.body ], [ <i32 32, i32 32, i32 32, i32 32>, %vector.body.preheader ]
  %vec.phi1124 = phi <4 x i32> [ %1234, %vector.body ], [ zeroinitializer, %vector.body.preheader ]
  %vec.phi1125 = phi <4 x i32> [ %1235, %vector.body ], [ zeroinitializer, %vector.body.preheader ]
  %1226 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv738, i64 %index
  %1227 = bitcast i8* %1226 to <4 x i8>*
  %wide.load = load <4 x i8>* %1227, align 1
  %.sum1182 = or i64 %index, 4
  %1228 = getelementptr %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv738, i64 %.sum1182
  %1229 = bitcast i8* %1228 to <4 x i8>*
  %wide.load1126 = load <4 x i8>* %1229, align 1
  %1230 = zext <4 x i8> %wide.load to <4 x i32>
  %1231 = zext <4 x i8> %wide.load1126 to <4 x i32>
  %1232 = icmp sgt <4 x i32> %1230, %vec.phi1124
  %1233 = icmp sgt <4 x i32> %1231, %vec.phi1125
  %1234 = select <4 x i1> %1232, <4 x i32> %1230, <4 x i32> %vec.phi1124
  %1235 = select <4 x i1> %1233, <4 x i32> %1231, <4 x i32> %vec.phi1125
  %1236 = icmp slt <4 x i32> %1230, %vec.phi
  %1237 = icmp slt <4 x i32> %1231, %vec.phi1123
  %1238 = select <4 x i1> %1236, <4 x i32> %1230, <4 x i32> %vec.phi
  %1239 = select <4 x i1> %1237, <4 x i32> %1231, <4 x i32> %vec.phi1123
  %index.next = add i64 %index, 8
  %1240 = icmp eq i64 %index.next, %n.vec
  br i1 %1240, label %middle.block.loopexit, label %vector.body, !llvm.loop !29

middle.block.loopexit:                            ; preds = %vector.body
  %.lcssa1266 = phi <4 x i32> [ %1239, %vector.body ]
  %.lcssa1265 = phi <4 x i32> [ %1238, %vector.body ]
  %.lcssa1264 = phi <4 x i32> [ %1235, %vector.body ]
  %.lcssa1263 = phi <4 x i32> [ %1234, %vector.body ]
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i64 [ 0, %overflow.checked ], [ %n.vec, %middle.block.loopexit ]
  %rdx.vec.exit.phi = phi <4 x i32> [ <i32 32, i32 32, i32 32, i32 32>, %overflow.checked ], [ %.lcssa1265, %middle.block.loopexit ]
  %rdx.vec.exit.phi1129 = phi <4 x i32> [ <i32 32, i32 32, i32 32, i32 32>, %overflow.checked ], [ %.lcssa1266, %middle.block.loopexit ]
  %rdx.vec.exit.phi1135 = phi <4 x i32> [ zeroinitializer, %overflow.checked ], [ %.lcssa1263, %middle.block.loopexit ]
  %rdx.vec.exit.phi1136 = phi <4 x i32> [ zeroinitializer, %overflow.checked ], [ %.lcssa1264, %middle.block.loopexit ]
  %rdx.minmax.cmp1137 = icmp sgt <4 x i32> %rdx.vec.exit.phi1135, %rdx.vec.exit.phi1136
  %rdx.minmax.select1138 = select <4 x i1> %rdx.minmax.cmp1137, <4 x i32> %rdx.vec.exit.phi1135, <4 x i32> %rdx.vec.exit.phi1136
  %rdx.shuf1139 = shufflevector <4 x i32> %rdx.minmax.select1138, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp1140 = icmp sgt <4 x i32> %rdx.minmax.select1138, %rdx.shuf1139
  %rdx.minmax.select1141 = select <4 x i1> %rdx.minmax.cmp1140, <4 x i32> %rdx.minmax.select1138, <4 x i32> %rdx.shuf1139
  %rdx.shuf1142 = shufflevector <4 x i32> %rdx.minmax.select1141, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp1143 = icmp sgt <4 x i32> %rdx.minmax.select1141, %rdx.shuf1142
  %rdx.minmax.cmp1143.elt = extractelement <4 x i1> %rdx.minmax.cmp1143, i32 0
  %rdx.minmax.select1141.elt = extractelement <4 x i32> %rdx.minmax.select1141, i32 0
  %rdx.shuf1142.elt = extractelement <4 x i32> %rdx.minmax.select1141, i32 1
  %1241 = select i1 %rdx.minmax.cmp1143.elt, i32 %rdx.minmax.select1141.elt, i32 %rdx.shuf1142.elt
  %rdx.minmax.cmp = icmp slt <4 x i32> %rdx.vec.exit.phi, %rdx.vec.exit.phi1129
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i32> %rdx.vec.exit.phi, <4 x i32> %rdx.vec.exit.phi1129
  %rdx.shuf = shufflevector <4 x i32> %rdx.minmax.select, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp1130 = icmp slt <4 x i32> %rdx.minmax.select, %rdx.shuf
  %rdx.minmax.select1131 = select <4 x i1> %rdx.minmax.cmp1130, <4 x i32> %rdx.minmax.select, <4 x i32> %rdx.shuf
  %rdx.shuf1132 = shufflevector <4 x i32> %rdx.minmax.select1131, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp1133 = icmp slt <4 x i32> %rdx.minmax.select1131, %rdx.shuf1132
  %rdx.minmax.cmp1133.elt = extractelement <4 x i1> %rdx.minmax.cmp1133, i32 0
  %rdx.minmax.select1131.elt = extractelement <4 x i32> %rdx.minmax.select1131, i32 0
  %rdx.shuf1132.elt = extractelement <4 x i32> %rdx.minmax.select1131, i32 1
  %1242 = select i1 %rdx.minmax.cmp1133.elt, i32 %rdx.minmax.select1131.elt, i32 %rdx.shuf1132.elt
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %1210, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block
  %1243 = add i64 %resume.val, 1
  %1244 = trunc i64 %1243 to i32
  %1245 = sub i32 %1209, %1244
  %xtraiter1290 = and i32 %1245, 1
  %lcmp.mod1291 = icmp ne i32 %xtraiter1290, 0
  %lcmp.overflow1292 = icmp eq i32 %1245, 0
  %lcmp.or1293 = or i1 %lcmp.overflow1292, %lcmp.mod1291
  br i1 %lcmp.or1293, label %scalar.ph.unr, label %scalar.ph.preheader.split

scalar.ph.unr:                                    ; preds = %scalar.ph.preheader
  %1246 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv738, i64 %resume.val
  %1247 = load i8* %1246, align 1
  %1248 = zext i8 %1247 to i32
  %1249 = icmp sgt i32 %1248, %1241
  %.maxLen.0.us.unr = select i1 %1249, i32 %1248, i32 %1241
  %1250 = icmp slt i32 %1248, %1242
  %minLen.1.us.unr = select i1 %1250, i32 %1248, i32 %1242
  %indvars.iv.next735.unr = add nuw nsw i64 %resume.val, 1
  %lftr.wideiv736.unr = trunc i64 %indvars.iv.next735.unr to i32
  %exitcond737.unr = icmp eq i32 %lftr.wideiv736.unr, %alphaSize.4
  br label %scalar.ph.preheader.split

scalar.ph.preheader.split:                        ; preds = %scalar.ph.unr, %scalar.ph.preheader
  %minLen.1.us.lcssa1268.unr = phi i32 [ 0, %scalar.ph.preheader ], [ %minLen.1.us.unr, %scalar.ph.unr ]
  %.maxLen.0.us.lcssa1267.unr = phi i32 [ 0, %scalar.ph.preheader ], [ %.maxLen.0.us.unr, %scalar.ph.unr ]
  %indvars.iv734.unr = phi i64 [ %resume.val, %scalar.ph.preheader ], [ %indvars.iv.next735.unr, %scalar.ph.unr ]
  %minLen.0492.us.unr = phi i32 [ %1242, %scalar.ph.preheader ], [ %minLen.1.us.unr, %scalar.ph.unr ]
  %maxLen.0491.us.unr = phi i32 [ %1241, %scalar.ph.preheader ], [ %.maxLen.0.us.unr, %scalar.ph.unr ]
  %1251 = icmp ult i32 %1245, 2
  br i1 %1251, label %.loopexit1206, label %scalar.ph.preheader.split.split

scalar.ph.preheader.split.split:                  ; preds = %scalar.ph.preheader.split
  br label %scalar.ph

; <label>:1252                                    ; preds = %.loopexit125, %9
  %curr.1 = phi i32 [ %curr.0, %.loopexit125 ], [ %19, %9 ]
  %nSelectors.3 = phi i32 [ %nSelectors.2, %.loopexit125 ], [ %28, %9 ]
  %nGroups.4 = phi i32 [ %nGroups.3, %.loopexit125 ], [ %29, %9 ]
  %alphaSize.5 = phi i32 [ %alphaSize.4, %.loopexit125 ], [ %30, %9 ]
  %t.1 = phi i32 [ %t.0, %.loopexit125 ], [ %31, %9 ]
  %j.9 = phi i32 [ %j.8, %.loopexit125 ], [ %32, %9 ]
  %i.13 = phi i32 [ %i.12, %.loopexit125 ], [ %33, %9 ]
  store i32 33, i32* %3, align 4
  %1253 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1254 = load i32* %1253, align 4
  %1255 = icmp sgt i32 %1254, 4
  %.pre998 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1255, label %._crit_edge411, label %.lr.ph410.preheader

.lr.ph410.preheader:                              ; preds = %1252
  br label %.lr.ph410

._crit_edge411.loopexit:                          ; preds = %.backedge91
  %.lcssa1244 = phi i32 [ %1292, %.backedge91 ]
  br label %._crit_edge411

._crit_edge411:                                   ; preds = %._crit_edge411.loopexit, %1252
  %.lcssa229 = phi i32 [ %1254, %1252 ], [ %.lcssa1244, %._crit_edge411.loopexit ]
  %1256 = load i32* %.pre998, align 4
  %1257 = add nsw i32 %.lcssa229, -5
  %1258 = lshr i32 %1256, %1257
  %1259 = and i32 %1258, 31
  store i32 %1257, i32* %1253, align 4
  br label %1294

.lr.ph410:                                        ; preds = %.backedge91, %.lr.ph410.preheader
  %1260 = phi i32 [ %1292, %.backedge91 ], [ %1254, %.lr.ph410.preheader ]
  %1261 = load %struct.bz_stream** %1, align 8
  %1262 = getelementptr inbounds %struct.bz_stream* %1261, i64 0, i32 1
  %1263 = load i32* %1262, align 4
  %1264 = icmp eq i32 %1263, 0
  br i1 %1264, label %.loopexit.loopexit1197, label %1265

; <label>:1265                                    ; preds = %.lr.ph410
  %1266 = load i32* %.pre998, align 4
  %1267 = shl i32 %1266, 8
  %1268 = getelementptr inbounds %struct.bz_stream* %1261, i64 0, i32 0
  %1269 = load i8** %1268, align 8
  %1270 = load i8* %1269, align 1
  %1271 = zext i8 %1270 to i32
  %1272 = or i32 %1271, %1267
  store i32 %1272, i32* %.pre998, align 4
  %1273 = add nsw i32 %1260, 8
  store i32 %1273, i32* %1253, align 4
  %1274 = load i8** %1268, align 8
  %1275 = getelementptr inbounds i8* %1274, i64 1
  store i8* %1275, i8** %1268, align 8
  %1276 = load %struct.bz_stream** %1, align 8
  %1277 = getelementptr inbounds %struct.bz_stream* %1276, i64 0, i32 1
  %1278 = load i32* %1277, align 4
  %1279 = add i32 %1278, -1
  store i32 %1279, i32* %1277, align 4
  %1280 = load %struct.bz_stream** %1, align 8
  %1281 = getelementptr inbounds %struct.bz_stream* %1280, i64 0, i32 2
  %1282 = load i32* %1281, align 4
  %1283 = add i32 %1282, 1
  store i32 %1283, i32* %1281, align 4
  %1284 = load %struct.bz_stream** %1, align 8
  %1285 = getelementptr inbounds %struct.bz_stream* %1284, i64 0, i32 2
  %1286 = load i32* %1285, align 4
  %1287 = icmp eq i32 %1286, 0
  br i1 %1287, label %1288, label %.backedge91

; <label>:1288                                    ; preds = %1265
  %1289 = getelementptr inbounds %struct.bz_stream* %1284, i64 0, i32 3
  %1290 = load i32* %1289, align 4
  %1291 = add i32 %1290, 1
  store i32 %1291, i32* %1289, align 4
  br label %.backedge91

.backedge91:                                      ; preds = %1288, %1265
  %1292 = load i32* %1253, align 4
  %1293 = icmp sgt i32 %1292, 4
  br i1 %1293, label %._crit_edge411.loopexit, label %.lr.ph410

; <label>:1294                                    ; preds = %1388, %._crit_edge411
  %curr.2 = phi i32 [ %curr.4, %1388 ], [ %1259, %._crit_edge411 ]
  %nSelectors.4 = phi i32 [ %nSelectors.6, %1388 ], [ %nSelectors.3, %._crit_edge411 ]
  %nGroups.5 = phi i32 [ %nGroups.7, %1388 ], [ %nGroups.4, %._crit_edge411 ]
  %alphaSize.6 = phi i32 [ %alphaSize.8, %1388 ], [ %alphaSize.5, %._crit_edge411 ]
  %t.2 = phi i32 [ %t.4, %1388 ], [ %t.1, %._crit_edge411 ]
  %j.10 = phi i32 [ %j.12, %1388 ], [ %j.9, %._crit_edge411 ]
  %i.14 = phi i32 [ %1393, %1388 ], [ 0, %._crit_edge411 ]
  %1295 = icmp slt i32 %i.14, %alphaSize.6
  br i1 %1295, label %1296, label %1394

; <label>:1296                                    ; preds = %1386, %1384, %1294
  %curr.3 = phi i32 [ %1385, %1384 ], [ %curr.2, %1294 ], [ %1387, %1386 ]
  %nSelectors.5 = phi i32 [ %nSelectors.7, %1384 ], [ %nSelectors.4, %1294 ], [ %nSelectors.7, %1386 ]
  %nGroups.6 = phi i32 [ %nGroups.8, %1384 ], [ %nGroups.5, %1294 ], [ %nGroups.8, %1386 ]
  %alphaSize.7 = phi i32 [ %alphaSize.9, %1384 ], [ %alphaSize.6, %1294 ], [ %alphaSize.9, %1386 ]
  %t.3 = phi i32 [ %t.5, %1384 ], [ %t.2, %1294 ], [ %t.5, %1386 ]
  %j.11 = phi i32 [ %j.13, %1384 ], [ %j.10, %1294 ], [ %j.13, %1386 ]
  %i.15 = phi i32 [ %i.17, %1384 ], [ %i.14, %1294 ], [ %i.17, %1386 ]
  %curr.3.off = add i32 %curr.3, -1
  %1297 = icmp ugt i32 %curr.3.off, 19
  br i1 %1297, label %.loopexit, label %1298

; <label>:1298                                    ; preds = %1296, %9
  %curr.4 = phi i32 [ %curr.3, %1296 ], [ %19, %9 ]
  %nSelectors.6 = phi i32 [ %nSelectors.5, %1296 ], [ %28, %9 ]
  %nGroups.7 = phi i32 [ %nGroups.6, %1296 ], [ %29, %9 ]
  %alphaSize.8 = phi i32 [ %alphaSize.7, %1296 ], [ %30, %9 ]
  %t.4 = phi i32 [ %t.3, %1296 ], [ %31, %9 ]
  %j.12 = phi i32 [ %j.11, %1296 ], [ %32, %9 ]
  %i.16 = phi i32 [ %i.15, %1296 ], [ %33, %9 ]
  store i32 34, i32* %3, align 4
  %1299 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1300 = load i32* %1299, align 4
  %1301 = icmp sgt i32 %1300, 0
  %.pre1000 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1301, label %._crit_edge406, label %.lr.ph405.preheader

.lr.ph405.preheader:                              ; preds = %1298
  br label %.lr.ph405

._crit_edge406.loopexit:                          ; preds = %.backedge89
  %.lcssa1243 = phi i32 [ %1339, %.backedge89 ]
  br label %._crit_edge406

._crit_edge406:                                   ; preds = %._crit_edge406.loopexit, %1298
  %.lcssa225 = phi i32 [ %1300, %1298 ], [ %.lcssa1243, %._crit_edge406.loopexit ]
  %1302 = load i32* %.pre1000, align 4
  %1303 = add nsw i32 %.lcssa225, -1
  store i32 %1303, i32* %1299, align 4
  %1304 = shl i32 1, %1303
  %1305 = and i32 %1302, %1304
  %1306 = icmp eq i32 %1305, 0
  br i1 %1306, label %1388, label %1341

.lr.ph405:                                        ; preds = %.backedge89, %.lr.ph405.preheader
  %1307 = phi i32 [ %1339, %.backedge89 ], [ %1300, %.lr.ph405.preheader ]
  %1308 = load %struct.bz_stream** %1, align 8
  %1309 = getelementptr inbounds %struct.bz_stream* %1308, i64 0, i32 1
  %1310 = load i32* %1309, align 4
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %.loopexit.loopexit1196, label %1312

; <label>:1312                                    ; preds = %.lr.ph405
  %1313 = load i32* %.pre1000, align 4
  %1314 = shl i32 %1313, 8
  %1315 = getelementptr inbounds %struct.bz_stream* %1308, i64 0, i32 0
  %1316 = load i8** %1315, align 8
  %1317 = load i8* %1316, align 1
  %1318 = zext i8 %1317 to i32
  %1319 = or i32 %1318, %1314
  store i32 %1319, i32* %.pre1000, align 4
  %1320 = add nsw i32 %1307, 8
  store i32 %1320, i32* %1299, align 4
  %1321 = load i8** %1315, align 8
  %1322 = getelementptr inbounds i8* %1321, i64 1
  store i8* %1322, i8** %1315, align 8
  %1323 = load %struct.bz_stream** %1, align 8
  %1324 = getelementptr inbounds %struct.bz_stream* %1323, i64 0, i32 1
  %1325 = load i32* %1324, align 4
  %1326 = add i32 %1325, -1
  store i32 %1326, i32* %1324, align 4
  %1327 = load %struct.bz_stream** %1, align 8
  %1328 = getelementptr inbounds %struct.bz_stream* %1327, i64 0, i32 2
  %1329 = load i32* %1328, align 4
  %1330 = add i32 %1329, 1
  store i32 %1330, i32* %1328, align 4
  %1331 = load %struct.bz_stream** %1, align 8
  %1332 = getelementptr inbounds %struct.bz_stream* %1331, i64 0, i32 2
  %1333 = load i32* %1332, align 4
  %1334 = icmp eq i32 %1333, 0
  br i1 %1334, label %1335, label %.backedge89

; <label>:1335                                    ; preds = %1312
  %1336 = getelementptr inbounds %struct.bz_stream* %1331, i64 0, i32 3
  %1337 = load i32* %1336, align 4
  %1338 = add i32 %1337, 1
  store i32 %1338, i32* %1336, align 4
  br label %.backedge89

.backedge89:                                      ; preds = %1335, %1312
  %1339 = load i32* %1299, align 4
  %1340 = icmp sgt i32 %1339, 0
  br i1 %1340, label %._crit_edge406.loopexit, label %.lr.ph405

; <label>:1341                                    ; preds = %._crit_edge406, %._crit_edge866
  %1342 = phi i32 [ %.pre868, %._crit_edge866 ], [ %1303, %._crit_edge406 ]
  %curr.5 = phi i32 [ %19, %._crit_edge866 ], [ %curr.4, %._crit_edge406 ]
  %nSelectors.7 = phi i32 [ %28, %._crit_edge866 ], [ %nSelectors.6, %._crit_edge406 ]
  %nGroups.8 = phi i32 [ %29, %._crit_edge866 ], [ %nGroups.7, %._crit_edge406 ]
  %alphaSize.9 = phi i32 [ %30, %._crit_edge866 ], [ %alphaSize.8, %._crit_edge406 ]
  %t.5 = phi i32 [ %31, %._crit_edge866 ], [ %t.4, %._crit_edge406 ]
  %j.13 = phi i32 [ %32, %._crit_edge866 ], [ %j.12, %._crit_edge406 ]
  %i.17 = phi i32 [ %33, %._crit_edge866 ], [ %i.16, %._crit_edge406 ]
  store i32 35, i32* %3, align 4
  %1343 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1344 = icmp sgt i32 %1342, 0
  %.pre1002 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1344, label %._crit_edge401, label %.lr.ph400.preheader

.lr.ph400.preheader:                              ; preds = %1341
  br label %.lr.ph400

._crit_edge401.loopexit:                          ; preds = %.backedge87
  %.lcssa1242 = phi i32 [ %1382, %.backedge87 ]
  br label %._crit_edge401

._crit_edge401:                                   ; preds = %._crit_edge401.loopexit, %1341
  %.lcssa221 = phi i32 [ %1342, %1341 ], [ %.lcssa1242, %._crit_edge401.loopexit ]
  %1345 = load i32* %.pre1002, align 4
  %1346 = add nsw i32 %.lcssa221, -1
  store i32 %1346, i32* %1343, align 4
  %1347 = shl i32 1, %1346
  %1348 = and i32 %1345, %1347
  %1349 = icmp eq i32 %1348, 0
  br i1 %1349, label %1384, label %1386

.lr.ph400:                                        ; preds = %.backedge87, %.lr.ph400.preheader
  %1350 = phi i32 [ %1382, %.backedge87 ], [ %1342, %.lr.ph400.preheader ]
  %1351 = load %struct.bz_stream** %1, align 8
  %1352 = getelementptr inbounds %struct.bz_stream* %1351, i64 0, i32 1
  %1353 = load i32* %1352, align 4
  %1354 = icmp eq i32 %1353, 0
  br i1 %1354, label %.loopexit.loopexit1195, label %1355

; <label>:1355                                    ; preds = %.lr.ph400
  %1356 = load i32* %.pre1002, align 4
  %1357 = shl i32 %1356, 8
  %1358 = getelementptr inbounds %struct.bz_stream* %1351, i64 0, i32 0
  %1359 = load i8** %1358, align 8
  %1360 = load i8* %1359, align 1
  %1361 = zext i8 %1360 to i32
  %1362 = or i32 %1361, %1357
  store i32 %1362, i32* %.pre1002, align 4
  %1363 = add nsw i32 %1350, 8
  store i32 %1363, i32* %1343, align 4
  %1364 = load i8** %1358, align 8
  %1365 = getelementptr inbounds i8* %1364, i64 1
  store i8* %1365, i8** %1358, align 8
  %1366 = load %struct.bz_stream** %1, align 8
  %1367 = getelementptr inbounds %struct.bz_stream* %1366, i64 0, i32 1
  %1368 = load i32* %1367, align 4
  %1369 = add i32 %1368, -1
  store i32 %1369, i32* %1367, align 4
  %1370 = load %struct.bz_stream** %1, align 8
  %1371 = getelementptr inbounds %struct.bz_stream* %1370, i64 0, i32 2
  %1372 = load i32* %1371, align 4
  %1373 = add i32 %1372, 1
  store i32 %1373, i32* %1371, align 4
  %1374 = load %struct.bz_stream** %1, align 8
  %1375 = getelementptr inbounds %struct.bz_stream* %1374, i64 0, i32 2
  %1376 = load i32* %1375, align 4
  %1377 = icmp eq i32 %1376, 0
  br i1 %1377, label %1378, label %.backedge87

; <label>:1378                                    ; preds = %1355
  %1379 = getelementptr inbounds %struct.bz_stream* %1374, i64 0, i32 3
  %1380 = load i32* %1379, align 4
  %1381 = add i32 %1380, 1
  store i32 %1381, i32* %1379, align 4
  br label %.backedge87

.backedge87:                                      ; preds = %1378, %1355
  %1382 = load i32* %1343, align 4
  %1383 = icmp sgt i32 %1382, 0
  br i1 %1383, label %._crit_edge401.loopexit, label %.lr.ph400

; <label>:1384                                    ; preds = %._crit_edge401
  %1385 = add nsw i32 %curr.5, 1
  br label %1296

; <label>:1386                                    ; preds = %._crit_edge401
  %1387 = add nsw i32 %curr.5, -1
  br label %1296

; <label>:1388                                    ; preds = %._crit_edge406
  %1389 = trunc i32 %curr.4 to i8
  %1390 = sext i32 %i.16 to i64
  %1391 = sext i32 %t.4 to i64
  %1392 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %1391, i64 %1390
  store i8 %1389, i8* %1392, align 1
  %1393 = add nsw i32 %i.16, 1
  br label %1294

; <label>:1394                                    ; preds = %1294
  %1395 = add nsw i32 %t.2, 1
  br label %.loopexit125

.preheader122:                                    ; preds = %.preheader122, %.preheader122.preheader
  %indvars.iv720 = phi i64 [ %indvars.iv.next721, %.preheader122 ], [ 0, %.preheader122.preheader ]
  %1396 = getelementptr inbounds %struct.DState* %s, i64 0, i32 36, i64 %indvars.iv720, i64 0
  %1397 = getelementptr inbounds %struct.DState* %s, i64 0, i32 37, i64 %indvars.iv720, i64 0
  %1398 = getelementptr inbounds %struct.DState* %s, i64 0, i32 38, i64 %indvars.iv720, i64 0
  %1399 = getelementptr inbounds %struct.DState* %s, i64 0, i32 35, i64 %indvars.iv720, i64 0
  tail call void @BZ2_hbCreateDecodeTables(i32* %1396, i32* %1397, i32* %1398, i8* %1399, i32 32, i32 0, i32 %alphaSize.4) #2
  %1400 = getelementptr inbounds %struct.DState* %s, i64 0, i32 39, i64 %indvars.iv720
  store i32 32, i32* %1400, align 4
  %indvars.iv.next721 = add nuw nsw i64 %indvars.iv720, 1
  %lftr.wideiv722 = trunc i64 %indvars.iv.next721 to i32
  %exitcond723 = icmp eq i32 %lftr.wideiv722, %nGroups.3
  br i1 %exitcond723, label %.preheader121.loopexit1207, label %.preheader122

.preheader121.loopexit:                           ; preds = %1210
  br label %.preheader121

.preheader121.loopexit1207:                       ; preds = %.preheader122
  br label %.preheader121

.preheader121:                                    ; preds = %.preheader121.loopexit1207, %.preheader121.loopexit, %.preheader123
  %t.6.lcssa = phi i32 [ 0, %.preheader123 ], [ %nGroups.3, %.preheader121.loopexit ], [ %nGroups.3, %.preheader121.loopexit1207 ]
  %1401 = getelementptr inbounds %struct.DState* %s, i64 0, i32 27
  %1402 = load i32* %1401, align 4
  %1403 = getelementptr inbounds %struct.DState* %s, i64 0, i32 9
  %1404 = load i32* %1403, align 4
  %scevgep = getelementptr %struct.DState* %s, i64 0, i32 16, i64 0
  %scevgep719 = bitcast i32* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep719, i8 0, i64 1024, i32 4, i1 false)
  %1405 = add nsw i32 %1402, 1
  %1406 = mul nsw i32 %1404, 100000
  br label %.preheader120

.preheader120:                                    ; preds = %.preheader120, %.preheader121
  %indvars.iv714 = phi i64 [ 15, %.preheader121 ], [ %indvars.iv.next715, %.preheader120 ]
  %indvars.iv712 = phi i64 [ 4095, %.preheader121 ], [ %indvars.iv.next713, %.preheader120 ]
  %indvars.iv710 = phi i64 [ 4080, %.preheader121 ], [ %indvars.iv.next711, %.preheader120 ]
  %1407 = shl i64 %indvars.iv714, 4
  %1408 = or i64 %1407, 15
  %1409 = trunc i64 %1408 to i8
  %1410 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv712
  store i8 %1409, i8* %1410, align 1
  %indvars.iv.next709 = add nsw i64 %indvars.iv712, -1
  %1411 = or i64 %1407, 14
  %1412 = trunc i64 %1411 to i8
  %1413 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709
  store i8 %1412, i8* %1413, align 1
  %indvars.iv.next709.1 = add nsw i64 %indvars.iv712, -2
  %1414 = or i64 %1407, 13
  %1415 = trunc i64 %1414 to i8
  %1416 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.1
  store i8 %1415, i8* %1416, align 1
  %indvars.iv.next709.2 = add nsw i64 %indvars.iv712, -3
  %1417 = or i64 %1407, 12
  %1418 = trunc i64 %1417 to i8
  %1419 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.2
  store i8 %1418, i8* %1419, align 1
  %indvars.iv.next709.3 = add nsw i64 %indvars.iv712, -4
  %1420 = or i64 %1407, 11
  %1421 = trunc i64 %1420 to i8
  %1422 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.3
  store i8 %1421, i8* %1422, align 1
  %indvars.iv.next709.4 = add nsw i64 %indvars.iv712, -5
  %1423 = or i64 %1407, 10
  %1424 = trunc i64 %1423 to i8
  %1425 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.4
  store i8 %1424, i8* %1425, align 1
  %indvars.iv.next709.5 = add nsw i64 %indvars.iv712, -6
  %1426 = or i64 %1407, 9
  %1427 = trunc i64 %1426 to i8
  %1428 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.5
  store i8 %1427, i8* %1428, align 1
  %indvars.iv.next709.6 = add nsw i64 %indvars.iv712, -7
  %1429 = or i64 %1407, 8
  %1430 = trunc i64 %1429 to i8
  %1431 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.6
  store i8 %1430, i8* %1431, align 1
  %indvars.iv.next709.7 = add nsw i64 %indvars.iv712, -8
  %1432 = or i64 %1407, 7
  %1433 = trunc i64 %1432 to i8
  %1434 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.7
  store i8 %1433, i8* %1434, align 1
  %indvars.iv.next709.8 = add nsw i64 %indvars.iv712, -9
  %1435 = or i64 %1407, 6
  %1436 = trunc i64 %1435 to i8
  %1437 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.8
  store i8 %1436, i8* %1437, align 1
  %indvars.iv.next709.9 = add nsw i64 %indvars.iv712, -10
  %1438 = or i64 %1407, 5
  %1439 = trunc i64 %1438 to i8
  %1440 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.9
  store i8 %1439, i8* %1440, align 1
  %indvars.iv.next709.10 = add nsw i64 %indvars.iv712, -11
  %1441 = or i64 %1407, 4
  %1442 = trunc i64 %1441 to i8
  %1443 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.10
  store i8 %1442, i8* %1443, align 1
  %indvars.iv.next709.11 = add nsw i64 %indvars.iv712, -12
  %1444 = or i64 %1407, 3
  %1445 = trunc i64 %1444 to i8
  %1446 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.11
  store i8 %1445, i8* %1446, align 1
  %indvars.iv.next709.12 = add nsw i64 %indvars.iv712, -13
  %1447 = or i64 %1407, 2
  %1448 = trunc i64 %1447 to i8
  %1449 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.12
  store i8 %1448, i8* %1449, align 1
  %indvars.iv.next709.13 = add nsw i64 %indvars.iv712, -14
  %1450 = or i64 %1407, 1
  %1451 = trunc i64 %1450 to i8
  %1452 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.13
  store i8 %1451, i8* %1452, align 1
  %indvars.iv.next709.14 = add nsw i64 %indvars.iv712, -15
  %1453 = trunc i64 %1407 to i8
  %1454 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next709.14
  store i8 %1453, i8* %1454, align 1
  %1455 = trunc i64 %indvars.iv710 to i32
  %1456 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 %indvars.iv714
  store i32 %1455, i32* %1456, align 4
  %indvars.iv.next715 = add nsw i64 %indvars.iv714, -1
  %1457 = trunc i64 %indvars.iv714 to i32
  %1458 = icmp sgt i32 %1457, 0
  %indvars.iv.next711 = add i64 %indvars.iv710, -16
  %indvars.iv.next713 = add i64 %indvars.iv712, -16
  br i1 %1458, label %.preheader120, label %1459

; <label>:1459                                    ; preds = %.preheader120
  %1460 = icmp slt i32 %nSelectors.2, 1
  br i1 %1460, label %.loopexit, label %1461

; <label>:1461                                    ; preds = %1459
  %1462 = getelementptr inbounds %struct.DState* %s, i64 0, i32 33, i64 0
  %1463 = load i8* %1462, align 1
  %1464 = zext i8 %1463 to i32
  %1465 = zext i8 %1463 to i64
  %1466 = getelementptr inbounds %struct.DState* %s, i64 0, i32 39, i64 %1465
  %1467 = load i32* %1466, align 4
  %1468 = getelementptr inbounds %struct.DState* %s, i64 0, i32 36, i64 %1465, i64 0
  %1469 = getelementptr inbounds %struct.DState* %s, i64 0, i32 38, i64 %1465, i64 0
  %1470 = getelementptr inbounds %struct.DState* %s, i64 0, i32 37, i64 %1465, i64 0
  br label %1471

; <label>:1471                                    ; preds = %1461, %9
  %gPerm.1 = phi i32* [ %10, %9 ], [ %1469, %1461 ]
  %gBase.1 = phi i32* [ %11, %9 ], [ %1470, %1461 ]
  %gLimit.1 = phi i32* [ %12, %9 ], [ %1468, %1461 ]
  %gMinlen.1 = phi i32 [ %13, %9 ], [ %1467, %1461 ]
  %gSel.1 = phi i32 [ %14, %9 ], [ %1464, %1461 ]
  %zn.0 = phi i32 [ %17, %9 ], [ %1467, %1461 ]
  %curr.6 = phi i32 [ %19, %9 ], [ %curr.0, %1461 ]
  %nblock.0 = phi i32 [ %22, %9 ], [ 0, %1461 ]
  %nblockMAX.0 = phi i32 [ %23, %9 ], [ %1406, %1461 ]
  %groupPos.1 = phi i32 [ %25, %9 ], [ 49, %1461 ]
  %groupNo.1 = phi i32 [ %26, %9 ], [ 0, %1461 ]
  %EOB.0 = phi i32 [ %27, %9 ], [ %1405, %1461 ]
  %nSelectors.8 = phi i32 [ %28, %9 ], [ %nSelectors.2, %1461 ]
  %nGroups.9 = phi i32 [ %29, %9 ], [ %nGroups.3, %1461 ]
  %alphaSize.10 = phi i32 [ %30, %9 ], [ %alphaSize.4, %1461 ]
  %t.7 = phi i32 [ %31, %9 ], [ %t.6.lcssa, %1461 ]
  %j.14 = phi i32 [ %32, %9 ], [ %j.8, %1461 ]
  %i.20 = phi i32 [ %33, %9 ], [ 256, %1461 ]
  store i32 36, i32* %3, align 4
  %1472 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1473 = load i32* %1472, align 4
  %1474 = icmp slt i32 %1473, %zn.0
  %1475 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1474, label %.lr.ph481.preheader, label %._crit_edge482

.lr.ph481.preheader:                              ; preds = %1471
  br label %.lr.ph481

._crit_edge482.loopexit:                          ; preds = %.backedge119
  %.lcssa1262 = phi i32 [ %1514, %.backedge119 ]
  br label %._crit_edge482

._crit_edge482:                                   ; preds = %._crit_edge482.loopexit, %1471
  %.lcssa261 = phi i32 [ %1473, %1471 ], [ %.lcssa1262, %._crit_edge482.loopexit ]
  %1476 = load i32* %1475, align 4
  %1477 = sub nsw i32 %.lcssa261, %zn.0
  %1478 = lshr i32 %1476, %1477
  %1479 = shl i32 1, %zn.0
  %1480 = add nsw i32 %1479, -1
  %1481 = and i32 %1478, %1480
  store i32 %1477, i32* %1472, align 4
  br label %1516

.lr.ph481:                                        ; preds = %.backedge119, %.lr.ph481.preheader
  %1482 = phi i32 [ %1514, %.backedge119 ], [ %1473, %.lr.ph481.preheader ]
  %1483 = load %struct.bz_stream** %1, align 8
  %1484 = getelementptr inbounds %struct.bz_stream* %1483, i64 0, i32 1
  %1485 = load i32* %1484, align 4
  %1486 = icmp eq i32 %1485, 0
  br i1 %1486, label %.loopexit.loopexit1205, label %1487

; <label>:1487                                    ; preds = %.lr.ph481
  %1488 = load i32* %1475, align 4
  %1489 = shl i32 %1488, 8
  %1490 = getelementptr inbounds %struct.bz_stream* %1483, i64 0, i32 0
  %1491 = load i8** %1490, align 8
  %1492 = load i8* %1491, align 1
  %1493 = zext i8 %1492 to i32
  %1494 = or i32 %1493, %1489
  store i32 %1494, i32* %1475, align 4
  %1495 = add nsw i32 %1482, 8
  store i32 %1495, i32* %1472, align 4
  %1496 = load i8** %1490, align 8
  %1497 = getelementptr inbounds i8* %1496, i64 1
  store i8* %1497, i8** %1490, align 8
  %1498 = load %struct.bz_stream** %1, align 8
  %1499 = getelementptr inbounds %struct.bz_stream* %1498, i64 0, i32 1
  %1500 = load i32* %1499, align 4
  %1501 = add i32 %1500, -1
  store i32 %1501, i32* %1499, align 4
  %1502 = load %struct.bz_stream** %1, align 8
  %1503 = getelementptr inbounds %struct.bz_stream* %1502, i64 0, i32 2
  %1504 = load i32* %1503, align 4
  %1505 = add i32 %1504, 1
  store i32 %1505, i32* %1503, align 4
  %1506 = load %struct.bz_stream** %1, align 8
  %1507 = getelementptr inbounds %struct.bz_stream* %1506, i64 0, i32 2
  %1508 = load i32* %1507, align 4
  %1509 = icmp eq i32 %1508, 0
  br i1 %1509, label %1510, label %.backedge119

; <label>:1510                                    ; preds = %1487
  %1511 = getelementptr inbounds %struct.bz_stream* %1506, i64 0, i32 3
  %1512 = load i32* %1511, align 4
  %1513 = add i32 %1512, 1
  store i32 %1513, i32* %1511, align 4
  br label %.backedge119

.backedge119:                                     ; preds = %1510, %1487
  %1514 = load i32* %1472, align 4
  %1515 = icmp slt i32 %1514, %zn.0
  br i1 %1515, label %.lr.ph481, label %._crit_edge482.loopexit

; <label>:1516                                    ; preds = %._crit_edge416, %._crit_edge482
  %1517 = phi i32 [ %1530, %._crit_edge416 ], [ %1477, %._crit_edge482 ]
  %gPerm.2 = phi i32* [ %gPerm.3, %._crit_edge416 ], [ %gPerm.1, %._crit_edge482 ]
  %gBase.2 = phi i32* [ %gBase.3, %._crit_edge416 ], [ %gBase.1, %._crit_edge482 ]
  %gLimit.2 = phi i32* [ %gLimit.3, %._crit_edge416 ], [ %gLimit.1, %._crit_edge482 ]
  %gMinlen.2 = phi i32 [ %gMinlen.3, %._crit_edge416 ], [ %gMinlen.1, %._crit_edge482 ]
  %gSel.2 = phi i32 [ %gSel.3, %._crit_edge416 ], [ %gSel.1, %._crit_edge482 ]
  %zj.0 = phi i32 [ %1532, %._crit_edge416 ], [ %15, %._crit_edge482 ]
  %zvec.0 = phi i32 [ %1534, %._crit_edge416 ], [ %1481, %._crit_edge482 ]
  %zn.1 = phi i32 [ %zn.2, %._crit_edge416 ], [ %zn.0, %._crit_edge482 ]
  %curr.7 = phi i32 [ %curr.8, %._crit_edge416 ], [ %curr.6, %._crit_edge482 ]
  %nblock.1 = phi i32 [ %nblock.2, %._crit_edge416 ], [ %nblock.0, %._crit_edge482 ]
  %nblockMAX.1 = phi i32 [ %nblockMAX.2, %._crit_edge416 ], [ %nblockMAX.0, %._crit_edge482 ]
  %groupPos.2 = phi i32 [ %groupPos.3, %._crit_edge416 ], [ %groupPos.1, %._crit_edge482 ]
  %groupNo.2 = phi i32 [ %groupNo.3, %._crit_edge416 ], [ %groupNo.1, %._crit_edge482 ]
  %EOB.1 = phi i32 [ %EOB.2, %._crit_edge416 ], [ %EOB.0, %._crit_edge482 ]
  %nSelectors.9 = phi i32 [ %nSelectors.10, %._crit_edge416 ], [ %nSelectors.8, %._crit_edge482 ]
  %nGroups.10 = phi i32 [ %nGroups.11, %._crit_edge416 ], [ %nGroups.9, %._crit_edge482 ]
  %alphaSize.11 = phi i32 [ %alphaSize.12, %._crit_edge416 ], [ %alphaSize.10, %._crit_edge482 ]
  %t.8 = phi i32 [ %t.9, %._crit_edge416 ], [ %t.7, %._crit_edge482 ]
  %j.15 = phi i32 [ %j.16, %._crit_edge416 ], [ %j.14, %._crit_edge482 ]
  %i.21 = phi i32 [ %i.22, %._crit_edge416 ], [ %i.20, %._crit_edge482 ]
  %1518 = icmp sgt i32 %zn.1, 20
  br i1 %1518, label %.loopexit, label %1519

; <label>:1519                                    ; preds = %1516
  %1520 = sext i32 %zn.1 to i64
  %1521 = getelementptr inbounds i32* %gLimit.2, i64 %1520
  %1522 = load i32* %1521, align 4
  %1523 = icmp sgt i32 %zvec.0, %1522
  br i1 %1523, label %1524, label %1569

; <label>:1524                                    ; preds = %1519
  %1525 = add nsw i32 %zn.1, 1
  %.pre885 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  br label %1526

; <label>:1526                                    ; preds = %1524, %._crit_edge869
  %.pre-phi = phi i32* [ %.phi.trans.insert870, %._crit_edge869 ], [ %.pre885, %1524 ]
  %1527 = phi i32 [ %.pre871, %._crit_edge869 ], [ %1517, %1524 ]
  %gPerm.3 = phi i32* [ %10, %._crit_edge869 ], [ %gPerm.2, %1524 ]
  %gBase.3 = phi i32* [ %11, %._crit_edge869 ], [ %gBase.2, %1524 ]
  %gLimit.3 = phi i32* [ %12, %._crit_edge869 ], [ %gLimit.2, %1524 ]
  %gMinlen.3 = phi i32 [ %13, %._crit_edge869 ], [ %gMinlen.2, %1524 ]
  %gSel.3 = phi i32 [ %14, %._crit_edge869 ], [ %gSel.2, %1524 ]
  %zj.1 = phi i32 [ %15, %._crit_edge869 ], [ %zj.0, %1524 ]
  %zvec.1 = phi i32 [ %16, %._crit_edge869 ], [ %zvec.0, %1524 ]
  %zn.2 = phi i32 [ %17, %._crit_edge869 ], [ %1525, %1524 ]
  %curr.8 = phi i32 [ %19, %._crit_edge869 ], [ %curr.7, %1524 ]
  %nblock.2 = phi i32 [ %22, %._crit_edge869 ], [ %nblock.1, %1524 ]
  %nblockMAX.2 = phi i32 [ %23, %._crit_edge869 ], [ %nblockMAX.1, %1524 ]
  %groupPos.3 = phi i32 [ %25, %._crit_edge869 ], [ %groupPos.2, %1524 ]
  %groupNo.3 = phi i32 [ %26, %._crit_edge869 ], [ %groupNo.2, %1524 ]
  %EOB.2 = phi i32 [ %27, %._crit_edge869 ], [ %EOB.1, %1524 ]
  %nSelectors.10 = phi i32 [ %28, %._crit_edge869 ], [ %nSelectors.9, %1524 ]
  %nGroups.11 = phi i32 [ %29, %._crit_edge869 ], [ %nGroups.10, %1524 ]
  %alphaSize.12 = phi i32 [ %30, %._crit_edge869 ], [ %alphaSize.11, %1524 ]
  %t.9 = phi i32 [ %31, %._crit_edge869 ], [ %t.8, %1524 ]
  %j.16 = phi i32 [ %32, %._crit_edge869 ], [ %j.15, %1524 ]
  %i.22 = phi i32 [ %33, %._crit_edge869 ], [ %i.21, %1524 ]
  store i32 37, i32* %3, align 4
  %1528 = icmp sgt i32 %1527, 0
  %.pre1006 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1528, label %._crit_edge416, label %.lr.ph415.preheader

.lr.ph415.preheader:                              ; preds = %1526
  br label %.lr.ph415

._crit_edge416.loopexit:                          ; preds = %.backedge93
  %.lcssa1245 = phi i32 [ %1567, %.backedge93 ]
  br label %._crit_edge416

._crit_edge416:                                   ; preds = %._crit_edge416.loopexit, %1526
  %.lcssa233 = phi i32 [ %1527, %1526 ], [ %.lcssa1245, %._crit_edge416.loopexit ]
  %1529 = load i32* %.pre1006, align 4
  %1530 = add nsw i32 %.lcssa233, -1
  %1531 = lshr i32 %1529, %1530
  %1532 = and i32 %1531, 1
  store i32 %1530, i32* %.pre-phi, align 4
  %1533 = shl i32 %zvec.1, 1
  %1534 = or i32 %1532, %1533
  br label %1516

.lr.ph415:                                        ; preds = %.backedge93, %.lr.ph415.preheader
  %1535 = phi i32 [ %1567, %.backedge93 ], [ %1527, %.lr.ph415.preheader ]
  %1536 = load %struct.bz_stream** %1, align 8
  %1537 = getelementptr inbounds %struct.bz_stream* %1536, i64 0, i32 1
  %1538 = load i32* %1537, align 4
  %1539 = icmp eq i32 %1538, 0
  br i1 %1539, label %.loopexit.loopexit1198, label %1540

; <label>:1540                                    ; preds = %.lr.ph415
  %1541 = load i32* %.pre1006, align 4
  %1542 = shl i32 %1541, 8
  %1543 = getelementptr inbounds %struct.bz_stream* %1536, i64 0, i32 0
  %1544 = load i8** %1543, align 8
  %1545 = load i8* %1544, align 1
  %1546 = zext i8 %1545 to i32
  %1547 = or i32 %1546, %1542
  store i32 %1547, i32* %.pre1006, align 4
  %1548 = add nsw i32 %1535, 8
  store i32 %1548, i32* %.pre-phi, align 4
  %1549 = load i8** %1543, align 8
  %1550 = getelementptr inbounds i8* %1549, i64 1
  store i8* %1550, i8** %1543, align 8
  %1551 = load %struct.bz_stream** %1, align 8
  %1552 = getelementptr inbounds %struct.bz_stream* %1551, i64 0, i32 1
  %1553 = load i32* %1552, align 4
  %1554 = add i32 %1553, -1
  store i32 %1554, i32* %1552, align 4
  %1555 = load %struct.bz_stream** %1, align 8
  %1556 = getelementptr inbounds %struct.bz_stream* %1555, i64 0, i32 2
  %1557 = load i32* %1556, align 4
  %1558 = add i32 %1557, 1
  store i32 %1558, i32* %1556, align 4
  %1559 = load %struct.bz_stream** %1, align 8
  %1560 = getelementptr inbounds %struct.bz_stream* %1559, i64 0, i32 2
  %1561 = load i32* %1560, align 4
  %1562 = icmp eq i32 %1561, 0
  br i1 %1562, label %1563, label %.backedge93

; <label>:1563                                    ; preds = %1540
  %1564 = getelementptr inbounds %struct.bz_stream* %1559, i64 0, i32 3
  %1565 = load i32* %1564, align 4
  %1566 = add i32 %1565, 1
  store i32 %1566, i32* %1564, align 4
  br label %.backedge93

.backedge93:                                      ; preds = %1563, %1540
  %1567 = load i32* %.pre-phi, align 4
  %1568 = icmp sgt i32 %1567, 0
  br i1 %1568, label %._crit_edge416.loopexit, label %.lr.ph415

; <label>:1569                                    ; preds = %1519
  %1570 = getelementptr inbounds i32* %gBase.2, i64 %1520
  %1571 = load i32* %1570, align 4
  %1572 = sub nsw i32 %zvec.0, %1571
  %1573 = icmp ugt i32 %1572, 257
  br i1 %1573, label %.loopexit, label %1574

; <label>:1574                                    ; preds = %1569
  %1575 = sext i32 %1572 to i64
  %1576 = getelementptr inbounds i32* %gPerm.2, i64 %1575
  %1577 = load i32* %1576, align 4
  br label %.loopexit103

..loopexit103_crit_edge:                          ; preds = %1750
  %.lcssa1253 = phi i32 [ %1753, %1750 ]
  %indvars.iv.next691.lcssa = phi i64 [ %indvars.iv.next691, %1750 ]
  %1578 = trunc i64 %indvars.iv.next691.lcssa to i32
  br label %.loopexit103

..loopexit106_crit_edge:                          ; preds = %1742
  %.lcssa1257 = phi i32 [ %1745, %1742 ]
  %indvars.iv.next693.lcssa = phi i64 [ %indvars.iv.next693, %1742 ]
  %1579 = trunc i64 %indvars.iv.next693.lcssa to i32
  br label %.loopexit103

.loopexit103:                                     ; preds = %2037, %.preheader102, %.preheader105, %..loopexit106_crit_edge, %..loopexit103_crit_edge, %1574
  %gPerm.4 = phi i32* [ %gPerm.12, %2037 ], [ %gPerm.2, %1574 ], [ %gPerm.8, %..loopexit103_crit_edge ], [ %gPerm.8, %.preheader102 ], [ %gPerm.8, %..loopexit106_crit_edge ], [ %gPerm.8, %.preheader105 ]
  %gBase.4 = phi i32* [ %gBase.12, %2037 ], [ %gBase.2, %1574 ], [ %gBase.8, %..loopexit103_crit_edge ], [ %gBase.8, %.preheader102 ], [ %gBase.8, %..loopexit106_crit_edge ], [ %gBase.8, %.preheader105 ]
  %gLimit.4 = phi i32* [ %gLimit.12, %2037 ], [ %gLimit.2, %1574 ], [ %gLimit.8, %..loopexit103_crit_edge ], [ %gLimit.8, %.preheader102 ], [ %gLimit.8, %..loopexit106_crit_edge ], [ %gLimit.8, %.preheader105 ]
  %gMinlen.4 = phi i32 [ %gMinlen.12, %2037 ], [ %gMinlen.2, %1574 ], [ %gMinlen.8, %..loopexit103_crit_edge ], [ %gMinlen.8, %.preheader102 ], [ %gMinlen.8, %..loopexit106_crit_edge ], [ %gMinlen.8, %.preheader105 ]
  %gSel.4 = phi i32 [ %gSel.12, %2037 ], [ %gSel.2, %1574 ], [ %gSel.8, %..loopexit103_crit_edge ], [ %gSel.8, %.preheader102 ], [ %gSel.8, %..loopexit106_crit_edge ], [ %gSel.8, %.preheader105 ]
  %zj.2 = phi i32 [ %zj.8, %2037 ], [ %zj.0, %1574 ], [ %zj.5, %..loopexit103_crit_edge ], [ %zj.5, %.preheader102 ], [ %zj.5, %..loopexit106_crit_edge ], [ %zj.5, %.preheader105 ]
  %zvec.2 = phi i32 [ %zvec.8, %2037 ], [ %zvec.0, %1574 ], [ %zvec.5, %..loopexit103_crit_edge ], [ %zvec.5, %.preheader102 ], [ %zvec.5, %..loopexit106_crit_edge ], [ %zvec.5, %.preheader105 ]
  %zn.3 = phi i32 [ %zn.9, %2037 ], [ %zn.1, %1574 ], [ %zn.6, %..loopexit103_crit_edge ], [ %zn.6, %.preheader102 ], [ %zn.6, %..loopexit106_crit_edge ], [ %zn.6, %.preheader105 ]
  %curr.9 = phi i32 [ %curr.15, %2037 ], [ %curr.7, %1574 ], [ %curr.12, %..loopexit103_crit_edge ], [ %curr.12, %.preheader102 ], [ %curr.12, %..loopexit106_crit_edge ], [ %curr.12, %.preheader105 ]
  %N.0 = phi i32 [ %N.6, %2037 ], [ %20, %1574 ], [ %N.3, %..loopexit103_crit_edge ], [ %N.3, %.preheader102 ], [ %N.3, %..loopexit106_crit_edge ], [ %N.3, %.preheader105 ]
  %es.0 = phi i32 [ %es.9, %2037 ], [ %21, %1574 ], [ %.lcssa1253, %..loopexit103_crit_edge ], [ %1716, %.preheader102 ], [ %.lcssa1257, %..loopexit106_crit_edge ], [ %1716, %.preheader105 ]
  %nblock.3 = phi i32 [ %nblock.11, %2037 ], [ %nblock.1, %1574 ], [ %1578, %..loopexit103_crit_edge ], [ %nblock.6, %.preheader102 ], [ %1579, %..loopexit106_crit_edge ], [ %nblock.6, %.preheader105 ]
  %nblockMAX.3 = phi i32 [ %nblockMAX.9, %2037 ], [ %nblockMAX.1, %1574 ], [ %nblockMAX.6, %..loopexit103_crit_edge ], [ %nblockMAX.6, %.preheader102 ], [ %nblockMAX.6, %..loopexit106_crit_edge ], [ %nblockMAX.6, %.preheader105 ]
  %nextSym.0 = phi i32 [ %2040, %2037 ], [ %1577, %1574 ], [ %1713, %..loopexit103_crit_edge ], [ %1713, %.preheader102 ], [ %1713, %..loopexit106_crit_edge ], [ %1713, %.preheader105 ]
  %groupPos.4 = phi i32 [ %groupPos.12, %2037 ], [ %groupPos.2, %1574 ], [ %groupPos.8, %..loopexit103_crit_edge ], [ %groupPos.8, %.preheader102 ], [ %groupPos.8, %..loopexit106_crit_edge ], [ %groupPos.8, %.preheader105 ]
  %groupNo.4 = phi i32 [ %groupNo.12, %2037 ], [ %groupNo.2, %1574 ], [ %groupNo.8, %..loopexit103_crit_edge ], [ %groupNo.8, %.preheader102 ], [ %groupNo.8, %..loopexit106_crit_edge ], [ %groupNo.8, %.preheader105 ]
  %EOB.3 = phi i32 [ %EOB.9, %2037 ], [ %EOB.1, %1574 ], [ %EOB.6, %..loopexit103_crit_edge ], [ %EOB.6, %.preheader102 ], [ %EOB.6, %..loopexit106_crit_edge ], [ %EOB.6, %.preheader105 ]
  %nSelectors.11 = phi i32 [ %nSelectors.17, %2037 ], [ %nSelectors.9, %1574 ], [ %nSelectors.14, %..loopexit103_crit_edge ], [ %nSelectors.14, %.preheader102 ], [ %nSelectors.14, %..loopexit106_crit_edge ], [ %nSelectors.14, %.preheader105 ]
  %nGroups.12 = phi i32 [ %nGroups.18, %2037 ], [ %nGroups.10, %1574 ], [ %nGroups.15, %..loopexit103_crit_edge ], [ %nGroups.15, %.preheader102 ], [ %nGroups.15, %..loopexit106_crit_edge ], [ %nGroups.15, %.preheader105 ]
  %alphaSize.13 = phi i32 [ %alphaSize.19, %2037 ], [ %alphaSize.11, %1574 ], [ %alphaSize.16, %..loopexit103_crit_edge ], [ %alphaSize.16, %.preheader102 ], [ %alphaSize.16, %..loopexit106_crit_edge ], [ %alphaSize.16, %.preheader105 ]
  %t.10 = phi i32 [ %t.16, %2037 ], [ %t.8, %1574 ], [ %t.13, %..loopexit103_crit_edge ], [ %t.13, %.preheader102 ], [ %t.13, %..loopexit106_crit_edge ], [ %t.13, %.preheader105 ]
  %j.17 = phi i32 [ %j.23, %2037 ], [ %j.15, %1574 ], [ %j.20, %..loopexit103_crit_edge ], [ %j.20, %.preheader102 ], [ %j.20, %..loopexit106_crit_edge ], [ %j.20, %.preheader105 ]
  %i.23 = phi i32 [ %i.29, %2037 ], [ %i.21, %1574 ], [ %i.26, %..loopexit103_crit_edge ], [ %i.26, %.preheader102 ], [ %i.26, %..loopexit106_crit_edge ], [ %i.26, %.preheader105 ]
  %1580 = icmp eq i32 %nextSym.0, %EOB.3
  br i1 %1580, label %2041, label %1581

; <label>:1581                                    ; preds = %.loopexit103
  %1582 = icmp ult i32 %nextSym.0, 2
  br i1 %1582, label %.critedge, label %1755

.critedge:                                        ; preds = %1710, %1581
  %gPerm.5 = phi i32* [ %gPerm.8, %1710 ], [ %gPerm.4, %1581 ]
  %gBase.5 = phi i32* [ %gBase.8, %1710 ], [ %gBase.4, %1581 ]
  %gLimit.5 = phi i32* [ %gLimit.8, %1710 ], [ %gLimit.4, %1581 ]
  %gMinlen.5 = phi i32 [ %gMinlen.8, %1710 ], [ %gMinlen.4, %1581 ]
  %gSel.5 = phi i32 [ %gSel.8, %1710 ], [ %gSel.4, %1581 ]
  %zj.3 = phi i32 [ %zj.5, %1710 ], [ %zj.2, %1581 ]
  %zvec.3 = phi i32 [ %zvec.5, %1710 ], [ %zvec.2, %1581 ]
  %zn.4 = phi i32 [ %zn.6, %1710 ], [ %zn.3, %1581 ]
  %curr.10 = phi i32 [ %curr.12, %1710 ], [ %curr.9, %1581 ]
  %N.1 = phi i32 [ %N.3, %1710 ], [ 1, %1581 ]
  %es.1 = phi i32 [ %es.4, %1710 ], [ -1, %1581 ]
  %nblock.4 = phi i32 [ %nblock.6, %1710 ], [ %nblock.3, %1581 ]
  %nblockMAX.4 = phi i32 [ %nblockMAX.6, %1710 ], [ %nblockMAX.3, %1581 ]
  %nextSym.1 = phi i32 [ %1713, %1710 ], [ %nextSym.0, %1581 ]
  %groupPos.5 = phi i32 [ %groupPos.8, %1710 ], [ %groupPos.4, %1581 ]
  %groupNo.5 = phi i32 [ %groupNo.8, %1710 ], [ %groupNo.4, %1581 ]
  %EOB.4 = phi i32 [ %EOB.6, %1710 ], [ %EOB.3, %1581 ]
  %nSelectors.12 = phi i32 [ %nSelectors.14, %1710 ], [ %nSelectors.11, %1581 ]
  %nGroups.13 = phi i32 [ %nGroups.15, %1710 ], [ %nGroups.12, %1581 ]
  %alphaSize.14 = phi i32 [ %alphaSize.16, %1710 ], [ %alphaSize.13, %1581 ]
  %t.11 = phi i32 [ %t.13, %1710 ], [ %t.10, %1581 ]
  %j.18 = phi i32 [ %j.20, %1710 ], [ %j.17, %1581 ]
  %i.24 = phi i32 [ %i.26, %1710 ], [ %i.23, %1581 ]
  switch i32 %nextSym.1, label %1588 [
    i32 0, label %1583
    i32 1, label %1585
  ]

; <label>:1583                                    ; preds = %.critedge
  %1584 = add nsw i32 %es.1, %N.1
  br label %1588

; <label>:1585                                    ; preds = %.critedge
  %1586 = shl i32 %N.1, 1
  %1587 = add nsw i32 %es.1, %1586
  br label %1588

; <label>:1588                                    ; preds = %1585, %1583, %.critedge
  %es.2 = phi i32 [ %1584, %1583 ], [ %1587, %1585 ], [ %es.1, %.critedge ]
  %1589 = shl nsw i32 %N.1, 1
  %1590 = icmp eq i32 %groupPos.5, 0
  br i1 %1590, label %1591, label %1605

; <label>:1591                                    ; preds = %1588
  %1592 = add nsw i32 %groupNo.5, 1
  %1593 = icmp slt i32 %1592, %nSelectors.12
  br i1 %1593, label %1594, label %.loopexit

; <label>:1594                                    ; preds = %1591
  %1595 = sext i32 %1592 to i64
  %1596 = getelementptr inbounds %struct.DState* %s, i64 0, i32 33, i64 %1595
  %1597 = load i8* %1596, align 1
  %1598 = zext i8 %1597 to i32
  %1599 = zext i8 %1597 to i64
  %1600 = getelementptr inbounds %struct.DState* %s, i64 0, i32 39, i64 %1599
  %1601 = load i32* %1600, align 4
  %1602 = getelementptr inbounds %struct.DState* %s, i64 0, i32 36, i64 %1599, i64 0
  %1603 = getelementptr inbounds %struct.DState* %s, i64 0, i32 38, i64 %1599, i64 0
  %1604 = getelementptr inbounds %struct.DState* %s, i64 0, i32 37, i64 %1599, i64 0
  br label %1605

; <label>:1605                                    ; preds = %1594, %1588
  %gPerm.6 = phi i32* [ %1603, %1594 ], [ %gPerm.5, %1588 ]
  %gBase.6 = phi i32* [ %1604, %1594 ], [ %gBase.5, %1588 ]
  %gLimit.6 = phi i32* [ %1602, %1594 ], [ %gLimit.5, %1588 ]
  %gMinlen.6 = phi i32 [ %1601, %1594 ], [ %gMinlen.5, %1588 ]
  %gSel.6 = phi i32 [ %1598, %1594 ], [ %gSel.5, %1588 ]
  %groupPos.6 = phi i32 [ 50, %1594 ], [ %groupPos.5, %1588 ]
  %groupNo.6 = phi i32 [ %1592, %1594 ], [ %groupNo.5, %1588 ]
  %1606 = add nsw i32 %groupPos.6, -1
  br label %1607

; <label>:1607                                    ; preds = %1605, %9
  %gPerm.7 = phi i32* [ %gPerm.6, %1605 ], [ %10, %9 ]
  %gBase.7 = phi i32* [ %gBase.6, %1605 ], [ %11, %9 ]
  %gLimit.7 = phi i32* [ %gLimit.6, %1605 ], [ %12, %9 ]
  %gMinlen.7 = phi i32 [ %gMinlen.6, %1605 ], [ %13, %9 ]
  %gSel.7 = phi i32 [ %gSel.6, %1605 ], [ %14, %9 ]
  %zj.4 = phi i32 [ %zj.3, %1605 ], [ %15, %9 ]
  %zvec.4 = phi i32 [ %zvec.3, %1605 ], [ %16, %9 ]
  %zn.5 = phi i32 [ %gMinlen.6, %1605 ], [ %17, %9 ]
  %curr.11 = phi i32 [ %curr.10, %1605 ], [ %19, %9 ]
  %N.2 = phi i32 [ %1589, %1605 ], [ %20, %9 ]
  %es.3 = phi i32 [ %es.2, %1605 ], [ %21, %9 ]
  %nblock.5 = phi i32 [ %nblock.4, %1605 ], [ %22, %9 ]
  %nblockMAX.5 = phi i32 [ %nblockMAX.4, %1605 ], [ %23, %9 ]
  %nextSym.2 = phi i32 [ %nextSym.1, %1605 ], [ %24, %9 ]
  %groupPos.7 = phi i32 [ %1606, %1605 ], [ %25, %9 ]
  %groupNo.7 = phi i32 [ %groupNo.6, %1605 ], [ %26, %9 ]
  %EOB.5 = phi i32 [ %EOB.4, %1605 ], [ %27, %9 ]
  %nSelectors.13 = phi i32 [ %nSelectors.12, %1605 ], [ %28, %9 ]
  %nGroups.14 = phi i32 [ %nGroups.13, %1605 ], [ %29, %9 ]
  %alphaSize.15 = phi i32 [ %alphaSize.14, %1605 ], [ %30, %9 ]
  %t.12 = phi i32 [ %t.11, %1605 ], [ %31, %9 ]
  %j.19 = phi i32 [ %j.18, %1605 ], [ %32, %9 ]
  %i.25 = phi i32 [ %i.24, %1605 ], [ %33, %9 ]
  store i32 38, i32* %3, align 4
  %1608 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1609 = load i32* %1608, align 4
  %1610 = icmp slt i32 %1609, %zn.5
  %1611 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1610, label %.lr.ph446.preheader, label %._crit_edge447

.lr.ph446.preheader:                              ; preds = %1607
  br label %.lr.ph446

._crit_edge447.loopexit:                          ; preds = %.backedge109
  %.lcssa1258 = phi i32 [ %1650, %.backedge109 ]
  br label %._crit_edge447

._crit_edge447:                                   ; preds = %._crit_edge447.loopexit, %1607
  %.lcssa248 = phi i32 [ %1609, %1607 ], [ %.lcssa1258, %._crit_edge447.loopexit ]
  %1612 = load i32* %1611, align 4
  %1613 = sub nsw i32 %.lcssa248, %zn.5
  %1614 = lshr i32 %1612, %1613
  %1615 = shl i32 1, %zn.5
  %1616 = add nsw i32 %1615, -1
  %1617 = and i32 %1614, %1616
  store i32 %1613, i32* %1608, align 4
  br label %1652

.lr.ph446:                                        ; preds = %.backedge109, %.lr.ph446.preheader
  %1618 = phi i32 [ %1650, %.backedge109 ], [ %1609, %.lr.ph446.preheader ]
  %1619 = load %struct.bz_stream** %1, align 8
  %1620 = getelementptr inbounds %struct.bz_stream* %1619, i64 0, i32 1
  %1621 = load i32* %1620, align 4
  %1622 = icmp eq i32 %1621, 0
  br i1 %1622, label %.loopexit.loopexit1202, label %1623

; <label>:1623                                    ; preds = %.lr.ph446
  %1624 = load i32* %1611, align 4
  %1625 = shl i32 %1624, 8
  %1626 = getelementptr inbounds %struct.bz_stream* %1619, i64 0, i32 0
  %1627 = load i8** %1626, align 8
  %1628 = load i8* %1627, align 1
  %1629 = zext i8 %1628 to i32
  %1630 = or i32 %1629, %1625
  store i32 %1630, i32* %1611, align 4
  %1631 = add nsw i32 %1618, 8
  store i32 %1631, i32* %1608, align 4
  %1632 = load i8** %1626, align 8
  %1633 = getelementptr inbounds i8* %1632, i64 1
  store i8* %1633, i8** %1626, align 8
  %1634 = load %struct.bz_stream** %1, align 8
  %1635 = getelementptr inbounds %struct.bz_stream* %1634, i64 0, i32 1
  %1636 = load i32* %1635, align 4
  %1637 = add i32 %1636, -1
  store i32 %1637, i32* %1635, align 4
  %1638 = load %struct.bz_stream** %1, align 8
  %1639 = getelementptr inbounds %struct.bz_stream* %1638, i64 0, i32 2
  %1640 = load i32* %1639, align 4
  %1641 = add i32 %1640, 1
  store i32 %1641, i32* %1639, align 4
  %1642 = load %struct.bz_stream** %1, align 8
  %1643 = getelementptr inbounds %struct.bz_stream* %1642, i64 0, i32 2
  %1644 = load i32* %1643, align 4
  %1645 = icmp eq i32 %1644, 0
  br i1 %1645, label %1646, label %.backedge109

; <label>:1646                                    ; preds = %1623
  %1647 = getelementptr inbounds %struct.bz_stream* %1642, i64 0, i32 3
  %1648 = load i32* %1647, align 4
  %1649 = add i32 %1648, 1
  store i32 %1649, i32* %1647, align 4
  br label %.backedge109

.backedge109:                                     ; preds = %1646, %1623
  %1650 = load i32* %1608, align 4
  %1651 = icmp slt i32 %1650, %zn.5
  br i1 %1651, label %.lr.ph446, label %._crit_edge447.loopexit

; <label>:1652                                    ; preds = %._crit_edge432, %._crit_edge447
  %1653 = phi i32 [ %1613, %._crit_edge447 ], [ %1666, %._crit_edge432 ]
  %gPerm.8 = phi i32* [ %gPerm.7, %._crit_edge447 ], [ %gPerm.9, %._crit_edge432 ]
  %gBase.8 = phi i32* [ %gBase.7, %._crit_edge447 ], [ %gBase.9, %._crit_edge432 ]
  %gLimit.8 = phi i32* [ %gLimit.7, %._crit_edge447 ], [ %gLimit.9, %._crit_edge432 ]
  %gMinlen.8 = phi i32 [ %gMinlen.7, %._crit_edge447 ], [ %gMinlen.9, %._crit_edge432 ]
  %gSel.8 = phi i32 [ %gSel.7, %._crit_edge447 ], [ %gSel.9, %._crit_edge432 ]
  %zj.5 = phi i32 [ %zj.4, %._crit_edge447 ], [ %1668, %._crit_edge432 ]
  %zvec.5 = phi i32 [ %1617, %._crit_edge447 ], [ %1670, %._crit_edge432 ]
  %zn.6 = phi i32 [ %zn.5, %._crit_edge447 ], [ %zn.7, %._crit_edge432 ]
  %curr.12 = phi i32 [ %curr.11, %._crit_edge447 ], [ %curr.13, %._crit_edge432 ]
  %N.3 = phi i32 [ %N.2, %._crit_edge447 ], [ %N.4, %._crit_edge432 ]
  %es.4 = phi i32 [ %es.3, %._crit_edge447 ], [ %es.5, %._crit_edge432 ]
  %nblock.6 = phi i32 [ %nblock.5, %._crit_edge447 ], [ %nblock.7, %._crit_edge432 ]
  %nblockMAX.6 = phi i32 [ %nblockMAX.5, %._crit_edge447 ], [ %nblockMAX.7, %._crit_edge432 ]
  %nextSym.3 = phi i32 [ %nextSym.2, %._crit_edge447 ], [ %nextSym.4, %._crit_edge432 ]
  %groupPos.8 = phi i32 [ %groupPos.7, %._crit_edge447 ], [ %groupPos.9, %._crit_edge432 ]
  %groupNo.8 = phi i32 [ %groupNo.7, %._crit_edge447 ], [ %groupNo.9, %._crit_edge432 ]
  %EOB.6 = phi i32 [ %EOB.5, %._crit_edge447 ], [ %EOB.7, %._crit_edge432 ]
  %nSelectors.14 = phi i32 [ %nSelectors.13, %._crit_edge447 ], [ %nSelectors.15, %._crit_edge432 ]
  %nGroups.15 = phi i32 [ %nGroups.14, %._crit_edge447 ], [ %nGroups.16, %._crit_edge432 ]
  %alphaSize.16 = phi i32 [ %alphaSize.15, %._crit_edge447 ], [ %alphaSize.17, %._crit_edge432 ]
  %t.13 = phi i32 [ %t.12, %._crit_edge447 ], [ %t.14, %._crit_edge432 ]
  %j.20 = phi i32 [ %j.19, %._crit_edge447 ], [ %j.21, %._crit_edge432 ]
  %i.26 = phi i32 [ %i.25, %._crit_edge447 ], [ %i.27, %._crit_edge432 ]
  %1654 = icmp sgt i32 %zn.6, 20
  br i1 %1654, label %.loopexit, label %1655

; <label>:1655                                    ; preds = %1652
  %1656 = sext i32 %zn.6 to i64
  %1657 = getelementptr inbounds i32* %gLimit.8, i64 %1656
  %1658 = load i32* %1657, align 4
  %1659 = icmp sgt i32 %zvec.5, %1658
  br i1 %1659, label %1660, label %1705

; <label>:1660                                    ; preds = %1655
  %1661 = add nsw i32 %zn.6, 1
  %.pre886 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  br label %1662

; <label>:1662                                    ; preds = %1660, %._crit_edge879
  %.pre-phi887 = phi i32* [ %.phi.trans.insert880, %._crit_edge879 ], [ %.pre886, %1660 ]
  %1663 = phi i32 [ %.pre881, %._crit_edge879 ], [ %1653, %1660 ]
  %gPerm.9 = phi i32* [ %10, %._crit_edge879 ], [ %gPerm.8, %1660 ]
  %gBase.9 = phi i32* [ %11, %._crit_edge879 ], [ %gBase.8, %1660 ]
  %gLimit.9 = phi i32* [ %12, %._crit_edge879 ], [ %gLimit.8, %1660 ]
  %gMinlen.9 = phi i32 [ %13, %._crit_edge879 ], [ %gMinlen.8, %1660 ]
  %gSel.9 = phi i32 [ %14, %._crit_edge879 ], [ %gSel.8, %1660 ]
  %zj.6 = phi i32 [ %15, %._crit_edge879 ], [ %zj.5, %1660 ]
  %zvec.6 = phi i32 [ %16, %._crit_edge879 ], [ %zvec.5, %1660 ]
  %zn.7 = phi i32 [ %17, %._crit_edge879 ], [ %1661, %1660 ]
  %curr.13 = phi i32 [ %19, %._crit_edge879 ], [ %curr.12, %1660 ]
  %N.4 = phi i32 [ %20, %._crit_edge879 ], [ %N.3, %1660 ]
  %es.5 = phi i32 [ %21, %._crit_edge879 ], [ %es.4, %1660 ]
  %nblock.7 = phi i32 [ %22, %._crit_edge879 ], [ %nblock.6, %1660 ]
  %nblockMAX.7 = phi i32 [ %23, %._crit_edge879 ], [ %nblockMAX.6, %1660 ]
  %nextSym.4 = phi i32 [ %24, %._crit_edge879 ], [ %nextSym.3, %1660 ]
  %groupPos.9 = phi i32 [ %25, %._crit_edge879 ], [ %groupPos.8, %1660 ]
  %groupNo.9 = phi i32 [ %26, %._crit_edge879 ], [ %groupNo.8, %1660 ]
  %EOB.7 = phi i32 [ %27, %._crit_edge879 ], [ %EOB.6, %1660 ]
  %nSelectors.15 = phi i32 [ %28, %._crit_edge879 ], [ %nSelectors.14, %1660 ]
  %nGroups.16 = phi i32 [ %29, %._crit_edge879 ], [ %nGroups.15, %1660 ]
  %alphaSize.17 = phi i32 [ %30, %._crit_edge879 ], [ %alphaSize.16, %1660 ]
  %t.14 = phi i32 [ %31, %._crit_edge879 ], [ %t.13, %1660 ]
  %j.21 = phi i32 [ %32, %._crit_edge879 ], [ %j.20, %1660 ]
  %i.27 = phi i32 [ %33, %._crit_edge879 ], [ %i.26, %1660 ]
  store i32 39, i32* %3, align 4
  %1664 = icmp sgt i32 %1663, 0
  %.pre1016 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1664, label %._crit_edge432, label %.lr.ph431.preheader

.lr.ph431.preheader:                              ; preds = %1662
  br label %.lr.ph431

._crit_edge432.loopexit:                          ; preds = %.backedge101
  %.lcssa1249 = phi i32 [ %1703, %.backedge101 ]
  br label %._crit_edge432

._crit_edge432:                                   ; preds = %._crit_edge432.loopexit, %1662
  %.lcssa240 = phi i32 [ %1663, %1662 ], [ %.lcssa1249, %._crit_edge432.loopexit ]
  %1665 = load i32* %.pre1016, align 4
  %1666 = add nsw i32 %.lcssa240, -1
  %1667 = lshr i32 %1665, %1666
  %1668 = and i32 %1667, 1
  store i32 %1666, i32* %.pre-phi887, align 4
  %1669 = shl i32 %zvec.6, 1
  %1670 = or i32 %1668, %1669
  br label %1652

.lr.ph431:                                        ; preds = %.backedge101, %.lr.ph431.preheader
  %1671 = phi i32 [ %1703, %.backedge101 ], [ %1663, %.lr.ph431.preheader ]
  %1672 = load %struct.bz_stream** %1, align 8
  %1673 = getelementptr inbounds %struct.bz_stream* %1672, i64 0, i32 1
  %1674 = load i32* %1673, align 4
  %1675 = icmp eq i32 %1674, 0
  br i1 %1675, label %.loopexit.loopexit1199, label %1676

; <label>:1676                                    ; preds = %.lr.ph431
  %1677 = load i32* %.pre1016, align 4
  %1678 = shl i32 %1677, 8
  %1679 = getelementptr inbounds %struct.bz_stream* %1672, i64 0, i32 0
  %1680 = load i8** %1679, align 8
  %1681 = load i8* %1680, align 1
  %1682 = zext i8 %1681 to i32
  %1683 = or i32 %1682, %1678
  store i32 %1683, i32* %.pre1016, align 4
  %1684 = add nsw i32 %1671, 8
  store i32 %1684, i32* %.pre-phi887, align 4
  %1685 = load i8** %1679, align 8
  %1686 = getelementptr inbounds i8* %1685, i64 1
  store i8* %1686, i8** %1679, align 8
  %1687 = load %struct.bz_stream** %1, align 8
  %1688 = getelementptr inbounds %struct.bz_stream* %1687, i64 0, i32 1
  %1689 = load i32* %1688, align 4
  %1690 = add i32 %1689, -1
  store i32 %1690, i32* %1688, align 4
  %1691 = load %struct.bz_stream** %1, align 8
  %1692 = getelementptr inbounds %struct.bz_stream* %1691, i64 0, i32 2
  %1693 = load i32* %1692, align 4
  %1694 = add i32 %1693, 1
  store i32 %1694, i32* %1692, align 4
  %1695 = load %struct.bz_stream** %1, align 8
  %1696 = getelementptr inbounds %struct.bz_stream* %1695, i64 0, i32 2
  %1697 = load i32* %1696, align 4
  %1698 = icmp eq i32 %1697, 0
  br i1 %1698, label %1699, label %.backedge101

; <label>:1699                                    ; preds = %1676
  %1700 = getelementptr inbounds %struct.bz_stream* %1695, i64 0, i32 3
  %1701 = load i32* %1700, align 4
  %1702 = add i32 %1701, 1
  store i32 %1702, i32* %1700, align 4
  br label %.backedge101

.backedge101:                                     ; preds = %1699, %1676
  %1703 = load i32* %.pre-phi887, align 4
  %1704 = icmp sgt i32 %1703, 0
  br i1 %1704, label %._crit_edge432.loopexit, label %.lr.ph431

; <label>:1705                                    ; preds = %1655
  %1706 = getelementptr inbounds i32* %gBase.8, i64 %1656
  %1707 = load i32* %1706, align 4
  %1708 = sub nsw i32 %zvec.5, %1707
  %1709 = icmp ugt i32 %1708, 257
  br i1 %1709, label %.loopexit, label %1710

; <label>:1710                                    ; preds = %1705
  %1711 = sext i32 %1708 to i64
  %1712 = getelementptr inbounds i32* %gPerm.8, i64 %1711
  %1713 = load i32* %1712, align 4
  %1714 = icmp ult i32 %1713, 2
  br i1 %1714, label %.critedge, label %1715

; <label>:1715                                    ; preds = %1710
  %1716 = add nsw i32 %es.4, 1
  %1717 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 0
  %1718 = load i32* %1717, align 4
  %1719 = sext i32 %1718 to i64
  %1720 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1719
  %1721 = load i8* %1720, align 1
  %1722 = zext i8 %1721 to i64
  %1723 = getelementptr inbounds %struct.DState* %s, i64 0, i32 30, i64 %1722
  %1724 = load i8* %1723, align 1
  %1725 = zext i8 %1724 to i64
  %1726 = getelementptr inbounds %struct.DState* %s, i64 0, i32 16, i64 %1725
  %1727 = load i32* %1726, align 4
  %1728 = add nsw i32 %1727, %1716
  store i32 %1728, i32* %1726, align 4
  %1729 = getelementptr inbounds %struct.DState* %s, i64 0, i32 10
  %1730 = load i8* %1729, align 1
  %1731 = icmp eq i8 %1730, 0
  %1732 = icmp sgt i32 %es.4, -1
  br i1 %1731, label %.preheader102, label %.preheader105

.preheader105:                                    ; preds = %1715
  br i1 %1732, label %.lr.ph442, label %.loopexit103

.lr.ph442:                                        ; preds = %.preheader105
  %1733 = zext i8 %1724 to i16
  %1734 = getelementptr inbounds %struct.DState* %s, i64 0, i32 21
  %1735 = sext i32 %nblock.6 to i64
  br label %1739

.preheader102:                                    ; preds = %1715
  br i1 %1732, label %.lr.ph437, label %.loopexit103

.lr.ph437:                                        ; preds = %.preheader102
  %1736 = zext i8 %1724 to i32
  %1737 = getelementptr inbounds %struct.DState* %s, i64 0, i32 20
  %1738 = sext i32 %nblock.6 to i64
  br label %1747

; <label>:1739                                    ; preds = %1742, %.lr.ph442
  %indvars.iv692 = phi i64 [ %1735, %.lr.ph442 ], [ %indvars.iv.next693, %1742 ]
  %es.6440 = phi i32 [ %1716, %.lr.ph442 ], [ %1745, %1742 ]
  %1740 = trunc i64 %indvars.iv692 to i32
  %1741 = icmp slt i32 %1740, %nblockMAX.6
  br i1 %1741, label %1742, label %.loopexit.loopexit1201

; <label>:1742                                    ; preds = %1739
  %1743 = load i16** %1734, align 8
  %1744 = getelementptr inbounds i16* %1743, i64 %indvars.iv692
  store i16 %1733, i16* %1744, align 2
  %indvars.iv.next693 = add nsw i64 %indvars.iv692, 1
  %1745 = add nsw i32 %es.6440, -1
  %1746 = icmp sgt i32 %1745, 0
  br i1 %1746, label %1739, label %..loopexit106_crit_edge

; <label>:1747                                    ; preds = %1750, %.lr.ph437
  %indvars.iv690 = phi i64 [ %1738, %.lr.ph437 ], [ %indvars.iv.next691, %1750 ]
  %es.7435 = phi i32 [ %1716, %.lr.ph437 ], [ %1753, %1750 ]
  %1748 = trunc i64 %indvars.iv690 to i32
  %1749 = icmp slt i32 %1748, %nblockMAX.6
  br i1 %1749, label %1750, label %.loopexit.loopexit1200

; <label>:1750                                    ; preds = %1747
  %1751 = load i32** %1737, align 8
  %1752 = getelementptr inbounds i32* %1751, i64 %indvars.iv690
  store i32 %1736, i32* %1752, align 4
  %indvars.iv.next691 = add nsw i64 %indvars.iv690, 1
  %1753 = add nsw i32 %es.7435, -1
  %1754 = icmp sgt i32 %1753, 0
  br i1 %1754, label %1747, label %..loopexit103_crit_edge

; <label>:1755                                    ; preds = %1581
  %1756 = icmp slt i32 %nblock.3, %nblockMAX.3
  br i1 %1756, label %1757, label %.loopexit

; <label>:1757                                    ; preds = %1755
  %1758 = add i32 %nextSym.0, -1
  %1759 = icmp ult i32 %1758, 16
  br i1 %1759, label %1760, label %1828

; <label>:1760                                    ; preds = %1757
  %1761 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 0
  %1762 = load i32* %1761, align 4
  %1763 = add i32 %1762, %1758
  %1764 = zext i32 %1763 to i64
  %1765 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1764
  %1766 = load i8* %1765, align 1
  %1767 = icmp ugt i32 %1758, 3
  br i1 %1767, label %.lr.ph465, label %.preheader114

.lr.ph465:                                        ; preds = %1760
  %1768 = add i32 %nextSym.0, 3
  br label %1784

..preheader114_crit_edge:                         ; preds = %1784
  %1769 = and i32 %1768, 3
  br label %.preheader114

.preheader114:                                    ; preds = %..preheader114_crit_edge, %1760
  %nn.0.lcssa = phi i32 [ %1769, %..preheader114_crit_edge ], [ %1758, %1760 ]
  %1770 = icmp eq i32 %nn.0.lcssa, 0
  br i1 %1770, label %._crit_edge462, label %.lr.ph461

.lr.ph461:                                        ; preds = %.preheader114
  %1771 = zext i32 %nn.0.lcssa to i64
  %xtraiter = and i32 %nn.0.lcssa, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %nn.0.lcssa, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %1772, label %.lr.ph461.split

; <label>:1772                                    ; preds = %.lr.ph461
  %1773 = trunc i64 %1771 to i32
  %1774 = add i32 %1773, %1762
  %1775 = add i32 %1774, -1
  %1776 = zext i32 %1775 to i64
  %1777 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1776
  %1778 = load i8* %1777, align 1
  %1779 = zext i32 %1774 to i64
  %1780 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1779
  store i8 %1778, i8* %1780, align 1
  %1781 = add i32 %nn.0.lcssa, -1
  %1782 = icmp eq i32 %1781, 0
  %indvars.iv.next695.unr = add i64 %1771, -1
  br label %.lr.ph461.split

.lr.ph461.split:                                  ; preds = %1772, %.lr.ph461
  %indvars.iv694.unr = phi i64 [ %1771, %.lr.ph461 ], [ %indvars.iv.next695.unr, %1772 ]
  %nn.1460.unr = phi i32 [ %nn.0.lcssa, %.lr.ph461 ], [ %1781, %1772 ]
  %1783 = icmp ult i32 %nn.0.lcssa, 2
  br i1 %1783, label %._crit_edge462.loopexit, label %.lr.ph461.split.split

.lr.ph461.split.split:                            ; preds = %.lr.ph461.split
  br label %1806

; <label>:1784                                    ; preds = %1784, %.lr.ph465
  %nn.0463 = phi i32 [ %1758, %.lr.ph465 ], [ %1804, %1784 ]
  %1785 = add i32 %nn.0463, %1762
  %1786 = add nsw i32 %1785, -1
  %1787 = sext i32 %1786 to i64
  %1788 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1787
  %1789 = load i8* %1788, align 1
  %1790 = sext i32 %1785 to i64
  %1791 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1790
  store i8 %1789, i8* %1791, align 1
  %1792 = add nsw i32 %1785, -2
  %1793 = sext i32 %1792 to i64
  %1794 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1793
  %1795 = load i8* %1794, align 1
  store i8 %1795, i8* %1788, align 1
  %1796 = add nsw i32 %1785, -3
  %1797 = sext i32 %1796 to i64
  %1798 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1797
  %1799 = load i8* %1798, align 1
  store i8 %1799, i8* %1794, align 1
  %1800 = add nsw i32 %1785, -4
  %1801 = sext i32 %1800 to i64
  %1802 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1801
  %1803 = load i8* %1802, align 1
  store i8 %1803, i8* %1798, align 1
  %1804 = add i32 %nn.0463, -4
  %1805 = icmp ugt i32 %1804, 3
  br i1 %1805, label %1784, label %..preheader114_crit_edge

; <label>:1806                                    ; preds = %1806, %.lr.ph461.split.split
  %indvars.iv694 = phi i64 [ %indvars.iv694.unr, %.lr.ph461.split.split ], [ %indvars.iv.next695.1, %1806 ]
  %nn.1460 = phi i32 [ %nn.1460.unr, %.lr.ph461.split.split ], [ %1824, %1806 ]
  %1807 = trunc i64 %indvars.iv694 to i32
  %1808 = add i32 %1807, %1762
  %1809 = add i32 %1808, -1
  %1810 = zext i32 %1809 to i64
  %1811 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1810
  %1812 = load i8* %1811, align 1
  %1813 = zext i32 %1808 to i64
  %1814 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1813
  store i8 %1812, i8* %1814, align 1
  %1815 = add i32 %nn.1460, -1
  %indvars.iv.next695 = add i64 %indvars.iv694, -1
  %1816 = trunc i64 %indvars.iv.next695 to i32
  %1817 = add i32 %1816, %1762
  %1818 = add i32 %1817, -1
  %1819 = zext i32 %1818 to i64
  %1820 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1819
  %1821 = load i8* %1820, align 1
  %1822 = zext i32 %1817 to i64
  %1823 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1822
  store i8 %1821, i8* %1823, align 1
  %1824 = add i32 %1815, -1
  %1825 = icmp eq i32 %1824, 0
  %indvars.iv.next695.1 = add i64 %indvars.iv.next695, -1
  br i1 %1825, label %._crit_edge462.loopexit.unr-lcssa, label %1806

._crit_edge462.loopexit.unr-lcssa:                ; preds = %1806
  br label %._crit_edge462.loopexit

._crit_edge462.loopexit:                          ; preds = %._crit_edge462.loopexit.unr-lcssa, %.lr.ph461.split
  br label %._crit_edge462

._crit_edge462:                                   ; preds = %._crit_edge462.loopexit, %.preheader114
  %1826 = sext i32 %1762 to i64
  %1827 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1826
  store i8 %1766, i8* %1827, align 1
  br label %.loopexit117

; <label>:1828                                    ; preds = %1757
  %1829 = lshr i32 %1758, 4
  %1830 = and i32 %1758, 15
  %1831 = zext i32 %1829 to i64
  %1832 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 %1831
  %1833 = load i32* %1832, align 4
  %1834 = add nsw i32 %1833, %1830
  %1835 = sext i32 %1834 to i64
  %1836 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1835
  %1837 = load i8* %1836, align 1
  %1838 = icmp eq i32 %1830, 0
  br i1 %1838, label %._crit_edge478, label %.lr.ph477

.lr.ph477:                                        ; preds = %1828
  %1839 = and i32 %1758, 15
  %1840 = add i32 %1833, %1839
  %1841 = sext i32 %1840 to i64
  br label %1842

; <label>:1842                                    ; preds = %1842, %.lr.ph477
  %indvars.iv706 = phi i64 [ %1841, %.lr.ph477 ], [ %indvars.iv.next707, %1842 ]
  %indvars.iv.next707 = add nsw i64 %indvars.iv706, -1
  %1843 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next707
  %1844 = load i8* %1843, align 1
  %1845 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv706
  store i8 %1844, i8* %1845, align 1
  %1846 = load i32* %1832, align 4
  %1847 = trunc i64 %indvars.iv.next707 to i32
  %1848 = icmp sgt i32 %1847, %1846
  br i1 %1848, label %1842, label %._crit_edge478.loopexit

._crit_edge478.loopexit:                          ; preds = %1842
  %.lcssa1261 = phi i32 [ %1846, %1842 ]
  br label %._crit_edge478

._crit_edge478:                                   ; preds = %._crit_edge478.loopexit, %1828
  %.lcssa258 = phi i32 [ %1833, %1828 ], [ %.lcssa1261, %._crit_edge478.loopexit ]
  %1849 = add nsw i32 %.lcssa258, 1
  store i32 %1849, i32* %1832, align 4
  %1850 = icmp eq i32 %1829, 0
  br i1 %1850, label %._crit_edge474, label %.lr.ph473.preheader

.lr.ph473.preheader:                              ; preds = %._crit_edge478
  br label %.lr.ph473

.lr.ph473:                                        ; preds = %._crit_edge877, %.lr.ph473.preheader
  %1851 = phi i32 [ %.pre878, %._crit_edge877 ], [ %1849, %.lr.ph473.preheader ]
  %indvars.iv704 = phi i64 [ %indvars.iv.next705, %._crit_edge877 ], [ %1831, %.lr.ph473.preheader ]
  %1852 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 %indvars.iv704
  %1853 = add nsw i32 %1851, -1
  store i32 %1853, i32* %1852, align 4
  %indvars.iv.next705 = add nsw i64 %indvars.iv704, -1
  %1854 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 %indvars.iv.next705
  %1855 = load i32* %1854, align 4
  %1856 = add nsw i32 %1855, 15
  %1857 = sext i32 %1856 to i64
  %1858 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1857
  %1859 = load i8* %1858, align 1
  %1860 = sext i32 %1853 to i64
  %1861 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1860
  store i8 %1859, i8* %1861, align 1
  %1862 = trunc i64 %indvars.iv.next705 to i32
  %1863 = icmp sgt i32 %1862, 0
  br i1 %1863, label %._crit_edge877, label %._crit_edge474.loopexit

._crit_edge877:                                   ; preds = %.lr.ph473
  %.pre878 = load i32* %1854, align 4
  br label %.lr.ph473

._crit_edge474.loopexit:                          ; preds = %.lr.ph473
  br label %._crit_edge474

._crit_edge474:                                   ; preds = %._crit_edge474.loopexit, %._crit_edge478
  %1864 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 0
  %1865 = load i32* %1864, align 4
  %1866 = add nsw i32 %1865, -1
  store i32 %1866, i32* %1864, align 4
  %1867 = sext i32 %1866 to i64
  %1868 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1867
  store i8 %1837, i8* %1868, align 1
  %1869 = load i32* %1864, align 4
  %1870 = icmp eq i32 %1869, 0
  br i1 %1870, label %.preheader115.preheader, label %.loopexit117

.preheader115.preheader:                          ; preds = %._crit_edge474
  br label %.preheader115

.preheader115:                                    ; preds = %1888, %.preheader115.preheader
  %indvars.iv702 = phi i64 [ %indvars.iv.next703, %1888 ], [ 15, %.preheader115.preheader ]
  %indvars.iv700 = phi i64 [ %indvars.iv.next701, %1888 ], [ 4095, %.preheader115.preheader ]
  %indvars.iv698 = phi i64 [ %indvars.iv.next699, %1888 ], [ 4080, %.preheader115.preheader ]
  %1871 = getelementptr inbounds %struct.DState* %s, i64 0, i32 32, i64 %indvars.iv702
  br label %1872

; <label>:1872                                    ; preds = %1872, %.preheader115
  %indvars.iv696 = phi i64 [ %indvars.iv700, %.preheader115 ], [ %indvars.iv.next697.1, %1872 ]
  %jj32.0467 = phi i32 [ 15, %.preheader115 ], [ %1886, %1872 ]
  %1873 = load i32* %1871, align 4
  %1874 = add nsw i32 %1873, %jj32.0467
  %1875 = sext i32 %1874 to i64
  %1876 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1875
  %1877 = load i8* %1876, align 1
  %1878 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv696
  store i8 %1877, i8* %1878, align 1
  %indvars.iv.next697 = add nsw i64 %indvars.iv696, -1
  %1879 = add nsw i32 %jj32.0467, -1
  %1880 = load i32* %1871, align 4
  %1881 = add nsw i32 %1880, %1879
  %1882 = sext i32 %1881 to i64
  %1883 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %1882
  %1884 = load i8* %1883, align 1
  %1885 = getelementptr inbounds %struct.DState* %s, i64 0, i32 31, i64 %indvars.iv.next697
  store i8 %1884, i8* %1885, align 1
  %indvars.iv.next697.1 = add nsw i64 %indvars.iv.next697, -1
  %1886 = add nsw i32 %1879, -1
  %1887 = icmp sgt i32 %1879, 0
  br i1 %1887, label %1872, label %1888

; <label>:1888                                    ; preds = %1872
  %1889 = trunc i64 %indvars.iv698 to i32
  store i32 %1889, i32* %1871, align 4
  %indvars.iv.next703 = add nsw i64 %indvars.iv702, -1
  %1890 = trunc i64 %indvars.iv702 to i32
  %1891 = icmp sgt i32 %1890, 0
  %indvars.iv.next699 = add i64 %indvars.iv698, -16
  %indvars.iv.next701 = add i64 %indvars.iv700, -16
  br i1 %1891, label %.preheader115, label %.loopexit117.loopexit

.loopexit117.loopexit:                            ; preds = %1888
  br label %.loopexit117

.loopexit117:                                     ; preds = %.loopexit117.loopexit, %._crit_edge474, %._crit_edge462
  %uc.0 = phi i8 [ %1766, %._crit_edge462 ], [ %1837, %._crit_edge474 ], [ %1837, %.loopexit117.loopexit ]
  %1892 = zext i8 %uc.0 to i64
  %1893 = getelementptr inbounds %struct.DState* %s, i64 0, i32 30, i64 %1892
  %1894 = load i8* %1893, align 1
  %1895 = zext i8 %1894 to i64
  %1896 = getelementptr inbounds %struct.DState* %s, i64 0, i32 16, i64 %1895
  %1897 = load i32* %1896, align 4
  %1898 = add nsw i32 %1897, 1
  store i32 %1898, i32* %1896, align 4
  %1899 = getelementptr inbounds %struct.DState* %s, i64 0, i32 10
  %1900 = load i8* %1899, align 1
  %1901 = icmp eq i8 %1900, 0
  %1902 = load i8* %1893, align 1
  br i1 %1901, label %1909, label %1903

; <label>:1903                                    ; preds = %.loopexit117
  %1904 = zext i8 %1902 to i16
  %1905 = sext i32 %nblock.3 to i64
  %1906 = getelementptr inbounds %struct.DState* %s, i64 0, i32 21
  %1907 = load i16** %1906, align 8
  %1908 = getelementptr inbounds i16* %1907, i64 %1905
  store i16 %1904, i16* %1908, align 2
  br label %1915

; <label>:1909                                    ; preds = %.loopexit117
  %1910 = zext i8 %1902 to i32
  %1911 = sext i32 %nblock.3 to i64
  %1912 = getelementptr inbounds %struct.DState* %s, i64 0, i32 20
  %1913 = load i32** %1912, align 8
  %1914 = getelementptr inbounds i32* %1913, i64 %1911
  store i32 %1910, i32* %1914, align 4
  br label %1915

; <label>:1915                                    ; preds = %1909, %1903
  %1916 = add nsw i32 %nblock.3, 1
  %1917 = icmp eq i32 %groupPos.4, 0
  br i1 %1917, label %1918, label %1932

; <label>:1918                                    ; preds = %1915
  %1919 = add nsw i32 %groupNo.4, 1
  %1920 = icmp slt i32 %1919, %nSelectors.11
  br i1 %1920, label %1921, label %.loopexit

; <label>:1921                                    ; preds = %1918
  %1922 = sext i32 %1919 to i64
  %1923 = getelementptr inbounds %struct.DState* %s, i64 0, i32 33, i64 %1922
  %1924 = load i8* %1923, align 1
  %1925 = zext i8 %1924 to i32
  %1926 = zext i8 %1924 to i64
  %1927 = getelementptr inbounds %struct.DState* %s, i64 0, i32 39, i64 %1926
  %1928 = load i32* %1927, align 4
  %1929 = getelementptr inbounds %struct.DState* %s, i64 0, i32 36, i64 %1926, i64 0
  %1930 = getelementptr inbounds %struct.DState* %s, i64 0, i32 38, i64 %1926, i64 0
  %1931 = getelementptr inbounds %struct.DState* %s, i64 0, i32 37, i64 %1926, i64 0
  br label %1932

; <label>:1932                                    ; preds = %1921, %1915
  %gPerm.10 = phi i32* [ %1930, %1921 ], [ %gPerm.4, %1915 ]
  %gBase.10 = phi i32* [ %1931, %1921 ], [ %gBase.4, %1915 ]
  %gLimit.10 = phi i32* [ %1929, %1921 ], [ %gLimit.4, %1915 ]
  %gMinlen.10 = phi i32 [ %1928, %1921 ], [ %gMinlen.4, %1915 ]
  %gSel.10 = phi i32 [ %1925, %1921 ], [ %gSel.4, %1915 ]
  %groupPos.10 = phi i32 [ 50, %1921 ], [ %groupPos.4, %1915 ]
  %groupNo.10 = phi i32 [ %1919, %1921 ], [ %groupNo.4, %1915 ]
  %1933 = add nsw i32 %groupPos.10, -1
  br label %1934

; <label>:1934                                    ; preds = %1932, %9
  %gPerm.11 = phi i32* [ %gPerm.10, %1932 ], [ %10, %9 ]
  %gBase.11 = phi i32* [ %gBase.10, %1932 ], [ %11, %9 ]
  %gLimit.11 = phi i32* [ %gLimit.10, %1932 ], [ %12, %9 ]
  %gMinlen.11 = phi i32 [ %gMinlen.10, %1932 ], [ %13, %9 ]
  %gSel.11 = phi i32 [ %gSel.10, %1932 ], [ %14, %9 ]
  %zj.7 = phi i32 [ %zj.2, %1932 ], [ %15, %9 ]
  %zvec.7 = phi i32 [ %zvec.2, %1932 ], [ %16, %9 ]
  %zn.8 = phi i32 [ %gMinlen.10, %1932 ], [ %17, %9 ]
  %curr.14 = phi i32 [ %curr.9, %1932 ], [ %19, %9 ]
  %N.5 = phi i32 [ %N.0, %1932 ], [ %20, %9 ]
  %es.8 = phi i32 [ %es.0, %1932 ], [ %21, %9 ]
  %nblock.10 = phi i32 [ %1916, %1932 ], [ %22, %9 ]
  %nblockMAX.8 = phi i32 [ %nblockMAX.3, %1932 ], [ %23, %9 ]
  %nextSym.5 = phi i32 [ %nextSym.0, %1932 ], [ %24, %9 ]
  %groupPos.11 = phi i32 [ %1933, %1932 ], [ %25, %9 ]
  %groupNo.11 = phi i32 [ %groupNo.10, %1932 ], [ %26, %9 ]
  %EOB.8 = phi i32 [ %EOB.3, %1932 ], [ %27, %9 ]
  %nSelectors.16 = phi i32 [ %nSelectors.11, %1932 ], [ %28, %9 ]
  %nGroups.17 = phi i32 [ %nGroups.12, %1932 ], [ %29, %9 ]
  %alphaSize.18 = phi i32 [ %alphaSize.13, %1932 ], [ %30, %9 ]
  %t.15 = phi i32 [ %t.10, %1932 ], [ %31, %9 ]
  %j.22 = phi i32 [ %j.17, %1932 ], [ %32, %9 ]
  %i.28 = phi i32 [ %i.23, %1932 ], [ %33, %9 ]
  store i32 40, i32* %3, align 4
  %1935 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %1936 = load i32* %1935, align 4
  %1937 = icmp slt i32 %1936, %zn.8
  %1938 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1937, label %.lr.ph456.preheader, label %._crit_edge457

.lr.ph456.preheader:                              ; preds = %1934
  br label %.lr.ph456

._crit_edge457.loopexit:                          ; preds = %.backedge113
  %.lcssa1260 = phi i32 [ %1977, %.backedge113 ]
  br label %._crit_edge457

._crit_edge457:                                   ; preds = %._crit_edge457.loopexit, %1934
  %.lcssa256 = phi i32 [ %1936, %1934 ], [ %.lcssa1260, %._crit_edge457.loopexit ]
  %1939 = load i32* %1938, align 4
  %1940 = sub nsw i32 %.lcssa256, %zn.8
  %1941 = lshr i32 %1939, %1940
  %1942 = shl i32 1, %zn.8
  %1943 = add nsw i32 %1942, -1
  %1944 = and i32 %1941, %1943
  store i32 %1940, i32* %1935, align 4
  br label %1979

.lr.ph456:                                        ; preds = %.backedge113, %.lr.ph456.preheader
  %1945 = phi i32 [ %1977, %.backedge113 ], [ %1936, %.lr.ph456.preheader ]
  %1946 = load %struct.bz_stream** %1, align 8
  %1947 = getelementptr inbounds %struct.bz_stream* %1946, i64 0, i32 1
  %1948 = load i32* %1947, align 4
  %1949 = icmp eq i32 %1948, 0
  br i1 %1949, label %.loopexit.loopexit1204, label %1950

; <label>:1950                                    ; preds = %.lr.ph456
  %1951 = load i32* %1938, align 4
  %1952 = shl i32 %1951, 8
  %1953 = getelementptr inbounds %struct.bz_stream* %1946, i64 0, i32 0
  %1954 = load i8** %1953, align 8
  %1955 = load i8* %1954, align 1
  %1956 = zext i8 %1955 to i32
  %1957 = or i32 %1956, %1952
  store i32 %1957, i32* %1938, align 4
  %1958 = add nsw i32 %1945, 8
  store i32 %1958, i32* %1935, align 4
  %1959 = load i8** %1953, align 8
  %1960 = getelementptr inbounds i8* %1959, i64 1
  store i8* %1960, i8** %1953, align 8
  %1961 = load %struct.bz_stream** %1, align 8
  %1962 = getelementptr inbounds %struct.bz_stream* %1961, i64 0, i32 1
  %1963 = load i32* %1962, align 4
  %1964 = add i32 %1963, -1
  store i32 %1964, i32* %1962, align 4
  %1965 = load %struct.bz_stream** %1, align 8
  %1966 = getelementptr inbounds %struct.bz_stream* %1965, i64 0, i32 2
  %1967 = load i32* %1966, align 4
  %1968 = add i32 %1967, 1
  store i32 %1968, i32* %1966, align 4
  %1969 = load %struct.bz_stream** %1, align 8
  %1970 = getelementptr inbounds %struct.bz_stream* %1969, i64 0, i32 2
  %1971 = load i32* %1970, align 4
  %1972 = icmp eq i32 %1971, 0
  br i1 %1972, label %1973, label %.backedge113

; <label>:1973                                    ; preds = %1950
  %1974 = getelementptr inbounds %struct.bz_stream* %1969, i64 0, i32 3
  %1975 = load i32* %1974, align 4
  %1976 = add i32 %1975, 1
  store i32 %1976, i32* %1974, align 4
  br label %.backedge113

.backedge113:                                     ; preds = %1973, %1950
  %1977 = load i32* %1935, align 4
  %1978 = icmp slt i32 %1977, %zn.8
  br i1 %1978, label %.lr.ph456, label %._crit_edge457.loopexit

; <label>:1979                                    ; preds = %._crit_edge452, %._crit_edge457
  %1980 = phi i32 [ %1993, %._crit_edge452 ], [ %1940, %._crit_edge457 ]
  %gPerm.12 = phi i32* [ %gPerm.13, %._crit_edge452 ], [ %gPerm.11, %._crit_edge457 ]
  %gBase.12 = phi i32* [ %gBase.13, %._crit_edge452 ], [ %gBase.11, %._crit_edge457 ]
  %gLimit.12 = phi i32* [ %gLimit.13, %._crit_edge452 ], [ %gLimit.11, %._crit_edge457 ]
  %gMinlen.12 = phi i32 [ %gMinlen.13, %._crit_edge452 ], [ %gMinlen.11, %._crit_edge457 ]
  %gSel.12 = phi i32 [ %gSel.13, %._crit_edge452 ], [ %gSel.11, %._crit_edge457 ]
  %zj.8 = phi i32 [ %1995, %._crit_edge452 ], [ %zj.7, %._crit_edge457 ]
  %zvec.8 = phi i32 [ %1997, %._crit_edge452 ], [ %1944, %._crit_edge457 ]
  %zn.9 = phi i32 [ %zn.10, %._crit_edge452 ], [ %zn.8, %._crit_edge457 ]
  %curr.15 = phi i32 [ %curr.16, %._crit_edge452 ], [ %curr.14, %._crit_edge457 ]
  %N.6 = phi i32 [ %N.7, %._crit_edge452 ], [ %N.5, %._crit_edge457 ]
  %es.9 = phi i32 [ %es.10, %._crit_edge452 ], [ %es.8, %._crit_edge457 ]
  %nblock.11 = phi i32 [ %nblock.12, %._crit_edge452 ], [ %nblock.10, %._crit_edge457 ]
  %nblockMAX.9 = phi i32 [ %nblockMAX.10, %._crit_edge452 ], [ %nblockMAX.8, %._crit_edge457 ]
  %nextSym.6 = phi i32 [ %nextSym.7, %._crit_edge452 ], [ %nextSym.5, %._crit_edge457 ]
  %groupPos.12 = phi i32 [ %groupPos.13, %._crit_edge452 ], [ %groupPos.11, %._crit_edge457 ]
  %groupNo.12 = phi i32 [ %groupNo.13, %._crit_edge452 ], [ %groupNo.11, %._crit_edge457 ]
  %EOB.9 = phi i32 [ %EOB.10, %._crit_edge452 ], [ %EOB.8, %._crit_edge457 ]
  %nSelectors.17 = phi i32 [ %nSelectors.18, %._crit_edge452 ], [ %nSelectors.16, %._crit_edge457 ]
  %nGroups.18 = phi i32 [ %nGroups.19, %._crit_edge452 ], [ %nGroups.17, %._crit_edge457 ]
  %alphaSize.19 = phi i32 [ %alphaSize.20, %._crit_edge452 ], [ %alphaSize.18, %._crit_edge457 ]
  %t.16 = phi i32 [ %t.17, %._crit_edge452 ], [ %t.15, %._crit_edge457 ]
  %j.23 = phi i32 [ %j.24, %._crit_edge452 ], [ %j.22, %._crit_edge457 ]
  %i.29 = phi i32 [ %i.30, %._crit_edge452 ], [ %i.28, %._crit_edge457 ]
  %1981 = icmp sgt i32 %zn.9, 20
  br i1 %1981, label %.loopexit, label %1982

; <label>:1982                                    ; preds = %1979
  %1983 = sext i32 %zn.9 to i64
  %1984 = getelementptr inbounds i32* %gLimit.12, i64 %1983
  %1985 = load i32* %1984, align 4
  %1986 = icmp sgt i32 %zvec.8, %1985
  br i1 %1986, label %1987, label %2032

; <label>:1987                                    ; preds = %1982
  %1988 = add nsw i32 %zn.9, 1
  %.pre888 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  br label %1989

; <label>:1989                                    ; preds = %1987, %._crit_edge882
  %.pre-phi889 = phi i32* [ %.phi.trans.insert883, %._crit_edge882 ], [ %.pre888, %1987 ]
  %1990 = phi i32 [ %.pre884, %._crit_edge882 ], [ %1980, %1987 ]
  %gPerm.13 = phi i32* [ %10, %._crit_edge882 ], [ %gPerm.12, %1987 ]
  %gBase.13 = phi i32* [ %11, %._crit_edge882 ], [ %gBase.12, %1987 ]
  %gLimit.13 = phi i32* [ %12, %._crit_edge882 ], [ %gLimit.12, %1987 ]
  %gMinlen.13 = phi i32 [ %13, %._crit_edge882 ], [ %gMinlen.12, %1987 ]
  %gSel.13 = phi i32 [ %14, %._crit_edge882 ], [ %gSel.12, %1987 ]
  %zj.9 = phi i32 [ %15, %._crit_edge882 ], [ %zj.8, %1987 ]
  %zvec.9 = phi i32 [ %16, %._crit_edge882 ], [ %zvec.8, %1987 ]
  %zn.10 = phi i32 [ %17, %._crit_edge882 ], [ %1988, %1987 ]
  %curr.16 = phi i32 [ %19, %._crit_edge882 ], [ %curr.15, %1987 ]
  %N.7 = phi i32 [ %20, %._crit_edge882 ], [ %N.6, %1987 ]
  %es.10 = phi i32 [ %21, %._crit_edge882 ], [ %es.9, %1987 ]
  %nblock.12 = phi i32 [ %22, %._crit_edge882 ], [ %nblock.11, %1987 ]
  %nblockMAX.10 = phi i32 [ %23, %._crit_edge882 ], [ %nblockMAX.9, %1987 ]
  %nextSym.7 = phi i32 [ %24, %._crit_edge882 ], [ %nextSym.6, %1987 ]
  %groupPos.13 = phi i32 [ %25, %._crit_edge882 ], [ %groupPos.12, %1987 ]
  %groupNo.13 = phi i32 [ %26, %._crit_edge882 ], [ %groupNo.12, %1987 ]
  %EOB.10 = phi i32 [ %27, %._crit_edge882 ], [ %EOB.9, %1987 ]
  %nSelectors.18 = phi i32 [ %28, %._crit_edge882 ], [ %nSelectors.17, %1987 ]
  %nGroups.19 = phi i32 [ %29, %._crit_edge882 ], [ %nGroups.18, %1987 ]
  %alphaSize.20 = phi i32 [ %30, %._crit_edge882 ], [ %alphaSize.19, %1987 ]
  %t.17 = phi i32 [ %31, %._crit_edge882 ], [ %t.16, %1987 ]
  %j.24 = phi i32 [ %32, %._crit_edge882 ], [ %j.23, %1987 ]
  %i.30 = phi i32 [ %33, %._crit_edge882 ], [ %i.29, %1987 ]
  store i32 41, i32* %3, align 4
  %1991 = icmp sgt i32 %1990, 0
  %.pre1020 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %1991, label %._crit_edge452, label %.lr.ph451.preheader

.lr.ph451.preheader:                              ; preds = %1989
  br label %.lr.ph451

._crit_edge452.loopexit:                          ; preds = %.backedge111
  %.lcssa1259 = phi i32 [ %2030, %.backedge111 ]
  br label %._crit_edge452

._crit_edge452:                                   ; preds = %._crit_edge452.loopexit, %1989
  %.lcssa252 = phi i32 [ %1990, %1989 ], [ %.lcssa1259, %._crit_edge452.loopexit ]
  %1992 = load i32* %.pre1020, align 4
  %1993 = add nsw i32 %.lcssa252, -1
  %1994 = lshr i32 %1992, %1993
  %1995 = and i32 %1994, 1
  store i32 %1993, i32* %.pre-phi889, align 4
  %1996 = shl i32 %zvec.9, 1
  %1997 = or i32 %1995, %1996
  br label %1979

.lr.ph451:                                        ; preds = %.backedge111, %.lr.ph451.preheader
  %1998 = phi i32 [ %2030, %.backedge111 ], [ %1990, %.lr.ph451.preheader ]
  %1999 = load %struct.bz_stream** %1, align 8
  %2000 = getelementptr inbounds %struct.bz_stream* %1999, i64 0, i32 1
  %2001 = load i32* %2000, align 4
  %2002 = icmp eq i32 %2001, 0
  br i1 %2002, label %.loopexit.loopexit1203, label %2003

; <label>:2003                                    ; preds = %.lr.ph451
  %2004 = load i32* %.pre1020, align 4
  %2005 = shl i32 %2004, 8
  %2006 = getelementptr inbounds %struct.bz_stream* %1999, i64 0, i32 0
  %2007 = load i8** %2006, align 8
  %2008 = load i8* %2007, align 1
  %2009 = zext i8 %2008 to i32
  %2010 = or i32 %2009, %2005
  store i32 %2010, i32* %.pre1020, align 4
  %2011 = add nsw i32 %1998, 8
  store i32 %2011, i32* %.pre-phi889, align 4
  %2012 = load i8** %2006, align 8
  %2013 = getelementptr inbounds i8* %2012, i64 1
  store i8* %2013, i8** %2006, align 8
  %2014 = load %struct.bz_stream** %1, align 8
  %2015 = getelementptr inbounds %struct.bz_stream* %2014, i64 0, i32 1
  %2016 = load i32* %2015, align 4
  %2017 = add i32 %2016, -1
  store i32 %2017, i32* %2015, align 4
  %2018 = load %struct.bz_stream** %1, align 8
  %2019 = getelementptr inbounds %struct.bz_stream* %2018, i64 0, i32 2
  %2020 = load i32* %2019, align 4
  %2021 = add i32 %2020, 1
  store i32 %2021, i32* %2019, align 4
  %2022 = load %struct.bz_stream** %1, align 8
  %2023 = getelementptr inbounds %struct.bz_stream* %2022, i64 0, i32 2
  %2024 = load i32* %2023, align 4
  %2025 = icmp eq i32 %2024, 0
  br i1 %2025, label %2026, label %.backedge111

; <label>:2026                                    ; preds = %2003
  %2027 = getelementptr inbounds %struct.bz_stream* %2022, i64 0, i32 3
  %2028 = load i32* %2027, align 4
  %2029 = add i32 %2028, 1
  store i32 %2029, i32* %2027, align 4
  br label %.backedge111

.backedge111:                                     ; preds = %2026, %2003
  %2030 = load i32* %.pre-phi889, align 4
  %2031 = icmp sgt i32 %2030, 0
  br i1 %2031, label %._crit_edge452.loopexit, label %.lr.ph451

; <label>:2032                                    ; preds = %1982
  %2033 = getelementptr inbounds i32* %gBase.12, i64 %1983
  %2034 = load i32* %2033, align 4
  %2035 = sub nsw i32 %zvec.8, %2034
  %2036 = icmp ugt i32 %2035, 257
  br i1 %2036, label %.loopexit, label %2037

; <label>:2037                                    ; preds = %2032
  %2038 = sext i32 %2035 to i64
  %2039 = getelementptr inbounds i32* %gPerm.12, i64 %2038
  %2040 = load i32* %2039, align 4
  br label %.loopexit103

; <label>:2041                                    ; preds = %.loopexit103
  %2042 = getelementptr inbounds %struct.DState* %s, i64 0, i32 13
  %2043 = load i32* %2042, align 4
  %2044 = icmp sgt i32 %2043, -1
  %2045 = icmp slt i32 %2043, %nblock.3
  %or.cond59 = and i1 %2044, %2045
  br i1 %or.cond59, label %overflow.checked1153, label %.loopexit

overflow.checked1153:                             ; preds = %2041
  %2046 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 0
  store i32 0, i32* %2046, align 4
  br label %vector.body1149

vector.body1149:                                  ; preds = %vector.body1149, %overflow.checked1153
  %index1152 = phi i64 [ 1, %overflow.checked1153 ], [ %index.next1159.1, %vector.body1149 ]
  %2047 = add i64 %index1152, -1
  %2048 = getelementptr inbounds %struct.DState* %s, i64 0, i32 16, i64 %2047
  %2049 = bitcast i32* %2048 to <4 x i32>*
  %wide.load1163 = load <4 x i32>* %2049, align 4
  %2050 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %index1152
  %2051 = bitcast i32* %2050 to <4 x i32>*
  store <4 x i32> %wide.load1163, <4 x i32>* %2051, align 4
  %index.next1159 = add i64 %index1152, 4
  %2052 = add i64 %index.next1159, -1
  %2053 = getelementptr inbounds %struct.DState* %s, i64 0, i32 16, i64 %2052
  %2054 = bitcast i32* %2053 to <4 x i32>*
  %wide.load1163.1 = load <4 x i32>* %2054, align 4
  %2055 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %index.next1159
  %2056 = bitcast i32* %2055 to <4 x i32>*
  store <4 x i32> %wide.load1163.1, <4 x i32>* %2056, align 4
  %index.next1159.1 = add i64 %index.next1159, 4
  %2057 = icmp eq i64 %index.next1159.1, 257
  br i1 %2057, label %.preheader99, label %vector.body1149, !llvm.loop !30

.preheader99:                                     ; preds = %vector.body1149
  %.pre872 = load i32* %2046, align 4
  br label %2058

; <label>:2058                                    ; preds = %2058, %.preheader99
  %2059 = phi i32 [ %.pre872, %.preheader99 ], [ %2071, %2058 ]
  %indvars.iv683 = phi i64 [ 1, %.preheader99 ], [ %indvars.iv.next684.3, %2058 ]
  %2060 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %indvars.iv683
  %2061 = load i32* %2060, align 4
  %2062 = add nsw i32 %2061, %2059
  store i32 %2062, i32* %2060, align 4
  %indvars.iv.next684 = add nuw nsw i64 %indvars.iv683, 1
  %2063 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %indvars.iv.next684
  %2064 = load i32* %2063, align 4
  %2065 = add nsw i32 %2064, %2062
  store i32 %2065, i32* %2063, align 4
  %indvars.iv.next684.1 = add nuw nsw i64 %indvars.iv.next684, 1
  %2066 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %indvars.iv.next684.1
  %2067 = load i32* %2066, align 4
  %2068 = add nsw i32 %2067, %2065
  store i32 %2068, i32* %2066, align 4
  %indvars.iv.next684.2 = add nuw nsw i64 %indvars.iv.next684.1, 1
  %2069 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %indvars.iv.next684.2
  %2070 = load i32* %2069, align 4
  %2071 = add nsw i32 %2070, %2068
  store i32 %2071, i32* %2069, align 4
  %indvars.iv.next684.3 = add nuw nsw i64 %indvars.iv.next684.2, 1
  %exitcond685.3 = icmp eq i64 %indvars.iv.next684.3, 257
  br i1 %exitcond685.3, label %.preheader97.preheader, label %2058

.preheader97.preheader:                           ; preds = %2058
  br label %.preheader97

; <label>:2072                                    ; preds = %.preheader97
  %2073 = trunc i64 %indvars.iv.next682 to i32
  %2074 = icmp slt i32 %2073, 257
  br i1 %2074, label %.preheader97, label %2079

.preheader97:                                     ; preds = %2072, %.preheader97.preheader
  %indvars.iv681 = phi i64 [ %indvars.iv.next682, %2072 ], [ 0, %.preheader97.preheader ]
  %2075 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %indvars.iv681
  %2076 = load i32* %2075, align 4
  %2077 = icmp slt i32 %2076, 0
  %2078 = icmp sgt i32 %2076, %nblock.3
  %or.cond60 = or i1 %2077, %2078
  %indvars.iv.next682 = add nuw nsw i64 %indvars.iv681, 1
  br i1 %or.cond60, label %.loopexit98, label %2072

; <label>:2079                                    ; preds = %2072
  %2080 = getelementptr inbounds %struct.DState* %s, i64 0, i32 3
  store i32 0, i32* %2080, align 4
  %2081 = getelementptr inbounds %struct.DState* %s, i64 0, i32 2
  store i8 0, i8* %2081, align 1
  %2082 = getelementptr inbounds %struct.DState* %s, i64 0, i32 25
  store i32 -1, i32* %2082, align 4
  store i32 2, i32* %3, align 4
  %2083 = getelementptr inbounds %struct.DState* %s, i64 0, i32 12
  %2084 = load i32* %2083, align 4
  %2085 = icmp sgt i32 %2084, 1
  br i1 %2085, label %2086, label %2089

; <label>:2086                                    ; preds = %2079
  %2087 = load %struct._IO_FILE** @stderr, align 8
  %2088 = tail call i64 @fwrite(i8* getelementptr inbounds ([7 x i8]* @.str181, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %2087) #13
  br label %2089

; <label>:2089                                    ; preds = %2086, %2079
  %2090 = getelementptr inbounds %struct.DState* %s, i64 0, i32 10
  %2091 = load i8* %2090, align 1
  %2092 = icmp eq i8 %2091, 0
  br i1 %2092, label %.preheader94, label %vector.body1167.preheader

vector.body1167.preheader:                        ; preds = %2089
  br label %vector.body1167

vector.body1167:                                  ; preds = %vector.body1167, %vector.body1167.preheader
  %index1170 = phi i64 [ 0, %vector.body1167.preheader ], [ %index.next1177.3, %vector.body1167 ]
  %2093 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %index1170
  %2094 = bitcast i32* %2093 to <4 x i32>*
  %wide.load1181 = load <4 x i32>* %2094, align 4
  %2095 = getelementptr inbounds %struct.DState* %s, i64 0, i32 19, i64 %index1170
  %2096 = bitcast i32* %2095 to <4 x i32>*
  store <4 x i32> %wide.load1181, <4 x i32>* %2096, align 4
  %index.next1177 = add i64 %index1170, 4
  %2097 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %index.next1177
  %2098 = bitcast i32* %2097 to <4 x i32>*
  %wide.load1181.1 = load <4 x i32>* %2098, align 4
  %2099 = getelementptr inbounds %struct.DState* %s, i64 0, i32 19, i64 %index.next1177
  %2100 = bitcast i32* %2099 to <4 x i32>*
  store <4 x i32> %wide.load1181.1, <4 x i32>* %2100, align 4
  %index.next1177.1 = add i64 %index.next1177, 4
  %2101 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %index.next1177.1
  %2102 = bitcast i32* %2101 to <4 x i32>*
  %wide.load1181.2 = load <4 x i32>* %2102, align 4
  %2103 = getelementptr inbounds %struct.DState* %s, i64 0, i32 19, i64 %index.next1177.1
  %2104 = bitcast i32* %2103 to <4 x i32>*
  store <4 x i32> %wide.load1181.2, <4 x i32>* %2104, align 4
  %index.next1177.2 = add i64 %index.next1177.1, 4
  %2105 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %index.next1177.2
  %2106 = bitcast i32* %2105 to <4 x i32>*
  %wide.load1181.3 = load <4 x i32>* %2106, align 4
  %2107 = getelementptr inbounds %struct.DState* %s, i64 0, i32 19, i64 %index.next1177.2
  %2108 = bitcast i32* %2107 to <4 x i32>*
  store <4 x i32> %wide.load1181.3, <4 x i32>* %2108, align 4
  %index.next1177.3 = add i64 %index.next1177.2, 4
  %2109 = icmp eq i64 %index.next1177.3, 256
  br i1 %2109, label %.preheader96.preheader, label %vector.body1167, !llvm.loop !31

.preheader96.preheader:                           ; preds = %vector.body1167
  br label %.preheader96

.preheader94:                                     ; preds = %2089
  %2110 = icmp sgt i32 %nblock.3, 0
  %2111 = getelementptr inbounds %struct.DState* %s, i64 0, i32 20
  br i1 %2110, label %.lr.ph420.preheader, label %._crit_edge421

.lr.ph420.preheader:                              ; preds = %.preheader94
  br label %.lr.ph420

.lr.ph424.preheader:                              ; preds = %.preheader96
  br label %.lr.ph424

.preheader96:                                     ; preds = %.preheader96.preheader
  %2112 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 256
  %2113 = load i32* %2112, align 4
  %2114 = getelementptr inbounds %struct.DState* %s, i64 0, i32 19, i64 256
  store i32 %2113, i32* %2114, align 4
  %2115 = icmp sgt i32 %nblock.3, 0
  %2116 = getelementptr inbounds %struct.DState* %s, i64 0, i32 21
  %2117 = getelementptr inbounds %struct.DState* %s, i64 0, i32 22
  br i1 %2115, label %.lr.ph424.preheader, label %._crit_edge425

.lr.ph424:                                        ; preds = %2146, %.lr.ph424.preheader
  %indvars.iv673 = phi i64 [ %indvars.iv.next674, %2146 ], [ 0, %.lr.ph424.preheader ]
  %2118 = load i16** %2116, align 8
  %2119 = getelementptr inbounds i16* %2118, i64 %indvars.iv673
  %2120 = load i16* %2119, align 2
  %2121 = zext i16 %2120 to i64
  %2122 = and i64 %2121, 255
  %2123 = getelementptr inbounds %struct.DState* %s, i64 0, i32 19, i64 %2122
  %2124 = load i32* %2123, align 4
  %2125 = trunc i32 %2124 to i16
  store i16 %2125, i16* %2119, align 2
  %2126 = trunc i64 %indvars.iv673 to i32
  %2127 = and i32 %2126, 1
  %2128 = icmp eq i32 %2127, 0
  %2129 = ashr i32 %2126, 1
  %2130 = sext i32 %2129 to i64
  %2131 = load i8** %2117, align 8
  %2132 = getelementptr inbounds i8* %2131, i64 %2130
  %2133 = load i8* %2132, align 1
  %2134 = zext i8 %2133 to i32
  br i1 %2128, label %2135, label %2140

; <label>:2135                                    ; preds = %.lr.ph424
  %2136 = and i32 %2134, 240
  %2137 = load i32* %2123, align 4
  %2138 = ashr i32 %2137, 16
  %2139 = or i32 %2138, %2136
  br label %2146

; <label>:2140                                    ; preds = %.lr.ph424
  %2141 = and i32 %2134, 15
  %2142 = load i32* %2123, align 4
  %2143 = ashr i32 %2142, 16
  %2144 = shl nsw i32 %2143, 4
  %2145 = or i32 %2144, %2141
  br label %2146

; <label>:2146                                    ; preds = %2140, %2135
  %storemerge53.in = phi i32 [ %2145, %2140 ], [ %2139, %2135 ]
  %storemerge53 = trunc i32 %storemerge53.in to i8
  store i8 %storemerge53, i8* %2132, align 1
  %2147 = load i32* %2123, align 4
  %2148 = add nsw i32 %2147, 1
  store i32 %2148, i32* %2123, align 4
  %indvars.iv.next674 = add nuw nsw i64 %indvars.iv673, 1
  %lftr.wideiv675 = trunc i64 %indvars.iv.next674 to i32
  %exitcond676 = icmp eq i32 %lftr.wideiv675, %nblock.3
  br i1 %exitcond676, label %._crit_edge425.loopexit, label %.lr.ph424

._crit_edge425.loopexit:                          ; preds = %2146
  br label %._crit_edge425

._crit_edge425:                                   ; preds = %._crit_edge425.loopexit, %.preheader96
  %2149 = load i32* %2042, align 4
  %2150 = sext i32 %2149 to i64
  %2151 = load i16** %2116, align 8
  %2152 = getelementptr inbounds i16* %2151, i64 %2150
  %2153 = load i16* %2152, align 2
  %2154 = zext i16 %2153 to i32
  %2155 = ashr i32 %2149, 1
  %2156 = sext i32 %2155 to i64
  %2157 = load i8** %2117, align 8
  %2158 = getelementptr inbounds i8* %2157, i64 %2156
  %2159 = load i8* %2158, align 1
  %2160 = zext i8 %2159 to i32
  %2161 = shl i32 %2149, 2
  %2162 = and i32 %2161, 4
  %2163 = lshr i32 %2160, %2162
  %2164 = shl i32 %2163, 16
  %2165 = and i32 %2164, 983040
  %2166 = or i32 %2165, %2154
  br label %2167

; <label>:2167                                    ; preds = %._crit_edge874, %._crit_edge425
  %2168 = phi i8* [ %2157, %._crit_edge425 ], [ %.pre876, %._crit_edge874 ]
  %2169 = phi i16* [ %2151, %._crit_edge425 ], [ %.pre875, %._crit_edge874 ]
  %2170 = phi i32 [ %2166, %._crit_edge425 ], [ %2185, %._crit_edge874 ]
  %i.36 = phi i32 [ %2149, %._crit_edge425 ], [ %2170, %._crit_edge874 ]
  %2171 = sext i32 %2170 to i64
  %2172 = getelementptr inbounds i16* %2169, i64 %2171
  %2173 = load i16* %2172, align 2
  %2174 = zext i16 %2173 to i32
  %2175 = ashr i32 %2170, 1
  %2176 = sext i32 %2175 to i64
  %2177 = getelementptr inbounds i8* %2168, i64 %2176
  %2178 = load i8* %2177, align 1
  %2179 = zext i8 %2178 to i32
  %2180 = shl nsw i32 %2170, 2
  %2181 = and i32 %2180, 4
  %2182 = lshr i32 %2179, %2181
  %2183 = shl i32 %2182, 16
  %2184 = and i32 %2183, 983040
  %2185 = or i32 %2184, %2174
  %2186 = trunc i32 %i.36 to i16
  store i16 %2186, i16* %2172, align 2
  %2187 = and i32 %2170, 1
  %2188 = icmp eq i32 %2187, 0
  %2189 = load i8** %2117, align 8
  %2190 = getelementptr inbounds i8* %2189, i64 %2176
  %2191 = load i8* %2190, align 1
  %2192 = zext i8 %2191 to i32
  br i1 %2188, label %2193, label %2197

; <label>:2193                                    ; preds = %2167
  %2194 = and i32 %2192, 240
  %2195 = ashr i32 %i.36, 16
  %2196 = or i32 %2194, %2195
  br label %2202

; <label>:2197                                    ; preds = %2167
  %2198 = and i32 %2192, 15
  %2199 = ashr i32 %i.36, 16
  %2200 = shl nsw i32 %2199, 4
  %2201 = or i32 %2198, %2200
  br label %2202

; <label>:2202                                    ; preds = %2197, %2193
  %storemerge.in = phi i32 [ %2201, %2197 ], [ %2196, %2193 ]
  %storemerge = trunc i32 %storemerge.in to i8
  store i8 %storemerge, i8* %2190, align 1
  %2203 = load i32* %2042, align 4
  %2204 = icmp eq i32 %2170, %2203
  br i1 %2204, label %2205, label %._crit_edge874

._crit_edge874:                                   ; preds = %2202
  %.pre875 = load i16** %2116, align 8
  %.pre876 = load i8** %2117, align 8
  br label %2167

; <label>:2205                                    ; preds = %2202
  %.lcssa1247 = phi i32 [ %2185, %2202 ]
  %.lcssa1246 = phi i32 [ %2170, %2202 ]
  %2206 = getelementptr inbounds %struct.DState* %s, i64 0, i32 14
  store i32 %.lcssa1246, i32* %2206, align 4
  %2207 = getelementptr inbounds %struct.DState* %s, i64 0, i32 17
  store i32 0, i32* %2207, align 4
  %2208 = getelementptr inbounds %struct.DState* %s, i64 0, i32 4
  %2209 = load i8* %2208, align 1
  %2210 = icmp eq i8 %2209, 0
  br i1 %2210, label %2251, label %2211

; <label>:2211                                    ; preds = %2205
  %2212 = getelementptr inbounds %struct.DState* %s, i64 0, i32 5
  store i32 0, i32* %2212, align 4
  %2213 = getelementptr inbounds %struct.DState* %s, i64 0, i32 6
  store i32 0, i32* %2213, align 4
  %2214 = tail call i32 @BZ2_indexIntoF(i32 %.lcssa1246, i32* %2046) #2
  %2215 = getelementptr inbounds %struct.DState* %s, i64 0, i32 15
  store i32 %2214, i32* %2215, align 4
  %2216 = load i32* %2206, align 4
  %2217 = zext i32 %2216 to i64
  %2218 = load i16** %2116, align 8
  %2219 = getelementptr inbounds i16* %2218, i64 %2217
  %2220 = load i16* %2219, align 2
  %2221 = zext i16 %2220 to i32
  %2222 = lshr i32 %2216, 1
  %2223 = zext i32 %2222 to i64
  %2224 = load i8** %2117, align 8
  %2225 = getelementptr inbounds i8* %2224, i64 %2223
  %2226 = load i8* %2225, align 1
  %2227 = zext i8 %2226 to i32
  %2228 = shl i32 %2216, 2
  %2229 = and i32 %2228, 4
  %2230 = lshr i32 %2227, %2229
  %2231 = shl i32 %2230, 16
  %2232 = and i32 %2231, 983040
  %2233 = or i32 %2232, %2221
  store i32 %2233, i32* %2206, align 4
  %2234 = load i32* %2207, align 4
  %2235 = add nsw i32 %2234, 1
  store i32 %2235, i32* %2207, align 4
  %2236 = load i32* %2212, align 4
  %2237 = icmp eq i32 %2236, 0
  br i1 %2237, label %2238, label %2245

; <label>:2238                                    ; preds = %2211
  %2239 = load i32* %2213, align 4
  %2240 = sext i32 %2239 to i64
  %2241 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %2240
  %2242 = load i32* %2241, align 4
  store i32 %2242, i32* %2212, align 4
  %2243 = add nsw i32 %2239, 1
  %2244 = icmp eq i32 %2243, 512
  %.61 = select i1 %2244, i32 0, i32 %2243
  store i32 %.61, i32* %2213, align 4
  br label %2245

; <label>:2245                                    ; preds = %2238, %2211
  %2246 = phi i32 [ %2242, %2238 ], [ %2236, %2211 ]
  %2247 = add nsw i32 %2246, -1
  store i32 %2247, i32* %2212, align 4
  %2248 = icmp eq i32 %2247, 1
  %2249 = zext i1 %2248 to i32
  %2250 = xor i32 %2249, %2214
  store i32 %2250, i32* %2215, align 4
  br label %.loopexit

; <label>:2251                                    ; preds = %2205
  %2252 = tail call i32 @BZ2_indexIntoF(i32 %.lcssa1246, i32* %2046) #2
  %2253 = getelementptr inbounds %struct.DState* %s, i64 0, i32 15
  store i32 %2252, i32* %2253, align 4
  %2254 = load i32* %2206, align 4
  %2255 = zext i32 %2254 to i64
  %2256 = load i16** %2116, align 8
  %2257 = getelementptr inbounds i16* %2256, i64 %2255
  %2258 = load i16* %2257, align 2
  %2259 = zext i16 %2258 to i32
  %2260 = lshr i32 %2254, 1
  %2261 = zext i32 %2260 to i64
  %2262 = load i8** %2117, align 8
  %2263 = getelementptr inbounds i8* %2262, i64 %2261
  %2264 = load i8* %2263, align 1
  %2265 = zext i8 %2264 to i32
  %2266 = shl i32 %2254, 2
  %2267 = and i32 %2266, 4
  %2268 = lshr i32 %2265, %2267
  %2269 = shl i32 %2268, 16
  %2270 = and i32 %2269, 983040
  %2271 = or i32 %2270, %2259
  store i32 %2271, i32* %2206, align 4
  %2272 = load i32* %2207, align 4
  %2273 = add nsw i32 %2272, 1
  store i32 %2273, i32* %2207, align 4
  br label %.loopexit

.lr.ph420:                                        ; preds = %.lr.ph420, %.lr.ph420.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph420 ], [ 0, %.lr.ph420.preheader ]
  %2274 = load i32** %2111, align 8
  %2275 = getelementptr inbounds i32* %2274, i64 %indvars.iv
  %2276 = load i32* %2275, align 4
  %2277 = zext i32 %2276 to i64
  %2278 = trunc i64 %indvars.iv to i32
  %2279 = shl i32 %2278, 8
  %2280 = and i64 %2277, 255
  %2281 = getelementptr inbounds %struct.DState* %s, i64 0, i32 18, i64 %2280
  %2282 = load i32* %2281, align 4
  %2283 = sext i32 %2282 to i64
  %2284 = getelementptr inbounds i32* %2274, i64 %2283
  %2285 = load i32* %2284, align 4
  %2286 = or i32 %2285, %2279
  store i32 %2286, i32* %2284, align 4
  %2287 = load i32* %2281, align 4
  %2288 = add nsw i32 %2287, 1
  store i32 %2288, i32* %2281, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nblock.3
  br i1 %exitcond, label %._crit_edge421.loopexit, label %.lr.ph420

._crit_edge421.loopexit:                          ; preds = %.lr.ph420
  br label %._crit_edge421

._crit_edge421:                                   ; preds = %._crit_edge421.loopexit, %.preheader94
  %i.37.lcssa = phi i32 [ 0, %.preheader94 ], [ %nblock.3, %._crit_edge421.loopexit ]
  %2289 = load i32* %2042, align 4
  %2290 = sext i32 %2289 to i64
  %2291 = load i32** %2111, align 8
  %2292 = getelementptr inbounds i32* %2291, i64 %2290
  %2293 = load i32* %2292, align 4
  %2294 = lshr i32 %2293, 8
  %2295 = getelementptr inbounds %struct.DState* %s, i64 0, i32 14
  store i32 %2294, i32* %2295, align 4
  %2296 = getelementptr inbounds %struct.DState* %s, i64 0, i32 17
  store i32 0, i32* %2296, align 4
  %2297 = getelementptr inbounds %struct.DState* %s, i64 0, i32 4
  %2298 = load i8* %2297, align 1
  %2299 = icmp eq i8 %2298, 0
  br i1 %2299, label %2313, label %2300

; <label>:2300                                    ; preds = %._crit_edge421
  %2301 = getelementptr inbounds %struct.DState* %s, i64 0, i32 5
  store i32 0, i32* %2301, align 4
  %2302 = getelementptr inbounds %struct.DState* %s, i64 0, i32 6
  store i32 0, i32* %2302, align 4
  %2303 = zext i32 %2294 to i64
  %2304 = getelementptr inbounds i32* %2291, i64 %2303
  %2305 = load i32* %2304, align 4
  %2306 = and i32 %2305, 255
  %2307 = getelementptr inbounds %struct.DState* %s, i64 0, i32 15
  store i32 %2306, i32* %2307, align 4
  %2308 = lshr i32 %2305, 8
  store i32 %2308, i32* %2295, align 4
  store i32 1, i32* %2296, align 4
  %2309 = load i32* getelementptr inbounds ([512 x i32]* @BZ2_rNums, i64 0, i64 0), align 4
  store i32 1, i32* %2302, align 4
  %phitmp = add i32 %2309, -1
  store i32 %phitmp, i32* %2301, align 4
  %2310 = icmp eq i32 %phitmp, 1
  %2311 = zext i1 %2310 to i32
  %2312 = xor i32 %2311, %2306
  store i32 %2312, i32* %2307, align 4
  br label %.loopexit

; <label>:2313                                    ; preds = %._crit_edge421
  %2314 = zext i32 %2294 to i64
  %2315 = getelementptr inbounds i32* %2291, i64 %2314
  %2316 = load i32* %2315, align 4
  %2317 = and i32 %2316, 255
  %2318 = getelementptr inbounds %struct.DState* %s, i64 0, i32 15
  store i32 %2317, i32* %2318, align 4
  %2319 = lshr i32 %2316, 8
  store i32 %2319, i32* %2295, align 4
  store i32 1, i32* %2296, align 4
  br label %.loopexit

; <label>:2320                                    ; preds = %._crit_edge587, %._crit_edge799
  %2321 = phi i32 [ %.pre801, %._crit_edge799 ], [ %265, %._crit_edge587 ]
  store i32 42, i32* %3, align 4
  %2322 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2323 = icmp sgt i32 %2321, 7
  %.pre944 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2323, label %._crit_edge381, label %.lr.ph380.preheader

.lr.ph380.preheader:                              ; preds = %2320
  br label %.lr.ph380

._crit_edge381.loopexit:                          ; preds = %.backedge78
  %.lcssa1235 = phi i32 [ %2361, %.backedge78 ]
  br label %._crit_edge381

._crit_edge381:                                   ; preds = %._crit_edge381.loopexit, %2320
  %.lcssa202 = phi i32 [ %2321, %2320 ], [ %.lcssa1235, %._crit_edge381.loopexit ]
  %2324 = load i32* %.pre944, align 4
  %2325 = add nsw i32 %.lcssa202, -8
  %2326 = lshr i32 %2324, %2325
  store i32 %2325, i32* %2322, align 4
  %2327 = and i32 %2326, 255
  %2328 = icmp eq i32 %2327, 114
  br i1 %2328, label %2363, label %.loopexit

.lr.ph380:                                        ; preds = %.backedge78, %.lr.ph380.preheader
  %2329 = phi i32 [ %2361, %.backedge78 ], [ %2321, %.lr.ph380.preheader ]
  %2330 = load %struct.bz_stream** %1, align 8
  %2331 = getelementptr inbounds %struct.bz_stream* %2330, i64 0, i32 1
  %2332 = load i32* %2331, align 4
  %2333 = icmp eq i32 %2332, 0
  br i1 %2333, label %.loopexit.loopexit1190, label %2334

; <label>:2334                                    ; preds = %.lr.ph380
  %2335 = load i32* %.pre944, align 4
  %2336 = shl i32 %2335, 8
  %2337 = getelementptr inbounds %struct.bz_stream* %2330, i64 0, i32 0
  %2338 = load i8** %2337, align 8
  %2339 = load i8* %2338, align 1
  %2340 = zext i8 %2339 to i32
  %2341 = or i32 %2340, %2336
  store i32 %2341, i32* %.pre944, align 4
  %2342 = add nsw i32 %2329, 8
  store i32 %2342, i32* %2322, align 4
  %2343 = load i8** %2337, align 8
  %2344 = getelementptr inbounds i8* %2343, i64 1
  store i8* %2344, i8** %2337, align 8
  %2345 = load %struct.bz_stream** %1, align 8
  %2346 = getelementptr inbounds %struct.bz_stream* %2345, i64 0, i32 1
  %2347 = load i32* %2346, align 4
  %2348 = add i32 %2347, -1
  store i32 %2348, i32* %2346, align 4
  %2349 = load %struct.bz_stream** %1, align 8
  %2350 = getelementptr inbounds %struct.bz_stream* %2349, i64 0, i32 2
  %2351 = load i32* %2350, align 4
  %2352 = add i32 %2351, 1
  store i32 %2352, i32* %2350, align 4
  %2353 = load %struct.bz_stream** %1, align 8
  %2354 = getelementptr inbounds %struct.bz_stream* %2353, i64 0, i32 2
  %2355 = load i32* %2354, align 4
  %2356 = icmp eq i32 %2355, 0
  br i1 %2356, label %2357, label %.backedge78

; <label>:2357                                    ; preds = %2334
  %2358 = getelementptr inbounds %struct.bz_stream* %2353, i64 0, i32 3
  %2359 = load i32* %2358, align 4
  %2360 = add i32 %2359, 1
  store i32 %2360, i32* %2358, align 4
  br label %.backedge78

.backedge78:                                      ; preds = %2357, %2334
  %2361 = load i32* %2322, align 4
  %2362 = icmp sgt i32 %2361, 7
  br i1 %2362, label %._crit_edge381.loopexit, label %.lr.ph380

; <label>:2363                                    ; preds = %._crit_edge381, %._crit_edge802
  %2364 = phi i32 [ %.pre804, %._crit_edge802 ], [ %2325, %._crit_edge381 ]
  store i32 43, i32* %3, align 4
  %2365 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2366 = icmp sgt i32 %2364, 7
  %.pre946 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2366, label %._crit_edge376, label %.lr.ph375.preheader

.lr.ph375.preheader:                              ; preds = %2363
  br label %.lr.ph375

._crit_edge376.loopexit:                          ; preds = %.backedge76
  %.lcssa1234 = phi i32 [ %2404, %.backedge76 ]
  br label %._crit_edge376

._crit_edge376:                                   ; preds = %._crit_edge376.loopexit, %2363
  %.lcssa198 = phi i32 [ %2364, %2363 ], [ %.lcssa1234, %._crit_edge376.loopexit ]
  %2367 = load i32* %.pre946, align 4
  %2368 = add nsw i32 %.lcssa198, -8
  %2369 = lshr i32 %2367, %2368
  store i32 %2368, i32* %2365, align 4
  %2370 = and i32 %2369, 255
  %2371 = icmp eq i32 %2370, 69
  br i1 %2371, label %2406, label %.loopexit

.lr.ph375:                                        ; preds = %.backedge76, %.lr.ph375.preheader
  %2372 = phi i32 [ %2404, %.backedge76 ], [ %2364, %.lr.ph375.preheader ]
  %2373 = load %struct.bz_stream** %1, align 8
  %2374 = getelementptr inbounds %struct.bz_stream* %2373, i64 0, i32 1
  %2375 = load i32* %2374, align 4
  %2376 = icmp eq i32 %2375, 0
  br i1 %2376, label %.loopexit.loopexit1189, label %2377

; <label>:2377                                    ; preds = %.lr.ph375
  %2378 = load i32* %.pre946, align 4
  %2379 = shl i32 %2378, 8
  %2380 = getelementptr inbounds %struct.bz_stream* %2373, i64 0, i32 0
  %2381 = load i8** %2380, align 8
  %2382 = load i8* %2381, align 1
  %2383 = zext i8 %2382 to i32
  %2384 = or i32 %2383, %2379
  store i32 %2384, i32* %.pre946, align 4
  %2385 = add nsw i32 %2372, 8
  store i32 %2385, i32* %2365, align 4
  %2386 = load i8** %2380, align 8
  %2387 = getelementptr inbounds i8* %2386, i64 1
  store i8* %2387, i8** %2380, align 8
  %2388 = load %struct.bz_stream** %1, align 8
  %2389 = getelementptr inbounds %struct.bz_stream* %2388, i64 0, i32 1
  %2390 = load i32* %2389, align 4
  %2391 = add i32 %2390, -1
  store i32 %2391, i32* %2389, align 4
  %2392 = load %struct.bz_stream** %1, align 8
  %2393 = getelementptr inbounds %struct.bz_stream* %2392, i64 0, i32 2
  %2394 = load i32* %2393, align 4
  %2395 = add i32 %2394, 1
  store i32 %2395, i32* %2393, align 4
  %2396 = load %struct.bz_stream** %1, align 8
  %2397 = getelementptr inbounds %struct.bz_stream* %2396, i64 0, i32 2
  %2398 = load i32* %2397, align 4
  %2399 = icmp eq i32 %2398, 0
  br i1 %2399, label %2400, label %.backedge76

; <label>:2400                                    ; preds = %2377
  %2401 = getelementptr inbounds %struct.bz_stream* %2396, i64 0, i32 3
  %2402 = load i32* %2401, align 4
  %2403 = add i32 %2402, 1
  store i32 %2403, i32* %2401, align 4
  br label %.backedge76

.backedge76:                                      ; preds = %2400, %2377
  %2404 = load i32* %2365, align 4
  %2405 = icmp sgt i32 %2404, 7
  br i1 %2405, label %._crit_edge376.loopexit, label %.lr.ph375

; <label>:2406                                    ; preds = %._crit_edge376, %._crit_edge805
  %2407 = phi i32 [ %.pre807, %._crit_edge805 ], [ %2368, %._crit_edge376 ]
  store i32 44, i32* %3, align 4
  %2408 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2409 = icmp sgt i32 %2407, 7
  %.pre948 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2409, label %._crit_edge371, label %.lr.ph370.preheader

.lr.ph370.preheader:                              ; preds = %2406
  br label %.lr.ph370

._crit_edge371.loopexit:                          ; preds = %.backedge74
  %.lcssa1233 = phi i32 [ %2447, %.backedge74 ]
  br label %._crit_edge371

._crit_edge371:                                   ; preds = %._crit_edge371.loopexit, %2406
  %.lcssa194 = phi i32 [ %2407, %2406 ], [ %.lcssa1233, %._crit_edge371.loopexit ]
  %2410 = load i32* %.pre948, align 4
  %2411 = add nsw i32 %.lcssa194, -8
  %2412 = lshr i32 %2410, %2411
  store i32 %2411, i32* %2408, align 4
  %2413 = and i32 %2412, 255
  %2414 = icmp eq i32 %2413, 56
  br i1 %2414, label %2449, label %.loopexit

.lr.ph370:                                        ; preds = %.backedge74, %.lr.ph370.preheader
  %2415 = phi i32 [ %2447, %.backedge74 ], [ %2407, %.lr.ph370.preheader ]
  %2416 = load %struct.bz_stream** %1, align 8
  %2417 = getelementptr inbounds %struct.bz_stream* %2416, i64 0, i32 1
  %2418 = load i32* %2417, align 4
  %2419 = icmp eq i32 %2418, 0
  br i1 %2419, label %.loopexit.loopexit1188, label %2420

; <label>:2420                                    ; preds = %.lr.ph370
  %2421 = load i32* %.pre948, align 4
  %2422 = shl i32 %2421, 8
  %2423 = getelementptr inbounds %struct.bz_stream* %2416, i64 0, i32 0
  %2424 = load i8** %2423, align 8
  %2425 = load i8* %2424, align 1
  %2426 = zext i8 %2425 to i32
  %2427 = or i32 %2426, %2422
  store i32 %2427, i32* %.pre948, align 4
  %2428 = add nsw i32 %2415, 8
  store i32 %2428, i32* %2408, align 4
  %2429 = load i8** %2423, align 8
  %2430 = getelementptr inbounds i8* %2429, i64 1
  store i8* %2430, i8** %2423, align 8
  %2431 = load %struct.bz_stream** %1, align 8
  %2432 = getelementptr inbounds %struct.bz_stream* %2431, i64 0, i32 1
  %2433 = load i32* %2432, align 4
  %2434 = add i32 %2433, -1
  store i32 %2434, i32* %2432, align 4
  %2435 = load %struct.bz_stream** %1, align 8
  %2436 = getelementptr inbounds %struct.bz_stream* %2435, i64 0, i32 2
  %2437 = load i32* %2436, align 4
  %2438 = add i32 %2437, 1
  store i32 %2438, i32* %2436, align 4
  %2439 = load %struct.bz_stream** %1, align 8
  %2440 = getelementptr inbounds %struct.bz_stream* %2439, i64 0, i32 2
  %2441 = load i32* %2440, align 4
  %2442 = icmp eq i32 %2441, 0
  br i1 %2442, label %2443, label %.backedge74

; <label>:2443                                    ; preds = %2420
  %2444 = getelementptr inbounds %struct.bz_stream* %2439, i64 0, i32 3
  %2445 = load i32* %2444, align 4
  %2446 = add i32 %2445, 1
  store i32 %2446, i32* %2444, align 4
  br label %.backedge74

.backedge74:                                      ; preds = %2443, %2420
  %2447 = load i32* %2408, align 4
  %2448 = icmp sgt i32 %2447, 7
  br i1 %2448, label %._crit_edge371.loopexit, label %.lr.ph370

; <label>:2449                                    ; preds = %._crit_edge371, %._crit_edge808
  %2450 = phi i32 [ %.pre810, %._crit_edge808 ], [ %2411, %._crit_edge371 ]
  store i32 45, i32* %3, align 4
  %2451 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2452 = icmp sgt i32 %2450, 7
  %.pre950 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2452, label %._crit_edge366, label %.lr.ph365.preheader

.lr.ph365.preheader:                              ; preds = %2449
  br label %.lr.ph365

._crit_edge366.loopexit:                          ; preds = %.backedge72
  %.lcssa1232 = phi i32 [ %2490, %.backedge72 ]
  br label %._crit_edge366

._crit_edge366:                                   ; preds = %._crit_edge366.loopexit, %2449
  %.lcssa190 = phi i32 [ %2450, %2449 ], [ %.lcssa1232, %._crit_edge366.loopexit ]
  %2453 = load i32* %.pre950, align 4
  %2454 = add nsw i32 %.lcssa190, -8
  %2455 = lshr i32 %2453, %2454
  store i32 %2454, i32* %2451, align 4
  %2456 = and i32 %2455, 255
  %2457 = icmp eq i32 %2456, 80
  br i1 %2457, label %2492, label %.loopexit

.lr.ph365:                                        ; preds = %.backedge72, %.lr.ph365.preheader
  %2458 = phi i32 [ %2490, %.backedge72 ], [ %2450, %.lr.ph365.preheader ]
  %2459 = load %struct.bz_stream** %1, align 8
  %2460 = getelementptr inbounds %struct.bz_stream* %2459, i64 0, i32 1
  %2461 = load i32* %2460, align 4
  %2462 = icmp eq i32 %2461, 0
  br i1 %2462, label %.loopexit.loopexit1187, label %2463

; <label>:2463                                    ; preds = %.lr.ph365
  %2464 = load i32* %.pre950, align 4
  %2465 = shl i32 %2464, 8
  %2466 = getelementptr inbounds %struct.bz_stream* %2459, i64 0, i32 0
  %2467 = load i8** %2466, align 8
  %2468 = load i8* %2467, align 1
  %2469 = zext i8 %2468 to i32
  %2470 = or i32 %2469, %2465
  store i32 %2470, i32* %.pre950, align 4
  %2471 = add nsw i32 %2458, 8
  store i32 %2471, i32* %2451, align 4
  %2472 = load i8** %2466, align 8
  %2473 = getelementptr inbounds i8* %2472, i64 1
  store i8* %2473, i8** %2466, align 8
  %2474 = load %struct.bz_stream** %1, align 8
  %2475 = getelementptr inbounds %struct.bz_stream* %2474, i64 0, i32 1
  %2476 = load i32* %2475, align 4
  %2477 = add i32 %2476, -1
  store i32 %2477, i32* %2475, align 4
  %2478 = load %struct.bz_stream** %1, align 8
  %2479 = getelementptr inbounds %struct.bz_stream* %2478, i64 0, i32 2
  %2480 = load i32* %2479, align 4
  %2481 = add i32 %2480, 1
  store i32 %2481, i32* %2479, align 4
  %2482 = load %struct.bz_stream** %1, align 8
  %2483 = getelementptr inbounds %struct.bz_stream* %2482, i64 0, i32 2
  %2484 = load i32* %2483, align 4
  %2485 = icmp eq i32 %2484, 0
  br i1 %2485, label %2486, label %.backedge72

; <label>:2486                                    ; preds = %2463
  %2487 = getelementptr inbounds %struct.bz_stream* %2482, i64 0, i32 3
  %2488 = load i32* %2487, align 4
  %2489 = add i32 %2488, 1
  store i32 %2489, i32* %2487, align 4
  br label %.backedge72

.backedge72:                                      ; preds = %2486, %2463
  %2490 = load i32* %2451, align 4
  %2491 = icmp sgt i32 %2490, 7
  br i1 %2491, label %._crit_edge366.loopexit, label %.lr.ph365

; <label>:2492                                    ; preds = %._crit_edge366, %._crit_edge811
  %2493 = phi i32 [ %.pre813, %._crit_edge811 ], [ %2454, %._crit_edge366 ]
  store i32 46, i32* %3, align 4
  %2494 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2495 = icmp sgt i32 %2493, 7
  %.pre952 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2495, label %._crit_edge361, label %.lr.ph360.preheader

.lr.ph360.preheader:                              ; preds = %2492
  br label %.lr.ph360

._crit_edge361.loopexit:                          ; preds = %.backedge70
  %.lcssa1231 = phi i32 [ %2533, %.backedge70 ]
  br label %._crit_edge361

._crit_edge361:                                   ; preds = %._crit_edge361.loopexit, %2492
  %.lcssa186 = phi i32 [ %2493, %2492 ], [ %.lcssa1231, %._crit_edge361.loopexit ]
  %2496 = load i32* %.pre952, align 4
  %2497 = add nsw i32 %.lcssa186, -8
  %2498 = lshr i32 %2496, %2497
  store i32 %2497, i32* %2494, align 4
  %2499 = and i32 %2498, 255
  %2500 = icmp eq i32 %2499, 144
  br i1 %2500, label %2535, label %.loopexit

.lr.ph360:                                        ; preds = %.backedge70, %.lr.ph360.preheader
  %2501 = phi i32 [ %2533, %.backedge70 ], [ %2493, %.lr.ph360.preheader ]
  %2502 = load %struct.bz_stream** %1, align 8
  %2503 = getelementptr inbounds %struct.bz_stream* %2502, i64 0, i32 1
  %2504 = load i32* %2503, align 4
  %2505 = icmp eq i32 %2504, 0
  br i1 %2505, label %.loopexit.loopexit1186, label %2506

; <label>:2506                                    ; preds = %.lr.ph360
  %2507 = load i32* %.pre952, align 4
  %2508 = shl i32 %2507, 8
  %2509 = getelementptr inbounds %struct.bz_stream* %2502, i64 0, i32 0
  %2510 = load i8** %2509, align 8
  %2511 = load i8* %2510, align 1
  %2512 = zext i8 %2511 to i32
  %2513 = or i32 %2512, %2508
  store i32 %2513, i32* %.pre952, align 4
  %2514 = add nsw i32 %2501, 8
  store i32 %2514, i32* %2494, align 4
  %2515 = load i8** %2509, align 8
  %2516 = getelementptr inbounds i8* %2515, i64 1
  store i8* %2516, i8** %2509, align 8
  %2517 = load %struct.bz_stream** %1, align 8
  %2518 = getelementptr inbounds %struct.bz_stream* %2517, i64 0, i32 1
  %2519 = load i32* %2518, align 4
  %2520 = add i32 %2519, -1
  store i32 %2520, i32* %2518, align 4
  %2521 = load %struct.bz_stream** %1, align 8
  %2522 = getelementptr inbounds %struct.bz_stream* %2521, i64 0, i32 2
  %2523 = load i32* %2522, align 4
  %2524 = add i32 %2523, 1
  store i32 %2524, i32* %2522, align 4
  %2525 = load %struct.bz_stream** %1, align 8
  %2526 = getelementptr inbounds %struct.bz_stream* %2525, i64 0, i32 2
  %2527 = load i32* %2526, align 4
  %2528 = icmp eq i32 %2527, 0
  br i1 %2528, label %2529, label %.backedge70

; <label>:2529                                    ; preds = %2506
  %2530 = getelementptr inbounds %struct.bz_stream* %2525, i64 0, i32 3
  %2531 = load i32* %2530, align 4
  %2532 = add i32 %2531, 1
  store i32 %2532, i32* %2530, align 4
  br label %.backedge70

.backedge70:                                      ; preds = %2529, %2506
  %2533 = load i32* %2494, align 4
  %2534 = icmp sgt i32 %2533, 7
  br i1 %2534, label %._crit_edge361.loopexit, label %.lr.ph360

; <label>:2535                                    ; preds = %._crit_edge361
  %2536 = getelementptr inbounds %struct.DState* %s, i64 0, i32 24
  store i32 0, i32* %2536, align 4
  br label %2537

; <label>:2537                                    ; preds = %2535, %._crit_edge814
  %2538 = phi i32 [ %.pre816, %._crit_edge814 ], [ %2497, %2535 ]
  store i32 47, i32* %3, align 4
  %2539 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2540 = icmp sgt i32 %2538, 7
  %.pre954 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2540, label %._crit_edge356, label %.lr.ph355.preheader

.lr.ph355.preheader:                              ; preds = %2537
  br label %.lr.ph355

._crit_edge356.loopexit:                          ; preds = %.backedge68
  %.lcssa1230 = phi i32 [ %2581, %.backedge68 ]
  br label %._crit_edge356

._crit_edge356:                                   ; preds = %._crit_edge356.loopexit, %2537
  %.lcssa182 = phi i32 [ %2538, %2537 ], [ %.lcssa1230, %._crit_edge356.loopexit ]
  %2541 = load i32* %.pre954, align 4
  %2542 = add nsw i32 %.lcssa182, -8
  %2543 = lshr i32 %2541, %2542
  store i32 %2542, i32* %2539, align 4
  %2544 = getelementptr inbounds %struct.DState* %s, i64 0, i32 24
  %2545 = load i32* %2544, align 4
  %2546 = shl i32 %2545, 8
  %2547 = and i32 %2543, 255
  %2548 = or i32 %2546, %2547
  store i32 %2548, i32* %2544, align 4
  br label %2583

.lr.ph355:                                        ; preds = %.backedge68, %.lr.ph355.preheader
  %2549 = phi i32 [ %2581, %.backedge68 ], [ %2538, %.lr.ph355.preheader ]
  %2550 = load %struct.bz_stream** %1, align 8
  %2551 = getelementptr inbounds %struct.bz_stream* %2550, i64 0, i32 1
  %2552 = load i32* %2551, align 4
  %2553 = icmp eq i32 %2552, 0
  br i1 %2553, label %.loopexit.loopexit1185, label %2554

; <label>:2554                                    ; preds = %.lr.ph355
  %2555 = load i32* %.pre954, align 4
  %2556 = shl i32 %2555, 8
  %2557 = getelementptr inbounds %struct.bz_stream* %2550, i64 0, i32 0
  %2558 = load i8** %2557, align 8
  %2559 = load i8* %2558, align 1
  %2560 = zext i8 %2559 to i32
  %2561 = or i32 %2560, %2556
  store i32 %2561, i32* %.pre954, align 4
  %2562 = add nsw i32 %2549, 8
  store i32 %2562, i32* %2539, align 4
  %2563 = load i8** %2557, align 8
  %2564 = getelementptr inbounds i8* %2563, i64 1
  store i8* %2564, i8** %2557, align 8
  %2565 = load %struct.bz_stream** %1, align 8
  %2566 = getelementptr inbounds %struct.bz_stream* %2565, i64 0, i32 1
  %2567 = load i32* %2566, align 4
  %2568 = add i32 %2567, -1
  store i32 %2568, i32* %2566, align 4
  %2569 = load %struct.bz_stream** %1, align 8
  %2570 = getelementptr inbounds %struct.bz_stream* %2569, i64 0, i32 2
  %2571 = load i32* %2570, align 4
  %2572 = add i32 %2571, 1
  store i32 %2572, i32* %2570, align 4
  %2573 = load %struct.bz_stream** %1, align 8
  %2574 = getelementptr inbounds %struct.bz_stream* %2573, i64 0, i32 2
  %2575 = load i32* %2574, align 4
  %2576 = icmp eq i32 %2575, 0
  br i1 %2576, label %2577, label %.backedge68

; <label>:2577                                    ; preds = %2554
  %2578 = getelementptr inbounds %struct.bz_stream* %2573, i64 0, i32 3
  %2579 = load i32* %2578, align 4
  %2580 = add i32 %2579, 1
  store i32 %2580, i32* %2578, align 4
  br label %.backedge68

.backedge68:                                      ; preds = %2577, %2554
  %2581 = load i32* %2539, align 4
  %2582 = icmp sgt i32 %2581, 7
  br i1 %2582, label %._crit_edge356.loopexit, label %.lr.ph355

; <label>:2583                                    ; preds = %._crit_edge356, %._crit_edge817
  %2584 = phi i32 [ %.pre819, %._crit_edge817 ], [ %2542, %._crit_edge356 ]
  store i32 48, i32* %3, align 4
  %2585 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2586 = icmp sgt i32 %2584, 7
  %.pre956 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2586, label %._crit_edge351, label %.lr.ph350.preheader

.lr.ph350.preheader:                              ; preds = %2583
  br label %.lr.ph350

._crit_edge351.loopexit:                          ; preds = %.backedge66
  %.lcssa1229 = phi i32 [ %2627, %.backedge66 ]
  br label %._crit_edge351

._crit_edge351:                                   ; preds = %._crit_edge351.loopexit, %2583
  %.lcssa178 = phi i32 [ %2584, %2583 ], [ %.lcssa1229, %._crit_edge351.loopexit ]
  %2587 = load i32* %.pre956, align 4
  %2588 = add nsw i32 %.lcssa178, -8
  %2589 = lshr i32 %2587, %2588
  store i32 %2588, i32* %2585, align 4
  %2590 = getelementptr inbounds %struct.DState* %s, i64 0, i32 24
  %2591 = load i32* %2590, align 4
  %2592 = shl i32 %2591, 8
  %2593 = and i32 %2589, 255
  %2594 = or i32 %2592, %2593
  store i32 %2594, i32* %2590, align 4
  br label %2629

.lr.ph350:                                        ; preds = %.backedge66, %.lr.ph350.preheader
  %2595 = phi i32 [ %2627, %.backedge66 ], [ %2584, %.lr.ph350.preheader ]
  %2596 = load %struct.bz_stream** %1, align 8
  %2597 = getelementptr inbounds %struct.bz_stream* %2596, i64 0, i32 1
  %2598 = load i32* %2597, align 4
  %2599 = icmp eq i32 %2598, 0
  br i1 %2599, label %.loopexit.loopexit1184, label %2600

; <label>:2600                                    ; preds = %.lr.ph350
  %2601 = load i32* %.pre956, align 4
  %2602 = shl i32 %2601, 8
  %2603 = getelementptr inbounds %struct.bz_stream* %2596, i64 0, i32 0
  %2604 = load i8** %2603, align 8
  %2605 = load i8* %2604, align 1
  %2606 = zext i8 %2605 to i32
  %2607 = or i32 %2606, %2602
  store i32 %2607, i32* %.pre956, align 4
  %2608 = add nsw i32 %2595, 8
  store i32 %2608, i32* %2585, align 4
  %2609 = load i8** %2603, align 8
  %2610 = getelementptr inbounds i8* %2609, i64 1
  store i8* %2610, i8** %2603, align 8
  %2611 = load %struct.bz_stream** %1, align 8
  %2612 = getelementptr inbounds %struct.bz_stream* %2611, i64 0, i32 1
  %2613 = load i32* %2612, align 4
  %2614 = add i32 %2613, -1
  store i32 %2614, i32* %2612, align 4
  %2615 = load %struct.bz_stream** %1, align 8
  %2616 = getelementptr inbounds %struct.bz_stream* %2615, i64 0, i32 2
  %2617 = load i32* %2616, align 4
  %2618 = add i32 %2617, 1
  store i32 %2618, i32* %2616, align 4
  %2619 = load %struct.bz_stream** %1, align 8
  %2620 = getelementptr inbounds %struct.bz_stream* %2619, i64 0, i32 2
  %2621 = load i32* %2620, align 4
  %2622 = icmp eq i32 %2621, 0
  br i1 %2622, label %2623, label %.backedge66

; <label>:2623                                    ; preds = %2600
  %2624 = getelementptr inbounds %struct.bz_stream* %2619, i64 0, i32 3
  %2625 = load i32* %2624, align 4
  %2626 = add i32 %2625, 1
  store i32 %2626, i32* %2624, align 4
  br label %.backedge66

.backedge66:                                      ; preds = %2623, %2600
  %2627 = load i32* %2585, align 4
  %2628 = icmp sgt i32 %2627, 7
  br i1 %2628, label %._crit_edge351.loopexit, label %.lr.ph350

; <label>:2629                                    ; preds = %._crit_edge351, %._crit_edge820
  %2630 = phi i32 [ %.pre822, %._crit_edge820 ], [ %2588, %._crit_edge351 ]
  store i32 49, i32* %3, align 4
  %2631 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2632 = icmp sgt i32 %2630, 7
  %.pre958 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2632, label %._crit_edge346, label %.lr.ph345.preheader

.lr.ph345.preheader:                              ; preds = %2629
  br label %.lr.ph345

._crit_edge346.loopexit:                          ; preds = %.backedge64
  %.lcssa1228 = phi i32 [ %2673, %.backedge64 ]
  br label %._crit_edge346

._crit_edge346:                                   ; preds = %._crit_edge346.loopexit, %2629
  %.lcssa174 = phi i32 [ %2630, %2629 ], [ %.lcssa1228, %._crit_edge346.loopexit ]
  %2633 = load i32* %.pre958, align 4
  %2634 = add nsw i32 %.lcssa174, -8
  %2635 = lshr i32 %2633, %2634
  store i32 %2634, i32* %2631, align 4
  %2636 = getelementptr inbounds %struct.DState* %s, i64 0, i32 24
  %2637 = load i32* %2636, align 4
  %2638 = shl i32 %2637, 8
  %2639 = and i32 %2635, 255
  %2640 = or i32 %2638, %2639
  store i32 %2640, i32* %2636, align 4
  br label %2675

.lr.ph345:                                        ; preds = %.backedge64, %.lr.ph345.preheader
  %2641 = phi i32 [ %2673, %.backedge64 ], [ %2630, %.lr.ph345.preheader ]
  %2642 = load %struct.bz_stream** %1, align 8
  %2643 = getelementptr inbounds %struct.bz_stream* %2642, i64 0, i32 1
  %2644 = load i32* %2643, align 4
  %2645 = icmp eq i32 %2644, 0
  br i1 %2645, label %.loopexit.loopexit1183, label %2646

; <label>:2646                                    ; preds = %.lr.ph345
  %2647 = load i32* %.pre958, align 4
  %2648 = shl i32 %2647, 8
  %2649 = getelementptr inbounds %struct.bz_stream* %2642, i64 0, i32 0
  %2650 = load i8** %2649, align 8
  %2651 = load i8* %2650, align 1
  %2652 = zext i8 %2651 to i32
  %2653 = or i32 %2652, %2648
  store i32 %2653, i32* %.pre958, align 4
  %2654 = add nsw i32 %2641, 8
  store i32 %2654, i32* %2631, align 4
  %2655 = load i8** %2649, align 8
  %2656 = getelementptr inbounds i8* %2655, i64 1
  store i8* %2656, i8** %2649, align 8
  %2657 = load %struct.bz_stream** %1, align 8
  %2658 = getelementptr inbounds %struct.bz_stream* %2657, i64 0, i32 1
  %2659 = load i32* %2658, align 4
  %2660 = add i32 %2659, -1
  store i32 %2660, i32* %2658, align 4
  %2661 = load %struct.bz_stream** %1, align 8
  %2662 = getelementptr inbounds %struct.bz_stream* %2661, i64 0, i32 2
  %2663 = load i32* %2662, align 4
  %2664 = add i32 %2663, 1
  store i32 %2664, i32* %2662, align 4
  %2665 = load %struct.bz_stream** %1, align 8
  %2666 = getelementptr inbounds %struct.bz_stream* %2665, i64 0, i32 2
  %2667 = load i32* %2666, align 4
  %2668 = icmp eq i32 %2667, 0
  br i1 %2668, label %2669, label %.backedge64

; <label>:2669                                    ; preds = %2646
  %2670 = getelementptr inbounds %struct.bz_stream* %2665, i64 0, i32 3
  %2671 = load i32* %2670, align 4
  %2672 = add i32 %2671, 1
  store i32 %2672, i32* %2670, align 4
  br label %.backedge64

.backedge64:                                      ; preds = %2669, %2646
  %2673 = load i32* %2631, align 4
  %2674 = icmp sgt i32 %2673, 7
  br i1 %2674, label %._crit_edge346.loopexit, label %.lr.ph345

; <label>:2675                                    ; preds = %._crit_edge346, %._crit_edge823
  %2676 = phi i32 [ %.pre825, %._crit_edge823 ], [ %2634, %._crit_edge346 ]
  store i32 50, i32* %3, align 4
  %2677 = getelementptr inbounds %struct.DState* %s, i64 0, i32 8
  %2678 = icmp sgt i32 %2676, 7
  %.pre960 = getelementptr inbounds %struct.DState* %s, i64 0, i32 7
  br i1 %2678, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %2675
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.backedge
  %.lcssa = phi i32 [ %2719, %.backedge ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2675
  %.lcssa170 = phi i32 [ %2676, %2675 ], [ %.lcssa, %._crit_edge.loopexit ]
  %2679 = load i32* %.pre960, align 4
  %2680 = add nsw i32 %.lcssa170, -8
  %2681 = lshr i32 %2679, %2680
  store i32 %2680, i32* %2677, align 4
  %2682 = getelementptr inbounds %struct.DState* %s, i64 0, i32 24
  %2683 = load i32* %2682, align 4
  %2684 = shl i32 %2683, 8
  %2685 = and i32 %2681, 255
  %2686 = or i32 %2684, %2685
  store i32 %2686, i32* %2682, align 4
  store i32 1, i32* %3, align 4
  br label %.loopexit

.lr.ph:                                           ; preds = %.backedge, %.lr.ph.preheader
  %2687 = phi i32 [ %2719, %.backedge ], [ %2676, %.lr.ph.preheader ]
  %2688 = load %struct.bz_stream** %1, align 8
  %2689 = getelementptr inbounds %struct.bz_stream* %2688, i64 0, i32 1
  %2690 = load i32* %2689, align 4
  %2691 = icmp eq i32 %2690, 0
  br i1 %2691, label %.loopexit.loopexit, label %2692

; <label>:2692                                    ; preds = %.lr.ph
  %2693 = load i32* %.pre960, align 4
  %2694 = shl i32 %2693, 8
  %2695 = getelementptr inbounds %struct.bz_stream* %2688, i64 0, i32 0
  %2696 = load i8** %2695, align 8
  %2697 = load i8* %2696, align 1
  %2698 = zext i8 %2697 to i32
  %2699 = or i32 %2698, %2694
  store i32 %2699, i32* %.pre960, align 4
  %2700 = add nsw i32 %2687, 8
  store i32 %2700, i32* %2677, align 4
  %2701 = load i8** %2695, align 8
  %2702 = getelementptr inbounds i8* %2701, i64 1
  store i8* %2702, i8** %2695, align 8
  %2703 = load %struct.bz_stream** %1, align 8
  %2704 = getelementptr inbounds %struct.bz_stream* %2703, i64 0, i32 1
  %2705 = load i32* %2704, align 4
  %2706 = add i32 %2705, -1
  store i32 %2706, i32* %2704, align 4
  %2707 = load %struct.bz_stream** %1, align 8
  %2708 = getelementptr inbounds %struct.bz_stream* %2707, i64 0, i32 2
  %2709 = load i32* %2708, align 4
  %2710 = add i32 %2709, 1
  store i32 %2710, i32* %2708, align 4
  %2711 = load %struct.bz_stream** %1, align 8
  %2712 = getelementptr inbounds %struct.bz_stream* %2711, i64 0, i32 2
  %2713 = load i32* %2712, align 4
  %2714 = icmp eq i32 %2713, 0
  br i1 %2714, label %2715, label %.backedge

; <label>:2715                                    ; preds = %2692
  %2716 = getelementptr inbounds %struct.bz_stream* %2711, i64 0, i32 3
  %2717 = load i32* %2716, align 4
  %2718 = add i32 %2717, 1
  store i32 %2718, i32* %2716, align 4
  br label %.backedge

.backedge:                                        ; preds = %2715, %2692
  %2719 = load i32* %2677, align 4
  %2720 = icmp sgt i32 %2719, 7
  br i1 %2720, label %._crit_edge.loopexit, label %.lr.ph

; <label>:2721                                    ; preds = %9
  tail call void @BZ2_bz__AssertH__fail(i32 4001) #2
  tail call void @BZ2_bz__AssertH__fail(i32 4002) #2
  br label %.loopexit

.loopexit98:                                      ; preds = %.preheader97
  %indvars.iv681.lcssa = phi i64 [ %indvars.iv681, %.preheader97 ]
  %2722 = trunc i64 %indvars.iv681.lcssa to i32
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit.loopexit1183:                           ; preds = %.lr.ph345
  br label %.loopexit

.loopexit.loopexit1184:                           ; preds = %.lr.ph350
  br label %.loopexit

.loopexit.loopexit1185:                           ; preds = %.lr.ph355
  br label %.loopexit

.loopexit.loopexit1186:                           ; preds = %.lr.ph360
  br label %.loopexit

.loopexit.loopexit1187:                           ; preds = %.lr.ph365
  br label %.loopexit

.loopexit.loopexit1188:                           ; preds = %.lr.ph370
  br label %.loopexit

.loopexit.loopexit1189:                           ; preds = %.lr.ph375
  br label %.loopexit

.loopexit.loopexit1190:                           ; preds = %.lr.ph380
  br label %.loopexit

.loopexit.loopexit1191:                           ; preds = %.lr.ph385
  br label %.loopexit

.loopexit.loopexit1192:                           ; preds = %.lr.ph390
  br label %.loopexit

.loopexit.loopexit1193:                           ; preds = %.lr.ph395
  %j.7.lcssa = phi i32 [ %j.7, %.lr.ph395 ]
  br label %.loopexit

.loopexit.loopexit1194:                           ; preds = %1162
  %.lcssa1241 = phi i32 [ %1163, %1162 ]
  br label %.loopexit

.loopexit.loopexit1195:                           ; preds = %.lr.ph400
  br label %.loopexit

.loopexit.loopexit1196:                           ; preds = %.lr.ph405
  br label %.loopexit

.loopexit.loopexit1197:                           ; preds = %.lr.ph410
  br label %.loopexit

.loopexit.loopexit1198:                           ; preds = %.lr.ph415
  br label %.loopexit

.loopexit.loopexit1199:                           ; preds = %.lr.ph431
  br label %.loopexit

.loopexit.loopexit1200:                           ; preds = %1747
  %.lcssa1251 = phi i32 [ %1748, %1747 ]
  %es.7435.lcssa = phi i32 [ %es.7435, %1747 ]
  br label %.loopexit

.loopexit.loopexit1201:                           ; preds = %1739
  %.lcssa1255 = phi i32 [ %1740, %1739 ]
  %es.6440.lcssa = phi i32 [ %es.6440, %1739 ]
  br label %.loopexit

.loopexit.loopexit1202:                           ; preds = %.lr.ph446
  br label %.loopexit

.loopexit.loopexit1203:                           ; preds = %.lr.ph451
  br label %.loopexit

.loopexit.loopexit1204:                           ; preds = %.lr.ph456
  br label %.loopexit

.loopexit.loopexit1205:                           ; preds = %.lr.ph481
  br label %.loopexit

.loopexit.loopexit1208:                           ; preds = %.lr.ph510
  br label %.loopexit

.loopexit.loopexit1209:                           ; preds = %.lr.ph515
  br label %.loopexit

.loopexit.loopexit1210:                           ; preds = %.lr.ph521
  br label %.loopexit

.loopexit.loopexit1211:                           ; preds = %.lr.ph526
  br label %.loopexit

.loopexit.loopexit1212:                           ; preds = %.lr.ph531
  br label %.loopexit

.loopexit.loopexit1213:                           ; preds = %.lr.ph536
  br label %.loopexit

.loopexit.loopexit1214:                           ; preds = %.lr.ph541
  br label %.loopexit

.loopexit.loopexit1215:                           ; preds = %.lr.ph546
  br label %.loopexit

.loopexit.loopexit1216:                           ; preds = %.lr.ph551
  br label %.loopexit

.loopexit.loopexit1217:                           ; preds = %.lr.ph556
  br label %.loopexit

.loopexit.loopexit1218:                           ; preds = %.lr.ph561
  br label %.loopexit

.loopexit.loopexit1219:                           ; preds = %.lr.ph566
  br label %.loopexit

.loopexit.loopexit1220:                           ; preds = %.lr.ph571
  br label %.loopexit

.loopexit.loopexit1221:                           ; preds = %.lr.ph576
  br label %.loopexit

.loopexit.loopexit1222:                           ; preds = %.lr.ph581
  br label %.loopexit

.loopexit.loopexit1223:                           ; preds = %.lr.ph586
  br label %.loopexit

.loopexit.loopexit1224:                           ; preds = %.lr.ph591
  br label %.loopexit

.loopexit.loopexit1225:                           ; preds = %.lr.ph596
  br label %.loopexit

.loopexit.loopexit1226:                           ; preds = %.lr.ph601
  br label %.loopexit

.loopexit.loopexit1227:                           ; preds = %.lr.ph606
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit1227, %.loopexit.loopexit1226, %.loopexit.loopexit1225, %.loopexit.loopexit1224, %.loopexit.loopexit1223, %.loopexit.loopexit1222, %.loopexit.loopexit1221, %.loopexit.loopexit1220, %.loopexit.loopexit1219, %.loopexit.loopexit1218, %.loopexit.loopexit1217, %.loopexit.loopexit1216, %.loopexit.loopexit1215, %.loopexit.loopexit1214, %.loopexit.loopexit1213, %.loopexit.loopexit1212, %.loopexit.loopexit1211, %.loopexit.loopexit1210, %.loopexit.loopexit1209, %.loopexit.loopexit1208, %.loopexit.loopexit1205, %.loopexit.loopexit1204, %.loopexit.loopexit1203, %.loopexit.loopexit1202, %.loopexit.loopexit1201, %.loopexit.loopexit1200, %.loopexit.loopexit1199, %.loopexit.loopexit1198, %.loopexit.loopexit1197, %.loopexit.loopexit1196, %.loopexit.loopexit1195, %.loopexit.loopexit1194, %.loopexit.loopexit1193, %.loopexit.loopexit1192, %.loopexit.loopexit1191, %.loopexit.loopexit1190, %.loopexit.loopexit1189, %.loopexit.loopexit1188, %.loopexit.loopexit1187, %.loopexit.loopexit1186, %.loopexit.loopexit1185, %.loopexit.loopexit1184, %.loopexit.loopexit1183, %.loopexit.loopexit, %.loopexit98, %2721, %._crit_edge, %._crit_edge361, %._crit_edge366, %._crit_edge371, %._crit_edge376, %._crit_edge381, %2313, %2300, %2251, %2245, %2041, %2032, %1979, %1918, %1755, %1705, %1652, %1591, %1569, %1516, %1459, %1296, %._crit_edge511, %._crit_edge516, %._crit_edge516, %._crit_edge516, %makeMaps_d.exit, %895, %._crit_edge522, %._crit_edge562, %._crit_edge567, %._crit_edge572, %._crit_edge577, %._crit_edge582, %._crit_edge587, %255, %240, %._crit_edge592, %._crit_edge597, %._crit_edge602, %._crit_edge607
  %gPerm.14 = phi i32* [ %10, %2721 ], [ %10, %._crit_edge ], [ %10, %._crit_edge607 ], [ %10, %._crit_edge602 ], [ %10, %._crit_edge597 ], [ %10, %._crit_edge592 ], [ %10, %240 ], [ %10, %255 ], [ %10, %._crit_edge587 ], [ %10, %._crit_edge582 ], [ %10, %._crit_edge577 ], [ %10, %._crit_edge572 ], [ %10, %._crit_edge567 ], [ %10, %._crit_edge562 ], [ %10, %._crit_edge522 ], [ %10, %895 ], [ %10, %makeMaps_d.exit ], [ %10, %._crit_edge516 ], [ %10, %._crit_edge516 ], [ %10, %._crit_edge516 ], [ %10, %._crit_edge511 ], [ %10, %1296 ], [ %10, %1459 ], [ %gPerm.2, %1516 ], [ %gPerm.2, %1569 ], [ %gPerm.5, %1591 ], [ %gPerm.8, %1652 ], [ %gPerm.8, %1705 ], [ %gPerm.4, %1755 ], [ %gPerm.4, %1918 ], [ %gPerm.12, %1979 ], [ %gPerm.12, %2032 ], [ %gPerm.4, %2041 ], [ %gPerm.4, %2300 ], [ %gPerm.4, %2313 ], [ %gPerm.4, %2245 ], [ %gPerm.4, %2251 ], [ %10, %._crit_edge381 ], [ %10, %._crit_edge376 ], [ %10, %._crit_edge371 ], [ %10, %._crit_edge366 ], [ %10, %._crit_edge361 ], [ %gPerm.4, %.loopexit98 ], [ %10, %.loopexit.loopexit ], [ %10, %.loopexit.loopexit1183 ], [ %10, %.loopexit.loopexit1184 ], [ %10, %.loopexit.loopexit1185 ], [ %10, %.loopexit.loopexit1186 ], [ %10, %.loopexit.loopexit1187 ], [ %10, %.loopexit.loopexit1188 ], [ %10, %.loopexit.loopexit1189 ], [ %10, %.loopexit.loopexit1190 ], [ %10, %.loopexit.loopexit1191 ], [ %10, %.loopexit.loopexit1192 ], [ %10, %.loopexit.loopexit1193 ], [ %10, %.loopexit.loopexit1194 ], [ %10, %.loopexit.loopexit1195 ], [ %10, %.loopexit.loopexit1196 ], [ %10, %.loopexit.loopexit1197 ], [ %gPerm.3, %.loopexit.loopexit1198 ], [ %gPerm.9, %.loopexit.loopexit1199 ], [ %gPerm.8, %.loopexit.loopexit1200 ], [ %gPerm.8, %.loopexit.loopexit1201 ], [ %gPerm.7, %.loopexit.loopexit1202 ], [ %gPerm.13, %.loopexit.loopexit1203 ], [ %gPerm.11, %.loopexit.loopexit1204 ], [ %gPerm.1, %.loopexit.loopexit1205 ], [ %10, %.loopexit.loopexit1208 ], [ %10, %.loopexit.loopexit1209 ], [ %10, %.loopexit.loopexit1210 ], [ %10, %.loopexit.loopexit1211 ], [ %10, %.loopexit.loopexit1212 ], [ %10, %.loopexit.loopexit1213 ], [ %10, %.loopexit.loopexit1214 ], [ %10, %.loopexit.loopexit1215 ], [ %10, %.loopexit.loopexit1216 ], [ %10, %.loopexit.loopexit1217 ], [ %10, %.loopexit.loopexit1218 ], [ %10, %.loopexit.loopexit1219 ], [ %10, %.loopexit.loopexit1220 ], [ %10, %.loopexit.loopexit1221 ], [ %10, %.loopexit.loopexit1222 ], [ %10, %.loopexit.loopexit1223 ], [ %10, %.loopexit.loopexit1224 ], [ %10, %.loopexit.loopexit1225 ], [ %10, %.loopexit.loopexit1226 ], [ %10, %.loopexit.loopexit1227 ]
  %gBase.14 = phi i32* [ %11, %2721 ], [ %11, %._crit_edge ], [ %11, %._crit_edge607 ], [ %11, %._crit_edge602 ], [ %11, %._crit_edge597 ], [ %11, %._crit_edge592 ], [ %11, %240 ], [ %11, %255 ], [ %11, %._crit_edge587 ], [ %11, %._crit_edge582 ], [ %11, %._crit_edge577 ], [ %11, %._crit_edge572 ], [ %11, %._crit_edge567 ], [ %11, %._crit_edge562 ], [ %11, %._crit_edge522 ], [ %11, %895 ], [ %11, %makeMaps_d.exit ], [ %11, %._crit_edge516 ], [ %11, %._crit_edge516 ], [ %11, %._crit_edge516 ], [ %11, %._crit_edge511 ], [ %11, %1296 ], [ %11, %1459 ], [ %gBase.2, %1516 ], [ %gBase.2, %1569 ], [ %gBase.5, %1591 ], [ %gBase.8, %1652 ], [ %gBase.8, %1705 ], [ %gBase.4, %1755 ], [ %gBase.4, %1918 ], [ %gBase.12, %1979 ], [ %gBase.12, %2032 ], [ %gBase.4, %2041 ], [ %gBase.4, %2300 ], [ %gBase.4, %2313 ], [ %gBase.4, %2245 ], [ %gBase.4, %2251 ], [ %11, %._crit_edge381 ], [ %11, %._crit_edge376 ], [ %11, %._crit_edge371 ], [ %11, %._crit_edge366 ], [ %11, %._crit_edge361 ], [ %gBase.4, %.loopexit98 ], [ %11, %.loopexit.loopexit ], [ %11, %.loopexit.loopexit1183 ], [ %11, %.loopexit.loopexit1184 ], [ %11, %.loopexit.loopexit1185 ], [ %11, %.loopexit.loopexit1186 ], [ %11, %.loopexit.loopexit1187 ], [ %11, %.loopexit.loopexit1188 ], [ %11, %.loopexit.loopexit1189 ], [ %11, %.loopexit.loopexit1190 ], [ %11, %.loopexit.loopexit1191 ], [ %11, %.loopexit.loopexit1192 ], [ %11, %.loopexit.loopexit1193 ], [ %11, %.loopexit.loopexit1194 ], [ %11, %.loopexit.loopexit1195 ], [ %11, %.loopexit.loopexit1196 ], [ %11, %.loopexit.loopexit1197 ], [ %gBase.3, %.loopexit.loopexit1198 ], [ %gBase.9, %.loopexit.loopexit1199 ], [ %gBase.8, %.loopexit.loopexit1200 ], [ %gBase.8, %.loopexit.loopexit1201 ], [ %gBase.7, %.loopexit.loopexit1202 ], [ %gBase.13, %.loopexit.loopexit1203 ], [ %gBase.11, %.loopexit.loopexit1204 ], [ %gBase.1, %.loopexit.loopexit1205 ], [ %11, %.loopexit.loopexit1208 ], [ %11, %.loopexit.loopexit1209 ], [ %11, %.loopexit.loopexit1210 ], [ %11, %.loopexit.loopexit1211 ], [ %11, %.loopexit.loopexit1212 ], [ %11, %.loopexit.loopexit1213 ], [ %11, %.loopexit.loopexit1214 ], [ %11, %.loopexit.loopexit1215 ], [ %11, %.loopexit.loopexit1216 ], [ %11, %.loopexit.loopexit1217 ], [ %11, %.loopexit.loopexit1218 ], [ %11, %.loopexit.loopexit1219 ], [ %11, %.loopexit.loopexit1220 ], [ %11, %.loopexit.loopexit1221 ], [ %11, %.loopexit.loopexit1222 ], [ %11, %.loopexit.loopexit1223 ], [ %11, %.loopexit.loopexit1224 ], [ %11, %.loopexit.loopexit1225 ], [ %11, %.loopexit.loopexit1226 ], [ %11, %.loopexit.loopexit1227 ]
  %gLimit.14 = phi i32* [ %12, %2721 ], [ %12, %._crit_edge ], [ %12, %._crit_edge607 ], [ %12, %._crit_edge602 ], [ %12, %._crit_edge597 ], [ %12, %._crit_edge592 ], [ %12, %240 ], [ %12, %255 ], [ %12, %._crit_edge587 ], [ %12, %._crit_edge582 ], [ %12, %._crit_edge577 ], [ %12, %._crit_edge572 ], [ %12, %._crit_edge567 ], [ %12, %._crit_edge562 ], [ %12, %._crit_edge522 ], [ %12, %895 ], [ %12, %makeMaps_d.exit ], [ %12, %._crit_edge516 ], [ %12, %._crit_edge516 ], [ %12, %._crit_edge516 ], [ %12, %._crit_edge511 ], [ %12, %1296 ], [ %12, %1459 ], [ %gLimit.2, %1516 ], [ %gLimit.2, %1569 ], [ %gLimit.5, %1591 ], [ %gLimit.8, %1652 ], [ %gLimit.8, %1705 ], [ %gLimit.4, %1755 ], [ %gLimit.4, %1918 ], [ %gLimit.12, %1979 ], [ %gLimit.12, %2032 ], [ %gLimit.4, %2041 ], [ %gLimit.4, %2300 ], [ %gLimit.4, %2313 ], [ %gLimit.4, %2245 ], [ %gLimit.4, %2251 ], [ %12, %._crit_edge381 ], [ %12, %._crit_edge376 ], [ %12, %._crit_edge371 ], [ %12, %._crit_edge366 ], [ %12, %._crit_edge361 ], [ %gLimit.4, %.loopexit98 ], [ %12, %.loopexit.loopexit ], [ %12, %.loopexit.loopexit1183 ], [ %12, %.loopexit.loopexit1184 ], [ %12, %.loopexit.loopexit1185 ], [ %12, %.loopexit.loopexit1186 ], [ %12, %.loopexit.loopexit1187 ], [ %12, %.loopexit.loopexit1188 ], [ %12, %.loopexit.loopexit1189 ], [ %12, %.loopexit.loopexit1190 ], [ %12, %.loopexit.loopexit1191 ], [ %12, %.loopexit.loopexit1192 ], [ %12, %.loopexit.loopexit1193 ], [ %12, %.loopexit.loopexit1194 ], [ %12, %.loopexit.loopexit1195 ], [ %12, %.loopexit.loopexit1196 ], [ %12, %.loopexit.loopexit1197 ], [ %gLimit.3, %.loopexit.loopexit1198 ], [ %gLimit.9, %.loopexit.loopexit1199 ], [ %gLimit.8, %.loopexit.loopexit1200 ], [ %gLimit.8, %.loopexit.loopexit1201 ], [ %gLimit.7, %.loopexit.loopexit1202 ], [ %gLimit.13, %.loopexit.loopexit1203 ], [ %gLimit.11, %.loopexit.loopexit1204 ], [ %gLimit.1, %.loopexit.loopexit1205 ], [ %12, %.loopexit.loopexit1208 ], [ %12, %.loopexit.loopexit1209 ], [ %12, %.loopexit.loopexit1210 ], [ %12, %.loopexit.loopexit1211 ], [ %12, %.loopexit.loopexit1212 ], [ %12, %.loopexit.loopexit1213 ], [ %12, %.loopexit.loopexit1214 ], [ %12, %.loopexit.loopexit1215 ], [ %12, %.loopexit.loopexit1216 ], [ %12, %.loopexit.loopexit1217 ], [ %12, %.loopexit.loopexit1218 ], [ %12, %.loopexit.loopexit1219 ], [ %12, %.loopexit.loopexit1220 ], [ %12, %.loopexit.loopexit1221 ], [ %12, %.loopexit.loopexit1222 ], [ %12, %.loopexit.loopexit1223 ], [ %12, %.loopexit.loopexit1224 ], [ %12, %.loopexit.loopexit1225 ], [ %12, %.loopexit.loopexit1226 ], [ %12, %.loopexit.loopexit1227 ]
  %gMinlen.14 = phi i32 [ %13, %2721 ], [ %13, %._crit_edge ], [ %13, %._crit_edge607 ], [ %13, %._crit_edge602 ], [ %13, %._crit_edge597 ], [ %13, %._crit_edge592 ], [ %13, %240 ], [ %13, %255 ], [ %13, %._crit_edge587 ], [ %13, %._crit_edge582 ], [ %13, %._crit_edge577 ], [ %13, %._crit_edge572 ], [ %13, %._crit_edge567 ], [ %13, %._crit_edge562 ], [ %13, %._crit_edge522 ], [ %13, %895 ], [ %13, %makeMaps_d.exit ], [ %13, %._crit_edge516 ], [ %13, %._crit_edge516 ], [ %13, %._crit_edge516 ], [ %13, %._crit_edge511 ], [ %13, %1296 ], [ %13, %1459 ], [ %gMinlen.2, %1516 ], [ %gMinlen.2, %1569 ], [ %gMinlen.5, %1591 ], [ %gMinlen.8, %1652 ], [ %gMinlen.8, %1705 ], [ %gMinlen.4, %1755 ], [ %gMinlen.4, %1918 ], [ %gMinlen.12, %1979 ], [ %gMinlen.12, %2032 ], [ %gMinlen.4, %2041 ], [ %gMinlen.4, %2300 ], [ %gMinlen.4, %2313 ], [ %gMinlen.4, %2245 ], [ %gMinlen.4, %2251 ], [ %13, %._crit_edge381 ], [ %13, %._crit_edge376 ], [ %13, %._crit_edge371 ], [ %13, %._crit_edge366 ], [ %13, %._crit_edge361 ], [ %gMinlen.4, %.loopexit98 ], [ %13, %.loopexit.loopexit ], [ %13, %.loopexit.loopexit1183 ], [ %13, %.loopexit.loopexit1184 ], [ %13, %.loopexit.loopexit1185 ], [ %13, %.loopexit.loopexit1186 ], [ %13, %.loopexit.loopexit1187 ], [ %13, %.loopexit.loopexit1188 ], [ %13, %.loopexit.loopexit1189 ], [ %13, %.loopexit.loopexit1190 ], [ %13, %.loopexit.loopexit1191 ], [ %13, %.loopexit.loopexit1192 ], [ %13, %.loopexit.loopexit1193 ], [ %13, %.loopexit.loopexit1194 ], [ %13, %.loopexit.loopexit1195 ], [ %13, %.loopexit.loopexit1196 ], [ %13, %.loopexit.loopexit1197 ], [ %gMinlen.3, %.loopexit.loopexit1198 ], [ %gMinlen.9, %.loopexit.loopexit1199 ], [ %gMinlen.8, %.loopexit.loopexit1200 ], [ %gMinlen.8, %.loopexit.loopexit1201 ], [ %gMinlen.7, %.loopexit.loopexit1202 ], [ %gMinlen.13, %.loopexit.loopexit1203 ], [ %gMinlen.11, %.loopexit.loopexit1204 ], [ %gMinlen.1, %.loopexit.loopexit1205 ], [ %13, %.loopexit.loopexit1208 ], [ %13, %.loopexit.loopexit1209 ], [ %13, %.loopexit.loopexit1210 ], [ %13, %.loopexit.loopexit1211 ], [ %13, %.loopexit.loopexit1212 ], [ %13, %.loopexit.loopexit1213 ], [ %13, %.loopexit.loopexit1214 ], [ %13, %.loopexit.loopexit1215 ], [ %13, %.loopexit.loopexit1216 ], [ %13, %.loopexit.loopexit1217 ], [ %13, %.loopexit.loopexit1218 ], [ %13, %.loopexit.loopexit1219 ], [ %13, %.loopexit.loopexit1220 ], [ %13, %.loopexit.loopexit1221 ], [ %13, %.loopexit.loopexit1222 ], [ %13, %.loopexit.loopexit1223 ], [ %13, %.loopexit.loopexit1224 ], [ %13, %.loopexit.loopexit1225 ], [ %13, %.loopexit.loopexit1226 ], [ %13, %.loopexit.loopexit1227 ]
  %gSel.14 = phi i32 [ %14, %2721 ], [ %14, %._crit_edge ], [ %14, %._crit_edge607 ], [ %14, %._crit_edge602 ], [ %14, %._crit_edge597 ], [ %14, %._crit_edge592 ], [ %14, %240 ], [ %14, %255 ], [ %14, %._crit_edge587 ], [ %14, %._crit_edge582 ], [ %14, %._crit_edge577 ], [ %14, %._crit_edge572 ], [ %14, %._crit_edge567 ], [ %14, %._crit_edge562 ], [ %14, %._crit_edge522 ], [ %14, %895 ], [ %14, %makeMaps_d.exit ], [ %14, %._crit_edge516 ], [ %14, %._crit_edge516 ], [ %14, %._crit_edge516 ], [ %14, %._crit_edge511 ], [ %14, %1296 ], [ %14, %1459 ], [ %gSel.2, %1516 ], [ %gSel.2, %1569 ], [ %gSel.5, %1591 ], [ %gSel.8, %1652 ], [ %gSel.8, %1705 ], [ %gSel.4, %1755 ], [ %gSel.4, %1918 ], [ %gSel.12, %1979 ], [ %gSel.12, %2032 ], [ %gSel.4, %2041 ], [ %gSel.4, %2300 ], [ %gSel.4, %2313 ], [ %gSel.4, %2245 ], [ %gSel.4, %2251 ], [ %14, %._crit_edge381 ], [ %14, %._crit_edge376 ], [ %14, %._crit_edge371 ], [ %14, %._crit_edge366 ], [ %14, %._crit_edge361 ], [ %gSel.4, %.loopexit98 ], [ %14, %.loopexit.loopexit ], [ %14, %.loopexit.loopexit1183 ], [ %14, %.loopexit.loopexit1184 ], [ %14, %.loopexit.loopexit1185 ], [ %14, %.loopexit.loopexit1186 ], [ %14, %.loopexit.loopexit1187 ], [ %14, %.loopexit.loopexit1188 ], [ %14, %.loopexit.loopexit1189 ], [ %14, %.loopexit.loopexit1190 ], [ %14, %.loopexit.loopexit1191 ], [ %14, %.loopexit.loopexit1192 ], [ %14, %.loopexit.loopexit1193 ], [ %14, %.loopexit.loopexit1194 ], [ %14, %.loopexit.loopexit1195 ], [ %14, %.loopexit.loopexit1196 ], [ %14, %.loopexit.loopexit1197 ], [ %gSel.3, %.loopexit.loopexit1198 ], [ %gSel.9, %.loopexit.loopexit1199 ], [ %gSel.8, %.loopexit.loopexit1200 ], [ %gSel.8, %.loopexit.loopexit1201 ], [ %gSel.7, %.loopexit.loopexit1202 ], [ %gSel.13, %.loopexit.loopexit1203 ], [ %gSel.11, %.loopexit.loopexit1204 ], [ %gSel.1, %.loopexit.loopexit1205 ], [ %14, %.loopexit.loopexit1208 ], [ %14, %.loopexit.loopexit1209 ], [ %14, %.loopexit.loopexit1210 ], [ %14, %.loopexit.loopexit1211 ], [ %14, %.loopexit.loopexit1212 ], [ %14, %.loopexit.loopexit1213 ], [ %14, %.loopexit.loopexit1214 ], [ %14, %.loopexit.loopexit1215 ], [ %14, %.loopexit.loopexit1216 ], [ %14, %.loopexit.loopexit1217 ], [ %14, %.loopexit.loopexit1218 ], [ %14, %.loopexit.loopexit1219 ], [ %14, %.loopexit.loopexit1220 ], [ %14, %.loopexit.loopexit1221 ], [ %14, %.loopexit.loopexit1222 ], [ %14, %.loopexit.loopexit1223 ], [ %14, %.loopexit.loopexit1224 ], [ %14, %.loopexit.loopexit1225 ], [ %14, %.loopexit.loopexit1226 ], [ %14, %.loopexit.loopexit1227 ]
  %zj.10 = phi i32 [ %15, %2721 ], [ %15, %._crit_edge ], [ %15, %._crit_edge607 ], [ %15, %._crit_edge602 ], [ %15, %._crit_edge597 ], [ %15, %._crit_edge592 ], [ %15, %240 ], [ %15, %255 ], [ %15, %._crit_edge587 ], [ %15, %._crit_edge582 ], [ %15, %._crit_edge577 ], [ %15, %._crit_edge572 ], [ %15, %._crit_edge567 ], [ %15, %._crit_edge562 ], [ %15, %._crit_edge522 ], [ %15, %895 ], [ %15, %makeMaps_d.exit ], [ %15, %._crit_edge516 ], [ %15, %._crit_edge516 ], [ %15, %._crit_edge516 ], [ %15, %._crit_edge511 ], [ %15, %1296 ], [ %15, %1459 ], [ %zj.0, %1516 ], [ %zj.0, %1569 ], [ %zj.3, %1591 ], [ %zj.5, %1652 ], [ %zj.5, %1705 ], [ %zj.2, %1755 ], [ %zj.2, %1918 ], [ %zj.8, %1979 ], [ %zj.8, %2032 ], [ %zj.2, %2041 ], [ %zj.2, %2300 ], [ %zj.2, %2313 ], [ %zj.2, %2245 ], [ %zj.2, %2251 ], [ %15, %._crit_edge381 ], [ %15, %._crit_edge376 ], [ %15, %._crit_edge371 ], [ %15, %._crit_edge366 ], [ %15, %._crit_edge361 ], [ %zj.2, %.loopexit98 ], [ %15, %.loopexit.loopexit ], [ %15, %.loopexit.loopexit1183 ], [ %15, %.loopexit.loopexit1184 ], [ %15, %.loopexit.loopexit1185 ], [ %15, %.loopexit.loopexit1186 ], [ %15, %.loopexit.loopexit1187 ], [ %15, %.loopexit.loopexit1188 ], [ %15, %.loopexit.loopexit1189 ], [ %15, %.loopexit.loopexit1190 ], [ %15, %.loopexit.loopexit1191 ], [ %15, %.loopexit.loopexit1192 ], [ %15, %.loopexit.loopexit1193 ], [ %15, %.loopexit.loopexit1194 ], [ %15, %.loopexit.loopexit1195 ], [ %15, %.loopexit.loopexit1196 ], [ %15, %.loopexit.loopexit1197 ], [ %zj.1, %.loopexit.loopexit1198 ], [ %zj.6, %.loopexit.loopexit1199 ], [ %zj.5, %.loopexit.loopexit1200 ], [ %zj.5, %.loopexit.loopexit1201 ], [ %zj.4, %.loopexit.loopexit1202 ], [ %zj.9, %.loopexit.loopexit1203 ], [ %zj.7, %.loopexit.loopexit1204 ], [ %15, %.loopexit.loopexit1205 ], [ %15, %.loopexit.loopexit1208 ], [ %15, %.loopexit.loopexit1209 ], [ %15, %.loopexit.loopexit1210 ], [ %15, %.loopexit.loopexit1211 ], [ %15, %.loopexit.loopexit1212 ], [ %15, %.loopexit.loopexit1213 ], [ %15, %.loopexit.loopexit1214 ], [ %15, %.loopexit.loopexit1215 ], [ %15, %.loopexit.loopexit1216 ], [ %15, %.loopexit.loopexit1217 ], [ %15, %.loopexit.loopexit1218 ], [ %15, %.loopexit.loopexit1219 ], [ %15, %.loopexit.loopexit1220 ], [ %15, %.loopexit.loopexit1221 ], [ %15, %.loopexit.loopexit1222 ], [ %15, %.loopexit.loopexit1223 ], [ %15, %.loopexit.loopexit1224 ], [ %15, %.loopexit.loopexit1225 ], [ %15, %.loopexit.loopexit1226 ], [ %15, %.loopexit.loopexit1227 ]
  %zvec.10 = phi i32 [ %16, %2721 ], [ %16, %._crit_edge ], [ %16, %._crit_edge607 ], [ %16, %._crit_edge602 ], [ %16, %._crit_edge597 ], [ %16, %._crit_edge592 ], [ %16, %240 ], [ %16, %255 ], [ %16, %._crit_edge587 ], [ %16, %._crit_edge582 ], [ %16, %._crit_edge577 ], [ %16, %._crit_edge572 ], [ %16, %._crit_edge567 ], [ %16, %._crit_edge562 ], [ %16, %._crit_edge522 ], [ %16, %895 ], [ %16, %makeMaps_d.exit ], [ %16, %._crit_edge516 ], [ %16, %._crit_edge516 ], [ %16, %._crit_edge516 ], [ %16, %._crit_edge511 ], [ %16, %1296 ], [ %16, %1459 ], [ %zvec.0, %1516 ], [ %zvec.0, %1569 ], [ %zvec.3, %1591 ], [ %zvec.5, %1652 ], [ %zvec.5, %1705 ], [ %zvec.2, %1755 ], [ %zvec.2, %1918 ], [ %zvec.8, %1979 ], [ %zvec.8, %2032 ], [ %zvec.2, %2041 ], [ %zvec.2, %2300 ], [ %zvec.2, %2313 ], [ %zvec.2, %2245 ], [ %zvec.2, %2251 ], [ %16, %._crit_edge381 ], [ %16, %._crit_edge376 ], [ %16, %._crit_edge371 ], [ %16, %._crit_edge366 ], [ %16, %._crit_edge361 ], [ %zvec.2, %.loopexit98 ], [ %16, %.loopexit.loopexit ], [ %16, %.loopexit.loopexit1183 ], [ %16, %.loopexit.loopexit1184 ], [ %16, %.loopexit.loopexit1185 ], [ %16, %.loopexit.loopexit1186 ], [ %16, %.loopexit.loopexit1187 ], [ %16, %.loopexit.loopexit1188 ], [ %16, %.loopexit.loopexit1189 ], [ %16, %.loopexit.loopexit1190 ], [ %16, %.loopexit.loopexit1191 ], [ %16, %.loopexit.loopexit1192 ], [ %16, %.loopexit.loopexit1193 ], [ %16, %.loopexit.loopexit1194 ], [ %16, %.loopexit.loopexit1195 ], [ %16, %.loopexit.loopexit1196 ], [ %16, %.loopexit.loopexit1197 ], [ %zvec.1, %.loopexit.loopexit1198 ], [ %zvec.6, %.loopexit.loopexit1199 ], [ %zvec.5, %.loopexit.loopexit1200 ], [ %zvec.5, %.loopexit.loopexit1201 ], [ %zvec.4, %.loopexit.loopexit1202 ], [ %zvec.9, %.loopexit.loopexit1203 ], [ %zvec.7, %.loopexit.loopexit1204 ], [ %16, %.loopexit.loopexit1205 ], [ %16, %.loopexit.loopexit1208 ], [ %16, %.loopexit.loopexit1209 ], [ %16, %.loopexit.loopexit1210 ], [ %16, %.loopexit.loopexit1211 ], [ %16, %.loopexit.loopexit1212 ], [ %16, %.loopexit.loopexit1213 ], [ %16, %.loopexit.loopexit1214 ], [ %16, %.loopexit.loopexit1215 ], [ %16, %.loopexit.loopexit1216 ], [ %16, %.loopexit.loopexit1217 ], [ %16, %.loopexit.loopexit1218 ], [ %16, %.loopexit.loopexit1219 ], [ %16, %.loopexit.loopexit1220 ], [ %16, %.loopexit.loopexit1221 ], [ %16, %.loopexit.loopexit1222 ], [ %16, %.loopexit.loopexit1223 ], [ %16, %.loopexit.loopexit1224 ], [ %16, %.loopexit.loopexit1225 ], [ %16, %.loopexit.loopexit1226 ], [ %16, %.loopexit.loopexit1227 ]
  %zn.11 = phi i32 [ %17, %2721 ], [ %17, %._crit_edge ], [ %17, %._crit_edge607 ], [ %17, %._crit_edge602 ], [ %17, %._crit_edge597 ], [ %17, %._crit_edge592 ], [ %17, %240 ], [ %17, %255 ], [ %17, %._crit_edge587 ], [ %17, %._crit_edge582 ], [ %17, %._crit_edge577 ], [ %17, %._crit_edge572 ], [ %17, %._crit_edge567 ], [ %17, %._crit_edge562 ], [ %17, %._crit_edge522 ], [ %17, %895 ], [ %17, %makeMaps_d.exit ], [ %17, %._crit_edge516 ], [ %17, %._crit_edge516 ], [ %17, %._crit_edge516 ], [ %17, %._crit_edge511 ], [ %17, %1296 ], [ %17, %1459 ], [ %zn.1, %1516 ], [ %zn.1, %1569 ], [ %zn.4, %1591 ], [ %zn.6, %1652 ], [ %zn.6, %1705 ], [ %zn.3, %1755 ], [ %zn.3, %1918 ], [ %zn.9, %1979 ], [ %zn.9, %2032 ], [ %zn.3, %2041 ], [ %zn.3, %2300 ], [ %zn.3, %2313 ], [ %zn.3, %2245 ], [ %zn.3, %2251 ], [ %17, %._crit_edge381 ], [ %17, %._crit_edge376 ], [ %17, %._crit_edge371 ], [ %17, %._crit_edge366 ], [ %17, %._crit_edge361 ], [ %zn.3, %.loopexit98 ], [ %17, %.loopexit.loopexit ], [ %17, %.loopexit.loopexit1183 ], [ %17, %.loopexit.loopexit1184 ], [ %17, %.loopexit.loopexit1185 ], [ %17, %.loopexit.loopexit1186 ], [ %17, %.loopexit.loopexit1187 ], [ %17, %.loopexit.loopexit1188 ], [ %17, %.loopexit.loopexit1189 ], [ %17, %.loopexit.loopexit1190 ], [ %17, %.loopexit.loopexit1191 ], [ %17, %.loopexit.loopexit1192 ], [ %17, %.loopexit.loopexit1193 ], [ %17, %.loopexit.loopexit1194 ], [ %17, %.loopexit.loopexit1195 ], [ %17, %.loopexit.loopexit1196 ], [ %17, %.loopexit.loopexit1197 ], [ %zn.2, %.loopexit.loopexit1198 ], [ %zn.7, %.loopexit.loopexit1199 ], [ %zn.6, %.loopexit.loopexit1200 ], [ %zn.6, %.loopexit.loopexit1201 ], [ %zn.5, %.loopexit.loopexit1202 ], [ %zn.10, %.loopexit.loopexit1203 ], [ %zn.8, %.loopexit.loopexit1204 ], [ %zn.0, %.loopexit.loopexit1205 ], [ %17, %.loopexit.loopexit1208 ], [ %17, %.loopexit.loopexit1209 ], [ %17, %.loopexit.loopexit1210 ], [ %17, %.loopexit.loopexit1211 ], [ %17, %.loopexit.loopexit1212 ], [ %17, %.loopexit.loopexit1213 ], [ %17, %.loopexit.loopexit1214 ], [ %17, %.loopexit.loopexit1215 ], [ %17, %.loopexit.loopexit1216 ], [ %17, %.loopexit.loopexit1217 ], [ %17, %.loopexit.loopexit1218 ], [ %17, %.loopexit.loopexit1219 ], [ %17, %.loopexit.loopexit1220 ], [ %17, %.loopexit.loopexit1221 ], [ %17, %.loopexit.loopexit1222 ], [ %17, %.loopexit.loopexit1223 ], [ %17, %.loopexit.loopexit1224 ], [ %17, %.loopexit.loopexit1225 ], [ %17, %.loopexit.loopexit1226 ], [ %17, %.loopexit.loopexit1227 ]
  %curr.17 = phi i32 [ %19, %2721 ], [ %19, %._crit_edge ], [ %19, %._crit_edge607 ], [ %19, %._crit_edge602 ], [ %19, %._crit_edge597 ], [ %19, %._crit_edge592 ], [ %19, %240 ], [ %19, %255 ], [ %19, %._crit_edge587 ], [ %19, %._crit_edge582 ], [ %19, %._crit_edge577 ], [ %19, %._crit_edge572 ], [ %19, %._crit_edge567 ], [ %19, %._crit_edge562 ], [ %19, %._crit_edge522 ], [ %19, %895 ], [ %19, %makeMaps_d.exit ], [ %19, %._crit_edge516 ], [ %19, %._crit_edge516 ], [ %19, %._crit_edge516 ], [ %19, %._crit_edge511 ], [ %curr.3, %1296 ], [ %curr.0, %1459 ], [ %curr.7, %1516 ], [ %curr.7, %1569 ], [ %curr.10, %1591 ], [ %curr.12, %1652 ], [ %curr.12, %1705 ], [ %curr.9, %1755 ], [ %curr.9, %1918 ], [ %curr.15, %1979 ], [ %curr.15, %2032 ], [ %curr.9, %2041 ], [ %curr.9, %2300 ], [ %curr.9, %2313 ], [ %curr.9, %2245 ], [ %curr.9, %2251 ], [ %19, %._crit_edge381 ], [ %19, %._crit_edge376 ], [ %19, %._crit_edge371 ], [ %19, %._crit_edge366 ], [ %19, %._crit_edge361 ], [ %curr.9, %.loopexit98 ], [ %19, %.loopexit.loopexit ], [ %19, %.loopexit.loopexit1183 ], [ %19, %.loopexit.loopexit1184 ], [ %19, %.loopexit.loopexit1185 ], [ %19, %.loopexit.loopexit1186 ], [ %19, %.loopexit.loopexit1187 ], [ %19, %.loopexit.loopexit1188 ], [ %19, %.loopexit.loopexit1189 ], [ %19, %.loopexit.loopexit1190 ], [ %19, %.loopexit.loopexit1191 ], [ %19, %.loopexit.loopexit1192 ], [ %19, %.loopexit.loopexit1193 ], [ %19, %.loopexit.loopexit1194 ], [ %curr.5, %.loopexit.loopexit1195 ], [ %curr.4, %.loopexit.loopexit1196 ], [ %curr.1, %.loopexit.loopexit1197 ], [ %curr.8, %.loopexit.loopexit1198 ], [ %curr.13, %.loopexit.loopexit1199 ], [ %curr.12, %.loopexit.loopexit1200 ], [ %curr.12, %.loopexit.loopexit1201 ], [ %curr.11, %.loopexit.loopexit1202 ], [ %curr.16, %.loopexit.loopexit1203 ], [ %curr.14, %.loopexit.loopexit1204 ], [ %curr.6, %.loopexit.loopexit1205 ], [ %19, %.loopexit.loopexit1208 ], [ %19, %.loopexit.loopexit1209 ], [ %19, %.loopexit.loopexit1210 ], [ %19, %.loopexit.loopexit1211 ], [ %19, %.loopexit.loopexit1212 ], [ %19, %.loopexit.loopexit1213 ], [ %19, %.loopexit.loopexit1214 ], [ %19, %.loopexit.loopexit1215 ], [ %19, %.loopexit.loopexit1216 ], [ %19, %.loopexit.loopexit1217 ], [ %19, %.loopexit.loopexit1218 ], [ %19, %.loopexit.loopexit1219 ], [ %19, %.loopexit.loopexit1220 ], [ %19, %.loopexit.loopexit1221 ], [ %19, %.loopexit.loopexit1222 ], [ %19, %.loopexit.loopexit1223 ], [ %19, %.loopexit.loopexit1224 ], [ %19, %.loopexit.loopexit1225 ], [ %19, %.loopexit.loopexit1226 ], [ %19, %.loopexit.loopexit1227 ]
  %N.8 = phi i32 [ %20, %2721 ], [ %20, %._crit_edge ], [ %20, %._crit_edge607 ], [ %20, %._crit_edge602 ], [ %20, %._crit_edge597 ], [ %20, %._crit_edge592 ], [ %20, %240 ], [ %20, %255 ], [ %20, %._crit_edge587 ], [ %20, %._crit_edge582 ], [ %20, %._crit_edge577 ], [ %20, %._crit_edge572 ], [ %20, %._crit_edge567 ], [ %20, %._crit_edge562 ], [ %20, %._crit_edge522 ], [ %20, %895 ], [ %20, %makeMaps_d.exit ], [ %20, %._crit_edge516 ], [ %20, %._crit_edge516 ], [ %20, %._crit_edge516 ], [ %20, %._crit_edge511 ], [ %20, %1296 ], [ %20, %1459 ], [ %20, %1516 ], [ %20, %1569 ], [ %1589, %1591 ], [ %N.3, %1652 ], [ %N.3, %1705 ], [ %N.0, %1755 ], [ %N.0, %1918 ], [ %N.6, %1979 ], [ %N.6, %2032 ], [ %N.0, %2041 ], [ %N.0, %2300 ], [ %N.0, %2313 ], [ %N.0, %2245 ], [ %N.0, %2251 ], [ %20, %._crit_edge381 ], [ %20, %._crit_edge376 ], [ %20, %._crit_edge371 ], [ %20, %._crit_edge366 ], [ %20, %._crit_edge361 ], [ %N.0, %.loopexit98 ], [ %20, %.loopexit.loopexit ], [ %20, %.loopexit.loopexit1183 ], [ %20, %.loopexit.loopexit1184 ], [ %20, %.loopexit.loopexit1185 ], [ %20, %.loopexit.loopexit1186 ], [ %20, %.loopexit.loopexit1187 ], [ %20, %.loopexit.loopexit1188 ], [ %20, %.loopexit.loopexit1189 ], [ %20, %.loopexit.loopexit1190 ], [ %20, %.loopexit.loopexit1191 ], [ %20, %.loopexit.loopexit1192 ], [ %20, %.loopexit.loopexit1193 ], [ %20, %.loopexit.loopexit1194 ], [ %20, %.loopexit.loopexit1195 ], [ %20, %.loopexit.loopexit1196 ], [ %20, %.loopexit.loopexit1197 ], [ %20, %.loopexit.loopexit1198 ], [ %N.4, %.loopexit.loopexit1199 ], [ %N.3, %.loopexit.loopexit1200 ], [ %N.3, %.loopexit.loopexit1201 ], [ %N.2, %.loopexit.loopexit1202 ], [ %N.7, %.loopexit.loopexit1203 ], [ %N.5, %.loopexit.loopexit1204 ], [ %20, %.loopexit.loopexit1205 ], [ %20, %.loopexit.loopexit1208 ], [ %20, %.loopexit.loopexit1209 ], [ %20, %.loopexit.loopexit1210 ], [ %20, %.loopexit.loopexit1211 ], [ %20, %.loopexit.loopexit1212 ], [ %20, %.loopexit.loopexit1213 ], [ %20, %.loopexit.loopexit1214 ], [ %20, %.loopexit.loopexit1215 ], [ %20, %.loopexit.loopexit1216 ], [ %20, %.loopexit.loopexit1217 ], [ %20, %.loopexit.loopexit1218 ], [ %20, %.loopexit.loopexit1219 ], [ %20, %.loopexit.loopexit1220 ], [ %20, %.loopexit.loopexit1221 ], [ %20, %.loopexit.loopexit1222 ], [ %20, %.loopexit.loopexit1223 ], [ %20, %.loopexit.loopexit1224 ], [ %20, %.loopexit.loopexit1225 ], [ %20, %.loopexit.loopexit1226 ], [ %20, %.loopexit.loopexit1227 ]
  %es.11 = phi i32 [ %21, %2721 ], [ %21, %._crit_edge ], [ %21, %._crit_edge607 ], [ %21, %._crit_edge602 ], [ %21, %._crit_edge597 ], [ %21, %._crit_edge592 ], [ %21, %240 ], [ %21, %255 ], [ %21, %._crit_edge587 ], [ %21, %._crit_edge582 ], [ %21, %._crit_edge577 ], [ %21, %._crit_edge572 ], [ %21, %._crit_edge567 ], [ %21, %._crit_edge562 ], [ %21, %._crit_edge522 ], [ %21, %895 ], [ %21, %makeMaps_d.exit ], [ %21, %._crit_edge516 ], [ %21, %._crit_edge516 ], [ %21, %._crit_edge516 ], [ %21, %._crit_edge511 ], [ %21, %1296 ], [ %21, %1459 ], [ %21, %1516 ], [ %21, %1569 ], [ %es.2, %1591 ], [ %es.4, %1652 ], [ %es.4, %1705 ], [ %es.0, %1755 ], [ %es.0, %1918 ], [ %es.9, %1979 ], [ %es.9, %2032 ], [ %es.0, %2041 ], [ %es.0, %2300 ], [ %es.0, %2313 ], [ %es.0, %2245 ], [ %es.0, %2251 ], [ %21, %._crit_edge381 ], [ %21, %._crit_edge376 ], [ %21, %._crit_edge371 ], [ %21, %._crit_edge366 ], [ %21, %._crit_edge361 ], [ %es.0, %.loopexit98 ], [ %21, %.loopexit.loopexit ], [ %21, %.loopexit.loopexit1183 ], [ %21, %.loopexit.loopexit1184 ], [ %21, %.loopexit.loopexit1185 ], [ %21, %.loopexit.loopexit1186 ], [ %21, %.loopexit.loopexit1187 ], [ %21, %.loopexit.loopexit1188 ], [ %21, %.loopexit.loopexit1189 ], [ %21, %.loopexit.loopexit1190 ], [ %21, %.loopexit.loopexit1191 ], [ %21, %.loopexit.loopexit1192 ], [ %21, %.loopexit.loopexit1193 ], [ %21, %.loopexit.loopexit1194 ], [ %21, %.loopexit.loopexit1195 ], [ %21, %.loopexit.loopexit1196 ], [ %21, %.loopexit.loopexit1197 ], [ %21, %.loopexit.loopexit1198 ], [ %es.5, %.loopexit.loopexit1199 ], [ %es.7435.lcssa, %.loopexit.loopexit1200 ], [ %es.6440.lcssa, %.loopexit.loopexit1201 ], [ %es.3, %.loopexit.loopexit1202 ], [ %es.10, %.loopexit.loopexit1203 ], [ %es.8, %.loopexit.loopexit1204 ], [ %21, %.loopexit.loopexit1205 ], [ %21, %.loopexit.loopexit1208 ], [ %21, %.loopexit.loopexit1209 ], [ %21, %.loopexit.loopexit1210 ], [ %21, %.loopexit.loopexit1211 ], [ %21, %.loopexit.loopexit1212 ], [ %21, %.loopexit.loopexit1213 ], [ %21, %.loopexit.loopexit1214 ], [ %21, %.loopexit.loopexit1215 ], [ %21, %.loopexit.loopexit1216 ], [ %21, %.loopexit.loopexit1217 ], [ %21, %.loopexit.loopexit1218 ], [ %21, %.loopexit.loopexit1219 ], [ %21, %.loopexit.loopexit1220 ], [ %21, %.loopexit.loopexit1221 ], [ %21, %.loopexit.loopexit1222 ], [ %21, %.loopexit.loopexit1223 ], [ %21, %.loopexit.loopexit1224 ], [ %21, %.loopexit.loopexit1225 ], [ %21, %.loopexit.loopexit1226 ], [ %21, %.loopexit.loopexit1227 ]
  %nblock.13 = phi i32 [ %22, %2721 ], [ %22, %._crit_edge ], [ %22, %._crit_edge607 ], [ %22, %._crit_edge602 ], [ %22, %._crit_edge597 ], [ %22, %._crit_edge592 ], [ %22, %240 ], [ %22, %255 ], [ %22, %._crit_edge587 ], [ %22, %._crit_edge582 ], [ %22, %._crit_edge577 ], [ %22, %._crit_edge572 ], [ %22, %._crit_edge567 ], [ %22, %._crit_edge562 ], [ %22, %._crit_edge522 ], [ %22, %895 ], [ %22, %makeMaps_d.exit ], [ %22, %._crit_edge516 ], [ %22, %._crit_edge516 ], [ %22, %._crit_edge516 ], [ %22, %._crit_edge511 ], [ %22, %1296 ], [ 0, %1459 ], [ %nblock.1, %1516 ], [ %nblock.1, %1569 ], [ %nblock.4, %1591 ], [ %nblock.6, %1652 ], [ %nblock.6, %1705 ], [ %nblock.3, %1755 ], [ %1916, %1918 ], [ %nblock.11, %1979 ], [ %nblock.11, %2032 ], [ %nblock.3, %2041 ], [ %nblock.3, %2300 ], [ %nblock.3, %2313 ], [ %nblock.3, %2245 ], [ %nblock.3, %2251 ], [ %22, %._crit_edge381 ], [ %22, %._crit_edge376 ], [ %22, %._crit_edge371 ], [ %22, %._crit_edge366 ], [ %22, %._crit_edge361 ], [ %nblock.3, %.loopexit98 ], [ %22, %.loopexit.loopexit ], [ %22, %.loopexit.loopexit1183 ], [ %22, %.loopexit.loopexit1184 ], [ %22, %.loopexit.loopexit1185 ], [ %22, %.loopexit.loopexit1186 ], [ %22, %.loopexit.loopexit1187 ], [ %22, %.loopexit.loopexit1188 ], [ %22, %.loopexit.loopexit1189 ], [ %22, %.loopexit.loopexit1190 ], [ %22, %.loopexit.loopexit1191 ], [ %22, %.loopexit.loopexit1192 ], [ %22, %.loopexit.loopexit1193 ], [ %22, %.loopexit.loopexit1194 ], [ %22, %.loopexit.loopexit1195 ], [ %22, %.loopexit.loopexit1196 ], [ %22, %.loopexit.loopexit1197 ], [ %nblock.2, %.loopexit.loopexit1198 ], [ %nblock.7, %.loopexit.loopexit1199 ], [ %.lcssa1251, %.loopexit.loopexit1200 ], [ %.lcssa1255, %.loopexit.loopexit1201 ], [ %nblock.5, %.loopexit.loopexit1202 ], [ %nblock.12, %.loopexit.loopexit1203 ], [ %nblock.10, %.loopexit.loopexit1204 ], [ %nblock.0, %.loopexit.loopexit1205 ], [ %22, %.loopexit.loopexit1208 ], [ %22, %.loopexit.loopexit1209 ], [ %22, %.loopexit.loopexit1210 ], [ %22, %.loopexit.loopexit1211 ], [ %22, %.loopexit.loopexit1212 ], [ %22, %.loopexit.loopexit1213 ], [ %22, %.loopexit.loopexit1214 ], [ %22, %.loopexit.loopexit1215 ], [ %22, %.loopexit.loopexit1216 ], [ %22, %.loopexit.loopexit1217 ], [ %22, %.loopexit.loopexit1218 ], [ %22, %.loopexit.loopexit1219 ], [ %22, %.loopexit.loopexit1220 ], [ %22, %.loopexit.loopexit1221 ], [ %22, %.loopexit.loopexit1222 ], [ %22, %.loopexit.loopexit1223 ], [ %22, %.loopexit.loopexit1224 ], [ %22, %.loopexit.loopexit1225 ], [ %22, %.loopexit.loopexit1226 ], [ %22, %.loopexit.loopexit1227 ]
  %nblockMAX.11 = phi i32 [ %23, %2721 ], [ %23, %._crit_edge ], [ %23, %._crit_edge607 ], [ %23, %._crit_edge602 ], [ %23, %._crit_edge597 ], [ %23, %._crit_edge592 ], [ %23, %240 ], [ %23, %255 ], [ %23, %._crit_edge587 ], [ %23, %._crit_edge582 ], [ %23, %._crit_edge577 ], [ %23, %._crit_edge572 ], [ %23, %._crit_edge567 ], [ %23, %._crit_edge562 ], [ %23, %._crit_edge522 ], [ %23, %895 ], [ %23, %makeMaps_d.exit ], [ %23, %._crit_edge516 ], [ %23, %._crit_edge516 ], [ %23, %._crit_edge516 ], [ %23, %._crit_edge511 ], [ %23, %1296 ], [ %1406, %1459 ], [ %nblockMAX.1, %1516 ], [ %nblockMAX.1, %1569 ], [ %nblockMAX.4, %1591 ], [ %nblockMAX.6, %1652 ], [ %nblockMAX.6, %1705 ], [ %nblockMAX.3, %1755 ], [ %nblockMAX.3, %1918 ], [ %nblockMAX.9, %1979 ], [ %nblockMAX.9, %2032 ], [ %nblockMAX.3, %2041 ], [ %nblockMAX.3, %2300 ], [ %nblockMAX.3, %2313 ], [ %nblockMAX.3, %2245 ], [ %nblockMAX.3, %2251 ], [ %23, %._crit_edge381 ], [ %23, %._crit_edge376 ], [ %23, %._crit_edge371 ], [ %23, %._crit_edge366 ], [ %23, %._crit_edge361 ], [ %nblockMAX.3, %.loopexit98 ], [ %23, %.loopexit.loopexit ], [ %23, %.loopexit.loopexit1183 ], [ %23, %.loopexit.loopexit1184 ], [ %23, %.loopexit.loopexit1185 ], [ %23, %.loopexit.loopexit1186 ], [ %23, %.loopexit.loopexit1187 ], [ %23, %.loopexit.loopexit1188 ], [ %23, %.loopexit.loopexit1189 ], [ %23, %.loopexit.loopexit1190 ], [ %23, %.loopexit.loopexit1191 ], [ %23, %.loopexit.loopexit1192 ], [ %23, %.loopexit.loopexit1193 ], [ %23, %.loopexit.loopexit1194 ], [ %23, %.loopexit.loopexit1195 ], [ %23, %.loopexit.loopexit1196 ], [ %23, %.loopexit.loopexit1197 ], [ %nblockMAX.2, %.loopexit.loopexit1198 ], [ %nblockMAX.7, %.loopexit.loopexit1199 ], [ %nblockMAX.6, %.loopexit.loopexit1200 ], [ %nblockMAX.6, %.loopexit.loopexit1201 ], [ %nblockMAX.5, %.loopexit.loopexit1202 ], [ %nblockMAX.10, %.loopexit.loopexit1203 ], [ %nblockMAX.8, %.loopexit.loopexit1204 ], [ %nblockMAX.0, %.loopexit.loopexit1205 ], [ %23, %.loopexit.loopexit1208 ], [ %23, %.loopexit.loopexit1209 ], [ %23, %.loopexit.loopexit1210 ], [ %23, %.loopexit.loopexit1211 ], [ %23, %.loopexit.loopexit1212 ], [ %23, %.loopexit.loopexit1213 ], [ %23, %.loopexit.loopexit1214 ], [ %23, %.loopexit.loopexit1215 ], [ %23, %.loopexit.loopexit1216 ], [ %23, %.loopexit.loopexit1217 ], [ %23, %.loopexit.loopexit1218 ], [ %23, %.loopexit.loopexit1219 ], [ %23, %.loopexit.loopexit1220 ], [ %23, %.loopexit.loopexit1221 ], [ %23, %.loopexit.loopexit1222 ], [ %23, %.loopexit.loopexit1223 ], [ %23, %.loopexit.loopexit1224 ], [ %23, %.loopexit.loopexit1225 ], [ %23, %.loopexit.loopexit1226 ], [ %23, %.loopexit.loopexit1227 ]
  %nextSym.8 = phi i32 [ %24, %2721 ], [ %24, %._crit_edge ], [ %24, %._crit_edge607 ], [ %24, %._crit_edge602 ], [ %24, %._crit_edge597 ], [ %24, %._crit_edge592 ], [ %24, %240 ], [ %24, %255 ], [ %24, %._crit_edge587 ], [ %24, %._crit_edge582 ], [ %24, %._crit_edge577 ], [ %24, %._crit_edge572 ], [ %24, %._crit_edge567 ], [ %24, %._crit_edge562 ], [ %24, %._crit_edge522 ], [ %24, %895 ], [ %24, %makeMaps_d.exit ], [ %24, %._crit_edge516 ], [ %24, %._crit_edge516 ], [ %24, %._crit_edge516 ], [ %24, %._crit_edge511 ], [ %24, %1296 ], [ %24, %1459 ], [ %24, %1516 ], [ %24, %1569 ], [ %nextSym.1, %1591 ], [ %nextSym.3, %1652 ], [ %nextSym.3, %1705 ], [ %nextSym.0, %1755 ], [ %nextSym.0, %1918 ], [ %nextSym.6, %1979 ], [ %nextSym.6, %2032 ], [ %nextSym.0, %2041 ], [ %nextSym.0, %2300 ], [ %nextSym.0, %2313 ], [ %nextSym.0, %2245 ], [ %nextSym.0, %2251 ], [ %24, %._crit_edge381 ], [ %24, %._crit_edge376 ], [ %24, %._crit_edge371 ], [ %24, %._crit_edge366 ], [ %24, %._crit_edge361 ], [ %nextSym.0, %.loopexit98 ], [ %24, %.loopexit.loopexit ], [ %24, %.loopexit.loopexit1183 ], [ %24, %.loopexit.loopexit1184 ], [ %24, %.loopexit.loopexit1185 ], [ %24, %.loopexit.loopexit1186 ], [ %24, %.loopexit.loopexit1187 ], [ %24, %.loopexit.loopexit1188 ], [ %24, %.loopexit.loopexit1189 ], [ %24, %.loopexit.loopexit1190 ], [ %24, %.loopexit.loopexit1191 ], [ %24, %.loopexit.loopexit1192 ], [ %24, %.loopexit.loopexit1193 ], [ %24, %.loopexit.loopexit1194 ], [ %24, %.loopexit.loopexit1195 ], [ %24, %.loopexit.loopexit1196 ], [ %24, %.loopexit.loopexit1197 ], [ %24, %.loopexit.loopexit1198 ], [ %nextSym.4, %.loopexit.loopexit1199 ], [ %1713, %.loopexit.loopexit1200 ], [ %1713, %.loopexit.loopexit1201 ], [ %nextSym.2, %.loopexit.loopexit1202 ], [ %nextSym.7, %.loopexit.loopexit1203 ], [ %nextSym.5, %.loopexit.loopexit1204 ], [ %24, %.loopexit.loopexit1205 ], [ %24, %.loopexit.loopexit1208 ], [ %24, %.loopexit.loopexit1209 ], [ %24, %.loopexit.loopexit1210 ], [ %24, %.loopexit.loopexit1211 ], [ %24, %.loopexit.loopexit1212 ], [ %24, %.loopexit.loopexit1213 ], [ %24, %.loopexit.loopexit1214 ], [ %24, %.loopexit.loopexit1215 ], [ %24, %.loopexit.loopexit1216 ], [ %24, %.loopexit.loopexit1217 ], [ %24, %.loopexit.loopexit1218 ], [ %24, %.loopexit.loopexit1219 ], [ %24, %.loopexit.loopexit1220 ], [ %24, %.loopexit.loopexit1221 ], [ %24, %.loopexit.loopexit1222 ], [ %24, %.loopexit.loopexit1223 ], [ %24, %.loopexit.loopexit1224 ], [ %24, %.loopexit.loopexit1225 ], [ %24, %.loopexit.loopexit1226 ], [ %24, %.loopexit.loopexit1227 ]
  %groupPos.14 = phi i32 [ %25, %2721 ], [ %25, %._crit_edge ], [ %25, %._crit_edge607 ], [ %25, %._crit_edge602 ], [ %25, %._crit_edge597 ], [ %25, %._crit_edge592 ], [ %25, %240 ], [ %25, %255 ], [ %25, %._crit_edge587 ], [ %25, %._crit_edge582 ], [ %25, %._crit_edge577 ], [ %25, %._crit_edge572 ], [ %25, %._crit_edge567 ], [ %25, %._crit_edge562 ], [ %25, %._crit_edge522 ], [ %25, %895 ], [ %25, %makeMaps_d.exit ], [ %25, %._crit_edge516 ], [ %25, %._crit_edge516 ], [ %25, %._crit_edge516 ], [ %25, %._crit_edge511 ], [ %25, %1296 ], [ 0, %1459 ], [ %groupPos.2, %1516 ], [ %groupPos.2, %1569 ], [ 0, %1591 ], [ %groupPos.8, %1652 ], [ %groupPos.8, %1705 ], [ %groupPos.4, %1755 ], [ 0, %1918 ], [ %groupPos.12, %1979 ], [ %groupPos.12, %2032 ], [ %groupPos.4, %2041 ], [ %groupPos.4, %2300 ], [ %groupPos.4, %2313 ], [ %groupPos.4, %2245 ], [ %groupPos.4, %2251 ], [ %25, %._crit_edge381 ], [ %25, %._crit_edge376 ], [ %25, %._crit_edge371 ], [ %25, %._crit_edge366 ], [ %25, %._crit_edge361 ], [ %groupPos.4, %.loopexit98 ], [ %25, %.loopexit.loopexit ], [ %25, %.loopexit.loopexit1183 ], [ %25, %.loopexit.loopexit1184 ], [ %25, %.loopexit.loopexit1185 ], [ %25, %.loopexit.loopexit1186 ], [ %25, %.loopexit.loopexit1187 ], [ %25, %.loopexit.loopexit1188 ], [ %25, %.loopexit.loopexit1189 ], [ %25, %.loopexit.loopexit1190 ], [ %25, %.loopexit.loopexit1191 ], [ %25, %.loopexit.loopexit1192 ], [ %25, %.loopexit.loopexit1193 ], [ %25, %.loopexit.loopexit1194 ], [ %25, %.loopexit.loopexit1195 ], [ %25, %.loopexit.loopexit1196 ], [ %25, %.loopexit.loopexit1197 ], [ %groupPos.3, %.loopexit.loopexit1198 ], [ %groupPos.9, %.loopexit.loopexit1199 ], [ %groupPos.8, %.loopexit.loopexit1200 ], [ %groupPos.8, %.loopexit.loopexit1201 ], [ %groupPos.7, %.loopexit.loopexit1202 ], [ %groupPos.13, %.loopexit.loopexit1203 ], [ %groupPos.11, %.loopexit.loopexit1204 ], [ %groupPos.1, %.loopexit.loopexit1205 ], [ %25, %.loopexit.loopexit1208 ], [ %25, %.loopexit.loopexit1209 ], [ %25, %.loopexit.loopexit1210 ], [ %25, %.loopexit.loopexit1211 ], [ %25, %.loopexit.loopexit1212 ], [ %25, %.loopexit.loopexit1213 ], [ %25, %.loopexit.loopexit1214 ], [ %25, %.loopexit.loopexit1215 ], [ %25, %.loopexit.loopexit1216 ], [ %25, %.loopexit.loopexit1217 ], [ %25, %.loopexit.loopexit1218 ], [ %25, %.loopexit.loopexit1219 ], [ %25, %.loopexit.loopexit1220 ], [ %25, %.loopexit.loopexit1221 ], [ %25, %.loopexit.loopexit1222 ], [ %25, %.loopexit.loopexit1223 ], [ %25, %.loopexit.loopexit1224 ], [ %25, %.loopexit.loopexit1225 ], [ %25, %.loopexit.loopexit1226 ], [ %25, %.loopexit.loopexit1227 ]
  %groupNo.14 = phi i32 [ %26, %2721 ], [ %26, %._crit_edge ], [ %26, %._crit_edge607 ], [ %26, %._crit_edge602 ], [ %26, %._crit_edge597 ], [ %26, %._crit_edge592 ], [ %26, %240 ], [ %26, %255 ], [ %26, %._crit_edge587 ], [ %26, %._crit_edge582 ], [ %26, %._crit_edge577 ], [ %26, %._crit_edge572 ], [ %26, %._crit_edge567 ], [ %26, %._crit_edge562 ], [ %26, %._crit_edge522 ], [ %26, %895 ], [ %26, %makeMaps_d.exit ], [ %26, %._crit_edge516 ], [ %26, %._crit_edge516 ], [ %26, %._crit_edge516 ], [ %26, %._crit_edge511 ], [ %26, %1296 ], [ 0, %1459 ], [ %groupNo.2, %1516 ], [ %groupNo.2, %1569 ], [ %1592, %1591 ], [ %groupNo.8, %1652 ], [ %groupNo.8, %1705 ], [ %groupNo.4, %1755 ], [ %1919, %1918 ], [ %groupNo.12, %1979 ], [ %groupNo.12, %2032 ], [ %groupNo.4, %2041 ], [ %groupNo.4, %2300 ], [ %groupNo.4, %2313 ], [ %groupNo.4, %2245 ], [ %groupNo.4, %2251 ], [ %26, %._crit_edge381 ], [ %26, %._crit_edge376 ], [ %26, %._crit_edge371 ], [ %26, %._crit_edge366 ], [ %26, %._crit_edge361 ], [ %groupNo.4, %.loopexit98 ], [ %26, %.loopexit.loopexit ], [ %26, %.loopexit.loopexit1183 ], [ %26, %.loopexit.loopexit1184 ], [ %26, %.loopexit.loopexit1185 ], [ %26, %.loopexit.loopexit1186 ], [ %26, %.loopexit.loopexit1187 ], [ %26, %.loopexit.loopexit1188 ], [ %26, %.loopexit.loopexit1189 ], [ %26, %.loopexit.loopexit1190 ], [ %26, %.loopexit.loopexit1191 ], [ %26, %.loopexit.loopexit1192 ], [ %26, %.loopexit.loopexit1193 ], [ %26, %.loopexit.loopexit1194 ], [ %26, %.loopexit.loopexit1195 ], [ %26, %.loopexit.loopexit1196 ], [ %26, %.loopexit.loopexit1197 ], [ %groupNo.3, %.loopexit.loopexit1198 ], [ %groupNo.9, %.loopexit.loopexit1199 ], [ %groupNo.8, %.loopexit.loopexit1200 ], [ %groupNo.8, %.loopexit.loopexit1201 ], [ %groupNo.7, %.loopexit.loopexit1202 ], [ %groupNo.13, %.loopexit.loopexit1203 ], [ %groupNo.11, %.loopexit.loopexit1204 ], [ %groupNo.1, %.loopexit.loopexit1205 ], [ %26, %.loopexit.loopexit1208 ], [ %26, %.loopexit.loopexit1209 ], [ %26, %.loopexit.loopexit1210 ], [ %26, %.loopexit.loopexit1211 ], [ %26, %.loopexit.loopexit1212 ], [ %26, %.loopexit.loopexit1213 ], [ %26, %.loopexit.loopexit1214 ], [ %26, %.loopexit.loopexit1215 ], [ %26, %.loopexit.loopexit1216 ], [ %26, %.loopexit.loopexit1217 ], [ %26, %.loopexit.loopexit1218 ], [ %26, %.loopexit.loopexit1219 ], [ %26, %.loopexit.loopexit1220 ], [ %26, %.loopexit.loopexit1221 ], [ %26, %.loopexit.loopexit1222 ], [ %26, %.loopexit.loopexit1223 ], [ %26, %.loopexit.loopexit1224 ], [ %26, %.loopexit.loopexit1225 ], [ %26, %.loopexit.loopexit1226 ], [ %26, %.loopexit.loopexit1227 ]
  %EOB.11 = phi i32 [ %27, %2721 ], [ %27, %._crit_edge ], [ %27, %._crit_edge607 ], [ %27, %._crit_edge602 ], [ %27, %._crit_edge597 ], [ %27, %._crit_edge592 ], [ %27, %240 ], [ %27, %255 ], [ %27, %._crit_edge587 ], [ %27, %._crit_edge582 ], [ %27, %._crit_edge577 ], [ %27, %._crit_edge572 ], [ %27, %._crit_edge567 ], [ %27, %._crit_edge562 ], [ %27, %._crit_edge522 ], [ %27, %895 ], [ %27, %makeMaps_d.exit ], [ %27, %._crit_edge516 ], [ %27, %._crit_edge516 ], [ %27, %._crit_edge516 ], [ %27, %._crit_edge511 ], [ %27, %1296 ], [ %1405, %1459 ], [ %EOB.1, %1516 ], [ %EOB.1, %1569 ], [ %EOB.4, %1591 ], [ %EOB.6, %1652 ], [ %EOB.6, %1705 ], [ %EOB.3, %1755 ], [ %EOB.3, %1918 ], [ %EOB.9, %1979 ], [ %EOB.9, %2032 ], [ %nextSym.0, %2041 ], [ %nextSym.0, %2300 ], [ %nextSym.0, %2313 ], [ %nextSym.0, %2245 ], [ %nextSym.0, %2251 ], [ %27, %._crit_edge381 ], [ %27, %._crit_edge376 ], [ %27, %._crit_edge371 ], [ %27, %._crit_edge366 ], [ %27, %._crit_edge361 ], [ %nextSym.0, %.loopexit98 ], [ %27, %.loopexit.loopexit ], [ %27, %.loopexit.loopexit1183 ], [ %27, %.loopexit.loopexit1184 ], [ %27, %.loopexit.loopexit1185 ], [ %27, %.loopexit.loopexit1186 ], [ %27, %.loopexit.loopexit1187 ], [ %27, %.loopexit.loopexit1188 ], [ %27, %.loopexit.loopexit1189 ], [ %27, %.loopexit.loopexit1190 ], [ %27, %.loopexit.loopexit1191 ], [ %27, %.loopexit.loopexit1192 ], [ %27, %.loopexit.loopexit1193 ], [ %27, %.loopexit.loopexit1194 ], [ %27, %.loopexit.loopexit1195 ], [ %27, %.loopexit.loopexit1196 ], [ %27, %.loopexit.loopexit1197 ], [ %EOB.2, %.loopexit.loopexit1198 ], [ %EOB.7, %.loopexit.loopexit1199 ], [ %EOB.6, %.loopexit.loopexit1200 ], [ %EOB.6, %.loopexit.loopexit1201 ], [ %EOB.5, %.loopexit.loopexit1202 ], [ %EOB.10, %.loopexit.loopexit1203 ], [ %EOB.8, %.loopexit.loopexit1204 ], [ %EOB.0, %.loopexit.loopexit1205 ], [ %27, %.loopexit.loopexit1208 ], [ %27, %.loopexit.loopexit1209 ], [ %27, %.loopexit.loopexit1210 ], [ %27, %.loopexit.loopexit1211 ], [ %27, %.loopexit.loopexit1212 ], [ %27, %.loopexit.loopexit1213 ], [ %27, %.loopexit.loopexit1214 ], [ %27, %.loopexit.loopexit1215 ], [ %27, %.loopexit.loopexit1216 ], [ %27, %.loopexit.loopexit1217 ], [ %27, %.loopexit.loopexit1218 ], [ %27, %.loopexit.loopexit1219 ], [ %27, %.loopexit.loopexit1220 ], [ %27, %.loopexit.loopexit1221 ], [ %27, %.loopexit.loopexit1222 ], [ %27, %.loopexit.loopexit1223 ], [ %27, %.loopexit.loopexit1224 ], [ %27, %.loopexit.loopexit1225 ], [ %27, %.loopexit.loopexit1226 ], [ %27, %.loopexit.loopexit1227 ]
  %nSelectors.19 = phi i32 [ %28, %2721 ], [ %28, %._crit_edge ], [ %28, %._crit_edge607 ], [ %28, %._crit_edge602 ], [ %28, %._crit_edge597 ], [ %28, %._crit_edge592 ], [ %28, %240 ], [ %28, %255 ], [ %28, %._crit_edge587 ], [ %28, %._crit_edge582 ], [ %28, %._crit_edge577 ], [ %28, %._crit_edge572 ], [ %28, %._crit_edge567 ], [ %28, %._crit_edge562 ], [ %28, %._crit_edge522 ], [ %28, %895 ], [ %28, %makeMaps_d.exit ], [ %28, %._crit_edge516 ], [ %28, %._crit_edge516 ], [ %28, %._crit_edge516 ], [ 0, %._crit_edge511 ], [ %nSelectors.5, %1296 ], [ %nSelectors.2, %1459 ], [ %nSelectors.9, %1516 ], [ %nSelectors.9, %1569 ], [ %nSelectors.12, %1591 ], [ %nSelectors.14, %1652 ], [ %nSelectors.14, %1705 ], [ %nSelectors.11, %1755 ], [ %nSelectors.11, %1918 ], [ %nSelectors.17, %1979 ], [ %nSelectors.17, %2032 ], [ %nSelectors.11, %2041 ], [ %nSelectors.11, %2300 ], [ %nSelectors.11, %2313 ], [ %nSelectors.11, %2245 ], [ %nSelectors.11, %2251 ], [ %28, %._crit_edge381 ], [ %28, %._crit_edge376 ], [ %28, %._crit_edge371 ], [ %28, %._crit_edge366 ], [ %28, %._crit_edge361 ], [ %nSelectors.11, %.loopexit98 ], [ %28, %.loopexit.loopexit ], [ %28, %.loopexit.loopexit1183 ], [ %28, %.loopexit.loopexit1184 ], [ %28, %.loopexit.loopexit1185 ], [ %28, %.loopexit.loopexit1186 ], [ %28, %.loopexit.loopexit1187 ], [ %28, %.loopexit.loopexit1188 ], [ %28, %.loopexit.loopexit1189 ], [ %28, %.loopexit.loopexit1190 ], [ %28, %.loopexit.loopexit1191 ], [ %28, %.loopexit.loopexit1192 ], [ %nSelectors.1.ph, %.loopexit.loopexit1193 ], [ %nSelectors.1.ph, %.loopexit.loopexit1194 ], [ %nSelectors.7, %.loopexit.loopexit1195 ], [ %nSelectors.6, %.loopexit.loopexit1196 ], [ %nSelectors.3, %.loopexit.loopexit1197 ], [ %nSelectors.10, %.loopexit.loopexit1198 ], [ %nSelectors.15, %.loopexit.loopexit1199 ], [ %nSelectors.14, %.loopexit.loopexit1200 ], [ %nSelectors.14, %.loopexit.loopexit1201 ], [ %nSelectors.13, %.loopexit.loopexit1202 ], [ %nSelectors.18, %.loopexit.loopexit1203 ], [ %nSelectors.16, %.loopexit.loopexit1204 ], [ %nSelectors.8, %.loopexit.loopexit1205 ], [ %28, %.loopexit.loopexit1208 ], [ %28, %.loopexit.loopexit1209 ], [ %28, %.loopexit.loopexit1210 ], [ %28, %.loopexit.loopexit1211 ], [ %28, %.loopexit.loopexit1212 ], [ %28, %.loopexit.loopexit1213 ], [ %28, %.loopexit.loopexit1214 ], [ %28, %.loopexit.loopexit1215 ], [ %28, %.loopexit.loopexit1216 ], [ %28, %.loopexit.loopexit1217 ], [ %28, %.loopexit.loopexit1218 ], [ %28, %.loopexit.loopexit1219 ], [ %28, %.loopexit.loopexit1220 ], [ %28, %.loopexit.loopexit1221 ], [ %28, %.loopexit.loopexit1222 ], [ %28, %.loopexit.loopexit1223 ], [ %28, %.loopexit.loopexit1224 ], [ %28, %.loopexit.loopexit1225 ], [ %28, %.loopexit.loopexit1226 ], [ %28, %.loopexit.loopexit1227 ]
  %nGroups.20 = phi i32 [ %29, %2721 ], [ %29, %._crit_edge ], [ %29, %._crit_edge607 ], [ %29, %._crit_edge602 ], [ %29, %._crit_edge597 ], [ %29, %._crit_edge592 ], [ %29, %240 ], [ %29, %255 ], [ %29, %._crit_edge587 ], [ %29, %._crit_edge582 ], [ %29, %._crit_edge577 ], [ %29, %._crit_edge572 ], [ %29, %._crit_edge567 ], [ %29, %._crit_edge562 ], [ %29, %._crit_edge522 ], [ %29, %895 ], [ %29, %makeMaps_d.exit ], [ %1037, %._crit_edge516 ], [ %1037, %._crit_edge516 ], [ %1037, %._crit_edge516 ], [ %nGroups.0, %._crit_edge511 ], [ %nGroups.6, %1296 ], [ %nGroups.3, %1459 ], [ %nGroups.10, %1516 ], [ %nGroups.10, %1569 ], [ %nGroups.13, %1591 ], [ %nGroups.15, %1652 ], [ %nGroups.15, %1705 ], [ %nGroups.12, %1755 ], [ %nGroups.12, %1918 ], [ %nGroups.18, %1979 ], [ %nGroups.18, %2032 ], [ %nGroups.12, %2041 ], [ %nGroups.12, %2300 ], [ %nGroups.12, %2313 ], [ %nGroups.12, %2245 ], [ %nGroups.12, %2251 ], [ %29, %._crit_edge381 ], [ %29, %._crit_edge376 ], [ %29, %._crit_edge371 ], [ %29, %._crit_edge366 ], [ %29, %._crit_edge361 ], [ %nGroups.12, %.loopexit98 ], [ %29, %.loopexit.loopexit ], [ %29, %.loopexit.loopexit1183 ], [ %29, %.loopexit.loopexit1184 ], [ %29, %.loopexit.loopexit1185 ], [ %29, %.loopexit.loopexit1186 ], [ %29, %.loopexit.loopexit1187 ], [ %29, %.loopexit.loopexit1188 ], [ %29, %.loopexit.loopexit1189 ], [ %29, %.loopexit.loopexit1190 ], [ %29, %.loopexit.loopexit1191 ], [ %29, %.loopexit.loopexit1192 ], [ %nGroups.2.ph, %.loopexit.loopexit1193 ], [ %nGroups.2.ph, %.loopexit.loopexit1194 ], [ %nGroups.8, %.loopexit.loopexit1195 ], [ %nGroups.7, %.loopexit.loopexit1196 ], [ %nGroups.4, %.loopexit.loopexit1197 ], [ %nGroups.11, %.loopexit.loopexit1198 ], [ %nGroups.16, %.loopexit.loopexit1199 ], [ %nGroups.15, %.loopexit.loopexit1200 ], [ %nGroups.15, %.loopexit.loopexit1201 ], [ %nGroups.14, %.loopexit.loopexit1202 ], [ %nGroups.19, %.loopexit.loopexit1203 ], [ %nGroups.17, %.loopexit.loopexit1204 ], [ %nGroups.9, %.loopexit.loopexit1205 ], [ %nGroups.0, %.loopexit.loopexit1208 ], [ %29, %.loopexit.loopexit1209 ], [ %29, %.loopexit.loopexit1210 ], [ %29, %.loopexit.loopexit1211 ], [ %29, %.loopexit.loopexit1212 ], [ %29, %.loopexit.loopexit1213 ], [ %29, %.loopexit.loopexit1214 ], [ %29, %.loopexit.loopexit1215 ], [ %29, %.loopexit.loopexit1216 ], [ %29, %.loopexit.loopexit1217 ], [ %29, %.loopexit.loopexit1218 ], [ %29, %.loopexit.loopexit1219 ], [ %29, %.loopexit.loopexit1220 ], [ %29, %.loopexit.loopexit1221 ], [ %29, %.loopexit.loopexit1222 ], [ %29, %.loopexit.loopexit1223 ], [ %29, %.loopexit.loopexit1224 ], [ %29, %.loopexit.loopexit1225 ], [ %29, %.loopexit.loopexit1226 ], [ %29, %.loopexit.loopexit1227 ]
  %alphaSize.21 = phi i32 [ %30, %2721 ], [ %30, %._crit_edge ], [ %30, %._crit_edge607 ], [ %30, %._crit_edge602 ], [ %30, %._crit_edge597 ], [ %30, %._crit_edge592 ], [ %30, %240 ], [ %30, %255 ], [ %30, %._crit_edge587 ], [ %30, %._crit_edge582 ], [ %30, %._crit_edge577 ], [ %30, %._crit_edge572 ], [ %30, %._crit_edge567 ], [ %30, %._crit_edge562 ], [ %30, %._crit_edge522 ], [ %30, %895 ], [ %30, %makeMaps_d.exit ], [ %alphaSize.0, %._crit_edge516 ], [ %alphaSize.0, %._crit_edge516 ], [ %alphaSize.0, %._crit_edge516 ], [ %alphaSize.1, %._crit_edge511 ], [ %alphaSize.7, %1296 ], [ %alphaSize.4, %1459 ], [ %alphaSize.11, %1516 ], [ %alphaSize.11, %1569 ], [ %alphaSize.14, %1591 ], [ %alphaSize.16, %1652 ], [ %alphaSize.16, %1705 ], [ %alphaSize.13, %1755 ], [ %alphaSize.13, %1918 ], [ %alphaSize.19, %1979 ], [ %alphaSize.19, %2032 ], [ %alphaSize.13, %2041 ], [ %alphaSize.13, %2300 ], [ %alphaSize.13, %2313 ], [ %alphaSize.13, %2245 ], [ %alphaSize.13, %2251 ], [ %30, %._crit_edge381 ], [ %30, %._crit_edge376 ], [ %30, %._crit_edge371 ], [ %30, %._crit_edge366 ], [ %30, %._crit_edge361 ], [ %alphaSize.13, %.loopexit98 ], [ %30, %.loopexit.loopexit ], [ %30, %.loopexit.loopexit1183 ], [ %30, %.loopexit.loopexit1184 ], [ %30, %.loopexit.loopexit1185 ], [ %30, %.loopexit.loopexit1186 ], [ %30, %.loopexit.loopexit1187 ], [ %30, %.loopexit.loopexit1188 ], [ %30, %.loopexit.loopexit1189 ], [ %30, %.loopexit.loopexit1190 ], [ %30, %.loopexit.loopexit1191 ], [ %30, %.loopexit.loopexit1192 ], [ %alphaSize.3.ph, %.loopexit.loopexit1193 ], [ %alphaSize.3.ph, %.loopexit.loopexit1194 ], [ %alphaSize.9, %.loopexit.loopexit1195 ], [ %alphaSize.8, %.loopexit.loopexit1196 ], [ %alphaSize.5, %.loopexit.loopexit1197 ], [ %alphaSize.12, %.loopexit.loopexit1198 ], [ %alphaSize.17, %.loopexit.loopexit1199 ], [ %alphaSize.16, %.loopexit.loopexit1200 ], [ %alphaSize.16, %.loopexit.loopexit1201 ], [ %alphaSize.15, %.loopexit.loopexit1202 ], [ %alphaSize.20, %.loopexit.loopexit1203 ], [ %alphaSize.18, %.loopexit.loopexit1204 ], [ %alphaSize.10, %.loopexit.loopexit1205 ], [ %alphaSize.1, %.loopexit.loopexit1208 ], [ %alphaSize.0, %.loopexit.loopexit1209 ], [ %30, %.loopexit.loopexit1210 ], [ %30, %.loopexit.loopexit1211 ], [ %30, %.loopexit.loopexit1212 ], [ %30, %.loopexit.loopexit1213 ], [ %30, %.loopexit.loopexit1214 ], [ %30, %.loopexit.loopexit1215 ], [ %30, %.loopexit.loopexit1216 ], [ %30, %.loopexit.loopexit1217 ], [ %30, %.loopexit.loopexit1218 ], [ %30, %.loopexit.loopexit1219 ], [ %30, %.loopexit.loopexit1220 ], [ %30, %.loopexit.loopexit1221 ], [ %30, %.loopexit.loopexit1222 ], [ %30, %.loopexit.loopexit1223 ], [ %30, %.loopexit.loopexit1224 ], [ %30, %.loopexit.loopexit1225 ], [ %30, %.loopexit.loopexit1226 ], [ %30, %.loopexit.loopexit1227 ]
  %t.18 = phi i32 [ %31, %2721 ], [ %31, %._crit_edge ], [ %31, %._crit_edge607 ], [ %31, %._crit_edge602 ], [ %31, %._crit_edge597 ], [ %31, %._crit_edge592 ], [ %31, %240 ], [ %31, %255 ], [ %31, %._crit_edge587 ], [ %31, %._crit_edge582 ], [ %31, %._crit_edge577 ], [ %31, %._crit_edge572 ], [ %31, %._crit_edge567 ], [ %31, %._crit_edge562 ], [ %31, %._crit_edge522 ], [ %31, %895 ], [ %31, %makeMaps_d.exit ], [ %31, %._crit_edge516 ], [ %31, %._crit_edge516 ], [ %31, %._crit_edge516 ], [ %31, %._crit_edge511 ], [ %t.3, %1296 ], [ %t.6.lcssa, %1459 ], [ %t.8, %1516 ], [ %t.8, %1569 ], [ %t.11, %1591 ], [ %t.13, %1652 ], [ %t.13, %1705 ], [ %t.10, %1755 ], [ %t.10, %1918 ], [ %t.16, %1979 ], [ %t.16, %2032 ], [ %t.10, %2041 ], [ %t.10, %2300 ], [ %t.10, %2313 ], [ %t.10, %2245 ], [ %t.10, %2251 ], [ %31, %._crit_edge381 ], [ %31, %._crit_edge376 ], [ %31, %._crit_edge371 ], [ %31, %._crit_edge366 ], [ %31, %._crit_edge361 ], [ %t.10, %.loopexit98 ], [ %31, %.loopexit.loopexit ], [ %31, %.loopexit.loopexit1183 ], [ %31, %.loopexit.loopexit1184 ], [ %31, %.loopexit.loopexit1185 ], [ %31, %.loopexit.loopexit1186 ], [ %31, %.loopexit.loopexit1187 ], [ %31, %.loopexit.loopexit1188 ], [ %31, %.loopexit.loopexit1189 ], [ %31, %.loopexit.loopexit1190 ], [ %31, %.loopexit.loopexit1191 ], [ %31, %.loopexit.loopexit1192 ], [ %31, %.loopexit.loopexit1193 ], [ %31, %.loopexit.loopexit1194 ], [ %t.5, %.loopexit.loopexit1195 ], [ %t.4, %.loopexit.loopexit1196 ], [ %t.1, %.loopexit.loopexit1197 ], [ %t.9, %.loopexit.loopexit1198 ], [ %t.14, %.loopexit.loopexit1199 ], [ %t.13, %.loopexit.loopexit1200 ], [ %t.13, %.loopexit.loopexit1201 ], [ %t.12, %.loopexit.loopexit1202 ], [ %t.17, %.loopexit.loopexit1203 ], [ %t.15, %.loopexit.loopexit1204 ], [ %t.7, %.loopexit.loopexit1205 ], [ %31, %.loopexit.loopexit1208 ], [ %31, %.loopexit.loopexit1209 ], [ %31, %.loopexit.loopexit1210 ], [ %31, %.loopexit.loopexit1211 ], [ %31, %.loopexit.loopexit1212 ], [ %31, %.loopexit.loopexit1213 ], [ %31, %.loopexit.loopexit1214 ], [ %31, %.loopexit.loopexit1215 ], [ %31, %.loopexit.loopexit1216 ], [ %31, %.loopexit.loopexit1217 ], [ %31, %.loopexit.loopexit1218 ], [ %31, %.loopexit.loopexit1219 ], [ %31, %.loopexit.loopexit1220 ], [ %31, %.loopexit.loopexit1221 ], [ %31, %.loopexit.loopexit1222 ], [ %31, %.loopexit.loopexit1223 ], [ %31, %.loopexit.loopexit1224 ], [ %31, %.loopexit.loopexit1225 ], [ %31, %.loopexit.loopexit1226 ], [ %31, %.loopexit.loopexit1227 ]
  %j.27 = phi i32 [ %32, %2721 ], [ %32, %._crit_edge ], [ %32, %._crit_edge607 ], [ %32, %._crit_edge602 ], [ %32, %._crit_edge597 ], [ %32, %._crit_edge592 ], [ %32, %240 ], [ %32, %255 ], [ %32, %._crit_edge587 ], [ %32, %._crit_edge582 ], [ %32, %._crit_edge577 ], [ %32, %._crit_edge572 ], [ %32, %._crit_edge567 ], [ %32, %._crit_edge562 ], [ %32, %._crit_edge522 ], [ %32, %895 ], [ %j.0, %makeMaps_d.exit ], [ %j.4, %._crit_edge516 ], [ %j.4, %._crit_edge516 ], [ %j.4, %._crit_edge516 ], [ %j.5, %._crit_edge511 ], [ %j.11, %1296 ], [ %j.8, %1459 ], [ %j.15, %1516 ], [ %j.15, %1569 ], [ %j.18, %1591 ], [ %j.20, %1652 ], [ %j.20, %1705 ], [ %j.17, %1755 ], [ %j.17, %1918 ], [ %j.23, %1979 ], [ %j.23, %2032 ], [ %j.17, %2041 ], [ %j.17, %2300 ], [ %j.17, %2313 ], [ %.lcssa1247, %2245 ], [ %.lcssa1247, %2251 ], [ %32, %._crit_edge381 ], [ %32, %._crit_edge376 ], [ %32, %._crit_edge371 ], [ %32, %._crit_edge366 ], [ %32, %._crit_edge361 ], [ %j.17, %.loopexit98 ], [ %32, %.loopexit.loopexit ], [ %32, %.loopexit.loopexit1183 ], [ %32, %.loopexit.loopexit1184 ], [ %32, %.loopexit.loopexit1185 ], [ %32, %.loopexit.loopexit1186 ], [ %32, %.loopexit.loopexit1187 ], [ %32, %.loopexit.loopexit1188 ], [ %32, %.loopexit.loopexit1189 ], [ %32, %.loopexit.loopexit1190 ], [ %32, %.loopexit.loopexit1191 ], [ %j.2, %.loopexit.loopexit1192 ], [ %j.7.lcssa, %.loopexit.loopexit1193 ], [ %.lcssa1241, %.loopexit.loopexit1194 ], [ %j.13, %.loopexit.loopexit1195 ], [ %j.12, %.loopexit.loopexit1196 ], [ %j.9, %.loopexit.loopexit1197 ], [ %j.16, %.loopexit.loopexit1198 ], [ %j.21, %.loopexit.loopexit1199 ], [ %j.20, %.loopexit.loopexit1200 ], [ %j.20, %.loopexit.loopexit1201 ], [ %j.19, %.loopexit.loopexit1202 ], [ %j.24, %.loopexit.loopexit1203 ], [ %j.22, %.loopexit.loopexit1204 ], [ %j.14, %.loopexit.loopexit1205 ], [ %j.5, %.loopexit.loopexit1208 ], [ %j.4, %.loopexit.loopexit1209 ], [ %32, %.loopexit.loopexit1210 ], [ %32, %.loopexit.loopexit1211 ], [ %32, %.loopexit.loopexit1212 ], [ %32, %.loopexit.loopexit1213 ], [ %32, %.loopexit.loopexit1214 ], [ %32, %.loopexit.loopexit1215 ], [ %32, %.loopexit.loopexit1216 ], [ %32, %.loopexit.loopexit1217 ], [ %32, %.loopexit.loopexit1218 ], [ %32, %.loopexit.loopexit1219 ], [ %32, %.loopexit.loopexit1220 ], [ %32, %.loopexit.loopexit1221 ], [ %32, %.loopexit.loopexit1222 ], [ %32, %.loopexit.loopexit1223 ], [ %32, %.loopexit.loopexit1224 ], [ %32, %.loopexit.loopexit1225 ], [ %32, %.loopexit.loopexit1226 ], [ %32, %.loopexit.loopexit1227 ]
  %i.39 = phi i32 [ %33, %2721 ], [ %33, %._crit_edge ], [ %33, %._crit_edge607 ], [ %33, %._crit_edge602 ], [ %33, %._crit_edge597 ], [ %33, %._crit_edge592 ], [ %33, %240 ], [ %33, %255 ], [ %33, %._crit_edge587 ], [ %33, %._crit_edge582 ], [ %33, %._crit_edge577 ], [ %33, %._crit_edge572 ], [ %33, %._crit_edge567 ], [ %33, %._crit_edge562 ], [ %33, %._crit_edge522 ], [ %33, %895 ], [ %i.3, %makeMaps_d.exit ], [ %i.7, %._crit_edge516 ], [ %i.7, %._crit_edge516 ], [ %i.7, %._crit_edge516 ], [ %i.8, %._crit_edge511 ], [ %i.15, %1296 ], [ 256, %1459 ], [ %i.21, %1516 ], [ %i.21, %1569 ], [ %i.24, %1591 ], [ %i.26, %1652 ], [ %i.26, %1705 ], [ %i.23, %1755 ], [ %i.23, %1918 ], [ %i.29, %1979 ], [ %i.29, %2032 ], [ %i.23, %2041 ], [ %i.37.lcssa, %2300 ], [ %i.37.lcssa, %2313 ], [ %.lcssa1246, %2245 ], [ %.lcssa1246, %2251 ], [ %33, %._crit_edge381 ], [ %33, %._crit_edge376 ], [ %33, %._crit_edge371 ], [ %33, %._crit_edge366 ], [ %33, %._crit_edge361 ], [ %2722, %.loopexit98 ], [ %33, %.loopexit.loopexit ], [ %33, %.loopexit.loopexit1183 ], [ %33, %.loopexit.loopexit1184 ], [ %33, %.loopexit.loopexit1185 ], [ %33, %.loopexit.loopexit1186 ], [ %33, %.loopexit.loopexit1187 ], [ %33, %.loopexit.loopexit1188 ], [ %33, %.loopexit.loopexit1189 ], [ %33, %.loopexit.loopexit1190 ], [ %i.1, %.loopexit.loopexit1191 ], [ %i.5, %.loopexit.loopexit1192 ], [ %i.10.ph, %.loopexit.loopexit1193 ], [ %i.10.ph, %.loopexit.loopexit1194 ], [ %i.17, %.loopexit.loopexit1195 ], [ %i.16, %.loopexit.loopexit1196 ], [ %i.13, %.loopexit.loopexit1197 ], [ %i.22, %.loopexit.loopexit1198 ], [ %i.27, %.loopexit.loopexit1199 ], [ %i.26, %.loopexit.loopexit1200 ], [ %i.26, %.loopexit.loopexit1201 ], [ %i.25, %.loopexit.loopexit1202 ], [ %i.30, %.loopexit.loopexit1203 ], [ %i.28, %.loopexit.loopexit1204 ], [ %i.20, %.loopexit.loopexit1205 ], [ %i.8, %.loopexit.loopexit1208 ], [ %i.7, %.loopexit.loopexit1209 ], [ %33, %.loopexit.loopexit1210 ], [ %33, %.loopexit.loopexit1211 ], [ %33, %.loopexit.loopexit1212 ], [ %33, %.loopexit.loopexit1213 ], [ %33, %.loopexit.loopexit1214 ], [ %33, %.loopexit.loopexit1215 ], [ %33, %.loopexit.loopexit1216 ], [ %33, %.loopexit.loopexit1217 ], [ %33, %.loopexit.loopexit1218 ], [ %33, %.loopexit.loopexit1219 ], [ %33, %.loopexit.loopexit1220 ], [ %33, %.loopexit.loopexit1221 ], [ %33, %.loopexit.loopexit1222 ], [ %33, %.loopexit.loopexit1223 ], [ %33, %.loopexit.loopexit1224 ], [ %33, %.loopexit.loopexit1225 ], [ %33, %.loopexit.loopexit1226 ], [ %33, %.loopexit.loopexit1227 ]
  %retVal.0 = phi i32 [ 0, %2721 ], [ 4, %._crit_edge ], [ -5, %._crit_edge607 ], [ -5, %._crit_edge602 ], [ -5, %._crit_edge597 ], [ -5, %._crit_edge592 ], [ -3, %240 ], [ -3, %255 ], [ -4, %._crit_edge587 ], [ -4, %._crit_edge582 ], [ -4, %._crit_edge577 ], [ -4, %._crit_edge572 ], [ -4, %._crit_edge567 ], [ -4, %._crit_edge562 ], [ -4, %._crit_edge522 ], [ -4, %895 ], [ -4, %makeMaps_d.exit ], [ -4, %._crit_edge516 ], [ -4, %._crit_edge516 ], [ -4, %._crit_edge516 ], [ -4, %._crit_edge511 ], [ -4, %1296 ], [ -4, %1459 ], [ -4, %1516 ], [ -4, %1569 ], [ -4, %1591 ], [ -4, %1652 ], [ -4, %1705 ], [ -4, %1755 ], [ -4, %1918 ], [ -4, %1979 ], [ -4, %2032 ], [ -4, %2041 ], [ 0, %2300 ], [ 0, %2313 ], [ 0, %2245 ], [ 0, %2251 ], [ -4, %._crit_edge381 ], [ -4, %._crit_edge376 ], [ -4, %._crit_edge371 ], [ -4, %._crit_edge366 ], [ -4, %._crit_edge361 ], [ -4, %.loopexit98 ], [ 0, %.loopexit.loopexit ], [ 0, %.loopexit.loopexit1183 ], [ 0, %.loopexit.loopexit1184 ], [ 0, %.loopexit.loopexit1185 ], [ 0, %.loopexit.loopexit1186 ], [ 0, %.loopexit.loopexit1187 ], [ 0, %.loopexit.loopexit1188 ], [ 0, %.loopexit.loopexit1189 ], [ 0, %.loopexit.loopexit1190 ], [ 0, %.loopexit.loopexit1191 ], [ 0, %.loopexit.loopexit1192 ], [ 0, %.loopexit.loopexit1193 ], [ -4, %.loopexit.loopexit1194 ], [ 0, %.loopexit.loopexit1195 ], [ 0, %.loopexit.loopexit1196 ], [ 0, %.loopexit.loopexit1197 ], [ 0, %.loopexit.loopexit1198 ], [ 0, %.loopexit.loopexit1199 ], [ -4, %.loopexit.loopexit1200 ], [ -4, %.loopexit.loopexit1201 ], [ 0, %.loopexit.loopexit1202 ], [ 0, %.loopexit.loopexit1203 ], [ 0, %.loopexit.loopexit1204 ], [ 0, %.loopexit.loopexit1205 ], [ 0, %.loopexit.loopexit1208 ], [ 0, %.loopexit.loopexit1209 ], [ 0, %.loopexit.loopexit1210 ], [ 0, %.loopexit.loopexit1211 ], [ 0, %.loopexit.loopexit1212 ], [ 0, %.loopexit.loopexit1213 ], [ 0, %.loopexit.loopexit1214 ], [ 0, %.loopexit.loopexit1215 ], [ 0, %.loopexit.loopexit1216 ], [ 0, %.loopexit.loopexit1217 ], [ 0, %.loopexit.loopexit1218 ], [ 0, %.loopexit.loopexit1219 ], [ 0, %.loopexit.loopexit1220 ], [ 0, %.loopexit.loopexit1221 ], [ 0, %.loopexit.loopexit1222 ], [ 0, %.loopexit.loopexit1223 ], [ 0, %.loopexit.loopexit1224 ], [ 0, %.loopexit.loopexit1225 ], [ 0, %.loopexit.loopexit1226 ], [ 0, %.loopexit.loopexit1227 ]
  store i32 %i.39, i32* %34, align 4
  store i32 %j.27, i32* %35, align 4
  store i32 %t.18, i32* %36, align 4
  store i32 %alphaSize.21, i32* %37, align 4
  store i32 %nGroups.20, i32* %38, align 4
  store i32 %nSelectors.19, i32* %39, align 4
  store i32 %EOB.11, i32* %40, align 4
  store i32 %groupNo.14, i32* %41, align 4
  store i32 %groupPos.14, i32* %42, align 4
  store i32 %nextSym.8, i32* %43, align 4
  store i32 %nblockMAX.11, i32* %44, align 4
  store i32 %nblock.13, i32* %45, align 4
  store i32 %es.11, i32* %46, align 4
  store i32 %N.8, i32* %47, align 4
  store i32 %curr.17, i32* %48, align 4
  store i32 %18, i32* %49, align 4
  store i32 %zn.11, i32* %50, align 4
  store i32 %zvec.10, i32* %51, align 4
  store i32 %zj.10, i32* %52, align 4
  store i32 %gSel.14, i32* %53, align 4
  store i32 %gMinlen.14, i32* %54, align 4
  store i32* %gLimit.14, i32** %55, align 8
  store i32* %gBase.14, i32** %56, align 8
  store i32* %gPerm.14, i32** %57, align 8
  ret i32 %retVal.0

; <label>:2723                                    ; preds = %1022
  %2724 = trunc i64 %indvars.iv.next.i to i8
  %2725 = sext i32 %1023 to i64
  %2726 = getelementptr inbounds %struct.DState* %s, i64 0, i32 30, i64 %2725
  store i8 %2724, i8* %2726, align 1
  %2727 = load i32* %1010, align 4
  %2728 = add nsw i32 %2727, 1
  store i32 %2728, i32* %1010, align 4
  br label %2729

; <label>:2729                                    ; preds = %2723, %1022
  %2730 = phi i32 [ %1023, %1022 ], [ %2728, %2723 ]
  %indvars.iv.next.i.1 = add nuw nsw i64 %indvars.iv.next.i, 1
  %exitcond.i.1 = icmp eq i64 %indvars.iv.next.i.1, 256
  br i1 %exitcond.i.1, label %makeMaps_d.exit, label %1011
}

; Function Attrs: nounwind uwtable
define void @BZ2_hbMakeCodeLengths(i8* nocapture %len, i32* nocapture readonly %freq, i32 %alphaSize, i32 %maxLen) #0 {
  %heap = alloca [260 x i32], align 16
  %weight = alloca [516 x i32], align 16
  %parent = alloca [516 x i32], align 16
  %1 = bitcast [260 x i32]* %heap to i8*
  call void @llvm.lifetime.start(i64 1040, i8* %1) #2
  %2 = bitcast [516 x i32]* %weight to i8*
  call void @llvm.lifetime.start(i64 2064, i8* %2) #2
  %3 = bitcast [516 x i32]* %parent to i8*
  call void @llvm.lifetime.start(i64 2064, i8* %3) #2
  %4 = icmp sgt i32 %alphaSize, 0
  br i1 %4, label %overflow.checked, label %.preheader13

overflow.checked:                                 ; preds = %0
  %5 = add i32 %alphaSize, -1
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i64 %6, 1
  %end.idx = add nuw nsw i64 %6, 1
  %n.vec = and i64 %7, 8589934584
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %8 = getelementptr inbounds i32* %freq, i64 %index
  %9 = bitcast i32* %8 to <4 x i32>*
  %wide.load = load <4 x i32>* %9, align 4
  %.sum115 = or i64 %index, 4
  %10 = getelementptr i32* %freq, i64 %.sum115
  %11 = bitcast i32* %10 to <4 x i32>*
  %wide.load86 = load <4 x i32>* %11, align 4
  %12 = icmp eq <4 x i32> %wide.load, zeroinitializer
  %13 = icmp eq <4 x i32> %wide.load86, zeroinitializer
  %14 = shl <4 x i32> %wide.load, <i32 8, i32 8, i32 8, i32 8>
  %15 = shl <4 x i32> %wide.load86, <i32 8, i32 8, i32 8, i32 8>
  %16 = select <4 x i1> %12, <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32> %14
  %17 = select <4 x i1> %13, <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32> %15
  %18 = or i64 %index, 1
  %19 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %18
  %20 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %16, <4 x i32>* %20, align 4
  %.sum116 = or i64 %index, 5
  %21 = getelementptr [516 x i32]* %weight, i64 0, i64 %.sum116
  %22 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %22, align 4
  %index.next = add i64 %index, 8
  %23 = icmp eq i64 %index.next, %n.vec
  br i1 %23, label %middle.block.loopexit, label %vector.body, !llvm.loop !32

middle.block.loopexit:                            ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i64 [ 0, %overflow.checked ], [ %n.vec, %middle.block.loopexit ]
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %.preheader13, label %.lr.ph52.preheader

.lr.ph52.preheader:                               ; preds = %middle.block
  %24 = add i32 %alphaSize, 1
  %25 = add i64 %resume.val, 1
  %26 = trunc i64 %25 to i32
  %27 = sub i32 %24, %26
  %xtraiter123 = and i32 %27, 1
  %lcmp.mod124 = icmp ne i32 %xtraiter123, 0
  %lcmp.overflow125 = icmp eq i32 %27, 0
  %lcmp.or126 = or i1 %lcmp.overflow125, %lcmp.mod124
  br i1 %lcmp.or126, label %.lr.ph52.unr, label %.lr.ph52.preheader.split

.lr.ph52.unr:                                     ; preds = %.lr.ph52.preheader
  %28 = getelementptr inbounds i32* %freq, i64 %resume.val
  %29 = load i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  %phitmp.unr = shl i32 %29, 8
  %.phitmp.unr = select i1 %30, i32 256, i32 %phitmp.unr
  %indvars.iv.next79.unr = add nuw nsw i64 %resume.val, 1
  %31 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv.next79.unr
  store i32 %.phitmp.unr, i32* %31, align 4
  %lftr.wideiv80.unr = trunc i64 %indvars.iv.next79.unr to i32
  %exitcond81.unr = icmp eq i32 %lftr.wideiv80.unr, %alphaSize
  br label %.lr.ph52.preheader.split

.lr.ph52.preheader.split:                         ; preds = %.lr.ph52.unr, %.lr.ph52.preheader
  %indvars.iv78.unr = phi i64 [ %resume.val, %.lr.ph52.preheader ], [ %indvars.iv.next79.unr, %.lr.ph52.unr ]
  %32 = icmp ult i32 %27, 2
  br i1 %32, label %.preheader13.loopexit, label %.lr.ph52.preheader.split.split

.lr.ph52.preheader.split.split:                   ; preds = %.lr.ph52.preheader.split
  br label %.lr.ph52

.preheader13.loopexit.unr-lcssa:                  ; preds = %.lr.ph52
  br label %.preheader13.loopexit

.preheader13.loopexit:                            ; preds = %.preheader13.loopexit.unr-lcssa, %.lr.ph52.preheader.split
  br label %.preheader13

.preheader13:                                     ; preds = %.preheader13.loopexit, %middle.block, %0
  %33 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 0
  %34 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 0
  %35 = getelementptr inbounds [516 x i32]* %parent, i64 0, i64 0
  %36 = icmp slt i32 %alphaSize, 1
  %37 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 1
  %38 = sext i32 %alphaSize to i64
  %39 = add i32 %alphaSize, 1
  %40 = add i32 %alphaSize, -1
  %41 = zext i32 %40 to i64
  %42 = add nuw nsw i64 %41, 1
  %43 = zext i32 %40 to i64
  %44 = add i64 %43, 1
  %45 = lshr i64 %44, 2
  %46 = mul i64 %45, 4
  %47 = add i64 %46, -4
  %48 = lshr i64 %47, 2
  %49 = add i64 %48, 1
  %50 = add i32 %alphaSize, 2
  br label %.loopexit

.lr.ph52:                                         ; preds = %.lr.ph52, %.lr.ph52.preheader.split.split
  %indvars.iv78 = phi i64 [ %indvars.iv78.unr, %.lr.ph52.preheader.split.split ], [ %indvars.iv.next79.1, %.lr.ph52 ]
  %51 = getelementptr inbounds i32* %freq, i64 %indvars.iv78
  %52 = load i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  %phitmp = shl i32 %52, 8
  %.phitmp = select i1 %53, i32 256, i32 %phitmp
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %54 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv.next79
  store i32 %.phitmp, i32* %54, align 4
  %lftr.wideiv80 = trunc i64 %indvars.iv.next79 to i32
  %55 = getelementptr inbounds i32* %freq, i64 %indvars.iv.next79
  %56 = load i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  %phitmp.1 = shl i32 %56, 8
  %.phitmp.1 = select i1 %57, i32 256, i32 %phitmp.1
  %indvars.iv.next79.1 = add nuw nsw i64 %indvars.iv.next79, 1
  %58 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv.next79.1
  store i32 %.phitmp.1, i32* %58, align 4
  %lftr.wideiv80.1 = trunc i64 %indvars.iv.next79.1 to i32
  %exitcond81.1 = icmp eq i32 %lftr.wideiv80.1, %alphaSize
  br i1 %exitcond81.1, label %.preheader13.loopexit.unr-lcssa, label %.lr.ph52, !llvm.loop !33

.loopexit.loopexit.unr-lcssa:                     ; preds = %.lr.ph49
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph49.preheader.split, %.loopexit.loopexit.unr-lcssa
  br label %.loopexit.backedge

.loopexit:                                        ; preds = %.loopexit.backedge, %.preheader13
  store i32 0, i32* %33, align 16
  store i32 0, i32* %34, align 16
  store i32 -2, i32* %35, align 16
  br i1 %36, label %.thread.loopexit, label %.lr.ph18.preheader

.lr.ph18.preheader:                               ; preds = %.loopexit
  br label %.lr.ph18

.lr.ph18:                                         ; preds = %._crit_edge, %.lr.ph18.preheader
  %indvars.iv62 = phi i64 [ %indvars.iv.next63, %._crit_edge ], [ 1, %.lr.ph18.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.lr.ph18.preheader ]
  %59 = getelementptr inbounds [516 x i32]* %parent, i64 0, i64 %indvars.iv62
  store i32 -1, i32* %59, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %60 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %indvars.iv.next
  %61 = trunc i64 %indvars.iv62 to i32
  store i32 %61, i32* %60, align 4
  %62 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv62
  %63 = load i32* %62, align 4
  %64 = trunc i64 %indvars.iv.next to i32
  %65 = ashr i32 %64, 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %66
  %68 = load i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %69
  %71 = load i32* %70, align 4
  %72 = icmp slt i32 %63, %71
  br i1 %72, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph18
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %73 = phi i32* [ %85, %.lr.ph ], [ %60, %.lr.ph.preheader ]
  %74 = phi i32 [ %79, %.lr.ph ], [ %68, %.lr.ph.preheader ]
  %75 = phi i32 [ %76, %.lr.ph ], [ %65, %.lr.ph.preheader ]
  store i32 %74, i32* %73, align 4
  %76 = ashr i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %77
  %79 = load i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %80
  %82 = load i32* %81, align 4
  %83 = icmp slt i32 %63, %82
  %84 = sext i32 %75 to i64
  %85 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %84
  br i1 %83, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.lcssa117 = phi i32* [ %85, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph18
  %.lcssa = phi i32* [ %60, %.lr.ph18 ], [ %.lcssa117, %._crit_edge.loopexit ]
  store i32 %61, i32* %.lcssa, align 4
  %indvars.iv.next63 = add nuw nsw i64 %indvars.iv62, 1
  %exitcond = icmp eq i32 %64, %alphaSize
  br i1 %exitcond, label %._crit_edge19, label %.lr.ph18

._crit_edge19:                                    ; preds = %._crit_edge
  %86 = icmp slt i32 %alphaSize, 260
  br i1 %86, label %.preheader12, label %87

; <label>:87                                      ; preds = %._crit_edge19
  tail call void @BZ2_bz__AssertH__fail(i32 2001) #2
  br label %.preheader12

.preheader12:                                     ; preds = %87, %._crit_edge19
  %88 = icmp sgt i32 %alphaSize, 1
  br i1 %88, label %.lr.ph41, label %.preheader12.thread

.lr.ph41:                                         ; preds = %.preheader12
  %89 = sext i32 %alphaSize to i64
  br label %90

; <label>:90                                      ; preds = %._crit_edge37, %.lr.ph41
  %indvars.iv67 = phi i64 [ %89, %.lr.ph41 ], [ %indvars.iv.next68, %._crit_edge37 ]
  %indvars.iv65 = phi i64 [ %38, %.lr.ph41 ], [ %indvars.iv.next66, %._crit_edge37 ]
  %91 = load i32* %37, align 4
  %92 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %indvars.iv67
  %93 = load i32* %92, align 4
  store i32 %93, i32* %37, align 4
  %indvars.iv.next68 = add nsw i64 %indvars.iv67, -1
  %94 = trunc i64 %indvars.iv67 to i32
  %95 = icmp slt i32 %94, 3
  br i1 %95, label %._crit_edge24, label %.lr.ph23

.lr.ph23:                                         ; preds = %90
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %96
  %98 = load i32* %97, align 4
  br label %99

; <label>:99                                      ; preds = %126, %.lr.ph23
  %100 = phi i32 [ 2, %.lr.ph23 ], [ %129, %126 ]
  %zz1.021 = phi i32 [ 1, %.lr.ph23 ], [ %yy.0, %126 ]
  %101 = trunc i64 %indvars.iv.next68 to i32
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %103, label %118

; <label>:103                                     ; preds = %99
  %104 = or i32 %100, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %105
  %107 = load i32* %106, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %100 to i64
  %112 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %111
  %113 = load i32* %112, align 8
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %114
  %116 = load i32* %115, align 4
  %117 = icmp slt i32 %110, %116
  %. = select i1 %117, i32 %104, i32 %100
  br label %118

; <label>:118                                     ; preds = %103, %99
  %yy.0 = phi i32 [ %100, %99 ], [ %., %103 ]
  %119 = sext i32 %yy.0 to i64
  %120 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %119
  %121 = load i32* %120, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %122
  %124 = load i32* %123, align 4
  %125 = icmp slt i32 %98, %124
  br i1 %125, label %._crit_edge24.loopexit, label %126

; <label>:126                                     ; preds = %118
  %127 = sext i32 %zz1.021 to i64
  %128 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %127
  store i32 %121, i32* %128, align 4
  %129 = shl i32 %yy.0, 1
  %130 = icmp sgt i32 %129, %101
  br i1 %130, label %._crit_edge24.loopexit, label %99

._crit_edge24.loopexit:                           ; preds = %126, %118
  %zz1.0.lcssa.ph = phi i32 [ %zz1.021, %118 ], [ %yy.0, %126 ]
  br label %._crit_edge24

._crit_edge24:                                    ; preds = %._crit_edge24.loopexit, %90
  %zz1.0.lcssa = phi i32 [ 1, %90 ], [ %zz1.0.lcssa.ph, %._crit_edge24.loopexit ]
  %131 = sext i32 %zz1.0.lcssa to i64
  %132 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %131
  store i32 %93, i32* %132, align 4
  %133 = load i32* %37, align 4
  %134 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %indvars.iv.next68
  %135 = load i32* %134, align 4
  store i32 %135, i32* %37, align 4
  %136 = add nsw i64 %indvars.iv67, 4294967294
  %137 = trunc i64 %136 to i32
  %138 = icmp slt i32 %137, 2
  br i1 %138, label %._crit_edge31, label %.lr.ph30

.lr.ph30:                                         ; preds = %._crit_edge24
  %139 = sext i32 %135 to i64
  %140 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %139
  %141 = load i32* %140, align 4
  br label %142

; <label>:142                                     ; preds = %168, %.lr.ph30
  %143 = phi i32 [ 2, %.lr.ph30 ], [ %171, %168 ]
  %zz3.028 = phi i32 [ 1, %.lr.ph30 ], [ %yy4.0, %168 ]
  %144 = icmp slt i32 %143, %137
  br i1 %144, label %145, label %160

; <label>:145                                     ; preds = %142
  %146 = or i32 %143, 1
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %147
  %149 = load i32* %148, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %150
  %152 = load i32* %151, align 4
  %153 = sext i32 %143 to i64
  %154 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %153
  %155 = load i32* %154, align 8
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %156
  %158 = load i32* %157, align 4
  %159 = icmp slt i32 %152, %158
  %.8 = select i1 %159, i32 %146, i32 %143
  br label %160

; <label>:160                                     ; preds = %145, %142
  %yy4.0 = phi i32 [ %143, %142 ], [ %.8, %145 ]
  %161 = sext i32 %yy4.0 to i64
  %162 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %161
  %163 = load i32* %162, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %164
  %166 = load i32* %165, align 4
  %167 = icmp slt i32 %141, %166
  br i1 %167, label %._crit_edge31.loopexit, label %168

; <label>:168                                     ; preds = %160
  %169 = sext i32 %zz3.028 to i64
  %170 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %169
  store i32 %163, i32* %170, align 4
  %171 = shl i32 %yy4.0, 1
  %172 = icmp sgt i32 %171, %137
  br i1 %172, label %._crit_edge31.loopexit, label %142

._crit_edge31.loopexit:                           ; preds = %168, %160
  %zz3.0.lcssa.ph = phi i32 [ %zz3.028, %160 ], [ %yy4.0, %168 ]
  br label %._crit_edge31

._crit_edge31:                                    ; preds = %._crit_edge31.loopexit, %._crit_edge24
  %zz3.0.lcssa = phi i32 [ 1, %._crit_edge24 ], [ %zz3.0.lcssa.ph, %._crit_edge31.loopexit ]
  %173 = sext i32 %zz3.0.lcssa to i64
  %174 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %173
  store i32 %135, i32* %174, align 4
  %indvars.iv.next66 = add nsw i64 %indvars.iv65, 1
  %175 = sext i32 %133 to i64
  %176 = getelementptr inbounds [516 x i32]* %parent, i64 0, i64 %175
  %177 = trunc i64 %indvars.iv.next66 to i32
  store i32 %177, i32* %176, align 4
  %178 = sext i32 %91 to i64
  %179 = getelementptr inbounds [516 x i32]* %parent, i64 0, i64 %178
  store i32 %177, i32* %179, align 4
  %180 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %178
  %181 = load i32* %180, align 4
  %182 = and i32 %181, -256
  %183 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %175
  %184 = load i32* %183, align 4
  %185 = and i32 %184, -256
  %186 = add i32 %185, %182
  %187 = and i32 %181, 255
  %188 = and i32 %184, 255
  %189 = icmp ugt i32 %187, %188
  %.9 = select i1 %189, i32 %181, i32 %184
  %190 = and i32 %.9, 255
  %191 = add nuw nsw i32 %190, 1
  %192 = or i32 %191, %186
  %193 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv.next66
  store i32 %192, i32* %193, align 4
  %194 = getelementptr inbounds [516 x i32]* %parent, i64 0, i64 %indvars.iv.next66
  store i32 -1, i32* %194, align 4
  store i32 %177, i32* %134, align 4
  %195 = trunc i64 %indvars.iv.next68 to i32
  %196 = ashr i32 %195, 1
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %197
  %199 = load i32* %198, align 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %200
  %202 = load i32* %201, align 4
  %203 = icmp slt i32 %192, %202
  br i1 %203, label %.lr.ph36.preheader, label %._crit_edge37

.lr.ph36.preheader:                               ; preds = %._crit_edge31
  br label %.lr.ph36

.lr.ph36:                                         ; preds = %.lr.ph36, %.lr.ph36.preheader
  %204 = phi i32* [ %216, %.lr.ph36 ], [ %134, %.lr.ph36.preheader ]
  %205 = phi i32 [ %210, %.lr.ph36 ], [ %199, %.lr.ph36.preheader ]
  %206 = phi i32 [ %207, %.lr.ph36 ], [ %196, %.lr.ph36.preheader ]
  store i32 %205, i32* %204, align 4
  %207 = ashr i32 %206, 1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %208
  %210 = load i32* %209, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %211
  %213 = load i32* %212, align 4
  %214 = icmp slt i32 %192, %213
  %215 = sext i32 %206 to i64
  %216 = getelementptr inbounds [260 x i32]* %heap, i64 0, i64 %215
  br i1 %214, label %.lr.ph36, label %._crit_edge37.loopexit

._crit_edge37.loopexit:                           ; preds = %.lr.ph36
  %.lcssa118 = phi i32* [ %216, %.lr.ph36 ]
  br label %._crit_edge37

._crit_edge37:                                    ; preds = %._crit_edge37.loopexit, %._crit_edge31
  %.lcssa14 = phi i32* [ %134, %._crit_edge31 ], [ %.lcssa118, %._crit_edge37.loopexit ]
  store i32 %177, i32* %.lcssa14, align 4
  %217 = icmp sgt i32 %195, 1
  br i1 %217, label %90, label %._crit_edge42

._crit_edge42:                                    ; preds = %._crit_edge37
  %218 = shl i32 %alphaSize, 1
  %219 = add i32 %218, -1
  br label %.preheader12.thread

.preheader12.thread:                              ; preds = %._crit_edge42, %.preheader12
  %nNodes.0.lcssa = phi i32 [ %219, %._crit_edge42 ], [ %alphaSize, %.preheader12 ]
  %220 = icmp slt i32 %nNodes.0.lcssa, 516
  br i1 %220, label %.preheader11, label %221

; <label>:221                                     ; preds = %.preheader12.thread
  tail call void @BZ2_bz__AssertH__fail(i32 2002) #2
  br label %.preheader11

.preheader11:                                     ; preds = %221, %.preheader12.thread
  br i1 %36, label %.thread.loopexit, label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader11
  br label %.preheader

.preheader:                                       ; preds = %229, %.preheader.preheader
  %indvars.iv70 = phi i64 [ %indvars.iv.next71, %229 ], [ 1, %.preheader.preheader ]
  %tooLong.044 = phi i8 [ %.tooLong.0, %229 ], [ 0, %.preheader.preheader ]
  %222 = trunc i64 %indvars.iv70 to i32
  br label %223

; <label>:223                                     ; preds = %223, %.preheader
  %k.0 = phi i32 [ %226, %223 ], [ %222, %.preheader ]
  %j.0 = phi i32 [ %228, %223 ], [ 0, %.preheader ]
  %224 = sext i32 %k.0 to i64
  %225 = getelementptr inbounds [516 x i32]* %parent, i64 0, i64 %224
  %226 = load i32* %225, align 4
  %227 = icmp sgt i32 %226, -1
  %228 = add nsw i32 %j.0, 1
  br i1 %227, label %223, label %229

; <label>:229                                     ; preds = %223
  %j.0.lcssa = phi i32 [ %j.0, %223 ]
  %230 = trunc i32 %j.0.lcssa to i8
  %231 = add nsw i64 %indvars.iv70, -1
  %232 = getelementptr inbounds i8* %len, i64 %231
  store i8 %230, i8* %232, align 1
  %233 = icmp sgt i32 %j.0.lcssa, %maxLen
  %.tooLong.0 = select i1 %233, i8 1, i8 %tooLong.044
  %indvars.iv.next71 = add nuw nsw i64 %indvars.iv70, 1
  %lftr.wideiv72 = trunc i64 %indvars.iv.next71 to i32
  %exitcond73 = icmp eq i32 %lftr.wideiv72, %39
  br i1 %exitcond73, label %234, label %.preheader

; <label>:234                                     ; preds = %229
  %.tooLong.0.lcssa = phi i8 [ %.tooLong.0, %229 ]
  %phitmp53 = icmp eq i8 %.tooLong.0.lcssa, 0
  br i1 %phitmp53, label %.thread.loopexit, label %.preheader10

.preheader10:                                     ; preds = %234
  br i1 %36, label %.thread.critedge, label %overflow.checked101

overflow.checked101:                              ; preds = %.preheader10
  %end.idx96 = add nuw nsw i64 %41, 2
  %n.vec98 = and i64 %42, 8589934588
  %end.idx.rnd.down99114 = or i64 %n.vec98, 1
  %cmp.zero100 = icmp eq i64 %end.idx.rnd.down99114, 1
  br i1 %cmp.zero100, label %middle.block93, label %vector.body92.preheader

vector.body92.preheader:                          ; preds = %overflow.checked101
  %xtraiter = and i64 %49, 1
  %lcmp.mod = icmp ne i64 %xtraiter, 0
  %lcmp.overflow = icmp eq i64 %49, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %vector.body92.unr, label %vector.body92.preheader.split

vector.body92.unr:                                ; preds = %vector.body92.preheader
  %235 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 1
  %236 = bitcast i32* %235 to <4 x i32>*
  %wide.load111.unr = load <4 x i32>* %236, align 4
  %237 = ashr <4 x i32> %wide.load111.unr, <i32 8, i32 8, i32 8, i32 8>
  %238 = sdiv <4 x i32> %237, <i32 2, i32 2, i32 2, i32 2>
  %239 = shl <4 x i32> %238, <i32 8, i32 8, i32 8, i32 8>
  %240 = add <4 x i32> %239, <i32 256, i32 256, i32 256, i32 256>
  %241 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %240, <4 x i32>* %241, align 4
  %index.next107.unr = add i64 1, 4
  %242 = icmp eq i64 %index.next107.unr, %end.idx.rnd.down99114
  br label %vector.body92.preheader.split

vector.body92.preheader.split:                    ; preds = %vector.body92.unr, %vector.body92.preheader
  %index95.unr = phi i64 [ 1, %vector.body92.preheader ], [ %index.next107.unr, %vector.body92.unr ]
  %243 = icmp ult i64 %49, 2
  br i1 %243, label %middle.block93.loopexit, label %vector.body92.preheader.split.split

vector.body92.preheader.split.split:              ; preds = %vector.body92.preheader.split
  br label %vector.body92

vector.body92:                                    ; preds = %vector.body92, %vector.body92.preheader.split.split
  %index95 = phi i64 [ %index95.unr, %vector.body92.preheader.split.split ], [ %index.next107.1, %vector.body92 ]
  %244 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %index95
  %245 = bitcast i32* %244 to <4 x i32>*
  %wide.load111 = load <4 x i32>* %245, align 4
  %246 = ashr <4 x i32> %wide.load111, <i32 8, i32 8, i32 8, i32 8>
  %247 = sdiv <4 x i32> %246, <i32 2, i32 2, i32 2, i32 2>
  %248 = shl <4 x i32> %247, <i32 8, i32 8, i32 8, i32 8>
  %249 = add <4 x i32> %248, <i32 256, i32 256, i32 256, i32 256>
  %250 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %250, align 4
  %index.next107 = add i64 %index95, 4
  %251 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %index.next107
  %252 = bitcast i32* %251 to <4 x i32>*
  %wide.load111.1 = load <4 x i32>* %252, align 4
  %253 = ashr <4 x i32> %wide.load111.1, <i32 8, i32 8, i32 8, i32 8>
  %254 = sdiv <4 x i32> %253, <i32 2, i32 2, i32 2, i32 2>
  %255 = shl <4 x i32> %254, <i32 8, i32 8, i32 8, i32 8>
  %256 = add <4 x i32> %255, <i32 256, i32 256, i32 256, i32 256>
  %257 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %257, align 4
  %index.next107.1 = add i64 %index.next107, 4
  %258 = icmp eq i64 %index.next107.1, %end.idx.rnd.down99114
  br i1 %258, label %middle.block93.loopexit.unr-lcssa, label %vector.body92, !llvm.loop !34

middle.block93.loopexit.unr-lcssa:                ; preds = %vector.body92
  br label %middle.block93.loopexit

middle.block93.loopexit:                          ; preds = %middle.block93.loopexit.unr-lcssa, %vector.body92.preheader.split
  br label %middle.block93

middle.block93:                                   ; preds = %middle.block93.loopexit, %overflow.checked101
  %resume.val102 = phi i64 [ 1, %overflow.checked101 ], [ %end.idx.rnd.down99114, %middle.block93.loopexit ]
  %cmp.n106 = icmp eq i64 %end.idx96, %resume.val102
  br i1 %cmp.n106, label %.loopexit.backedge, label %.lr.ph49.preheader

.loopexit.backedge:                               ; preds = %middle.block93, %.loopexit.loopexit
  br label %.loopexit

.lr.ph49.preheader:                               ; preds = %middle.block93
  %259 = add i64 %resume.val102, 1
  %260 = trunc i64 %259 to i32
  %261 = sub i32 %50, %260
  %xtraiter119 = and i32 %261, 1
  %lcmp.mod120 = icmp ne i32 %xtraiter119, 0
  %lcmp.overflow121 = icmp eq i32 %261, 0
  %lcmp.or122 = or i1 %lcmp.overflow121, %lcmp.mod120
  br i1 %lcmp.or122, label %.lr.ph49.unr, label %.lr.ph49.preheader.split

.lr.ph49.unr:                                     ; preds = %.lr.ph49.preheader
  %262 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %resume.val102
  %263 = load i32* %262, align 4
  %264 = ashr i32 %263, 8
  %265 = sdiv i32 %264, 2
  %266 = shl i32 %265, 8
  %267 = add i32 %266, 256
  store i32 %267, i32* %262, align 4
  %indvars.iv.next75.unr = add nuw nsw i64 %resume.val102, 1
  %lftr.wideiv76.unr = trunc i64 %indvars.iv.next75.unr to i32
  %exitcond77.unr = icmp eq i32 %lftr.wideiv76.unr, %39
  br label %.lr.ph49.preheader.split

.lr.ph49.preheader.split:                         ; preds = %.lr.ph49.unr, %.lr.ph49.preheader
  %indvars.iv74.unr = phi i64 [ %resume.val102, %.lr.ph49.preheader ], [ %indvars.iv.next75.unr, %.lr.ph49.unr ]
  %268 = icmp ult i32 %261, 2
  br i1 %268, label %.loopexit.loopexit, label %.lr.ph49.preheader.split.split

.lr.ph49.preheader.split.split:                   ; preds = %.lr.ph49.preheader.split
  br label %.lr.ph49

.lr.ph49:                                         ; preds = %.lr.ph49, %.lr.ph49.preheader.split.split
  %indvars.iv74 = phi i64 [ %indvars.iv74.unr, %.lr.ph49.preheader.split.split ], [ %indvars.iv.next75.1, %.lr.ph49 ]
  %269 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv74
  %270 = load i32* %269, align 4
  %271 = ashr i32 %270, 8
  %272 = sdiv i32 %271, 2
  %273 = shl i32 %272, 8
  %274 = add i32 %273, 256
  store i32 %274, i32* %269, align 4
  %indvars.iv.next75 = add nuw nsw i64 %indvars.iv74, 1
  %lftr.wideiv76 = trunc i64 %indvars.iv.next75 to i32
  %275 = getelementptr inbounds [516 x i32]* %weight, i64 0, i64 %indvars.iv.next75
  %276 = load i32* %275, align 4
  %277 = ashr i32 %276, 8
  %278 = sdiv i32 %277, 2
  %279 = shl i32 %278, 8
  %280 = add i32 %279, 256
  store i32 %280, i32* %275, align 4
  %indvars.iv.next75.1 = add nuw nsw i64 %indvars.iv.next75, 1
  %lftr.wideiv76.1 = trunc i64 %indvars.iv.next75.1 to i32
  %exitcond77.1 = icmp eq i32 %lftr.wideiv76.1, %39
  br i1 %exitcond77.1, label %.loopexit.loopexit.unr-lcssa, label %.lr.ph49, !llvm.loop !35

.thread.critedge:                                 ; preds = %.preheader10
  store i32 0, i32* %33, align 16
  store i32 0, i32* %34, align 16
  store i32 -2, i32* %35, align 16
  br label %.thread

.thread.loopexit:                                 ; preds = %234, %.preheader11, %.loopexit
  br label %.thread

.thread:                                          ; preds = %.thread.loopexit, %.thread.critedge
  call void @llvm.lifetime.end(i64 2064, i8* %3) #2
  call void @llvm.lifetime.end(i64 2064, i8* %2) #2
  call void @llvm.lifetime.end(i64 1040, i8* %1) #2
  ret void
}

; Function Attrs: nounwind uwtable
define void @BZ2_hbAssignCodes(i32* nocapture %code, i8* nocapture readonly %length, i32 %minLen, i32 %maxLen, i32 %alphaSize) #0 {
  %1 = icmp sgt i32 %minLen, %maxLen
  br i1 %1, label %._crit_edge5, label %.preheader.lr.ph

.preheader.lr.ph:                                 ; preds = %0
  %2 = icmp sgt i32 %alphaSize, 0
  br i1 %2, label %.lr.ph.us.preheader, label %.preheader.preheader

.lr.ph.us.preheader:                              ; preds = %.preheader.lr.ph
  br label %.lr.ph.us

.preheader.preheader:                             ; preds = %.preheader.lr.ph
  %3 = icmp sgt i32 %maxLen, %minLen
  %smax = select i1 %3, i32 %maxLen, i32 %minLen
  %4 = sub i32 %smax, %minLen
  %backedge.overflow = icmp eq i32 %4, -1
  br i1 %backedge.overflow, label %.preheader.preheader10, label %overflow.checked

.preheader.preheader10:                           ; preds = %middle.block, %.preheader.preheader
  %n.03.ph = phi i32 [ %minLen, %.preheader.preheader ], [ %resume.val, %middle.block ]
  %5 = icmp sgt i32 %n.03.ph, %maxLen
  %smax12 = select i1 %5, i32 %n.03.ph, i32 %maxLen
  %6 = add i32 %smax12, 1
  %7 = sub i32 %6, %n.03.ph
  %xtraiter13 = and i32 %7, 7
  %lcmp.mod14 = icmp ne i32 %xtraiter13, 0
  %lcmp.overflow15 = icmp eq i32 %7, 0
  %lcmp.or16 = or i1 %lcmp.overflow15, %lcmp.mod14
  br i1 %lcmp.or16, label %unr.cmp36, label %.preheader.preheader10.split

unr.cmp36:                                        ; preds = %.preheader.preheader10
  %un.tmp37 = icmp eq i32 %xtraiter13, 1
  br i1 %un.tmp37, label %.preheader.unr34, label %unr.cmp32

unr.cmp32:                                        ; preds = %unr.cmp36
  %un.tmp33 = icmp eq i32 %xtraiter13, 2
  br i1 %un.tmp33, label %.preheader.unr30, label %unr.cmp28

unr.cmp28:                                        ; preds = %unr.cmp32
  %un.tmp29 = icmp eq i32 %xtraiter13, 3
  br i1 %un.tmp29, label %.preheader.unr26, label %unr.cmp24

unr.cmp24:                                        ; preds = %unr.cmp28
  %un.tmp25 = icmp eq i32 %xtraiter13, 4
  br i1 %un.tmp25, label %.preheader.unr22, label %unr.cmp20

unr.cmp20:                                        ; preds = %unr.cmp24
  %un.tmp21 = icmp eq i32 %xtraiter13, 5
  br i1 %un.tmp21, label %.preheader.unr18, label %unr.cmp

unr.cmp:                                          ; preds = %unr.cmp20
  %un.tmp = icmp eq i32 %xtraiter13, 6
  br i1 %un.tmp, label %.preheader.unr17, label %.preheader.unr

.preheader.unr:                                   ; preds = %unr.cmp
  %8 = add nsw i32 %n.03.ph, 1
  %9 = icmp slt i32 %n.03.ph, %maxLen
  br label %.preheader.unr17

.preheader.unr17:                                 ; preds = %.preheader.unr, %unr.cmp
  %n.03.unr = phi i32 [ %8, %.preheader.unr ], [ %n.03.ph, %unr.cmp ]
  %10 = add nsw i32 %n.03.unr, 1
  %11 = icmp slt i32 %n.03.unr, %maxLen
  br label %.preheader.unr18

.preheader.unr18:                                 ; preds = %.preheader.unr17, %unr.cmp20
  %n.03.unr19 = phi i32 [ %10, %.preheader.unr17 ], [ %n.03.ph, %unr.cmp20 ]
  %12 = add nsw i32 %n.03.unr19, 1
  %13 = icmp slt i32 %n.03.unr19, %maxLen
  br label %.preheader.unr22

.preheader.unr22:                                 ; preds = %.preheader.unr18, %unr.cmp24
  %n.03.unr23 = phi i32 [ %12, %.preheader.unr18 ], [ %n.03.ph, %unr.cmp24 ]
  %14 = add nsw i32 %n.03.unr23, 1
  %15 = icmp slt i32 %n.03.unr23, %maxLen
  br label %.preheader.unr26

.preheader.unr26:                                 ; preds = %.preheader.unr22, %unr.cmp28
  %n.03.unr27 = phi i32 [ %14, %.preheader.unr22 ], [ %n.03.ph, %unr.cmp28 ]
  %16 = add nsw i32 %n.03.unr27, 1
  %17 = icmp slt i32 %n.03.unr27, %maxLen
  br label %.preheader.unr30

.preheader.unr30:                                 ; preds = %.preheader.unr26, %unr.cmp32
  %n.03.unr31 = phi i32 [ %16, %.preheader.unr26 ], [ %n.03.ph, %unr.cmp32 ]
  %18 = add nsw i32 %n.03.unr31, 1
  %19 = icmp slt i32 %n.03.unr31, %maxLen
  br label %.preheader.unr34

.preheader.unr34:                                 ; preds = %.preheader.unr30, %unr.cmp36
  %n.03.unr35 = phi i32 [ %18, %.preheader.unr30 ], [ %n.03.ph, %unr.cmp36 ]
  %20 = add nsw i32 %n.03.unr35, 1
  %21 = icmp slt i32 %n.03.unr35, %maxLen
  br label %.preheader.preheader10.split

.preheader.preheader10.split:                     ; preds = %.preheader.unr34, %.preheader.preheader10
  %n.03.unr38 = phi i32 [ %n.03.ph, %.preheader.preheader10 ], [ %20, %.preheader.unr34 ]
  %22 = icmp ult i32 %7, 8
  br i1 %22, label %._crit_edge5.loopexit11, label %.preheader.preheader10.split.split

.preheader.preheader10.split.split:               ; preds = %.preheader.preheader10.split
  br label %.preheader

overflow.checked:                                 ; preds = %.preheader.preheader
  %23 = add i32 %smax, 1
  %24 = sub i32 %23, %minLen
  %n.vec = and i32 %24, -8
  %end.idx.rnd.down = add i32 %n.vec, %minLen
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  %25 = icmp sgt i32 %maxLen, %minLen
  %smax39 = select i1 %25, i32 %maxLen, i32 %minLen
  %26 = add i32 %smax39, 1
  %27 = sub i32 %26, %minLen
  %28 = lshr i32 %27, 3
  %29 = mul i32 %28, 8
  %30 = add i32 %29, -8
  %31 = lshr i32 %30, 3
  %32 = add i32 %31, 1
  %xtraiter40 = and i32 %32, 7
  %lcmp.mod41 = icmp ne i32 %xtraiter40, 0
  %lcmp.overflow42 = icmp eq i32 %32, 0
  %lcmp.or43 = or i1 %lcmp.overflow42, %lcmp.mod41
  br i1 %lcmp.or43, label %unr.cmp71, label %vector.body.preheader.split

unr.cmp71:                                        ; preds = %vector.body.preheader
  %un.tmp72 = icmp eq i32 %xtraiter40, 1
  br i1 %un.tmp72, label %vector.body.unr68, label %unr.cmp66

unr.cmp66:                                        ; preds = %unr.cmp71
  %un.tmp67 = icmp eq i32 %xtraiter40, 2
  br i1 %un.tmp67, label %vector.body.unr63, label %unr.cmp61

unr.cmp61:                                        ; preds = %unr.cmp66
  %un.tmp62 = icmp eq i32 %xtraiter40, 3
  br i1 %un.tmp62, label %vector.body.unr58, label %unr.cmp56

unr.cmp56:                                        ; preds = %unr.cmp61
  %un.tmp57 = icmp eq i32 %xtraiter40, 4
  br i1 %un.tmp57, label %vector.body.unr53, label %unr.cmp51

unr.cmp51:                                        ; preds = %unr.cmp56
  %un.tmp52 = icmp eq i32 %xtraiter40, 5
  br i1 %un.tmp52, label %vector.body.unr48, label %unr.cmp46

unr.cmp46:                                        ; preds = %unr.cmp51
  %un.tmp47 = icmp eq i32 %xtraiter40, 6
  br i1 %un.tmp47, label %vector.body.unr44, label %vector.body.unr

vector.body.unr:                                  ; preds = %unr.cmp46
  %index.next.unr = add i32 %minLen, 8
  %33 = icmp eq i32 %index.next.unr, %end.idx.rnd.down
  br label %vector.body.unr44

vector.body.unr44:                                ; preds = %vector.body.unr, %unr.cmp46
  %index.unr = phi i32 [ %index.next.unr, %vector.body.unr ], [ %minLen, %unr.cmp46 ]
  %index.next.unr45 = add i32 %index.unr, 8
  %34 = icmp eq i32 %index.next.unr45, %end.idx.rnd.down
  br label %vector.body.unr48

vector.body.unr48:                                ; preds = %vector.body.unr44, %unr.cmp51
  %index.unr49 = phi i32 [ %index.next.unr45, %vector.body.unr44 ], [ %minLen, %unr.cmp51 ]
  %index.next.unr50 = add i32 %index.unr49, 8
  %35 = icmp eq i32 %index.next.unr50, %end.idx.rnd.down
  br label %vector.body.unr53

vector.body.unr53:                                ; preds = %vector.body.unr48, %unr.cmp56
  %index.unr54 = phi i32 [ %index.next.unr50, %vector.body.unr48 ], [ %minLen, %unr.cmp56 ]
  %index.next.unr55 = add i32 %index.unr54, 8
  %36 = icmp eq i32 %index.next.unr55, %end.idx.rnd.down
  br label %vector.body.unr58

vector.body.unr58:                                ; preds = %vector.body.unr53, %unr.cmp61
  %index.unr59 = phi i32 [ %index.next.unr55, %vector.body.unr53 ], [ %minLen, %unr.cmp61 ]
  %index.next.unr60 = add i32 %index.unr59, 8
  %37 = icmp eq i32 %index.next.unr60, %end.idx.rnd.down
  br label %vector.body.unr63

vector.body.unr63:                                ; preds = %vector.body.unr58, %unr.cmp66
  %index.unr64 = phi i32 [ %index.next.unr60, %vector.body.unr58 ], [ %minLen, %unr.cmp66 ]
  %index.next.unr65 = add i32 %index.unr64, 8
  %38 = icmp eq i32 %index.next.unr65, %end.idx.rnd.down
  br label %vector.body.unr68

vector.body.unr68:                                ; preds = %vector.body.unr63, %unr.cmp71
  %index.unr69 = phi i32 [ %index.next.unr65, %vector.body.unr63 ], [ %minLen, %unr.cmp71 ]
  %index.next.unr70 = add i32 %index.unr69, 8
  %39 = icmp eq i32 %index.next.unr70, %end.idx.rnd.down
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.unr68, %vector.body.preheader
  %index.unr73 = phi i32 [ %minLen, %vector.body.preheader ], [ %index.next.unr70, %vector.body.unr68 ]
  %40 = icmp ult i32 %32, 8
  br i1 %40, label %middle.block.loopexit, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i32 [ %index.unr73, %vector.body.preheader.split.split ], [ %index.next.7, %vector.body ]
  %index.next = add i32 %index, 8
  %index.next.1 = add i32 %index.next, 8
  %index.next.2 = add i32 %index.next.1, 8
  %index.next.3 = add i32 %index.next.2, 8
  %index.next.4 = add i32 %index.next.3, 8
  %index.next.5 = add i32 %index.next.4, 8
  %index.next.6 = add i32 %index.next.5, 8
  %index.next.7 = add i32 %index.next.6, 8
  %41 = icmp eq i32 %index.next.7, %end.idx.rnd.down
  br i1 %41, label %middle.block.loopexit.unr-lcssa, label %vector.body, !llvm.loop !36

middle.block.loopexit.unr-lcssa:                  ; preds = %vector.body
  br label %middle.block.loopexit

middle.block.loopexit:                            ; preds = %middle.block.loopexit.unr-lcssa, %vector.body.preheader.split
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i32 [ %minLen, %overflow.checked ], [ %end.idx.rnd.down, %middle.block.loopexit ]
  %cmp.n = icmp eq i32 %23, %resume.val
  br i1 %cmp.n, label %._crit_edge5, label %.preheader.preheader10

.unr-lcssa:                                       ; preds = %81
  %vec.2.us.lcssa.ph = phi i32 [ %vec.2.us.1, %81 ]
  br label %42

; <label>:42                                      ; preds = %.lr.ph.us.split, %.unr-lcssa
  %vec.2.us.lcssa = phi i32 [ %vec.2.us.lcssa.unr, %.lr.ph.us.split ], [ %vec.2.us.lcssa.ph, %.unr-lcssa ]
  %43 = shl i32 %vec.2.us.lcssa, 1
  %44 = add nsw i32 %n.03.us, 1
  %45 = icmp slt i32 %n.03.us, %maxLen
  br i1 %45, label %.lr.ph.us, label %._crit_edge5.loopexit

; <label>:46                                      ; preds = %81, %.lr.ph.us.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.us.split.split ], [ %indvars.iv.next.1, %81 ]
  %vec.11.us = phi i32 [ %vec.11.us.unr, %.lr.ph.us.split.split ], [ %vec.2.us.1, %81 ]
  %47 = getelementptr inbounds i8* %length, i64 %indvars.iv
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, %n.03.us
  br i1 %50, label %51, label %54

; <label>:51                                      ; preds = %46
  %52 = getelementptr inbounds i32* %code, i64 %indvars.iv
  store i32 %vec.11.us, i32* %52, align 4
  %53 = add nsw i32 %vec.11.us, 1
  br label %54

; <label>:54                                      ; preds = %51, %46
  %vec.2.us = phi i32 [ %53, %51 ], [ %vec.11.us, %46 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %55 = getelementptr inbounds i8* %length, i64 %indvars.iv.next
  %56 = load i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = icmp eq i32 %57, %n.03.us
  br i1 %58, label %78, label %81

.lr.ph.us:                                        ; preds = %42, %.lr.ph.us.preheader
  %vec.04.us = phi i32 [ %43, %42 ], [ 0, %.lr.ph.us.preheader ]
  %n.03.us = phi i32 [ %44, %42 ], [ %minLen, %.lr.ph.us.preheader ]
  %xtraiter = and i32 %alphaSize, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %alphaSize, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %59, label %.lr.ph.us.split

; <label>:59                                      ; preds = %.lr.ph.us
  %60 = getelementptr inbounds i8* %length, i64 0
  %61 = load i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %62, %n.03.us
  br i1 %63, label %64, label %67

; <label>:64                                      ; preds = %59
  %65 = getelementptr inbounds i32* %code, i64 0
  store i32 %vec.04.us, i32* %65, align 4
  %66 = add nsw i32 %vec.04.us, 1
  br label %67

; <label>:67                                      ; preds = %64, %59
  %vec.2.us.unr = phi i32 [ %66, %64 ], [ %vec.04.us, %59 ]
  %indvars.iv.next.unr = add nuw nsw i64 0, 1
  %lftr.wideiv.unr = trunc i64 %indvars.iv.next.unr to i32
  %exitcond.unr = icmp eq i32 %lftr.wideiv.unr, %alphaSize
  br label %.lr.ph.us.split

.lr.ph.us.split:                                  ; preds = %67, %.lr.ph.us
  %vec.2.us.lcssa.unr = phi i32 [ 0, %.lr.ph.us ], [ %vec.2.us.unr, %67 ]
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph.us ], [ %indvars.iv.next.unr, %67 ]
  %vec.11.us.unr = phi i32 [ %vec.04.us, %.lr.ph.us ], [ %vec.2.us.unr, %67 ]
  %68 = icmp ult i32 %alphaSize, 2
  br i1 %68, label %42, label %.lr.ph.us.split.split

.lr.ph.us.split.split:                            ; preds = %.lr.ph.us.split
  br label %46

.preheader:                                       ; preds = %.preheader, %.preheader.preheader10.split.split
  %n.03 = phi i32 [ %n.03.unr38, %.preheader.preheader10.split.split ], [ %76, %.preheader ]
  %69 = add nsw i32 %n.03, 1
  %70 = add nsw i32 %69, 1
  %71 = add nsw i32 %70, 1
  %72 = add nsw i32 %71, 1
  %73 = add nsw i32 %72, 1
  %74 = add nsw i32 %73, 1
  %75 = add nsw i32 %74, 1
  %76 = add nsw i32 %75, 1
  %77 = icmp slt i32 %75, %maxLen
  br i1 %77, label %.preheader, label %._crit_edge5.loopexit11.unr-lcssa, !llvm.loop !37

._crit_edge5.loopexit:                            ; preds = %42
  br label %._crit_edge5

._crit_edge5.loopexit11.unr-lcssa:                ; preds = %.preheader
  br label %._crit_edge5.loopexit11

._crit_edge5.loopexit11:                          ; preds = %._crit_edge5.loopexit11.unr-lcssa, %.preheader.preheader10.split
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge5.loopexit11, %._crit_edge5.loopexit, %middle.block, %0
  ret void

; <label>:78                                      ; preds = %54
  %79 = getelementptr inbounds i32* %code, i64 %indvars.iv.next
  store i32 %vec.2.us, i32* %79, align 4
  %80 = add nsw i32 %vec.2.us, 1
  br label %81

; <label>:81                                      ; preds = %78, %54
  %vec.2.us.1 = phi i32 [ %80, %78 ], [ %vec.2.us, %54 ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %alphaSize
  br i1 %exitcond.1, label %.unr-lcssa, label %46
}

; Function Attrs: nounwind uwtable
define void @BZ2_hbCreateDecodeTables(i32* nocapture %limit, i32* nocapture %base, i32* nocapture %perm, i8* nocapture readonly %length, i32 %minLen, i32 %maxLen, i32 %alphaSize) #0 {
  %limit28 = bitcast i32* %limit to i8*
  %base37 = bitcast i32* %base to i8*
  %1 = icmp sgt i32 %minLen, %maxLen
  br i1 %1, label %.preheader5, label %.preheader6.lr.ph

.preheader6.lr.ph:                                ; preds = %0
  %2 = icmp sgt i32 %alphaSize, 0
  br i1 %2, label %.lr.ph20.us.preheader, label %.preheader6.preheader

.lr.ph20.us.preheader:                            ; preds = %.preheader6.lr.ph
  br label %.lr.ph20.us

.preheader6.preheader:                            ; preds = %.preheader6.lr.ph
  %3 = icmp sgt i32 %maxLen, %minLen
  %smax = select i1 %3, i32 %maxLen, i32 %minLen
  %4 = sub i32 %smax, %minLen
  %backedge.overflow = icmp eq i32 %4, -1
  br i1 %backedge.overflow, label %.preheader6.preheader83, label %overflow.checked

.preheader6.preheader83:                          ; preds = %middle.block, %.preheader6.preheader
  %i.023.ph = phi i32 [ %minLen, %.preheader6.preheader ], [ %resume.val, %middle.block ]
  %5 = icmp sgt i32 %i.023.ph, %maxLen
  %smax99 = select i1 %5, i32 %i.023.ph, i32 %maxLen
  %6 = add i32 %smax99, 1
  %7 = sub i32 %6, %i.023.ph
  %xtraiter100 = and i32 %7, 7
  %lcmp.mod101 = icmp ne i32 %xtraiter100, 0
  %lcmp.overflow102 = icmp eq i32 %7, 0
  %lcmp.or103 = or i1 %lcmp.overflow102, %lcmp.mod101
  br i1 %lcmp.or103, label %unr.cmp123, label %.preheader6.preheader83.split

unr.cmp123:                                       ; preds = %.preheader6.preheader83
  %un.tmp124 = icmp eq i32 %xtraiter100, 1
  br i1 %un.tmp124, label %.preheader6.unr121, label %unr.cmp119

unr.cmp119:                                       ; preds = %unr.cmp123
  %un.tmp120 = icmp eq i32 %xtraiter100, 2
  br i1 %un.tmp120, label %.preheader6.unr117, label %unr.cmp115

unr.cmp115:                                       ; preds = %unr.cmp119
  %un.tmp116 = icmp eq i32 %xtraiter100, 3
  br i1 %un.tmp116, label %.preheader6.unr113, label %unr.cmp111

unr.cmp111:                                       ; preds = %unr.cmp115
  %un.tmp112 = icmp eq i32 %xtraiter100, 4
  br i1 %un.tmp112, label %.preheader6.unr109, label %unr.cmp107

unr.cmp107:                                       ; preds = %unr.cmp111
  %un.tmp108 = icmp eq i32 %xtraiter100, 5
  br i1 %un.tmp108, label %.preheader6.unr105, label %unr.cmp

unr.cmp:                                          ; preds = %unr.cmp107
  %un.tmp = icmp eq i32 %xtraiter100, 6
  br i1 %un.tmp, label %.preheader6.unr104, label %.preheader6.unr

.preheader6.unr:                                  ; preds = %unr.cmp
  %8 = add nsw i32 %i.023.ph, 1
  %9 = icmp slt i32 %i.023.ph, %maxLen
  br label %.preheader6.unr104

.preheader6.unr104:                               ; preds = %.preheader6.unr, %unr.cmp
  %i.023.unr = phi i32 [ %8, %.preheader6.unr ], [ %i.023.ph, %unr.cmp ]
  %10 = add nsw i32 %i.023.unr, 1
  %11 = icmp slt i32 %i.023.unr, %maxLen
  br label %.preheader6.unr105

.preheader6.unr105:                               ; preds = %.preheader6.unr104, %unr.cmp107
  %i.023.unr106 = phi i32 [ %10, %.preheader6.unr104 ], [ %i.023.ph, %unr.cmp107 ]
  %12 = add nsw i32 %i.023.unr106, 1
  %13 = icmp slt i32 %i.023.unr106, %maxLen
  br label %.preheader6.unr109

.preheader6.unr109:                               ; preds = %.preheader6.unr105, %unr.cmp111
  %i.023.unr110 = phi i32 [ %12, %.preheader6.unr105 ], [ %i.023.ph, %unr.cmp111 ]
  %14 = add nsw i32 %i.023.unr110, 1
  %15 = icmp slt i32 %i.023.unr110, %maxLen
  br label %.preheader6.unr113

.preheader6.unr113:                               ; preds = %.preheader6.unr109, %unr.cmp115
  %i.023.unr114 = phi i32 [ %14, %.preheader6.unr109 ], [ %i.023.ph, %unr.cmp115 ]
  %16 = add nsw i32 %i.023.unr114, 1
  %17 = icmp slt i32 %i.023.unr114, %maxLen
  br label %.preheader6.unr117

.preheader6.unr117:                               ; preds = %.preheader6.unr113, %unr.cmp119
  %i.023.unr118 = phi i32 [ %16, %.preheader6.unr113 ], [ %i.023.ph, %unr.cmp119 ]
  %18 = add nsw i32 %i.023.unr118, 1
  %19 = icmp slt i32 %i.023.unr118, %maxLen
  br label %.preheader6.unr121

.preheader6.unr121:                               ; preds = %.preheader6.unr117, %unr.cmp123
  %i.023.unr122 = phi i32 [ %18, %.preheader6.unr117 ], [ %i.023.ph, %unr.cmp123 ]
  %20 = add nsw i32 %i.023.unr122, 1
  %21 = icmp slt i32 %i.023.unr122, %maxLen
  br label %.preheader6.preheader83.split

.preheader6.preheader83.split:                    ; preds = %.preheader6.unr121, %.preheader6.preheader83
  %i.023.unr125 = phi i32 [ %i.023.ph, %.preheader6.preheader83 ], [ %20, %.preheader6.unr121 ]
  %22 = icmp ult i32 %7, 8
  br i1 %22, label %.preheader5.loopexit84, label %.preheader6.preheader83.split.split

.preheader6.preheader83.split.split:              ; preds = %.preheader6.preheader83.split
  br label %.preheader6

overflow.checked:                                 ; preds = %.preheader6.preheader
  %23 = add i32 %smax, 1
  %24 = sub i32 %23, %minLen
  %n.vec = and i32 %24, -8
  %end.idx.rnd.down = add i32 %n.vec, %minLen
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  %25 = icmp sgt i32 %maxLen, %minLen
  %smax126 = select i1 %25, i32 %maxLen, i32 %minLen
  %26 = add i32 %smax126, 1
  %27 = sub i32 %26, %minLen
  %28 = lshr i32 %27, 3
  %29 = mul i32 %28, 8
  %30 = add i32 %29, -8
  %31 = lshr i32 %30, 3
  %32 = add i32 %31, 1
  %xtraiter127 = and i32 %32, 7
  %lcmp.mod128 = icmp ne i32 %xtraiter127, 0
  %lcmp.overflow129 = icmp eq i32 %32, 0
  %lcmp.or130 = or i1 %lcmp.overflow129, %lcmp.mod128
  br i1 %lcmp.or130, label %unr.cmp158, label %vector.body.preheader.split

unr.cmp158:                                       ; preds = %vector.body.preheader
  %un.tmp159 = icmp eq i32 %xtraiter127, 1
  br i1 %un.tmp159, label %vector.body.unr155, label %unr.cmp153

unr.cmp153:                                       ; preds = %unr.cmp158
  %un.tmp154 = icmp eq i32 %xtraiter127, 2
  br i1 %un.tmp154, label %vector.body.unr150, label %unr.cmp148

unr.cmp148:                                       ; preds = %unr.cmp153
  %un.tmp149 = icmp eq i32 %xtraiter127, 3
  br i1 %un.tmp149, label %vector.body.unr145, label %unr.cmp143

unr.cmp143:                                       ; preds = %unr.cmp148
  %un.tmp144 = icmp eq i32 %xtraiter127, 4
  br i1 %un.tmp144, label %vector.body.unr140, label %unr.cmp138

unr.cmp138:                                       ; preds = %unr.cmp143
  %un.tmp139 = icmp eq i32 %xtraiter127, 5
  br i1 %un.tmp139, label %vector.body.unr135, label %unr.cmp133

unr.cmp133:                                       ; preds = %unr.cmp138
  %un.tmp134 = icmp eq i32 %xtraiter127, 6
  br i1 %un.tmp134, label %vector.body.unr131, label %vector.body.unr

vector.body.unr:                                  ; preds = %unr.cmp133
  %index.next.unr = add i32 %minLen, 8
  %33 = icmp eq i32 %index.next.unr, %end.idx.rnd.down
  br label %vector.body.unr131

vector.body.unr131:                               ; preds = %vector.body.unr, %unr.cmp133
  %index.unr = phi i32 [ %index.next.unr, %vector.body.unr ], [ %minLen, %unr.cmp133 ]
  %index.next.unr132 = add i32 %index.unr, 8
  %34 = icmp eq i32 %index.next.unr132, %end.idx.rnd.down
  br label %vector.body.unr135

vector.body.unr135:                               ; preds = %vector.body.unr131, %unr.cmp138
  %index.unr136 = phi i32 [ %index.next.unr132, %vector.body.unr131 ], [ %minLen, %unr.cmp138 ]
  %index.next.unr137 = add i32 %index.unr136, 8
  %35 = icmp eq i32 %index.next.unr137, %end.idx.rnd.down
  br label %vector.body.unr140

vector.body.unr140:                               ; preds = %vector.body.unr135, %unr.cmp143
  %index.unr141 = phi i32 [ %index.next.unr137, %vector.body.unr135 ], [ %minLen, %unr.cmp143 ]
  %index.next.unr142 = add i32 %index.unr141, 8
  %36 = icmp eq i32 %index.next.unr142, %end.idx.rnd.down
  br label %vector.body.unr145

vector.body.unr145:                               ; preds = %vector.body.unr140, %unr.cmp148
  %index.unr146 = phi i32 [ %index.next.unr142, %vector.body.unr140 ], [ %minLen, %unr.cmp148 ]
  %index.next.unr147 = add i32 %index.unr146, 8
  %37 = icmp eq i32 %index.next.unr147, %end.idx.rnd.down
  br label %vector.body.unr150

vector.body.unr150:                               ; preds = %vector.body.unr145, %unr.cmp153
  %index.unr151 = phi i32 [ %index.next.unr147, %vector.body.unr145 ], [ %minLen, %unr.cmp153 ]
  %index.next.unr152 = add i32 %index.unr151, 8
  %38 = icmp eq i32 %index.next.unr152, %end.idx.rnd.down
  br label %vector.body.unr155

vector.body.unr155:                               ; preds = %vector.body.unr150, %unr.cmp158
  %index.unr156 = phi i32 [ %index.next.unr152, %vector.body.unr150 ], [ %minLen, %unr.cmp158 ]
  %index.next.unr157 = add i32 %index.unr156, 8
  %39 = icmp eq i32 %index.next.unr157, %end.idx.rnd.down
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.unr155, %vector.body.preheader
  %index.unr160 = phi i32 [ %minLen, %vector.body.preheader ], [ %index.next.unr157, %vector.body.unr155 ]
  %40 = icmp ult i32 %32, 8
  br i1 %40, label %middle.block.loopexit, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i32 [ %index.unr160, %vector.body.preheader.split.split ], [ %index.next.7, %vector.body ]
  %index.next = add i32 %index, 8
  %index.next.1 = add i32 %index.next, 8
  %index.next.2 = add i32 %index.next.1, 8
  %index.next.3 = add i32 %index.next.2, 8
  %index.next.4 = add i32 %index.next.3, 8
  %index.next.5 = add i32 %index.next.4, 8
  %index.next.6 = add i32 %index.next.5, 8
  %index.next.7 = add i32 %index.next.6, 8
  %41 = icmp eq i32 %index.next.7, %end.idx.rnd.down
  br i1 %41, label %middle.block.loopexit.unr-lcssa, label %vector.body, !llvm.loop !38

middle.block.loopexit.unr-lcssa:                  ; preds = %vector.body
  br label %middle.block.loopexit

middle.block.loopexit:                            ; preds = %middle.block.loopexit.unr-lcssa, %vector.body.preheader.split
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i32 [ %minLen, %overflow.checked ], [ %end.idx.rnd.down, %middle.block.loopexit ]
  %cmp.n = icmp eq i32 %23, %resume.val
  br i1 %cmp.n, label %.preheader5, label %.preheader6.preheader83

.unr-lcssa:                                       ; preds = %218
  %pp.2.us.lcssa.ph = phi i32 [ %pp.2.us.1, %218 ]
  br label %42

; <label>:42                                      ; preds = %.lr.ph20.us.split, %.unr-lcssa
  %pp.2.us.lcssa = phi i32 [ %pp.2.us.lcssa.unr, %.lr.ph20.us.split ], [ %pp.2.us.lcssa.ph, %.unr-lcssa ]
  %43 = add nsw i32 %i.023.us, 1
  %44 = icmp slt i32 %i.023.us, %maxLen
  br i1 %44, label %.lr.ph20.us, label %.preheader5.loopexit

; <label>:45                                      ; preds = %218, %.lr.ph20.us.split.split
  %indvars.iv38 = phi i64 [ %indvars.iv38.unr, %.lr.ph20.us.split.split ], [ %indvars.iv.next39.1, %218 ]
  %pp.118.us = phi i32 [ %pp.118.us.unr, %.lr.ph20.us.split.split ], [ %pp.2.us.1, %218 ]
  %46 = getelementptr inbounds i8* %length, i64 %indvars.iv38
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp eq i32 %48, %i.023.us
  br i1 %49, label %50, label %55

; <label>:50                                      ; preds = %45
  %51 = sext i32 %pp.118.us to i64
  %52 = getelementptr inbounds i32* %perm, i64 %51
  %53 = trunc i64 %indvars.iv38 to i32
  store i32 %53, i32* %52, align 4
  %54 = add nsw i32 %pp.118.us, 1
  br label %55

; <label>:55                                      ; preds = %50, %45
  %pp.2.us = phi i32 [ %54, %50 ], [ %pp.118.us, %45 ]
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %lftr.wideiv40 = trunc i64 %indvars.iv.next39 to i32
  %56 = getelementptr inbounds i8* %length, i64 %indvars.iv.next39
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp eq i32 %58, %i.023.us
  br i1 %59, label %213, label %218

.lr.ph20.us:                                      ; preds = %42, %.lr.ph20.us.preheader
  %i.023.us = phi i32 [ %43, %42 ], [ %minLen, %.lr.ph20.us.preheader ]
  %pp.022.us = phi i32 [ %pp.2.us.lcssa, %42 ], [ 0, %.lr.ph20.us.preheader ]
  %xtraiter95 = and i32 %alphaSize, 1
  %lcmp.mod96 = icmp ne i32 %xtraiter95, 0
  %lcmp.overflow97 = icmp eq i32 %alphaSize, 0
  %lcmp.or98 = or i1 %lcmp.overflow97, %lcmp.mod96
  br i1 %lcmp.or98, label %60, label %.lr.ph20.us.split

; <label>:60                                      ; preds = %.lr.ph20.us
  %61 = getelementptr inbounds i8* %length, i64 0
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = icmp eq i32 %63, %i.023.us
  br i1 %64, label %65, label %70

; <label>:65                                      ; preds = %60
  %66 = sext i32 %pp.022.us to i64
  %67 = getelementptr inbounds i32* %perm, i64 %66
  %68 = trunc i64 0 to i32
  store i32 %68, i32* %67, align 4
  %69 = add nsw i32 %pp.022.us, 1
  br label %70

; <label>:70                                      ; preds = %65, %60
  %pp.2.us.unr = phi i32 [ %69, %65 ], [ %pp.022.us, %60 ]
  %indvars.iv.next39.unr = add nuw nsw i64 0, 1
  %lftr.wideiv40.unr = trunc i64 %indvars.iv.next39.unr to i32
  %exitcond41.unr = icmp eq i32 %lftr.wideiv40.unr, %alphaSize
  br label %.lr.ph20.us.split

.lr.ph20.us.split:                                ; preds = %70, %.lr.ph20.us
  %pp.2.us.lcssa.unr = phi i32 [ 0, %.lr.ph20.us ], [ %pp.2.us.unr, %70 ]
  %indvars.iv38.unr = phi i64 [ 0, %.lr.ph20.us ], [ %indvars.iv.next39.unr, %70 ]
  %pp.118.us.unr = phi i32 [ %pp.022.us, %.lr.ph20.us ], [ %pp.2.us.unr, %70 ]
  %71 = icmp ult i32 %alphaSize, 2
  br i1 %71, label %42, label %.lr.ph20.us.split.split

.lr.ph20.us.split.split:                          ; preds = %.lr.ph20.us.split
  br label %45

.preheader5.loopexit:                             ; preds = %42
  br label %.preheader5

.preheader5.loopexit84.unr-lcssa:                 ; preds = %.preheader6
  br label %.preheader5.loopexit84

.preheader5.loopexit84:                           ; preds = %.preheader5.loopexit84.unr-lcssa, %.preheader6.preheader83.split
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.loopexit84, %.preheader5.loopexit, %middle.block, %0
  call void @llvm.memset.p0i8.i64(i8* %base37, i8 0, i64 92, i32 4, i1 false)
  %72 = icmp sgt i32 %alphaSize, 0
  br i1 %72, label %.lr.ph16.preheader, label %.preheader3.preheader

.lr.ph16.preheader:                               ; preds = %.preheader5
  %xtraiter91 = and i32 %alphaSize, 1
  %lcmp.mod92 = icmp ne i32 %xtraiter91, 0
  %lcmp.overflow93 = icmp eq i32 %alphaSize, 0
  %lcmp.or94 = or i1 %lcmp.overflow93, %lcmp.mod92
  br i1 %lcmp.or94, label %.lr.ph16.unr, label %.lr.ph16.preheader.split

.lr.ph16.unr:                                     ; preds = %.lr.ph16.preheader
  %73 = getelementptr inbounds i8* %length, i64 0
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = add nuw nsw i64 %75, 1
  %77 = getelementptr inbounds i32* %base, i64 %76
  %78 = load i32* %77, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %77, align 4
  %indvars.iv.next32.unr = add nuw nsw i64 0, 1
  %lftr.wideiv.unr = trunc i64 %indvars.iv.next32.unr to i32
  %exitcond33.unr = icmp eq i32 %lftr.wideiv.unr, %alphaSize
  br label %.lr.ph16.preheader.split

.lr.ph16.preheader.split:                         ; preds = %.lr.ph16.unr, %.lr.ph16.preheader
  %indvars.iv31.unr = phi i64 [ 0, %.lr.ph16.preheader ], [ %indvars.iv.next32.unr, %.lr.ph16.unr ]
  %80 = icmp ult i32 %alphaSize, 2
  br i1 %80, label %..preheader3_crit_edge, label %.lr.ph16.preheader.split.split

.lr.ph16.preheader.split.split:                   ; preds = %.lr.ph16.preheader.split
  br label %.lr.ph16

.preheader3.preheader:                            ; preds = %..preheader3_crit_edge, %.preheader5
  %.ph = phi i32 [ %.pre.pre, %..preheader3_crit_edge ], [ 0, %.preheader5 ]
  br label %.preheader3

.preheader6:                                      ; preds = %.preheader6, %.preheader6.preheader83.split.split
  %i.023 = phi i32 [ %i.023.unr125, %.preheader6.preheader83.split.split ], [ %88, %.preheader6 ]
  %81 = add nsw i32 %i.023, 1
  %82 = add nsw i32 %81, 1
  %83 = add nsw i32 %82, 1
  %84 = add nsw i32 %83, 1
  %85 = add nsw i32 %84, 1
  %86 = add nsw i32 %85, 1
  %87 = add nsw i32 %86, 1
  %88 = add nsw i32 %87, 1
  %89 = icmp slt i32 %87, %maxLen
  br i1 %89, label %.preheader6, label %.preheader5.loopexit84.unr-lcssa, !llvm.loop !39

..preheader3_crit_edge.unr-lcssa:                 ; preds = %.lr.ph16
  br label %..preheader3_crit_edge

..preheader3_crit_edge:                           ; preds = %..preheader3_crit_edge.unr-lcssa, %.lr.ph16.preheader.split
  %.pre.pre = load i32* %base, align 4
  br label %.preheader3.preheader

.lr.ph16:                                         ; preds = %.lr.ph16, %.lr.ph16.preheader.split.split
  %indvars.iv31 = phi i64 [ %indvars.iv31.unr, %.lr.ph16.preheader.split.split ], [ %indvars.iv.next32.1, %.lr.ph16 ]
  %90 = getelementptr inbounds i8* %length, i64 %indvars.iv31
  %91 = load i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = add nuw nsw i64 %92, 1
  %94 = getelementptr inbounds i32* %base, i64 %93
  %95 = load i32* %94, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %94, align 4
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next32 to i32
  %97 = getelementptr inbounds i8* %length, i64 %indvars.iv.next32
  %98 = load i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = add nuw nsw i64 %99, 1
  %101 = getelementptr inbounds i32* %base, i64 %100
  %102 = load i32* %101, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %101, align 4
  %indvars.iv.next32.1 = add nuw nsw i64 %indvars.iv.next32, 1
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next32.1 to i32
  %exitcond33.1 = icmp eq i32 %lftr.wideiv.1, %alphaSize
  br i1 %exitcond33.1, label %..preheader3_crit_edge.unr-lcssa, label %.lr.ph16

.preheader2:                                      ; preds = %.preheader3
  call void @llvm.memset.p0i8.i64(i8* %limit28, i8 0, i64 92, i32 4, i1 false)
  br i1 %1, label %.preheader, label %.lr.ph12

.preheader3:                                      ; preds = %.preheader3, %.preheader3.preheader
  %104 = phi i32 [ %.ph, %.preheader3.preheader ], [ %110, %.preheader3 ]
  %indvars.iv29 = phi i64 [ 1, %.preheader3.preheader ], [ %indvars.iv.next30.1, %.preheader3 ]
  %105 = getelementptr inbounds i32* %base, i64 %indvars.iv29
  %106 = load i32* %105, align 4
  %107 = add nsw i32 %106, %104
  store i32 %107, i32* %105, align 4
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %108 = getelementptr inbounds i32* %base, i64 %indvars.iv.next30
  %109 = load i32* %108, align 4
  %110 = add nsw i32 %109, %107
  store i32 %110, i32* %108, align 4
  %indvars.iv.next30.1 = add nuw nsw i64 %indvars.iv.next30, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next30.1, 23
  br i1 %exitcond.1, label %.preheader2, label %.preheader3

.lr.ph12:                                         ; preds = %.preheader2
  %111 = sext i32 %minLen to i64
  %112 = icmp sgt i32 %maxLen, %minLen
  %smax86 = select i1 %112, i32 %maxLen, i32 %minLen
  %113 = add i32 %smax86, 1
  %114 = sub i32 %113, %minLen
  %xtraiter87 = and i32 %114, 1
  %lcmp.mod88 = icmp ne i32 %xtraiter87, 0
  %lcmp.overflow89 = icmp eq i32 %114, 0
  %lcmp.or90 = or i1 %lcmp.overflow89, %lcmp.mod88
  br i1 %lcmp.or90, label %115, label %.lr.ph12.split

; <label>:115                                     ; preds = %.lr.ph12
  %indvars.iv.next25.unr = add nsw i64 %111, 1
  %116 = getelementptr inbounds i32* %base, i64 %indvars.iv.next25.unr
  %117 = load i32* %116, align 4
  %118 = getelementptr inbounds i32* %base, i64 %111
  %119 = load i32* %118, align 4
  %120 = sub nsw i32 %117, %119
  %121 = add nsw i32 %120, 0
  %122 = add nsw i32 %121, -1
  %123 = getelementptr inbounds i32* %limit, i64 %111
  store i32 %122, i32* %123, align 4
  %124 = shl i32 %121, 1
  %125 = trunc i64 %111 to i32
  %126 = icmp slt i32 %125, %maxLen
  br label %.lr.ph12.split

.lr.ph12.split:                                   ; preds = %115, %.lr.ph12
  %indvars.iv24.unr = phi i64 [ %111, %.lr.ph12 ], [ %indvars.iv.next25.unr, %115 ]
  %vec.011.unr = phi i32 [ 0, %.lr.ph12 ], [ %124, %115 ]
  %127 = icmp ult i32 %114, 2
  br i1 %127, label %.preheader.loopexit, label %.lr.ph12.split.split

.lr.ph12.split.split:                             ; preds = %.lr.ph12.split
  br label %174

.preheader.loopexit.unr-lcssa:                    ; preds = %174
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph12.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader2
  %128 = icmp slt i32 %minLen, %maxLen
  br i1 %128, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %129 = sext i32 %minLen to i64
  %130 = add i32 %maxLen, -1
  %131 = sub i32 %130, %minLen
  %132 = zext i32 %131 to i64
  %133 = add nuw nsw i64 %132, 1
  %end.idx54 = add nsw i64 %133, %129
  %n.vec56 = and i64 %133, 9223372036854775800
  %end.idx.rnd.down57 = add i64 %n.vec56, %129
  %cmp.zero58 = icmp eq i64 %n.vec56, 0
  %134 = sext i32 %minLen to i64
  %135 = add i32 %maxLen, -1
  %136 = sub i32 %135, %minLen
  %137 = zext i32 %136 to i64
  %138 = add nsw i64 %134, %137
  br i1 %cmp.zero58, label %middle.block51, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %139 = add nsw i64 %134, 1
  %scevgep = getelementptr i32* %base, i64 %139
  %scevgep65 = getelementptr i32* %limit, i64 %138
  %bound0 = icmp ule i32* %scevgep, %scevgep65
  %scevgep63 = getelementptr i32* %limit, i64 %134
  %140 = add nsw i64 %138, 1
  %scevgep61 = getelementptr i32* %base, i64 %140
  %bound1 = icmp ule i32* %scevgep63, %scevgep61
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %middle.block51, label %vector.body50.preheader

vector.body50.preheader:                          ; preds = %vector.memcheck
  br label %vector.body50

vector.body50:                                    ; preds = %vector.body50, %vector.body50.preheader
  %index53 = phi i64 [ %index.next72, %vector.body50 ], [ %129, %vector.body50.preheader ]
  %141 = getelementptr inbounds i32* %limit, i64 %index53
  %142 = bitcast i32* %141 to <4 x i32>*
  %wide.load = load <4 x i32>* %142, align 4
  %.sum = add i64 %index53, 4
  %143 = getelementptr i32* %limit, i64 %.sum
  %144 = bitcast i32* %143 to <4 x i32>*
  %wide.load77 = load <4 x i32>* %144, align 4
  %145 = shl <4 x i32> %wide.load, <i32 1, i32 1, i32 1, i32 1>
  %146 = shl <4 x i32> %wide.load77, <i32 1, i32 1, i32 1, i32 1>
  %147 = add <4 x i32> %145, <i32 2, i32 2, i32 2, i32 2>
  %148 = add <4 x i32> %146, <i32 2, i32 2, i32 2, i32 2>
  %149 = add i64 %index53, 1
  %150 = getelementptr inbounds i32* %base, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %wide.load78 = load <4 x i32>* %151, align 4
  %.sum82 = add i64 %index53, 5
  %152 = getelementptr i32* %base, i64 %.sum82
  %153 = bitcast i32* %152 to <4 x i32>*
  %wide.load79 = load <4 x i32>* %153, align 4
  %154 = sub <4 x i32> %147, %wide.load78
  %155 = sub <4 x i32> %148, %wide.load79
  %156 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %156, align 4
  %157 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %157, align 4
  %index.next72 = add i64 %index53, 8
  %158 = icmp eq i64 %index.next72, %end.idx.rnd.down57
  br i1 %158, label %middle.block51.loopexit, label %vector.body50, !llvm.loop !40

middle.block51.loopexit:                          ; preds = %vector.body50
  br label %middle.block51

middle.block51:                                   ; preds = %middle.block51.loopexit, %vector.memcheck, %.lr.ph
  %resume.val67 = phi i64 [ %129, %.lr.ph ], [ %129, %vector.memcheck ], [ %end.idx.rnd.down57, %middle.block51.loopexit ]
  %cmp.n71 = icmp eq i64 %end.idx54, %resume.val67
  br i1 %cmp.n71, label %._crit_edge, label %scalar.ph52.preheader

scalar.ph52.preheader:                            ; preds = %middle.block51
  %159 = add i64 %resume.val67, 1
  %160 = trunc i64 %159 to i32
  %161 = icmp sgt i32 %maxLen, %160
  %smax85 = select i1 %161, i32 %maxLen, i32 %160
  %162 = add i32 %smax85, 1
  %163 = sub i32 %162, %160
  %xtraiter = and i32 %163, 1
  %lcmp.mod = icmp ne i32 %xtraiter, 0
  %lcmp.overflow = icmp eq i32 %163, 0
  %lcmp.or = or i1 %lcmp.overflow, %lcmp.mod
  br i1 %lcmp.or, label %scalar.ph52.unr, label %scalar.ph52.preheader.split

scalar.ph52.unr:                                  ; preds = %scalar.ph52.preheader
  %indvars.iv.next.unr = add nsw i64 %resume.val67, 1
  %164 = getelementptr inbounds i32* %limit, i64 %resume.val67
  %165 = load i32* %164, align 4
  %166 = shl i32 %165, 1
  %167 = add i32 %166, 2
  %168 = getelementptr inbounds i32* %base, i64 %indvars.iv.next.unr
  %169 = load i32* %168, align 4
  %170 = sub i32 %167, %169
  store i32 %170, i32* %168, align 4
  %171 = trunc i64 %indvars.iv.next.unr to i32
  %172 = icmp slt i32 %171, %maxLen
  br label %scalar.ph52.preheader.split

scalar.ph52.preheader.split:                      ; preds = %scalar.ph52.unr, %scalar.ph52.preheader
  %indvars.iv.unr = phi i64 [ %resume.val67, %scalar.ph52.preheader ], [ %indvars.iv.next.unr, %scalar.ph52.unr ]
  %173 = icmp ult i32 %163, 2
  br i1 %173, label %._crit_edge.loopexit, label %scalar.ph52.preheader.split.split

scalar.ph52.preheader.split.split:                ; preds = %scalar.ph52.preheader.split
  br label %scalar.ph52

; <label>:174                                     ; preds = %174, %.lr.ph12.split.split
  %indvars.iv24 = phi i64 [ %indvars.iv24.unr, %.lr.ph12.split.split ], [ %indvars.iv.next25.1, %174 ]
  %vec.011 = phi i32 [ %vec.011.unr, %.lr.ph12.split.split ], [ %193, %174 ]
  %indvars.iv.next25 = add nsw i64 %indvars.iv24, 1
  %175 = getelementptr inbounds i32* %base, i64 %indvars.iv.next25
  %176 = load i32* %175, align 4
  %177 = getelementptr inbounds i32* %base, i64 %indvars.iv24
  %178 = load i32* %177, align 4
  %179 = sub nsw i32 %176, %178
  %180 = add nsw i32 %179, %vec.011
  %181 = add nsw i32 %180, -1
  %182 = getelementptr inbounds i32* %limit, i64 %indvars.iv24
  store i32 %181, i32* %182, align 4
  %183 = shl i32 %180, 1
  %184 = trunc i64 %indvars.iv24 to i32
  %indvars.iv.next25.1 = add nsw i64 %indvars.iv.next25, 1
  %185 = getelementptr inbounds i32* %base, i64 %indvars.iv.next25.1
  %186 = load i32* %185, align 4
  %187 = getelementptr inbounds i32* %base, i64 %indvars.iv.next25
  %188 = load i32* %187, align 4
  %189 = sub nsw i32 %186, %188
  %190 = add nsw i32 %189, %183
  %191 = add nsw i32 %190, -1
  %192 = getelementptr inbounds i32* %limit, i64 %indvars.iv.next25
  store i32 %191, i32* %192, align 4
  %193 = shl i32 %190, 1
  %194 = trunc i64 %indvars.iv.next25 to i32
  %195 = icmp slt i32 %194, %maxLen
  br i1 %195, label %174, label %.preheader.loopexit.unr-lcssa

scalar.ph52:                                      ; preds = %scalar.ph52, %scalar.ph52.preheader.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %scalar.ph52.preheader.split.split ], [ %indvars.iv.next.1, %scalar.ph52 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %196 = getelementptr inbounds i32* %limit, i64 %indvars.iv
  %197 = load i32* %196, align 4
  %198 = shl i32 %197, 1
  %199 = add i32 %198, 2
  %200 = getelementptr inbounds i32* %base, i64 %indvars.iv.next
  %201 = load i32* %200, align 4
  %202 = sub i32 %199, %201
  store i32 %202, i32* %200, align 4
  %203 = trunc i64 %indvars.iv.next to i32
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next, 1
  %204 = getelementptr inbounds i32* %limit, i64 %indvars.iv.next
  %205 = load i32* %204, align 4
  %206 = shl i32 %205, 1
  %207 = add i32 %206, 2
  %208 = getelementptr inbounds i32* %base, i64 %indvars.iv.next.1
  %209 = load i32* %208, align 4
  %210 = sub i32 %207, %209
  store i32 %210, i32* %208, align 4
  %211 = trunc i64 %indvars.iv.next.1 to i32
  %212 = icmp slt i32 %211, %maxLen
  br i1 %212, label %scalar.ph52, label %._crit_edge.loopexit.unr-lcssa, !llvm.loop !41

._crit_edge.loopexit.unr-lcssa:                   ; preds = %scalar.ph52
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %scalar.ph52.preheader.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block51, %.preheader
  ret void

; <label>:213                                     ; preds = %55
  %214 = sext i32 %pp.2.us to i64
  %215 = getelementptr inbounds i32* %perm, i64 %214
  %216 = trunc i64 %indvars.iv.next39 to i32
  store i32 %216, i32* %215, align 4
  %217 = add nsw i32 %pp.2.us, 1
  br label %218

; <label>:218                                     ; preds = %213, %55
  %pp.2.us.1 = phi i32 [ %217, %213 ], [ %pp.2.us, %55 ]
  %indvars.iv.next39.1 = add nuw nsw i64 %indvars.iv.next39, 1
  %lftr.wideiv40.1 = trunc i64 %indvars.iv.next39.1 to i32
  %exitcond41.1 = icmp eq i32 %lftr.wideiv40.1, %alphaSize
  br i1 %exitcond41.1, label %.unr-lcssa, label %45
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readnone }
attributes #12 = { cold nounwind }
attributes #13 = { cold }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0}

!0 = metadata !{metadata !"clang version 3.5.0 (tags/RELEASE_350/final)"}
!1 = metadata !{metadata !1, metadata !2, metadata !3}
!2 = metadata !{metadata !"llvm.loop.vectorize.width", i32 1}
!3 = metadata !{metadata !"llvm.loop.interleave.count", i32 1}
!4 = metadata !{metadata !4, metadata !2, metadata !3}
!5 = metadata !{metadata !5, metadata !2, metadata !3}
!6 = metadata !{metadata !6, metadata !2, metadata !3}
!7 = metadata !{metadata !7, metadata !2, metadata !3}
!8 = metadata !{metadata !8, metadata !2, metadata !3}
!9 = metadata !{metadata !9, metadata !2, metadata !3}
!10 = metadata !{metadata !10, metadata !2, metadata !3}
!11 = metadata !{metadata !11, metadata !2, metadata !3}
!12 = metadata !{metadata !12, metadata !2, metadata !3}
!13 = metadata !{metadata !13, metadata !2, metadata !3}
!14 = metadata !{metadata !14, metadata !2, metadata !3}
!15 = metadata !{metadata !15, metadata !2, metadata !3}
!16 = metadata !{metadata !16, metadata !2, metadata !3}
!17 = metadata !{metadata !17, metadata !2, metadata !3}
!18 = metadata !{metadata !18, metadata !2, metadata !3}
!19 = metadata !{metadata !19, metadata !2, metadata !3}
!20 = metadata !{metadata !20, metadata !2, metadata !3}
!21 = metadata !{metadata !21, metadata !2, metadata !3}
!22 = metadata !{metadata !22, metadata !2, metadata !3}
!23 = metadata !{metadata !23, metadata !2, metadata !3}
!24 = metadata !{metadata !24, metadata !2, metadata !3}
!25 = metadata !{metadata !25, metadata !2, metadata !3}
!26 = metadata !{metadata !26, metadata !2, metadata !3}
!27 = metadata !{metadata !27, metadata !2, metadata !3}
!28 = metadata !{metadata !28, metadata !2, metadata !3}
!29 = metadata !{metadata !29, metadata !2, metadata !3}
!30 = metadata !{metadata !30, metadata !2, metadata !3}
!31 = metadata !{metadata !31, metadata !2, metadata !3}
!32 = metadata !{metadata !32, metadata !2, metadata !3}
!33 = metadata !{metadata !33, metadata !2, metadata !3}
!34 = metadata !{metadata !34, metadata !2, metadata !3}
!35 = metadata !{metadata !35, metadata !2, metadata !3}
!36 = metadata !{metadata !36, metadata !2, metadata !3}
!37 = metadata !{metadata !37, metadata !2, metadata !3}
!38 = metadata !{metadata !38, metadata !2, metadata !3}
!39 = metadata !{metadata !39, metadata !2, metadata !3}
!40 = metadata !{metadata !40, metadata !2, metadata !3}
!41 = metadata !{metadata !41, metadata !2, metadata !3}
